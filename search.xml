<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Irrlicht IRC &amp; Twitter</title>
    <url>/2010/07/11/irrlicht_irc_twitter_demo/</url>
    <content><![CDATA[<p><img src="/images/IRC-half2.png" alt="irrlicht irc twitter"><br>Irrlicht, libIRC, tircd, IrrlichtML, irrUString を混ぜてみた<br><a href="http://libirc.sourceforge.net/">http://libirc.sourceforge.net/</a><br><a href="http://code.google.com/p/tircd/">http://code.google.com/p/tircd/</a><br>多謝: IrrlichtML のひと、irrUString のひと</p>
]]></content>
      <tags>
        <tag>irrlicht</tag>
      </tags>
  </entry>
  <entry>
    <title>irrmmd で遊んでみた</title>
    <url>/2010/07/11/irrmmd/</url>
    <content><![CDATA[<p><img src="/images/irrlicht_mio.png" alt="irrlicht irrmmd"><br>やばい　止まれない　止まらない！！<br>WoW のカメラ(W+S で前進&amp;後退、A+D or 右ドラッグで旋回、左ドラッグで視点変更)っぽいAnimator を作ってみた<br>多謝: Irrlicht A Go Go のひと、ARTK_MMD のひと、irrmmd のひと</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>irrlicht</tag>
        <tag>mmd</tag>
      </tags>
  </entry>
  <entry>
    <title>Irrlicht + CTheoraPlayer で動画を再生してみた</title>
    <url>/2010/07/12/irrlicht_ctheoraplayer/</url>
    <content><![CDATA[<p><img src="/images/ctheoraplayer.png" alt="ctheoraplayer irrlicht theora"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">CTheoraPlayer</span>.cpp:(<span class="number">141</span>)        stateflag = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>で</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">CTheoraPlayer</span>.cpp:(<span class="number">141</span>)        // stateflag = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>とごまかすと読み込めた<br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=38121">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=38121</a><br>多謝: CTheoraPlayer のひと</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>IrrWizard で作られたゲームを動かしてみた</title>
    <url>/2010/07/12/irrwizard/</url>
    <content><![CDATA[<p><img src="/images/tombraider_credit.png"><br>IrrWizard(Windows + 古いIrrlicht 用)で作られたゲームをLinux + Irrlicht 1.7.1 で動かしてみた<br>irr::scene::CCameraRPGSceneNode はaddCameraSceneNodeFPS() に置き換えちゃったけどね！！<br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=9254">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=9254</a><br>多謝: クレジット画面に載ってるひとたち</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>キャラ選択画面みたいなのを作ってみた</title>
    <url>/2010/07/12/post/</url>
    <content><![CDATA[<p><img src="/images/char_select.png" alt="irrlicht pmd vmd"><br>どこに向かっているのかわからなくなってきた<br>多謝: ARTK_MMD のひと、irrmmd のひと、IrrlichtML のひと、irrUString のひと</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>環境設定画面みたいなのを作ってみた</title>
    <url>/2010/07/13/post_1/</url>
    <content><![CDATA[<p><img src="/images/preferences.png" alt="preferences irrlicht"><br>ひととおり設定項目を並べてみた</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>潜入してみた</title>
    <url>/2010/07/13/post_2/</url>
    <content><![CDATA[<p><img src="/images/snake.png" alt="irrlicht"><br>小さくなって知らない世界に潜入してみた</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>PV 再生っぽいことをしてみた</title>
    <url>/2010/07/13/pv/</url>
    <content><![CDATA[<p><img src="/images/play_video.png" alt="video irrlicht"><br>ビデオを再生してみた</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>物理演算を試してみる</title>
    <url>/2010/07/18/post_5/</url>
    <content><![CDATA[<p><img src="/images/bullet.png" alt="bullet irrlicht"><br>Bullet のサンプルを実行してみる<br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=39007">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=39007</a></p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Twitter に接続してみた</title>
    <url>/2010/07/13/twitter/</url>
    <content><![CDATA[<p><img src="/images/get_timeline.png" alt="irrlicht twitter"><br>Twitter からタイムラインを拾ってきて表示してみた</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>FLV を再生してみた</title>
    <url>/2010/07/22/flv/</url>
    <content><![CDATA[<p><img src="/images/no_thank_you.png" alt="murmuurvideo irrlicht"><br>Irrlicht 上でFLV 再生ktkr!!<br>音声も再生される!!<br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=34844">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=34844</a><br>多謝: murmuurVIDEO のひと</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>音楽室に入ってみた</title>
    <url>/2010/07/22/post_7/</url>
    <content><![CDATA[<p><img src="/images/musicroom.png" alt="irrlicht"><br>音楽室の素材を見つけたので音楽室に入ってみた<br>多謝: 素材作成者の方</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>サーキットを駆け抜けてみた</title>
    <url>/2010/07/22/post_8/</url>
    <content><![CDATA[<p><img src="/images/racetrack.png" alt="racetrack irrlicht"><br>サーキットの素材を見つけたので仲間４人＋２台（機？）と駆け抜けてみた<br>多謝: 素材作成者の方</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>ディスプレイ上を歩いてみた</title>
    <url>/2010/07/24/post_9/</url>
    <content><![CDATA[<p><img src="/images/artk_test.png" alt="artoolkit irrlicht"><br>Irrlicht + ARToolKit を使ってディスプレイの中から出て歩いてみた<br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=30000">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=30000</a><br>このスレより元スレの方がシンプルな気もするけれど・・・<br>多謝: irrAR のひと、ARToolKit のひと</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Sunflow でレンダリングしてみた</title>
    <url>/2010/08/02/sunflow/</url>
    <content><![CDATA[<p><img src="/images/sunflow_alien.png" alt="sunflow"><br>Software Center にあったSunflow というソフトでサンプルのエイリアンをレンダリングしてみた</p>
]]></content>
      <categories>
        <category>3d</category>
      </categories>
      <tags>
        <tag>sunflow</tag>
      </tags>
  </entry>
  <entry>
    <title>XEffects 使ってみた</title>
    <url>/2010/08/10/xeffects/</url>
    <content><![CDATA[<p><img src="/images/xeffects.png" alt="xeffects irrlicht"><br>XEffects のShader を使ってみた<br>もうちょっとライトを明るくした方がいいのかも<br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=30631">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=30631</a><br>多謝: XEffects のひと<br>2D イメージの描画と相性悪いかも?(PNG垂直反転したり、ARToolKit の描画がうまくいかなかったり)</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Irrlicht 30秒間デモシリーズ</title>
    <url>/2010/08/15/irrlicht_30/</url>
    <content><![CDATA[<p><a href="http://www.nicovideo.jp/mylist/20556972">【ニコニコ動画】</a><br>ニコニコ動画にニコニコ風味なデモ動画を投稿してみた</p>
<ul>
<li><p>参考URL付き!</p>
</li>
<li><p>PC にやさしい15fps 仕様!</p>
</li>
<li><p>少し痛めのBGM!</p>
</li>
<li><p>あえて解説なし!!</p>
</li>
</ul>
<p><a href="http://www.nicovideofire.jp/keyword/?kw=Irrlicht+30%E7%A7%92%E9%96%93%E3%83%87%E3%83%A2">ニコニコ動画非会員向けリンク</a></p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>irrWeatherManager を試してみた</title>
    <url>/2010/08/17/irrweathermanager/</url>
    <content><![CDATA[<p><img src="/images/weather.png" alt="irrweather irrlicht"><br>irrWeatherManager を試してみた<br>雲も発生できるみたい<br>プラネタリウムにもなるとおもしろいかも<br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=39503">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=39503</a><br>多謝: irrWeatherManager のひと<br>早送りすると太陽がぶれる・・・</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>ODE でI can fly!!</title>
    <url>/2010/08/18/ode_i_can_fly/</url>
    <content><![CDATA[<p><img src="/images/flight.png" alt="irrlicht ode"><br>ODE を使ったフライトシミュレータっぽいのを試してみた<br>これはおもしろい!!<br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=26526">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=26526</a><br>コンパイルエラーがでるけどちょこっと修正すればOK!!</p>
<ul>
<li>template を使う時にクラス名とメンバ名を異なるようにする</li>
<li>SMeshBufferLightMap の代わりにCDynamicMeshBuffer を使う</li>
<li>irrlicht.h をインクルードしてあげる<br>ここで使われているステートマシンのコードは次のトピックのvitek のポスト(#3)にあるリンク先のもののようだ<br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=19949#109893">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=19949#109893</a><br>これもコンパイルエラーがでるけど簡単に修正できる</li>
</ul>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>cAudio(OpenAL ラッパ)を試してみた</title>
    <url>/2010/08/22/caudio_openal/</url>
    <content><![CDATA[<p><a href="http://caudio.deathtouchstudios.com/">http://caudio.deathtouchstudios.com/</a><br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=37754">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=37754</a><br>mp3 のプラグインもあって簡単にサウンドを扱える<br>irrKlang の代わりに使えそう</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Shield Effect を試してみた</title>
    <url>/2010/08/23/shield_effect/</url>
    <content><![CDATA[<p><img src="/images/ShieldEffect.png" alt="ShieldEffect irrlicht"><br>球状のシールド（亀A）とメッシュの形状を覆うようなシールド（亀B）のエフェクトを試してみた<br>シールドに直撃した後に周りに伝播するアニメーションがいい感じ<br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=38544">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=38544</a></p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>VideoMaster を試してみた</title>
    <url>/2010/08/25/videomaster/</url>
    <content><![CDATA[<p><img src="/images/VideoPlayer.png" alt="irrlicht theora video master"><br>VideoMaster クラスを使ってTheora(OGV&#x2F;OGG)形式の動画を再生してみた<br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=39693">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=39693</a></p>
<ul>
<li>IImage, ITexture のインタフェースがあるのでIGUIEnvironment, ISceneManager ともに使い易そう</li>
<li>gcc でコンパイルする時はgoto の処理と#include のパスを書き換えた方がよいかも</li>
<li>リンクするライブラリはlibopenal, libtheoraplayer</li>
</ul>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>BuggyRace で遊んでみた</title>
    <url>/2010/08/28/buggyrace/</url>
    <content><![CDATA[<p><img src="/images/BuggyRace.png" alt="BuggyRace irrlicht"><br>IrrCg のひと(黄色のバギーに乗っていると思われる)が作ったカーレースゲームBuggyRace で遊んでみた<br><a href="http://buggy-race.pl/">http://buggy-race.pl/</a><br>マップやオブジェクトはb3d 形式でシェーダはirrCg、サウンドはogg 形式でOpenAL で再生している<br>ほのぼのしてるけど完成度は高いなぁ</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>SPARK を試してみた</title>
    <url>/2010/08/29/spark/</url>
    <content><![CDATA[<p><img src="/images/SPARKFire.png" alt="irrlicht SPARK"><br>SPARK のエフェクトを試してみた<br>綺麗なエフェクトがいろいろあって楽しい!!<br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=35754">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=35754</a><br><a href="http://spark.developpez.com/">http://spark.developpez.com/</a><br><a href="http://www.youtube.com/watch?v=7lJu2rf3Ras">http://www.youtube.com/watch?v=7lJu2rf3Ras</a><br>Linux + Code::Blocks でデモをビルドする手順</p>
<ol>
<li><p>Code::Blocks 用のワークスペース「SPARK.workspace」を開く</p>
</li>
<li><p>「SPARK Engine CORE LIB」プロジェクトを開いてWIN32 のマクロを外して「libSPARK.a」をビルド</p>
</li>
<li><p>「SPARK Engine IRR LIB」プロジェクトを開いてWIN32 のマクロを外して「libSPARK_IRR.a」をビルド</p>
</li>
<li><p>デモのプロジェクトを作成して、ソース内の「\」を「&#x2F;」に置換してビルド(libSPARK.a, libSPARK_IRR.a をリンク)</p>
</li>
</ol>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>モーションキャプチャデータを試してみた</title>
    <url>/2010/08/31/b-momi/</url>
    <content><![CDATA[<p><img src="/images/motion_capture.png" alt="motion capture irrlicht"><br>モーションキャプチャデータBVH をB-MoMi でVMD に変換して動かしてみた<br>さすがに動きが自然でなめらかだ<br><a href="http://atupdate.web.fc2.com/">http://atupdate.web.fc2.com/</a></p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>irrlicht</tag>
        <tag>mmd</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>irrlamb で遊んでみた</title>
    <url>/2010/09/04/irrlamb/</url>
    <content><![CDATA[<p><img src="/images/irrlamb.png" alt="irrlamb irrlicht"><br>irrlamb で遊んでみた<br>面クリアタイプの3D アクションゲームで、ちょっと慣れが必要だけれどおもしろい!!<br>物理エンジンはBullet を使っている<br>画面構成がかっこよくて、リプレイ機能もある<br><a href="http://code.google.com/p/irrlamb/">http://code.google.com/p/irrlamb/</a><br><a href="http://www.youtube.com/profile?user=irrlamb">http://www.youtube.com/profile?user=irrlamb</a><br>ubuntu lucid&#x2F;universe のリポジトリにlibirrlicht1.7,<br>libirrlicht-dev(&#x2F;usr&#x2F;include&#x2F;irrlicht, &#x2F;usr&#x2F;lib&#x2F;libirrlicht.a,<br>&#x2F;usr&#x2F;lib&#x2F;libirrlicht.so とか), libirrlicht1.7-dbg,<br>libirrlicht-doc(リファレンスとexamples)<br>のパッケージ(1.7+dfsg1-1)があることを初めて知った・・・いつできたんだろう<br>ubuntu maverick&#x2F;universe の方は1.7.1+dfsg1-1 になっているっぽい</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>H-Craft Championship で遊んでみた</title>
    <url>/2010/09/07/h-craft_championship/</url>
    <content><![CDATA[<p><img src="/images/hcraft.jpg" alt="hcraft irrlicht"><br>F-Zero&#x2F;wipEout ライクな3D レースゲームでデモ版と商用版がある<br>2006 年リリースだからかなり古いけど画面が綺麗で完成度が高い<br>操作に慣れると気持ちいい<br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=17871">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=17871</a><br><a href="http://www.irrgheist.com/">http://www.irrgheist.com/</a><br>サウンドはwav とogg でOpenAL<br>モデルはX とobj<br>GUI はxml 化、フォントはgun4fc.ttf</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Irrlicht アプリをデスクトップ背景で動かしてみた</title>
    <url>/2010/09/08/irrlicht/</url>
    <content><![CDATA[<p><img src="/images/background.png" alt="xwinwrap irrlicht"><br>xwinwrap を使ってIrrlicht のアプリケーションをデスクトップの背景にしてみた<br>createDeviceEx() でルートウィンドウのWindow ID を設定してあげるとよいみたい<br>ディスプレイドライバとの相性(?)がある<strike>のと、conky が見えなくなってしまう</strike>のが残念</p>
<ol>
<li><p>xwinwrap を拾ってきてインストールする</p>
</li>
<li><p>コマンドパラメタからWindow ID を設定できるようにする</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">SIrrlichtCreationParameters params;</span><br><span class="line">params.DriverType = video::EDT_OPENGL;</span><br><span class="line">params.WindowSize = core::dimension2d&amp;lt;u32&amp;gt;(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">params.Bits = <span class="number">32</span>;</span><br><span class="line">params.Fullscreen = <span class="literal">false</span>;</span><br><span class="line">params.Stencilbuffer = <span class="literal">false</span>;</span><br><span class="line">params.Vsync = <span class="literal">false</span>;</span><br><span class="line">params.AntiAlias = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; argc; i++) &#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-wid&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">		params.WindowId = (<span class="type">void</span>*)<span class="built_in">strtol</span>(argv[i<span class="number">+1</span>], <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-fullscreen&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">		params.Fullscreen = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-width&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">		params.WindowSize.Width = <span class="built_in">strtol</span>(argv[i<span class="number">+1</span>], <span class="literal">NULL</span>, <span class="number">10</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-height&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">		params.WindowSize.Height = <span class="built_in">strtol</span>(argv[i<span class="number">+1</span>], <span class="literal">NULL</span>, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">IrrlichtDevice *device = <span class="built_in">createDeviceEx</span>(params);</span><br></pre></td></tr></table></figure>


</li>
<li><p>実行する</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ xwinwrap -ni -fs -s -st -sp -b -nf -- ./myApp -wid WID -fullscreen -width 1024 -height 768</span><br></pre></td></tr></table></figure></li>
</ol>
<p>同じように動画ファイルをデスクトップで再生できた</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ xwinwrap -ni -fs -s -st -sp -b -nf -- mplayer -wid WID -quiet -loop 0 -fs -shuffle ~/Videos/BGV/*</span><br></pre></td></tr></table></figure>

<p>Web カメラでキャプチャした映像もデスクトップに設定できた</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ xwinwrap -ni -fs -s -st -sp -b -nf -- mplayer  -wid WID tv:// -tv driver=v4l2:width=1024:height=768</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>irrCg を試してみた</title>
    <url>/2010/09/10/irrcg/</url>
    <content><![CDATA[<p><img src="/images/cg.png" alt="irrcg irrlicht"><br>nVidia のCg 言語のシェーダラッパirrCg を試してみた<br>Radeon でも使える<br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=23676">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=23676</a><br><a href="http://code.google.com/p/irrcg/">http://code.google.com/p/irrcg/</a></p>
<ol>
<li><p>Cg のライブラリをダウンロード<br>nVidia(<a href="http://developer.nvidia.com/object/cg_download.html">http://developer.nvidia.com/object/cg_download.html</a>)<br>2-a. irrCg 0.7.1 の場合<br>IrrCgExtensionHandler.h に以下を追加</p>
<p> <code>#include &quot;GL/glx.h&quot;</code></p>
</li>
</ol>
<p>2-b. irrCg 0.8 from SVN の場合<br>IrrCg.h 内の宣言とexample 内のmain.cpp 内で継承した関数の宣言が不一致なのでヘッダを元に修正、Pixel はFragment にする<br>3. ケースセンシティブなところをとりあえず対処<br>.&#x2F;cg&#x2F;NormalMapping.cg をコピーして.&#x2F;cg&#x2F;normalmapping.cg を作る</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>シェーダラッパをちょっと試してみた</title>
    <url>/2010/09/11/shader/</url>
    <content><![CDATA[<p>Irrlicht で使えるシェーダラッパをRadeon でちょっとだけ試してみた</p>
<p>XEffects<br>irrCg</p>
<p>Normal<br>VSM<br>Forward<br>Deferred</p>
<p>Windows<br>DirectX<br>OK<br>OK<br>OK<br>OK</p>
<p>OpenGL<br>OK<br>OK<br>OK<br>OK</p>
<p>Linux<br>OpenGL&#x2F;fglrx<br>OK<br>OK<br>OK<br>?</p>
<h2 id="OpenGL-OSSOK"><a href="#OpenGL-OSSOK" class="headerlink" title="OpenGL&#x2F;OSSOK"></a>OpenGL&#x2F;OSS<br>OK</h2><p>OK<br>?</p>
<p>Linux + Radeon の組み合わせはやっぱりまだ鬼門なのかな…<br>? はうまく描画されない</p>
<ul>
<li>はIrrlicht 内で落ちる<br>OSSは今後の実装&#x2F;改善に期待かな<br><a href="http://www.x.org/wiki/RadeonFeature">http://www.x.org/wiki/RadeonFeature</a></li>
</ul>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>ラジオシティを試してみた</title>
    <url>/2010/09/12/post_10/</url>
    <content><![CDATA[<p><img src="/images/gpurad.png" alt="gpurad irrlicht"><br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=39186">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=39186</a><br>CRadiosityGenerator クラスを使ってみた(とりあえず光反射は3回にしてみた)<br>モデルと光源を工夫するともっといい画像が撮れそう<br>内部でXEffects を使用している<br>shader model 2.0 対応のGPU 限定になるみたい<br>ファイル名”MainBuilding.irrmesh” がmain.cpp 内と異なっているので修正した</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Puzzle Game で遊んでみた</title>
    <url>/2010/09/12/puzzle_game/</url>
    <content><![CDATA[<p><img src="/images/puzzle_game.png"><br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=36539">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=36539</a><br>いわゆる倉庫番の3D 版<br>ほのぼの<br>レベルエディタ機能もついてる！！<br>PuzzleGame.exe -e mylevel.lev<br>.&#x2F;PuzzleGame.linux -e mylevel.ev</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
  </entry>
  <entry>
    <title>Terrain Pager を試してみた</title>
    <url>/2010/09/12/terrain_pager/</url>
    <content><![CDATA[<p><img src="/images/iterrain.png" alt="iterrain irrlicht"><br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=29356">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=29356</a><br>広大なマップを格子状に区切って近隣部分のみ表示することによってメモリの節約と性能の向上を図るもののよう<br>Fog と一緒に使うべきだけどわかりにくいのでFog を外してみた<br>シームレスなマップの切り替えに使えそう</p>
<p>他にも同じような実装を見かけたような気がするけれど失念…</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>MonoDevelop を試してみた</title>
    <url>/2010/09/17/monodevelop/</url>
    <content><![CDATA[<p><img src="/images/monodevelop.png" alt="monodevelop"><br>Unity のv3 からMonoDevelop でのステップ実行&#x2F;変数ウォッチができるようになると聞いてMonoDevelop を試してみた(v2.6 でも単純な連携はできるんだけどね)はやく無償版ユーザにもUnity v3&#x2F;ベータが公開されないかなぁ<br>ちょっと使ってみた感じ</p>
<ul>
<li><p>Linux&#x2F;Windows で使える</p>
</li>
<li><p>MONO だけに.NET アプリが作れるみたい(作らないけどね)</p>
</li>
<li><p>プロジェクトファイルがVC のソリューションファイル(.sln)っぽいのでWindows とLinux 共通なプロジェクトを作成するのに便利かもしれない(Code::Blocks でもできるけどやはりWindows はVC 使うだろうし)</p>
</li>
<li><p>実行ディレクトリの指定をどこでするのかわからなかったけれど、通常実行はロードモジュール格納ディレクトリ、デバッグ実行はホームディレクトリ!?っぽい</p>
</li>
<li><p>言語特有の細かい設定はできない代わりにいろいろな言語がプラグイン的に広くサポートできるようになっている</p>
</li>
<li><p>Subversion のプラグインも付いている</p>
</li>
</ul>
<p>ちなみにWine 環境でのUnity の動作評価はBronze みたい<br><a href="http://appdb.winehq.org/objectManager.php?sClass=application&iId=11075">http://appdb.winehq.org/objectManager.php?sClass=application&amp;iId=11075</a></p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>Caph で遊んでみた</title>
    <url>/2010/09/29/caph/</url>
    <content><![CDATA[<p><img src="/images/caph.png" alt="caph"><br><a href="http://linux.softpedia.com/get/GAMES-ENTERTAINMENT/Puzzle/Caph-53323.shtml">http://linux.softpedia.com/get/GAMES-ENTERTAINMENT/Puzzle/Caph-53323.shtml</a><br>マウスで描いた軌跡で作った物体を使って解くパズルゲーム<br>物理エンジンのリアルな動きがおもしろいー<br>README のとおりにやってうまく動かなかったのでちょっと修正<br>src&#x2F;draw.c(299): png_get_IHDR() のheight が変な値を返すので変数h の値を修正(64bit OS 上でのpng_uint_32 型の処理にバグがあるのかな)</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
  </entry>
  <entry>
    <title>BillardGL で遊んでみた</title>
    <url>/2010/10/16/billardgl/</url>
    <content><![CDATA[<p><img src="/images/biilardgl.png" alt="billardgl"><br><a href="http://www.billardgl.de/">http://www.billardgl.de/</a><br>3D のビリヤードゲーム<br>F1〜F8 キーで画面がかっこよくくるくる回転する<br>Ubuntu のタブレットPC デモ動画に載っていたのでリポジトリにあるのかと思いきや無く、ホームページのdeb パッケージのリンクも切れていて、alien もdeb パッケージを生成できなかったのでソースからビルドしてみた<br>src&#x2F;bmp.cpp の修正</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>リンクするライブラリ<br>Xxf86vm; GL; GLU; glut;<br>リソースファイルのコピー<br>src&#x2F;Texturen → &#x2F;usr&#x2F;share&#x2F;BillardGL&#x2F;Texturen<br>src&#x2F;lang → &#x2F;usr&#x2F;share&#x2F;BillardGL&#x2F;lang<br>追記: Ubuntu でのパッケージ名はbillard-gl だった<br>追記2: openSUSE にあるfoobillard も同様によくできている</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
  </entry>
  <entry>
    <title>Blood &amp; Water を試してみた</title>
    <url>/2010/10/17/blood_water/</url>
    <content><![CDATA[<p><img src="/images/water.png" alt="blood water irrlicht"><br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=39624">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=39624</a><br>Water エフェクトは水面のゆらぎや反射がうまく表現されていて近距離でも遠距離でも見栄えがする<br>Blood エフェクト(KEY1〜KEY5)は使いどころが限られるかも<br>DirectX&#x2F;HLSL 以外にも同じトピック内にOpenGL&#x2F;GLSL にコンバートされたスクリプトも掲載されているけれど少し修正が必要でレンダリングがチープ…<br>改造すればHLSL 版と同様なことが実現できそうなんだけど<br>media&#x2F;shaders&#x2F;blood_ps.glsl<br>uniform float time; → float time;<br>varying vec2 texCoord; → vec2 texCoord;<br>media&#x2F;shaders&#x2F;water_ps.glsl<br>varying vec2 texCoords; → vec2 texCoords;</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>ミクさんのデモを試してみた</title>
    <url>/2010/10/23/post_11/</url>
    <content><![CDATA[<p><img src="/images/miku.png" alt="miku irrlicht"><br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=40262">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=40262</a><br>UK ではミクさんが話題みたいだけど、これを作ったのもUK の人みたい<br>irrCg を使っていてリアルタイムにアニメーションする</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>MeeGo を試してみた</title>
    <url>/2010/11/01/meego/</url>
    <content><![CDATA[<p><img src="/images/ika_meego.png" alt="meego"><br><a href="http://meego.com/">http://meego.com/</a><br><a href="http://distrowatch.com/table.php?distribution=meego">http://distrowatch.com/table.php?distribution=meego</a><br>ネットブック向けのディストリビューションMeeGo v1.1 for Netbooks<br>動作は軽快で見た目もいいんだけど細かいところで少し癖があるかも<br>パッケージ管理はRPM でzypper<br>日本語入力はSCIM＋SKK<br>ATOM 縛りでMoblin がインストールできなかったPC にもインストールできるかも<br>ブートローダの書き込み中にフリーズする場合はフォーマットを変えるといける<br>変更前 &#x2F;boot: ext3, &#x2F;: btrfs<br>変更後 &#x2F;boot: ext3, &#x2F;: ext3<br><a href="http://ktkr3d.site11.com/?page_id=9">MeeGo&#x2F;Smeegol メモ</a></p>
]]></content>
      <categories>
        <category>meego</category>
      </categories>
  </entry>
  <entry>
    <title>Neverball で遊んでみた</title>
    <url>/2010/11/09/neverball/</url>
    <content><![CDATA[<p><img src="/images/neverball.png" alt="neverball"><br><a href="http://neverball.org/">http://neverball.org/</a><br><a href="http://neverball.org/screenshots.php">http://neverball.org/screenshots.php</a><br>ボードを傾けてコインを拾いながらボールをゴールに導く3D ゲーム<br>低スペックなPC でもよく動く<br>先の方のステージがとんでもないことになっている…</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
  </entry>
  <entry>
    <title>BlockOut II で遊んでみた</title>
    <url>/2010/11/17/blockout/</url>
    <content><![CDATA[<p><img src="/images/blockout.png" alt="blockout"><br><a href="http://www.blockout.net/blockout2/">http://www.blockout.net/blockout2/</a><br>レトロな三次元テトリス<br>高速で操作するのがおもしろい<br>高難易度のデモを見ているだけでも楽しい</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
  </entry>
  <entry>
    <title>Anaglyph を試してみた</title>
    <url>/2010/11/25/anaglyph/</url>
    <content><![CDATA[<p><img src="/images/anaglyph.png" alt="anaglyph irrlicht"><br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=33463">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=33463</a><br>立体視(Anaglyph Rendering)を試してみた<br>動きがあると立体感が顕著になっておもしろい<br>右目を青、左目を赤でマスク<br>少し離れてみるのがコツかも</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Kinect を試してみた</title>
    <url>/2010/12/22/kinect/</url>
    <content><![CDATA[<p><img src="/images/kinect_ogre3d.png" alt="kinect ogre3d"><br><a href="https://github.com/OpenNI/SampleAppSinbad">https://github.com/OpenNI/SampleAppSinbad</a><br><a href="http://www.ogre3d.org/forums/viewtopic.php?f=11&t=61571">http://www.ogre3d.org/forums/viewtopic.php?f=11&amp;t=61571</a><br>Kinect が話題になっていたのでOgre3D 版のデモ（ソース付き）を試してみた<br>認識の精度が予想以上に高くて驚いた…</p>
]]></content>
      <categories>
        <category>kinect</category>
      </categories>
  </entry>
  <entry>
    <title>Linux でKinect Sinbad デモを動かしてみた</title>
    <url>/2010/12/23/linux_kinect/</url>
    <content><![CDATA[<p><img src="/images/linux_kinect.png" alt="linux kinect"><br>OpenNI のSinbad デモ(SampleAppSinbad)のLinux 版が見つからなかったのでポーティングしてみた<br><strong>環境</strong><br>OS: Ubuntu 10.10 32bit<br>Ogre3D: Ver. 1.7.2<br>IDE: Code::Blocks 10.05<br>GCC: 4.4.5<br><strong>改造前ソース</strong><br><a href="https://github.com/OpenNI/SampleAppSinbad">https://github.com/OpenNI/SampleAppSinbad</a><br><strong>主な修正点</strong><br>Sinbad:</p>
<ul>
<li>Code::Blocks でOgre3D プロジェクト(コンソールアプリケーション)を作成</li>
<li>FileSystemLayerImpl_WIN32.cpp の代わりにFileSystemLayerImpl_Unix.cpp を使用</li>
<li>FileSystemLayerImpl_Unix.cpp でerrno.h のインクルードを追加</li>
<li>SampleBrowser.cpp でAllocConsole.h のインクルードを削除<br>Sample_Character.so:</li>
<li>Code::Blocks でOgre3D プロジェクト(動的ライブラリ)を作成</li>
<li>WIN32 依存処理(time とか)を修正</li>
<li>XnSkeletonJoint のスコープを省略</li>
<li>Ogre オリジナルヘッダにOgreBites::YesNoSlider が含まれていないので、CharacterSample.h<br>では”SdkSample.h”ではなく”..&#x2F;..&#x2F;Common&#x2F;include&#x2F;SdkSample.h”をインクルードする</li>
<li>openNi.xml のパス指定を修正</li>
<li>OpenNI とXnVNite をリンク<br>ogre.cfg:</li>
<li>レンダラをOpenGL のみにする</li>
<li>「Colour Depth」、「VSync Interval」のエントリを削除<br>plugins.cfg:</li>
<li>Direct3D 系のレンダラのエントリをコメントアウト</li>
</ul>
]]></content>
      <categories>
        <category>kinect</category>
      </categories>
  </entry>
  <entry>
    <title>ついでにOgre3D を試してみた</title>
    <url>/2010/12/23/ogre3d/</url>
    <content><![CDATA[<p><img src="/images/ogre3d_skeltal.png" alt="ogre3d skeltal SampleBrowser"><br>OpenNI のSampleAppSinbad デモがOgre3D で出来ていたので初めてOgre3D を触ってみた<br>Ogre3D 自体はWindows でもLinux でも動くしエフェクトも揃ってそうなのでなかなか良さそう<br>サンプルパッケージ(ogre-samples-bin)の実行は&#x2F;usr&#x2F;bin&#x2F;SampleBrowser<br>OpenNI のSampleAppSinbad デモはOgre3D のSampleBrowser<br>のモジュール(Sample_Character)を改造しているようなので、WIN32<br>依存のコード(SkeletonPoseDetector.h, SinbadCharacterController.h<br>あたり)を修正すればLinux でも動くかもしれない<br>Kinect を使った他のOpenNI のデモ自体はLinux でも動いたし</p>
]]></content>
      <categories>
        <category>3d</category>
      </categories>
      <tags>
        <tag>ogre3d</tag>
      </tags>
  </entry>
  <entry>
    <title>まずはOgre3D でミクさんを表示してみた</title>
    <url>/2010/12/25/ogre3d_1/</url>
    <content><![CDATA[<p><img src="/images/ogre3d_miku.png" alt="ogre3d miku pmd"><br>Kinect でミクさんを動かしてみようと思い、とりあえずOgre3D でミクさんを表示してみた<br>Kinect に接続して動かしてみると、この世のものとは思えない動きをするようになった<br>ボーンの見直しが必要だ…<br><strong>モデルの変換</strong></p>
<ol>
<li>PMDEditor でPMD モデルのサイズ変更(x0.5)、位置変更(Y:-5)</li>
<li>Pmd2OgreMesh (作者さんに感謝!!)で.pmd から.mesh, .mesh.xml, .skeleton, .skeleton.xml, .materialを生成</li>
<li>XML データ修正</li>
</ol>
<ul>
<li>.skeleton.xml にSinbad.skeleton のanimation 13種類をダミーで挿入</li>
<li>.skeleton.xml 内のボーン名(bone000 等10個)をSinbad.skelton のボーン名(Root 等)に置換</li>
</ul>
<ol start="4">
<li>OgreXMLConverter で .skeleton.xml → .skeleton を再生成<br><strong>ソースの修正</strong></li>
<li>剣メッシュ関連の処理(剣の表示や剣を抜く動作等)をコメントアウト</li>
<li>マッピングしなかったボーン名(Stomach, Waist)についてはtransformBone() をコメントアウト</li>
<li>setupbone() で指定する角度を修正</li>
</ol>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>ogre3d</tag>
        <tag>kinect</tag>
      </tags>
  </entry>
  <entry>
    <title>FAAST でWoW を操作してみた</title>
    <url>/2010/12/27/faast_wow/</url>
    <content><![CDATA[<p><img src="/images/FAAST_WoW2.png" alt="FAAST WoW kinect"><br><a href="http://groups.google.com/group/openni-dev/browse_thread/thread/2f4a0d679abf216f">http://groups.google.com/group/openni-dev/browse_thread/thread/2f4a0d679abf216f</a><br>OpenNI のフォーラムにKinect を使ってWorld of Warcraft を操作するFAAST(Flexible Action and Articulated Skeleton Toolkit) のデモがあったので試してみた。<br>デフォルトでは体を傾けると前進&#x2F;後退&#x2F;右旋回&#x2F;左旋回が設定されている。<br>「left_arm_up」アクションを「0」キーにアサインして、Druid クラスのスペル「<a href="http://www.wowwiki.com/Mark_of_the_Wild"><img src="/mt.cgi_files/Spell_nature_regeneration.png">Mark of the Wild</a>」を唱えてみた。<br>FAAST のホームページによるとマウスイベントのエミュレータ追加とLinux 版ポーティングも計画されているらしい。</p>
]]></content>
      <categories>
        <category>kinect</category>
      </categories>
  </entry>
  <entry>
    <title>Kinect でミクさんを動かしてみた</title>
    <url>/2011/01/02/kinect_1/</url>
    <content><![CDATA[<p><img src="/images/miku_kinect.png" alt="miku kinect"><br>ボーンの座標とかを修正してみた。<br>四肢の動きが「遊星からの物体X」から「人型」に進化した。</p>
]]></content>
      <categories>
        <category>kinect</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 11.04 a を試してみた</title>
    <url>/2011/01/13/ubuntu_1104/</url>
    <content><![CDATA[<p>挙動が怪しいところがあるものの一通り動くようになっていた<br><a href="http://cdimage.ubuntu.com/">http://cdimage.ubuntu.com/</a><br><strong>パッケージ</strong></p>
<ul>
<li>kernel 2.6.37</li>
<li>xorg-server 1.9.0</li>
<li>Unity</li>
<li>Firefox 4.0b</li>
</ul>
<ul>
<li>Firefox Sync が標準になってた</li>
<li>Tab Mix Plus の代わりにTab Utilities を利用</li>
<li>yoono が対応するまで代わりにyoono-desktop を利用<br>(<a href="https://addons.mozilla.org/en-US/firefox/addon/yoono-twitter-facebook-linkedi/versions/">https://addons.mozilla.org/en-US/firefox/addon/yoono-twitter-facebook-linkedi/versions/</a>)</li>
<li>Textlink はinstall.rdf を書き換え</li>
<li>Stylish は後で探そう</li>
</ul>
<ul>
<li>Banshee 1.9<br><strong>気づき事項</strong></li>
</ul>
<ul>
<li>起動後とりあえずNautilus を起動すると他のアプリのメニュー表示が安定するみたい</li>
<li>サイドバーランチャーの登録処理が怪しい</li>
<li>音量アプレットがうまく動作しないことがある</li>
<li>シャットダウン・リブートが完了しないことがある</li>
<li>GNOME メニューの表示仕様は今後改善されそう</li>
<li>fglrx はもう少し落ちついてから試そう<br>アップデートが頻繁にあるので、このまま様子見</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Android-x86 を試してみた</title>
    <url>/2011/02/05/android-x86/</url>
    <content><![CDATA[<p><img src="/images/android-x86_hdmi.png" alt="android android-x86"><br><a href="http://www.android-x86.org/">http://www.android-x86.org/</a><br>Android をx86 にポートしたAndroid-x86 のバージョン2.2(Froyo-x86) をネットブック実機と仮想環境の両方で試してみた。<br>バージョン2.3(Gingerbread-x86) のブランチもあったけれど、さすがにAndroid 3.0 版(Honeycomb)はなかった。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -a</span><br><span class="line">Linux localhost 2.6.35.7-android-x86+ <span class="comment">#3 SMP PREEMPT Thu Jan 13 18:03:15 CST 2011 i686 GNU/Linux</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>GRUB からの起動時にSD カードに見せかけるパーティションを追加指定(“SDCARD&#x3D;&#x2F;dev&#x2F;sdb2” 等)</p>
</li>
<li><p>音声、動画、有線LAN、キーボード、マウスは問題なかった</p>
</li>
<li><p>手持ちのネットブックのカメラ、タッチスクリーン、無線LAN はうまく動かなかった</p>
</li>
<li><p>App Store からのインストールはできたけれど、Android Market からのインストールができなかった（これは仕方なしか…）</p>
</li>
</ul>
<p>3.0 版もはやくリリースされないかな。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Android 3.0 を試してみた</title>
    <url>/2011/02/06/android_30/</url>
    <content><![CDATA[<p><img src="/images/android_honeycomb.png"><br><a href="http://developer.android.com/sdk/android-3.0-highlights.html">http://developer.android.com/sdk/android-3.0-highlights.html</a><br>環境構築をしていたらAndroid SDK 3.0 のPreview があったので、エミュレータでAndroid 3.0(Honeycomb)を起動してみた。<br>実機やVM と比べるともっさりした感じ。<br><img src="/images/android_helloworld.png" alt="android 3.0 honeycomb hello world"><br>はろーあんどろいど！</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Android-x86 2.3(Ginger Bread)をビルドしてみた</title>
    <url>/2011/02/11/android-x86_23/</url>
    <content><![CDATA[<p><img src="/images/gingerbread-x86.png" alt="android android-x86 2.3 gingerbread"><br><a href="http://www.android-x86.org/getsourcecode">http://www.android-x86.org/getsourcecode</a><br>android-x86 のサイトでAndroid 2.3(gingerbread)版のリポジトリが公開されているものの、ISO イメージが公開されていないので、自分でビルドしてみた。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -a</span><br><span class="line">Linux localhost 2.6.37-android-x86+ <span class="comment">#1 SMP PREEMPT Fri Feb 11 18:01:30 JST 2011 i686 GNU/Linux</span></span><br></pre></td></tr></table></figure>

<p>カーネルが2.6.37 系になったみたい。<br>2.2版(Froyo-x86)にあったethernet 関連のモジュールが入っていない(?)せいか、そのままでは有線LAN がうまく動かないみたいだ。<br>マウスの挙動も少し変かもしれない。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Gibson Screensaver を試してみた</title>
    <url>/2011/02/13/gibson_screensaver/</url>
    <content><![CDATA[<p><img src="/images/gibson_screensaver2.png" alt="gibson screensaver irrlicht"><br><a href="http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=42787">http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=42787</a><br>Irrlicht で作られた、Tron の雰囲気があるWindows 用のスクリーンセーバーGibson Screensaver を試してみた。<br>スクリーンセーバーだから自動操縦だけど、建物の間を進んだり、上昇して建物を見下ろしたりする。<br>Windows のスクリーンセーバー形式(.scr)なので、Linux 上でもWine で動作する。［F10］キーでスクリーンショットを撮ることができる。ソースも付いてる。</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Fedora 15 alpha を試してみた</title>
    <url>/2011/03/09/fedora-15-alpha-e38292e8a9a6e38197e381a6e381bfe3819f/</url>
    <content><![CDATA[<p><img src="/images/fedra15a.png" alt="fedra"></p>
<p><a href="http://news.softpedia.com/news/Fedora-15-Alpha-Is-Available-for-Download-188519.shtml">http://news.softpedia.com/news/Fedora-15-Alpha-Is-Available-for-Download-188519.shtml</a><br><a href="http://distrowatch.com/table.php?distribution=fedora">http://distrowatch.com/table.php?distribution=fedora</a></p>
<p>Fedora 15 のアルファ版が公開されていたので試してみた。<br>カーネル2.6.38、xorg-server 1.9.99.1、デスクトップ環境がGNOME 3 になっていた。</p>
<p>March 08, 2011 - Alpha release<br>April 14, 2011 - Beta release<br>May 17, 2011 - Final release</p>
<p>openSUSE 11.4 も公開されたので、後で試してみよう。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress を試してみた</title>
    <url>/2011/03/13/worpress-e38292e8a9a6e38197e381a6e381bfe3819f/</url>
    <content><![CDATA[<p>使用中のレンタルサーバのディスク容量が上限に到達しそうになったので、byethost.com に引越してみた。byethost.com 無料版ではPerl が使えないみたいなので、MovableType からWordPress に移行してみた。</p>
<p>引越してみて、</p>
<ul>
<li><p>容量が大きくて安心</p>
</li>
<li><p>商用契約もあるので安定してそう</p>
</li>
<li><p>広告不要なのがうれしい</p>
</li>
<li><p>ZIP をサーバ側で展開できるのは便利</p>
</li>
<li><p>WordPress はプラグインが多くておもしろそう</p>
</li>
</ul>
<p>使い方に慣れたら、MovableType 3 のテーマをWordPress に移植して、IE 対応してみよう。</p>
]]></content>
      <categories>
        <category>cms</category>
      </categories>
  </entry>
  <entry>
    <title>Gnome Shell をカスタマイズ</title>
    <url>/2011/03/17/gnome-shell-e38292e382abe382b9e382bfe3839ee382a4e382ba/</url>
    <content><![CDATA[<p>Gnome Shell の上部パネルには、曜日と時刻が表示されている。<br><img src="/images/gnome_shell_panel_before.png" alt="gnome shell panel date time"><br>日付も表示したいので、設定を探してみたら、<br>&#x2F;usr&#x2F;share&#x2F;gnome-shell&#x2F;js&#x2F;ui&#x2F;dateMenu.js<br>の中で、org.gnome.shell.clock のshow-date の値(論理値)を参照して日付表示の要否を判定しているようだった。<br>とりあえず、true にして動かしてみた。<br><img src="/images/gnome_shell_panel_after.png" alt="gnome shell panel date time"><br>どこか見覚えのある、OS インストール直後にアップデートしていない時のような、残念な雰囲気のある表示になった。よくある書式にしてみた。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">showSeconds = <span class="literal">true</span>;</span><br><span class="line">clockFormat = <span class="title function_">_</span>(<span class="string">&quot;%Y/%m/%d(%a) %H:%M:%S&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><a href="/images/uploads/2011/03/gnome_shell_panel_customized.png"><img src="/images/uploads/2011/03/gnome_shell_panel_customized.png" alt="gnome shell panel date time"></a></p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Fedora 15 alpha で環境設定</title>
    <url>/2011/03/21/fedora-15-e381a7e792b0e5a283e8a8ade5ae9a/</url>
    <content><![CDATA[<p><img src="/images/fedora15a.png"><br><a href="http://alt.fedoraproject.org/pub/alt/nightly-composes/desktop/">http://alt.fedoraproject.org/pub/alt/nightly-composes/desktop/</a><br>Gnome Shell やFirefox 4.0 の日本語環境が思いのほか使い心地がよいので、しばらくFedora 15 を使ってみることにした。ただし、ソフトウェア更新をすると非常に高い確率で不具合が起こるので注意が必要だ。</p>
<p>行き当たりばったりで環境設定をしてみた。</p>
<ul>
<li><p>RPM Fusion (Installing Free and Nonfree Repositories)を入れる</p>
</li>
<li><p>ファイアウォール: system-config-firewall で設定</p>
</li>
<li><p>lsb_release: redhat_lsb パッケージに入っている</p>
</li>
<li><p>eth0: デバイス名はなぜか pci3p1 になった</p>
</li>
<li><p>Gnome Shell は左上隅にカーソルを持って行った時の画面の切り替わりが楽しい!!</p>
</li>
<li><p>個人向け環境設定はgnome-control-center で実行。上部パネルのユーザ名をクリックした時のメニューでも起動可。今のところ外観の設定ツールが充実していない。そのうち、増えると思う。</p>
</li>
<li><p>Firefox 4.0 のFirebug アドオンは開発版1.7X.0b3 をインストール</p>
</li>
<li><p>Firefox 4.0 のChaika アドオンは開発版r316 をインストール</p>
</li>
<li><p>yoono (7.6.2 時点)がバギーかも。Firefox がクラッシュしたらプロファイルの中のyoono ディレクトリを退避して再起動。</p>
</li>
<li><p>ウィンドウの最小化は[Alt]+[F9]</p>
</li>
<li><p>mozc_tool は&#x2F;usr&#x2F;libexec&#x2F;mozc_tool に入った</p>
</li>
<li><p>自動で起動するアプリはgnome-session-properties で設定</p>
</li>
<li><p>compiz が無くてもあまり困らない</p>
</li>
</ul>
<p>でも、まともに動くUbuntu 11.04 のGnome Shell スピンが出たら乗り換えると思う。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>USB 無線LAN 子機を選んでみた</title>
    <url>/2011/03/21/usb-e784a1e7b79alan-e5ad90e6a99fe38292e981b8e38293e381a7e381bfe3828b/</url>
    <content><![CDATA[<p><img src="http://buffalo.jp/export/sites/buffalo.jp/product/wireless-lan/client/wli-uc-gnm/parts/images/lineup/1.jpg" alt="WLI-UC-GNM"></p>
<p><a href="http://buffalo.jp/product/wireless-lan/client/wli-uc-gnm/">http://buffalo.jp/product/wireless-lan/client/wli-uc-gnm/</a></p>
<p>必要に迫られてUSB 接続の無線LAN の子機を選んでみた。小さいことはいいことだけど、アンテナの性能が犠牲になって、受信感度が落ちるみたい。Linux での動作確認の報告あり。1,208円～なり。<br>結果的にはアンテナ折りたたみ式のスティックタイプの方がよかったのかな。</p>
]]></content>
      <categories>
        <category>hardware</category>
      </categories>
  </entry>
  <entry>
    <title>Wine でWindows アプリを使ってみた</title>
    <url>/2011/03/22/wine-e381a7windows-e382a2e38397e383aae38292e4bdbfe381a3e381a6e381bfe3819f/</url>
    <content><![CDATA[<p><a href="http://www.winehq.org/">http://www.winehq.org/</a><br><a href="http://appdb.winehq.org/">http://appdb.winehq.org/</a></p>
<ul>
<li><p>サクラエディタ (<a href="http://sakura-editor.sourceforge.net/">http://sakura-editor.sourceforge.net/</a>)<br>テキストエディタ。マクロや矩形処理とかいろいろと便利。Windows アプリなのにWine 対策用のオプション設定がある。</p>
</li>
<li><p>World of Warcraft  (<a href="http://us.battle.net/wow/en/">http://us.battle.net/wow/en/</a>)<br>世界で人気のMMORPG。Wine 側で対応優先度が非常に高いゲーム。最近はATI のビデオカードでも普通に動くようになった。</p>
</li>
<li><p>lhaz (<a href="http://www.chitora.jp/lhaz.html">http://www.chitora.jp/lhaz.html</a>)<br>日本語リソースを含むアーカイブやLHA 形式の展開に利用。Linux ネイティブのアーカイバの環境を揃えるよりもお手軽。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Inspiron Duo で遊んでみよう</title>
    <url>/2011/03/31/inspiron-duo-e381a7e9818ae38293e381a7e381bfe3819f/</url>
    <content><![CDATA[<p><a href="http://www.dell.com/us/p/inspiron-duo/pd">http://www.dell.com/us/p/inspiron-duo/pd</a></p>
<p>Inspiron Duo でいろんな OS を動かして遊んでみよう。</p>
<ul>
<li>Fedora 15 (DE: GNOME Shell)</li>
<li>Ubuntu 11.04 (DE: Unity)</li>
<li>MeeGo 1.2 Tablet UX Pre-Alpha Release</li>
<li>MeeGo v1.1 for Netbooks</li>
<li>MeeGo v1.1 for In-Vehicle Infotainment</li>
<li>Android-x86 2.2 &#x2F; 2.3</li>
<li>Splashtop OS 1.0</li>
<li>Windows 7</li>
<li>Windows XP</li>
</ul>
<span id="more"></span>

<h3 id="外付け-HDD-のパーティションレイアウト"><a href="#外付け-HDD-のパーティションレイアウト" class="headerlink" title="外付け HDD のパーティションレイアウト"></a>外付け HDD のパーティションレイアウト</h3><table>
<thead>
<tr>
<th align="left">device</th>
<th align="left">size</th>
<th align="left">format</th>
<th align="left">use</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#x2F;dev&#x2F;sdd1</td>
<td align="left">50GB</td>
<td align="left">ntfs</td>
<td align="left">Windows XP, SplashtopOS</td>
</tr>
<tr>
<td align="left">&#x2F;dev&#x2F;sdd2</td>
<td align="left">20GB</td>
<td align="left">fat32</td>
<td align="left">共有データ</td>
</tr>
<tr>
<td align="left">&#x2F;dev&#x2F;sdd3</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">&#x2F;dev&#x2F;sdd5</td>
<td align="left">50GB</td>
<td align="left">ext4</td>
<td align="left">Ubuntu</td>
</tr>
<tr>
<td align="left">&#x2F;dev&#x2F;sdd6</td>
<td align="left">2GB</td>
<td align="left">swap</td>
<td align="left">swap</td>
</tr>
<tr>
<td align="left">&#x2F;dev&#x2F;sdd7</td>
<td align="left">20GB</td>
<td align="left">ext3</td>
<td align="left">Fedora</td>
</tr>
<tr>
<td align="left">&#x2F;dev&#x2F;sdd8</td>
<td align="left">20GB</td>
<td align="left">ext4</td>
<td align="left">MeeGo Netbook</td>
</tr>
<tr>
<td align="left">&#x2F;dev&#x2F;sdd9</td>
<td align="left">20GB</td>
<td align="left">ext4</td>
<td align="left">MeeGo Tablet</td>
</tr>
<tr>
<td align="left">&#x2F;dev&#x2F;sdd10</td>
<td align="left">20GB</td>
<td align="left">ext4</td>
<td align="left">Android-x86</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">50GB</td>
<td align="left">ext4</td>
<td align="left">空き</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>hardware</category>
      </categories>
  </entry>
  <entry>
    <title>Inspiron Duo でLinux</title>
    <url>/2011/04/01/inspiron-duo/</url>
    <content><![CDATA[<h3 id="Ubuntu-11-04b1"><a href="#Ubuntu-11-04b1" class="headerlink" title="Ubuntu 11.04b1"></a>Ubuntu 11.04b1</h3><p>natty-desktop-i386.iso<br>普通に動いた。イヤフォンを繋いでも内臓スピーカーが動作してしまうのは後で調べよう。</p>
<h3 id="Fedora-15a"><a href="#Fedora-15a" class="headerlink" title="Fedora 15a"></a>Fedora 15a</h3><p>Fedora-15-Nightly-20110401.17-i686-Live-desktop.iso<br>普通に動いた。イヤフォンが優先されないのは同様。</p>
<h3 id="MeeGo-Tablet-1-2-のIntel-版"><a href="#MeeGo-Tablet-1-2-のIntel-版" class="headerlink" title="MeeGo Tablet 1.2 のIntel 版"></a>MeeGo Tablet 1.2 のIntel 版</h3><p>meego-tablet-ia32-pinetrail.iso<br>ライブイメージで動作した。タッチパネルは使えたが、タッチスクリーンが使えなかった。イヤフォンが優先されないのは同様。アクセスポイントのリストは公開されているものが表示される。隠しアクセスポイントに接続するインタフェースがない？メニューを戻る操作がよくわからなかった。</p>
<h3 id="MeeGo-Tablet-1-2-の本家版"><a href="#MeeGo-Tablet-1-2-の本家版" class="headerlink" title="MeeGo Tablet 1.2 の本家版"></a>MeeGo Tablet 1.2 の本家版</h3><p>meego-tablet-ia32-pinetrail-1.1.99.0.20110330.3.img<br>縦モードで起動。壁紙がかっこよい。タッチスクリーンが動作せず。残念。</p>
<h3 id="MeeGo-Netbook-1-2-の本家版"><a href="#MeeGo-Netbook-1-2-の本家版" class="headerlink" title="MeeGo Netbook 1.2 の本家版"></a>MeeGo Netbook 1.2 の本家版</h3><p>meego-netbook-ia32-1.1.99.0.20110330.3.img<br>普通に動作。ソフトウェアリポジトリが貧弱なような気がする。標準でNTFS が参照不可。Fedora 版かopenSUSE 版に切り替えた方がよいかも。</p>
<h3 id="Android-x86-2-2"><a href="#Android-x86-2-2" class="headerlink" title="Android-x86 2.2"></a>Android-x86 2.2</h3><p>android-x86-2.2-sparta.iso<br>Inspiron Duo 用のビルドなだけに、よく動く。画面表示もネットワークも日本語表示もOK。イヤフォンが優先されないのは他と同様。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Inspiron duo でALSA</title>
    <url>/2011/04/03/inspiron-duo-e381a7alsa/</url>
    <content><![CDATA[<p><a href="http://ubuntuforums.org/showthread.php?t=1658635">http://ubuntuforums.org/showthread.php?t=1658635</a></p>
<p>Inspiron duo にLinux をインストールしてイヤフォンから音が出ないので調べてみたら、Ubuntu のフォーラムに解決方法が掲載されていた。model をdell とかdell-laptop にしても治らなかったのに、ideapad で解決するとは…</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> gedit /etc/modprobe.d/alsa-base.conf</span><br></pre></td></tr></table></figure>



<blockquote>
<p>options snd-hda-intel model&#x3D;ideapad</p>
</blockquote>
<p>Fedora の場合は、&#x2F;etc&#x2F;modprobe.d&#x2F;dist-alsa.conf を修正。</p>
<p>他にもタッチスクリーンでのマルチタッチの設定とか、画面回転の設定とかがあるので試してみよう!!</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Unity のメニュー表示設定</title>
    <url>/2011/04/03/unity-e381aee383a1e3838be383a5e383bce8a1a8e7a4bae8a8ade5ae9a/</url>
    <content><![CDATA[<p><a href="http://askubuntu.com/questions/14815/unity-menu-desktop-design-how-will-it-act">http://askubuntu.com/questions/14815/unity-menu-desktop-design-how-will-it-act</a></p>
<p>Ubuntu 11.04 で採用されたデスクトップ環境Unity ではアプリケーションメニューが上部のパネルに統合されて表示される。なかなか操作に慣れないので、一旦、元のメニュー表示に戻してみた。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get remove indicator-appmenu</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>MeeGo Tablet を使ってみた</title>
    <url>/2011/04/06/meego-tablet-e38292e4bdbfe381a3e381a6e381bfe3819f/</url>
    <content><![CDATA[<p><img src="/images/all_apps.png" alt="meego tablet inspiron duo"></p>
<p>Inspiron duo に入れたIntel 版のMeeGo Tablet が動くようになった。</p>
<p>隠しアクセスポイントに接続するには、一旦端末で、</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># iwconfig wlan0 essid &lt;ESSID&gt; key &lt;KEY&gt;</span></span><br></pre></td></tr></table></figure>

<p>とするとWi-Fi の設定画面のアクセスポイント一覧に追加される。</p>
<p>画面のキャプチャは</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ xwd -root &gt; ScreenShot.xwd</span><br></pre></td></tr></table></figure>

<p>画面の切り替えは、Windows キー。パネル画面（横）、すべてのアプリケーション画面（縦）、実行中のアプリケーションの選択などができる。</p>
<p><a href="/images/uploads/2011/04/panel1.png"><img src="/images/uploads/2011/04/panel1.png" alt="meego tablet inspiron duo"></a></p>
<p>パネルの配置を変えるには、タブの右上隅をドラッグ。パネルの設定を変えるには、タブをシングルクリック（パネルが回転する）</p>
<p>標準で再生可能な形式はogg&#x2F;ogv 。ffmpeg, ffmpeg2theora で変換すると簡単。<br><a href="/images/uploads/2011/04/panel3.png"><img src="/images/uploads/2011/04/panel3.png" alt="meego tablet inspiron duo"></a></p>
]]></content>
      <categories>
        <category>meego</category>
      </categories>
  </entry>
  <entry>
    <title>MeeGo Tablet で日本語</title>
    <url>/2011/04/07/meego-tablet-e381a7e697a5e69cace8aa9e/</url>
    <content><![CDATA[<p><img src="/images/meego_tablet_jp.png" alt="meego tablet japanese inspiron duo"><br>MeeGo Tablet 1.2 本家版ではアイコン名が日本語で表示されて、「メモ」アイコンが増えた。タッチスクリーンは反応せず。上部パネルのレイアウトは若干変わっている。</p>
]]></content>
      <categories>
        <category>meego</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 11.04 でGNOME Shell</title>
    <url>/2011/04/07/ubuntu-11-04-e381a7gnome-shell/</url>
    <content><![CDATA[<p><img src="/images/ubuntu-natty-gnome-shell.png" alt="ubuntu 11.04 natty gnome shell"></p>
<p><a href="http://www.ubuntuupdates.org/ppa/gnome_3?dist=natty">http://www.ubuntuupdates.org/ppa/gnome_3?dist=natty</a></p>
<p>Ubuntu 11.04 用のGNOME Shell を含むppa を見つけたので、早速インストールしてみた。ちゃんとローカライズもされている。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:gnome3-team/gnome3 </span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install gnome-shell</span><br></pre></td></tr></table></figure>

<p>GDM でログインする際に「Ubuntu GNOME Shell Desktop」を選択する。</p>
<p>上部パネルの日付、時刻の書式はスクリプトをカスタマイズ。シャットダウン系のメニューもスクリプトなので後で改造しよう。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME Shell を拡張してみた</title>
    <url>/2011/04/09/gnome-3-e38292e8aabfe381b9e381a6e381bfe3819f/</url>
    <content><![CDATA[<p><a href="https://wiki.archlinux.org/index.php/GNOME_3">https://wiki.archlinux.org/index.php/GNOME_3</a><br><a href="https://live.gnome.org/GnomeShell/CheatSheet">https://live.gnome.org/GnomeShell/CheatSheet</a><br><a href="http://www.webupd8.org/2011/04/gnome-shell-extensions-additional.html">http://www.webupd8.org/2011/04/gnome-shell-extensions-additional.html</a><br><a href="http://git.gnome.org/browse/gnome-shell-extensions/">http://git.gnome.org/browse/gnome-shell-extensions/</a></p>
<p>GNOME Shell Extensions やGNOME 3 の便利な機能を使ってみよう。</p>
<h3 id="GNOME-Shell-Extensions"><a href="#GNOME-Shell-Extensions" class="headerlink" title="GNOME Shell Extensions"></a>GNOME Shell Extensions</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://git.gnome.org/gnome-shell-extensions</span><br><span class="line">$ <span class="built_in">cd</span> gnome-shell-extensions</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ make</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>



<ul>
<li><p>alternate-tab: Alt+Tab 操作関連</p>
</li>
<li><p>alternative-status-menu: 電源オフメニュー常時表示<br>標準ではステータスメニューを開いて、「Alt」ボタンを押すと「サスペンド」が「電源オフ…」に切り替わる。alternative-status-menu を使うと「サスペンド」と「電源オフ」の両方が常に表示されるようになり、「Alt」ボタンを押すと「サスペンド」が「Hibernate」に切り替わる。必須!!</p>
</li>
<li><p>dock: 右端にドックバーを表示（画面が狭くなった…微妙?）</p>
</li>
<li><p>windowsNavigator: overview 画面上でALT+数字キーによりウィンドウ選択</p>
</li>
</ul>
<h3 id="GNOME-3"><a href="#GNOME-3" class="headerlink" title="GNOME 3"></a>GNOME 3</h3><ul>
<li><p>テーマのカスタマイズ<br>gnome-tweak-tool またはsetting.ini</p>
</li>
<li><p>スクリーンキャストを撮る<br>Ctrl+Alt+Shift+R で開始&amp;終了。WEBM 形式で出力される。</p>
</li>
<li><p>キー操作でoverview へ切り替える<br>システム(Windows)キーまたはAlt+F1</p>
</li>
</ul>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Plasma/Active/Contour を試してみる</title>
    <url>/2011/04/14/plasma-active-contour/</url>
    <content><![CDATA[<p><img src="/images/contour.png" alt="contour kde plasma active tablet opensuse"></p>
<p><a href="http://community.kde.org/Plasma/Active/Installation">http://community.kde.org/Plasma/Active/Installation</a><br><a href="http://community.kde.org/Plasma/Active/Contour/Installation">http://community.kde.org/Plasma/Active/Contour/Installation</a><br>Plasma Active Tablet パッケージのContour がおもしろそうなのでInspiron duo で試してみる。</p>
<ol>
<li><p>openSUSE 11.4 をインストール<br><a href="http://software.opensuse.org/114/ja">http://software.opensuse.org/114/ja</a><br>KDE 版のISO の拡張子を.img にしてsudo image-writer でUSBに入れて、Live USB を作った。</p>
</li>
<li><p>Plasma&#x2F;Active をインストール（不要だったかも）</p>
</li>
</ol>
<p>&#x2F;etc&#x2F;zypp&#x2F;zypp.conf</p>
<blockquote>
<p>solver.allowVendorChange &#x3D; true </p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># zypper ar http://download.opensuse.org/repositories/home:/rwooninck:/UNSTABLE_KDE4/openSUSE_11.4/ kde-unstable</span></span><br><span class="line"><span class="comment"># zypper mr -p 100 kde-unstable</span></span><br><span class="line"><span class="comment"># zypper ar http://download.opensuse.org/repositories/home:/vizzzion/kde-unstable/ plasma-active</span></span><br><span class="line"><span class="comment"># zypper mr -p 101 plasma-active</span></span><br><span class="line"><span class="comment"># zypper refresh -f</span></span><br><span class="line"><span class="comment"># zypper in plasma-active:kdebase4-runtime plasma-tablet-config plasma-declarative-widgets</span></span><br></pre></td></tr></table></figure>



<ol start="3">
<li><p>Contour パッケージのインストール<br><a href="http://software.opensuse.org/">http://software.opensuse.org/</a> でcontour を1-クリック インストール</p>
</li>
<li><p>Contour の自動起動設定<br><a href="http://software.opensuse.org/">http://software.opensuse.org/</a> でplasma-contour-config を1-クリック インストール<br>(plasma-tablet プロセスが残っていたらkquitapp plasma-tablet で消しておく)</p>
</li>
</ol>
<p>おもしろそう！！使い方がよくわかんない！！</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu Tweak 0.6 を試してみた</title>
    <url>/2011/04/16/ubuntu-tweak-0-6e38080e38292e8a9a6e38197e381a6e381bfe3819f/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_tweak_06_overview.png" alt="ubuntu tweak 0.6 overview gnome shell adwaita"><br><img src="/images/ubuntu_tweak06.png" alt="ubuntu tweak 0.6 gnome shell adwaita"></p>
<p><a href="http://blog.ubuntu-tweak.com/2011/04/01/first-look-at-the-next-generation-of-ubuntu-tweak.html">http://blog.ubuntu-tweak.com/2011/04/01/first-look-at-the-next-generation-of-ubuntu-tweak.html</a><br><a href="https://launchpad.net/~tualatrix/+archive/next/+packages">https://launchpad.net/~tualatrix/+archive/next/+packages</a></p>
<p>Ubuntu Tweak のGUI がバージョン0.6 で大きく変わるらしいので、Ubuntu 11.04 + GNOME3(GNOME Shell - Adwaita テーマ) の環境でUbuntu Tweak 0.6 開発版を試してみた。開発版なので動かない機能や不具合はあるみたい。</p>
<p>「GNOMEの設定」にgnome-tweak-tool の設定項目も反映されるといいな。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>MeeGo Tablet 1.2 のマウスポインタ</title>
    <url>/2011/04/27/meego-tablet-e381aee3839ee382a6e382b9e3839de382a4e383b3e382bf/</url>
    <content><![CDATA[<p>meego.com 版のMeeGo Tablet 1.2 でマウスポインタが表示されなかったので、表示するように設定を変えてみた。</p>
<p>&#x2F;etc&#x2F;sysconfig&#x2F;uxlaunch</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">session=/usr/bin/mutter --sm-disable</span><br><span class="line">user=meego</span><br><span class="line">session=/usr/bin/mcompositor</span><br><span class="line">#xopts=-nocursor</span><br></pre></td></tr></table></figure>

<p>-nocursor を無効にする。</p>
<p><img src="/images/meego.png" alt="meego tablet 1.2 lock"></p>
<p>マウスポインタはキャプチャされないみたい。ロック画面のデザインが少し変わったみたい。時刻がうまく調整できない？</p>
]]></content>
      <categories>
        <category>meego</category>
      </categories>
  </entry>
  <entry>
    <title>BURG を試してみた</title>
    <url>/2011/05/06/burg-e38292e8a9a6e38197e381a6e381bfe3819f/</url>
    <content><![CDATA[<p><img src="/images/burg.png" alt="burg boot loader"></p>
<p><a href="http://code.google.com/p/burg/">http://code.google.com/p/burg/</a><br><a href="http://www.omgubuntu.co.uk/2011/05/beautiful-burg-boot-loader-gets-ubuntu-11-04-ppa/">http://www.omgubuntu.co.uk/2011/05/beautiful-burg-boot-loader-gets-ubuntu-11-04-ppa/</a></p>
<p>ブートローダをBURG(Brand-new Universal loadeR from GRUB)にしてみた。<br>カラフルでいろんなテーマがあっておもしろいし、いちいちOS をリブートしなくても設定を試せるのでお手軽！</p>
<p>Android-x86 とMeeGo のアイコンがなかったので、適当に追加してみた。<br>*<strong>edit: gnome-look.org にあった!!</strong><br><a href="http://gnome-look.org/content/show.php/Faenza-style+Linux+OS+icons+for+%22Burg%22?content=138684">http://gnome-look.org/content/show.php/Faenza-style+Linux+OS+icons+for+%22Burg%22?content=138684</a></p>
<ol>
<li><p>burg をインストール</p>
</li>
<li><p>&#x2F;etc&#x2F;default&#x2F;burg でテーマを設定</p>
</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GRUB_GFXMODE=1366x768</span><br><span class="line">GRUB_THEME=fortune</span><br></pre></td></tr></table></figure>


<ol start="3">
<li><p>追加するOS のアイコンファイルを作成<br>カラーとグレイスケールのPNG ファイル（128x128, RGB モード）を用意して、テーマディレクトリ内のicons ディレクトリに格納</p>
</li>
<li><p>追加するOS に対応する定義をhover ファイルに追加</p>
</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">  -slackware &#123; image = &quot;$$/grey_slackware.png:$$/large_slackware.png&quot; &#125;</span><br><span class="line">  -android &#123; image = &quot;$$/grey_android.png:$$/large_android.png&quot; &#125;</span><br><span class="line">  -meego &#123; image = &quot;$$/grey_meego.png:$$/large_meego.png&quot; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ol start="5">
<li>&#x2F;boot&#x2F;burg&#x2F;burg.cfg 内のmenuentry でクラスを指定</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">menuentry &quot;MeeGo Tablet 1.2 (on /dev/sda9)&quot; --class meego --class os --group group_/dev/sda9 &#123;</span><br><span class="line">	insmod ext2</span><br><span class="line">	set root=&#x27;(hd0,9)&#x27;</span><br><span class="line">	search --no-floppy --fs-uuid --set d6dc4505-c05f-434a-af52-8cd3d543b03f</span><br><span class="line">	linux /boot/vmlinuz-2.6.38.2-8.1-adaptation-pinetrail root=/dev/sda9</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ol start="6">
<li>試してみる！</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> burg-emu -D</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Hex-a-Hop で遊んでみた</title>
    <url>/2011/05/08/hex-a-hop-e381a7e9818ae38293e381a7e381bfe3819f/</url>
    <content><![CDATA[<p><img src="/images/Hex-a-hop_bokensha.png" alt="Hex-a-Hop"><br><img src="/images/Hex-a-hop.png" alt="Hex-a-Hop"><br><a href="http://hexahop.sourceforge.net/">http://hexahop.sourceforge.net/</a><br><a href="http://www.omgubuntu.co.uk/2011/05/download-of-the-week/">http://www.omgubuntu.co.uk/2011/05/download-of-the-week/</a></p>
<p>パズルゲームHex-a-Hop で遊んでみた。マウスかQWEASD キーで移動。U キーでアンドゥ。ヘルプ画面は上下矢印キーでページ移動。紫色のタイルはトランポリン。レベルをクリアすると、マップ画面で次のレベルを選べるようになる。</p>
<p>Ubuntu でのインストールは、</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install hex-a-hop</span><br></pre></td></tr></table></figure>

<p>実行するには、</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ /usr/games/hex-a-hop</span><br></pre></td></tr></table></figure>

<p>&#x2F;usr&#x2F;games&#x2F; にインストールされるので&#x2F;usr&#x2F;games&#x2F; にパスを通しておくか、&#x2F;usr&#x2F;share&#x2F;applications&#x2F;hex-a-hop.desktop のEXEC&#x3D; 行を絶対パス指定にするといいかも。</p>
<span id="more"></span>
<p>ネタバレ</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME Shell を拡張してみた2</title>
    <url>/2011/05/09/gnome-shell-e38292e68ba1e5bcb5e38197e381a6e381bfe3819f2/</url>
    <content><![CDATA[<p><img src="/images/gnome-shell-extensions2.png" alt="gnome shell extensions"></p>
<p><a href="http://intgat.tigress.co.uk/rmy/extensions/index.html">http://intgat.tigress.co.uk/rmy/extensions/index.html</a></p>
<p>GNOME Shell をさらに拡張してみた。</p>
<ul>
<li><p>Move the clock<br>時計の位置を変更</p>
</li>
<li><p>Favourites in panel<br>お気に入りをパネルに表示</p>
</li>
<li><p>Applications menu in panel<br>アプリケーションメニューをパネルに表示</p>
</li>
<li><p>Disable dynamic workspaces<br>ダイナミックワークスペースを無効に</p>
</li>
</ul>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME Shell を拡張してみた3</title>
    <url>/2011/05/10/gnome-shell-e38292e68ba1e5bcb5e38197e381a6e381bfe3819f3/</url>
    <content><![CDATA[<p><img src="/images/places-menu_drive-menu.png" alt="gnome shell extensions places menu drive menu"></p>
<p><a href="http://git.gnome.org/browse/gnome-shell-extensions/">http://git.gnome.org/browse/gnome-shell-extensions/</a></p>
<p>GNOME Shell をさらに拡張してみた。</p>
<ul>
<li><p>Places menu (フォルダの形のアイコン)<br>主なディレクトリ、お気に入りディレクトリの表示</p>
</li>
<li><p>Drive menu (丸い形のアイコン)<br>リムーバブルドライブの表示</p>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>PC-BSD を試してみた</title>
    <url>/2011/05/12/pc-bsd-e38292e8a9a6e38197e381a6e381bfe3819f/</url>
    <content><![CDATA[<p><img src="/images/pc-bsd.png" alt="PC-BSD 8.2"></p>
<p><a href="http://www.pcbsd.org/">http://www.pcbsd.org/</a></p>
<p>FreeBSD をインストールしてみたけれど、PC-BSD の方が何かと楽そうなので、PC-BSD 8.2 をインストールしてみた。インストール前に基本パーティションを作っておくと、インストールが楽かも。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure>


<blockquote>
<p>FreeBSD **** 8.2-RELEASE FreeBSD 8.2-RELEASE #7: Wed Feb 16 12:19:08 PST 2011     <a href="mailto:&#114;&#111;&#111;&#116;&#64;&#x62;&#x75;&#105;&#x6c;&#x64;&#56;&#120;&#51;&#x32;&#x2e;&#112;&#99;&#98;&#x73;&#x64;&#x2e;&#111;&#x72;&#103;">&#114;&#111;&#111;&#116;&#64;&#x62;&#x75;&#105;&#x6c;&#x64;&#56;&#120;&#51;&#x32;&#x2e;&#112;&#99;&#98;&#x73;&#x64;&#x2e;&#111;&#x72;&#103;</a>:&#x2F;usr&#x2F;obj&#x2F;usr&#x2F;local_storage&#x2F;pcbsd-build82&#x2F;fbsd-source&#x2F;8.2&#x2F;sys&#x2F;PCBSD  i386</p>
</blockquote>
<p>デスクトップ環境はKDE で、Firefox, Thunderbird, VLC 等をインストール時に追加できる。特に設定しなくても日本語も使えるし、mp3 も再生できる。GRUB からのチェインロードも問題無し。すごく頑張ってると思う。<br>Inspiron duo の1366x768 の解像度に設定すると、ディスプレイが表示されなくなってしまうので、とりあえずVESA で凌ごう。Linux と比べてドライバ(ディスプレイ、ファイルシステム)の情報は少ないかも。<br>ps コマンドやdf コマンドがBSD っぽくて少し懐かしい感じがした。</p>
]]></content>
      <categories>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME Shell 拡張を作ってみよう</title>
    <url>/2011/05/13/gnome-shell-e68ba1e5bcb5e38292e4bd9ce3828de38186/</url>
    <content><![CDATA[<p><img src="/images/my_gnome_shell_extension.png" alt="gnome shell extension"></p>
<p><a href="http://live.gnome.org/GnomeShell/Extensions">http://live.gnome.org/GnomeShell/Extensions</a><br><a href="http://blog.fpmurphy.com/2011/04/gnome-3-shell-extensions.html">http://blog.fpmurphy.com/2011/04/gnome-3-shell-extensions.html</a></p>
<p>まずは、上部のパネルをクリックすると一定時間メッセージを表示するHello World 的な物から！！とりあえず日本語はunescape() してみた。</p>
<h3 id="拡張を格納するディレクトリ"><a href="#拡張を格納するディレクトリ" class="headerlink" title="拡張を格納するディレクトリ"></a>拡張を格納するディレクトリ</h3><p>~&#x2F;.local&#x2F;share&#x2F;gnome-shell&#x2F;extensions&#x2F;<a href="mailto:&#x68;&#x65;&#108;&#108;&#x6f;&#x2d;&#119;&#111;&#114;&#108;&#x64;&#x40;&#x6b;&#x74;&#107;&#114;&#51;&#x64;&#46;&#x73;&#x69;&#x74;&#x65;&#49;&#49;&#x2e;&#x63;&#x6f;&#109;">&#x68;&#x65;&#108;&#108;&#x6f;&#x2d;&#119;&#111;&#114;&#108;&#x64;&#x40;&#x6b;&#x74;&#107;&#114;&#51;&#x64;&#46;&#x73;&#x69;&#x74;&#x65;&#49;&#49;&#x2e;&#x63;&#x6f;&#109;</a>&#x2F;</p>
<h3 id="extension-js-ファイル"><a href="#extension-js-ファイル" class="headerlink" title="extension.js ファイル"></a>extension.js ファイル</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// Sample extension code, makes clicking on the panel show a message</span><br><span class="line">const St = imports.gi.St;</span><br><span class="line">const Mainloop = imports.mainloop;</span><br><span class="line"></span><br><span class="line">const Gettext = imports.gettext.domain(&#x27;gnome-shell-extensions&#x27;);</span><br><span class="line">const _ = Gettext.gettext;</span><br><span class="line"></span><br><span class="line">const Main = imports.ui.main;</span><br><span class="line"></span><br><span class="line">function _showHello() &#123;</span><br><span class="line">    let text = new St.Label(&#123; style_class: &#x27;helloworld-label&#x27;, text: _(unescape(&quot;%uFF0F%u4EBA%u25D5%u203F%u203F%u25D5%u4EBA%uFF3C%u300C%u50D5%u3068%u5951%u7D04%u3057%u3066%u9B54%u6CD5%u5C11%u5973%u306B%u306A%u3063%u3066%u3088%uFF01%uFF01%u300D&quot;)) &#125;);</span><br><span class="line">    let monitor = global.get_primary_monitor();</span><br><span class="line">    global.stage.add_actor(text);</span><br><span class="line">    text.set_position(Math.floor (monitor.width / 2 - text.width / 2), Math.floor(monitor.height / 2 - text.height / 2));</span><br><span class="line">    Mainloop.timeout_add(3000, function () &#123; text.destroy(); &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Put your extension initialization code here</span><br><span class="line">function main(metadata) &#123;</span><br><span class="line">    imports.gettext.bindtextdomain(&#x27;gnome-shell-extensions&#x27;, metadata.localedir);</span><br><span class="line"></span><br><span class="line">    Main.panel.actor.reactive = true;</span><br><span class="line">    Main.panel.actor.connect(&#x27;button-release-event&#x27;, _showHello);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="metadata-json-ファイル"><a href="#metadata-json-ファイル" class="headerlink" title="metadata.json ファイル"></a>metadata.json ファイル</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;uuid&quot;: &quot;hello-world@ktkr3d.site11.com&quot;,</span><br><span class="line"> &quot;name&quot;: &quot;Hello, World!&quot;,</span><br><span class="line"> &quot;description&quot;: &quot;An example extension to show how it works. Shows Hello, world when clicking on the top panel.&quot;,</span><br><span class="line"> &quot;shell-version&quot;: [ &quot;3.0&quot; ],</span><br><span class="line"> &quot;localedir&quot;: &quot;/usr/local/share/locale&quot;,</span><br><span class="line"> &quot;url&quot;: &quot;http://ktkr3d.site11.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="stylesheet-class-ファイル"><a href="#stylesheet-class-ファイル" class="headerlink" title="stylesheet.class ファイル"></a>stylesheet.class ファイル</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/* Example stylesheet */</span><br><span class="line">.helloworld-label &#123;</span><br><span class="line">    font-size: 36px;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    color: #ffffff;</span><br><span class="line">    background-color: rgba(10,10,10,0.7);</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拡張を有効にするには、[Alt]+[F2]でrを入力して[Enter] </p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME Shell のテーマを選んでみた</title>
    <url>/2011/05/15/gnome-shell-e381aee38386e383bce3839ee38292e5a489e69bb4e38197e381a6e381bfe3819f/</url>
    <content><![CDATA[<p><img src="/images/gnome-shell-extension-theme-selector.png" alt="gnome shell extension theme selector"></p>
<p><img src="/images/gnome-shell-extension-theme-selector-ubuntu.png" alt="gnome shell extension theme selector ubuntu"></p>
<p><a href="http://blog.fpmurphy.com/2011/04/gnome-shell-theme-selector-preview.html">http://blog.fpmurphy.com/2011/04/gnome-shell-theme-selector-preview.html</a></p>
<p>GNOME Shell のテーマを変更する拡張を見つけたので、Fedora15 とUbuntu 11.04 で試してみた。Atolm テーマが選べるようになったよ！！</p>
<p><a href="http://www.fpmurphy.com/gnome-shell-extensions/">http://www.fpmurphy.com/gnome-shell-extensions/</a> の下の最新のthemeselector のアーカイブをダウンロードして、README に従って設定した。</p>
<ol>
<li>&#x2F;usr&#x2F;share&#x2F;glib-2.0&#x2F;org.gnome.shell.extensions.user-theme.gschema.xml を作成。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schemalist</span> <span class="attr">gettext-domain</span>=<span class="string">&quot;gnome-shell-extensions&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">schema</span> <span class="attr">path</span>=<span class="string">&quot;/org/gnome/shell/extensions/user-theme/&quot;</span> <span class="attr">id</span>=<span class="string">&quot;org.gnome.shell.extensions.user-theme&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span> <span class="attr">type</span>=<span class="string">&quot;s&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">default</span>&gt;</span>&quot;&quot;<span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">summary</span>&gt;</span>Theme name<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>The name of the current shell theme<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schemalist</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ol start="2">
<li>glib-compile-schemas を実行する。</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> glib-compile-schemas /usr/share/glib-2.0</span><br></pre></td></tr></table></figure>


<ol start="3">
<li><p>$HOME&#x2F;.themes&#x2F; ディレクトリを作成して、アーカイブの中のテーマを展開する。</p>
</li>
<li><p>$HOME&#x2F;.local&#x2F;share&#x2F;gnome-shell&#x2F;extensions&#x2F;<a href="mailto:&#x74;&#104;&#101;&#x6d;&#x65;&#115;&#x65;&#x6c;&#x65;&#99;&#116;&#111;&#114;&#x40;&#102;&#x70;&#109;&#x75;&#114;&#112;&#x68;&#x79;&#46;&#99;&#111;&#x6d;">&#x74;&#104;&#101;&#x6d;&#x65;&#115;&#x65;&#x6c;&#x65;&#99;&#116;&#111;&#114;&#x40;&#102;&#x70;&#109;&#x75;&#114;&#112;&#x68;&#x79;&#46;&#99;&#111;&#x6d;</a>&#x2F; ディレクトリを作成して、アーカイブの中のextension.js とmetadata.json を展開する。</p>
</li>
<li><p>[Alt]+[F2]を押して、r を入力して、[Enter] を押す。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>0 A.D. で遊んでみる</title>
    <url>/2011/05/17/0-a-d-e381a7e9818ae38293e381a7e381bfe3828b/</url>
    <content><![CDATA[<p><img src="/images/0ad_256.png" alt="0 A.D."><br><a href="http://wildfiregames.com/0ad/">http://wildfiregames.com/0ad/</a></p>
<p>フリーでオープンソースでクロスプラットフォーム(Windows, Linux, Mac)なリアルタイムストラテジーゲーム0 A.D. で遊んでみよう。</p>
<ul>
<li>Ubuntu 版の安定版のインストール</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:wfg/0ad</span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install 0ad</span><br></pre></td></tr></table></figure>

<ul>
<li>Ubuntu 版のより新しい開発版のインストール</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:wfg/0ad.dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install 0ad 0ad-data</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>game</category>
      </categories>
  </entry>
  <entry>
    <title>Proun で遊んでみた</title>
    <url>/2011/05/22/proun-e381a7e9818ae38293e381a7e381bfe3819f/</url>
    <content><![CDATA[<p><img src="/images/proun.png" alt="proun ogre3d"></p>
<p><a href="http://www.proun-game.com/">http://www.proun-game.com/</a><br>Ogre3D で作られたレースゲームProun のベータ版で遊んでみた。<br>2011年春にリリースされるらしい？</p>
<p>プレイ動画を見ているだけでも楽しい。</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>proun</tag>
      </tags>
  </entry>
  <entry>
    <title>GNOME Shell を拡張してみた4</title>
    <url>/2011/05/23/gnome-shell-e38292e68ba1e5bcb5e38197e381a6e381bfe3819f4/</url>
    <content><![CDATA[<p><img src="/images/Screenshot-weather.png" alt="gnome shell extension weather"></p>
<ul>
<li><p><a href="http://www.webupd8.org/2011/05/gnome-shell-weather-extension.html">http://www.webupd8.org/2011/05/gnome-shell-weather-extension.html</a></p>
</li>
<li><p><a href="https://github.com/simon04/gnome-shell-extension-weather">https://github.com/simon04/gnome-shell-extension-weather</a></p>
</li>
</ul>
<p>天気を表示する拡張を入れてみた。<br><a href="http://weather.yahoo.com/">http://weather.yahoo.com/</a> で地域を検索して、RSS のリンクに含まれる地域コードをextension.js に設定する。東京はJAXX0085、大阪はJAXX0071 になる。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">const UNITS = &#x27;c&#x27;; // Units for temperature (case sensitive). f: Fahrenheit. c: Celsius</span><br><span class="line">const YAHOO_ID = &#x27;JAXX0085&#x27;;</span><br><span class="line">const WEATHER_URL = &#x27;http://weather.yahooapis.com/forecastjson?u=&#x27; + UNITS + &#x27;&amp;p=&#x27; + YAHOO_ID;</span><br><span class="line">const FORECAST_URL = &#x27;http://query.yahooapis.com/v1/public/yql?format=json&amp;q=select%20item.forecast%20from%20weather.forecast%20where%20location%3D%22&#x27; + YAHOO_ID + &#x27;%22%20%20and%20u=&quot;&#x27; + UNITS + &#x27;&quot;&#x27;;</span><br></pre></td></tr></table></figure>

<p>リアルタイムの気温が怪しいんだけど、どこから拾ってきているんだろう…</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>gnome-tweak-tool 3.0.4 を試してみた</title>
    <url>/2011/05/23/gnome-tweak-tool-3-0-4-e38292e8a9a6e38197e381a6e381bfe3819f/</url>
    <content><![CDATA[<p><img src="/images/Screenshot-Tweak-Tool.png" alt="gnome tweak tool 3.0.4 extension"></p>
<p><a href="http://git.gnome.org/browse/gnome-tweak-tool">http://git.gnome.org/browse/gnome-tweak-tool</a><br>予告通り、3.0.4 でGNOME Shell Extensions の拡張の管理ができるようになっていた。<br>ON&#x2F;OFF を切り替えると、再起動を促すボタンが表示されるので便利。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Firefox 5 beta 2 を試してみた</title>
    <url>/2011/05/24/firefox-5-beta-2-e38292e8a9a6e38197e381a6e381bfe3819f/</url>
    <content><![CDATA[<p><img src="/images/firefox5beta.png" alt="firefox 5 beta"></p>
<ul>
<li><p><a href="http://www.mozilla.com/en-US/firefox/5.0/whatsnew/">http://www.mozilla.com/en-US/firefox/5.0/whatsnew/</a></p>
</li>
<li><p><a href="http://www.webupd8.org/2011/05/firefox-5-beta-channel-ubuntu-ppa.html">http://www.webupd8.org/2011/05/firefox-5-beta-channel-ubuntu-ppa.html</a></p>
</li>
</ul>
<p>Firefox 5 のベータ2 が公開されていたので試してみた。</p>
<ul>
<li>リポジトリの追加</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:mozillateam/firefox-next</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>


<ul>
<li>firefox をインストール</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install firefox</span><br></pre></td></tr></table></figure>


<ul>
<li>または既存のFirefox 4 からアップグレード</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get upgrade</span><br></pre></td></tr></table></figure>




<p>なにが変わるかというと、</p>
<blockquote>
<p>The latest version of Firefox Beta has the following changes:</p>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<ul>
<li>Added support for <strong>CSS animations</strong></li>
</ul>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<ul>
<li>Added support for <strong>switching Firefox development channels</strong></li>
</ul>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<ul>
<li>The Do-Not-Track header preference has been moved to increase discoverability</li>
</ul>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<ul>
<li>Improved canvas, JavaScript, memory, and networking performance</li>
</ul>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<ul>
<li>Improved standards support for HTML5, XHR, MathML, SMIL, and canvas</li>
</ul>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<ul>
<li>Improved spell checking for some locales</li>
</ul>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<ul>
<li><strong>Improved desktop environment integration for Linux users</strong></li>
</ul>
</blockquote>
<blockquote>
</blockquote>
<p>詳細なリストは、<br><a href="http://www.mozilla.com/en-US/firefox/5.0/releasenotes/buglist.html">http://www.mozilla.com/en-US/firefox/5.0/releasenotes/buglist.html</a><br>チャンネル(Aurora&#x2F;Beta&#x2F;Release)の切り替えはバージョン情報ダイアログから。</p>
<p>Firefox5 に未対応なアドオンもゴニョゴニョすればたいてい動きそうだ。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME Shell Extension を復活させてみた</title>
    <url>/2011/05/30/gnome-shell-extension-e38292e5bea9e6b4bbe38195e3819be381a6e381bfe3819f/</url>
    <content><![CDATA[<p>GNOME Shell を3.0.2 にしたらdock が消えたので復活させてみた。</p>
<ul>
<li><p>Ubuntu 11.04 の場合<br>&#x2F;usr&#x2F;local&#x2F;share&#x2F;gnome-shell&#x2F;extensions&#x2F;<a href="mailto:&#100;&#111;&#99;&#107;&#64;&#x67;&#110;&#111;&#109;&#101;&#x2d;&#x73;&#104;&#101;&#108;&#x6c;&#x2d;&#x65;&#x78;&#116;&#101;&#x6e;&#x73;&#x69;&#111;&#x6e;&#115;&#x2e;&#103;&#x6e;&#111;&#109;&#x65;&#46;&#x6f;&#114;&#x67;">&#100;&#111;&#99;&#107;&#64;&#x67;&#110;&#111;&#109;&#101;&#x2d;&#x73;&#104;&#101;&#108;&#x6c;&#x2d;&#x65;&#x78;&#116;&#101;&#x6e;&#x73;&#x69;&#111;&#x6e;&#115;&#x2e;&#103;&#x6e;&#111;&#109;&#x65;&#46;&#x6f;&#114;&#x67;</a>&#x2F;metadata.json</p>
</li>
<li><p>Fedora 15, openSUSE 11.4 の場合<br>&#x2F;usr&#x2F;share&#x2F;gnome-shell&#x2F;extensions&#x2F;<a href="mailto:&#100;&#111;&#99;&#107;&#x40;&#x67;&#x6e;&#111;&#109;&#101;&#45;&#x73;&#104;&#x65;&#x6c;&#x6c;&#x2d;&#x65;&#120;&#116;&#101;&#110;&#x73;&#x69;&#111;&#110;&#x73;&#46;&#103;&#x6e;&#x6f;&#x6d;&#101;&#46;&#111;&#x72;&#103;">&#100;&#111;&#99;&#107;&#x40;&#x67;&#x6e;&#111;&#109;&#101;&#45;&#x73;&#104;&#x65;&#x6c;&#x6c;&#x2d;&#x65;&#120;&#116;&#101;&#110;&#x73;&#x69;&#111;&#110;&#x73;&#46;&#103;&#x6e;&#x6f;&#x6d;&#101;&#46;&#111;&#x72;&#103;</a>&#x2F;metadata.json</p>
</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;uuid&quot;: &quot;dock@gnome-shell-extensions.gnome.org&quot;,</span><br><span class="line">&quot;name&quot;: &quot;Dock&quot;,</span><br><span class="line">&quot;description&quot;: &quot;A dock for the GNOME Shell -- displays favorite and running applications&quot;,</span><br><span class="line">&quot;original-author&quot;: &quot;tclaesson@gmail.com&quot;,</span><br><span class="line">&quot;shell-version&quot;: [ &quot;3.0.1&quot; ],</span><br><span class="line">&quot;localedir&quot;: &quot;/usr/local/share/locale&quot;,</span><br><span class="line">&quot;url&quot;: &quot;http://git.gnome.org/gnome-shell-extensions&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>を以下のように修正した。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&quot;shell-version&quot;: [ &quot;3.0&quot; ],</span><br></pre></td></tr></table></figure>

<p>または、</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&quot;shell-version&quot;: [ &quot;3.0.1&quot;, &quot;3.0.2&quot; ],</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME Shell を拡張してみた5</title>
    <url>/2011/06/02/gnome-shell-e38292e68ba1e5bcb5e38197e381a6e381bfe3819f5/</url>
    <content><![CDATA[<p><img src="/images/system_monitor.png" alt="gnome shell extension system monitor"><br><a href="http://www.webupd8.org/2011/05/system-monitor-extension-puts-ram-swap.html">http://www.webupd8.org/2011/05/system-monitor-extension-puts-ram-swap.html</a><br>GNOME Shell のシステムモニタ拡張を追加してみた。<br>通信速度を表示できて便利。<br>パネル上にリアルタイムに値を表示できるものの幅をとってしまうので非表示の設定にしてみた。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME Shell を拡張してみた6</title>
    <url>/2011/06/04/gnome-shell-e38292e68ba1e5bcb5e38197e381a6e381bfe3819f6/</url>
    <content><![CDATA[<p><img src="/images/gnome-shell-extension-weather2.png" alt="gnome shell extension weather"></p>
<ul>
<li><p><a href="http://www.webupd8.org/2011/06/another-gnome-shell-weather-extension.html">http://www.webupd8.org/2011/06/another-gnome-shell-weather-extension.html</a></p>
</li>
<li><p><a href="http://www.fpmurphy.com/gnome-shell-extensions/">http://www.fpmurphy.com/gnome-shell-extensions/</a></p>
</li>
</ul>
<p>別のお天気拡張に変更してみた。</p>
<p>こちらの拡張では、</p>
<ul>
<li><p>現在の天気が正しく動作する</p>
</li>
<li><p>5日分の天気予報が表示される</p>
</li>
<li><p>現在地の指定が簡単(‘tokyo’ のように)</p>
</li>
<li><p><a href="http://www.worldweatheronline.com/">http://www.worldweatheronline.com</a> の利用キーが必要(無料で登録はとても簡単)</p>
</li>
</ul>
<p>今後修正されると思うけれど、バージョン1.1 では、</p>
<ul>
<li>現在の気温の単位(摂氏&#x2F;華氏)が設定と逆になってしまう単純なバグがある(以下のように修正してみた)</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">let currTemperature = new St.Label(&#123; text: (MUNITS &gt; 0 ? curr[0].temp_C + &#x27;C&#x27; : curr[0].temp_F + &#x27;F&#x27;) &#125;);</span><br></pre></td></tr></table></figure>


<ul>
<li><p>動作や表示スタイルが他の拡張の影響を受けてしまうことがある</p>
</li>
<li><p>ローカルタイムが考慮されてない?</p>
</li>
</ul>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME Shell を拡張してみた7</title>
    <url>/2011/06/04/gnome-shell-e38292e68ba1e5bcb5e38197e381a6e381bfe3819f7/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://bugzilla.gnome.org/show_bug.cgi?id=643662">https://bugzilla.gnome.org/show_bug.cgi?id=643662</a></p>
</li>
<li><p><a href="https://bugzilla.gnome.org/attachment.cgi?id=186893">https://bugzilla.gnome.org/attachment.cgi?id=186893</a></p>
</li>
</ul>
<p>GNOME Shell の上部パネルをauto hide にしてみた。<br>将来的には設定を切り替えられるようになるのかな。</p>
<p>dock 拡張もauto hide にしたいなぁ。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>Puzzle Moppet で遊んでみた</title>
    <url>/2011/06/05/puzzle-moppet/</url>
    <content><![CDATA[<p><img src="/images/PuzzleMoppet.png" alt="puzzle moppet"></p>
<p><a href="http://garnetgames.com/puzzlemoppet/">http://garnetgames.com/puzzlemoppet/</a><br>Puzzle Moppet のフリー版で遊んでみた。<br><a href="http://ktkr3d.site11.com/2010/09/12/puzzle_game/">以前遊んだIrrlicht で作られたゲーム</a>が商用化されたみたい。<br>商用版は14.95 US$ とのこと。</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Android-x86 3.1 らしきもの</title>
    <url>/2011/06/15/android-x86-3-1/</url>
    <content><![CDATA[<p><img src="/images/android-x86_3.1-2.png" alt="android-x86 3.1"></p>
<p><img src="/images/android-x86_3.1.png" alt="android-x86 3.1"></p>
<p><a href="http://groups.google.com/group/android-x86/browse_thread/thread/6077280a8b65e525">http://groups.google.com/group/android-x86/browse_thread/thread/6077280a8b65e525</a></p>
<p>Android-x86 3.1 らしきものがあったので、実機(Inspiron duo)とVirtual Box の両方で動かしてみた。HDMI がうまく動かなかったので、VESAモードで起動。GPL 版でUI は2系のままらしい。ターミナルは使用可能。<br>実機では縦モードになった。レスポンスは軽快。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>HAIKU R1 a3を試してみた</title>
    <url>/2011/06/22/haiku-r1-a3/</url>
    <content><![CDATA[<p><img src="/images/haiku_r1a3.png" alt="haiku r1a3"></p>
<p><a href="http://www.haiku-os.org/news/2011-06-18_haiku_release_1_alpha_3">http://www.haiku-os.org/news/2011-06-18_haiku_release_1_alpha_3</a></p>
<p>BeOS みたいなOS、HAIKU Release 1 Alpha 3 がリリースされたので試してみた。<br>Linux でもBSD でもない独自カーネル。<br>ライブUSB の状態で、OGG、MP3、MP4(H.264+AAC)の再生が可能。<br>NTFS、EXT4 に対する読み&#x2F;書きマウントが可能。<br>ビデオデバイス、サウンドデバイスを特別な設定なしに自動認識して正常動作したのは、何気にすごいことかもしれない。Ubuntu 11.04 ですら設定変更が必要だったのに。</p>
]]></content>
      <categories>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>Proun で遊んでみた2</title>
    <url>/2011/06/25/proun-2/</url>
    <content><![CDATA[<p><img src="/images/proun_ss2.png" alt="proun"></p>
<ul>
<li><p><a href="http://www.proun-game.com/">http://www.proun-game.com/</a></p>
</li>
<li><p><a href="http://blog.oogst3d.net/">http://blog.oogst3d.net/</a></p>
</li>
<li><p><a href="http://www.ronimo-games.com/forum/viewforum.php?f=7">http://www.ronimo-games.com/forum/viewforum.php?f=7</a></p>
</li>
<li><p><a href="http://www.proun-game.com/UserTracks.html">http://www.proun-game.com/UserTracks.html</a></p>
</li>
</ul>
<p>Proun が2011.6.24 にリリースされたので遊んでみた。<br>抽象的なコースが綺麗でBGM も軽快なのが楽しい。<br>ゲームを進めていくとスピードがアップ(Fast -&gt; Sonic -&gt; Supersonic -&gt; Speed of light)していってかなり難しくなる。<br>ネットワーク上でのランキングやユーザトラック（コース）の拡張ができるようなので、長く遊べそう。<br>正式版になって、フリーダウンロードとPay what you want($2, $5, $10, $20, any) から選択できるようになったので、PayPal で購入してみた。</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
  </entry>
  <entry>
    <title>Proun で遊んでみた3</title>
    <url>/2011/06/27/proun-3/</url>
    <content><![CDATA[<p><img src="/images/proun_archipelago.png" alt="proun archipelago"></p>
<p><a href="http://www.ronimo-games.com/forum/viewtopic.php?f=7&t;=1074&sid;=5db794ee543f3b1f8a0ee10f51774acd">http://www.ronimo-games.com/forum/viewtopic.php?f=7&t;=1074&sid;=5db794ee543f3b1f8a0ee10f51774acd</a></p>
<p>proun のユーザトラックArchipelago がフォーラムに掲載されていたので遊んでみた。<br>ファンタジーっぽいコースに見えるけど、なかなか難しくておもしろい。<br>しかもこのコースはInspiron duo でも発生していた<a href="http://www.ronimo-games.com/forum/viewtopic.php?f=7&t=1038&sid=a2b52fd4f493e88335b57fa70b5ba637">このエラー</a>が発生しないみたいなので、ビデオ環境が弱いPC　にも優しいかもしれない。<br>これからもおもしろいコースが増えるといいな。</p>
<p>クレジットを見ると、Proun はOgre3D で作られているけどサウンドはirrKlang だった。</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
  </entry>
  <entry>
    <title>Android NDK を試してみた</title>
    <url>/2011/07/26/proton-sdk/</url>
    <content><![CDATA[<p><img src="/images/proton_android_irrlicht_quake_map.png" alt="proton android irrlicht quake map"></p>
<p><a href="http://www.protonsdk.com/">http://www.protonsdk.com/</a></p>
<p>Proton SDK を使って、Android NDK で実装されたIrrlicht のQuake マップデモをAndroid 端末実機で実行してみた。スクリーン上に「方向キー」、「ポインティング用のパッド」、「メニュー画面へ戻るボタン」などのGUI の他、サウンドも実装されている。<br>デモ用のRT3DApp.apk が提供されているけれど、自分でビルドする場合はAndroid SDK, Android NDK の環境を構築しておいて、以下のコマンドを投入するとAndroid 端末(android-8: Android 2.2)への転送までやってくれるみたい。Android 端末側では、「設定」-「アプリケーション」-「USBデバッグ」を許可しておく。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ svn checkout svn://rtsoft.com/rtsvn/proton</span><br><span class="line">$ <span class="built_in">cd</span> proton</span><br><span class="line">$ <span class="built_in">mv</span> ./shared/GUI/rtfontfileformat.h ./shared/GUI/RTFontFileFormat.h</span><br><span class="line">$ <span class="built_in">cp</span> -r ./shared/util ./shared/Util</span><br><span class="line">$ <span class="built_in">cd</span> ./RT3DApp/android</span><br><span class="line">$ ndk-build</span><br><span class="line">$ ant install</span><br></pre></td></tr></table></figure>

<p>.&#x2F;RT3DApp&#x2F;android&#x2F;local.properties の中のsdk.dir にはAndroid SDK のパスを指定する。アプリケーション本体のソースコードは、.&#x2F;RT3DApp&#x2F;source&#x2F; で、アウトプットは.&#x2F;RT3DApp&#x2F;android&#x2F;bin&#x2F;RT3DApp-debug.apk に生成された。</p>
<p>ant install の前に.&#x2F;RT3DApp&#x2F;media&#x2F;update_media.bat と.&#x2F;RT3DApp&#x2F;android&#x2F;build.bat 相当を実行して、.&#x2F;RT3DApp&#x2F;android&#x2F;assets&#x2F; にリソースを展開しておく必要があるみたい。<br>ant install の代わりにant debug でパッケージを生成して止まるみたい。</p>
<p>Proton SDK はXFree86 1.1 ライセンスで提供されていて、各種プラットフォームに対応しているみたい。Bullet ライブラリも取り込まれているようなので、何か作るのには便利かも。</p>
<p><a href="/images/uploads/2011/07/proton_android_irrlicht_menu.png"><img src="/images/uploads/2011/07/proton_android_irrlicht_menu.png"></a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Android NDK でPMD モデルを表示してみた</title>
    <url>/2011/07/31/android-ndk-pmd/</url>
    <content><![CDATA[<p><img src="/images/android_ndk_irrlicht_pmd.png" alt="android ndk irrlicht pmd proton sdk"></p>
<p>Proton SDK にIrrlicht とBullet とboost が入っていたので、irrmmd も混ぜてMMD のPMD モデルを表示してみた。boost がちょっと古そうだったので、Linux マシンに入っている物で差し替えた。VMD も組み込んでみた。Android NDK といえど、重いモデルや激しいモーションで性能がでないだろうから、チューニングしないと。Proton SDK を外したら早くなるかな？CPU が古いARM だから仕方なしかな。</p>
<p><img src="/images/android_ndk_irrlicht_pmd_vmd.png" alt="android ndk irrlicht pmd vmd proton sdk"></p>
<p><img src="/images/android_ndk_irrlicht_pmd_menu.png" alt="android ndk irrlicht proton sdk"></p>
<p>サンプルプログラムに「PMD and VMD」メニューを追加してみた。ついでに位置ずれも修正。</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Android NDK で日本語表示してみた</title>
    <url>/2011/08/10/android-ndk/</url>
    <content><![CDATA[<p><img src="/images/android_ndk_irrlicht_pmd_vmd_freetype.png" alt="android ndk irrlicht pmd vmd freetype"></p>
<p>Proton SDK 上のIrrlicht ではGUIEnvironment がうまく取得できなかったので、Proton SDK を外した。素のIrrlicht にしたら、画像や文字の表示に問題なかった。ついでに、FreeType を取り込んでTrueType のフォントで日本語を表示してみた。<br>Proton SDK を外したら、なぜかIrrlicht 上の幅と高さが半分くらいになってしまったので、直さないと。GLES2 にも移行したいところ。</p>
<p><a href="/images/uploads/2011/08/android_ndk_irrlicht_pmd_vmd_fullscreen.png"><img src="/images/uploads/2011/08/android_ndk_irrlicht_pmd_vmd_fullscreen.png" alt="android ndk irrlicht pmd vmd fullscreen"></a></p>
<p>AndroidManifest.xml を修正したら、フルスクリーンになって最大解像度が有効になった。</p>
<p><a href="/images/uploads/2011/08/android_ndk_pmd_homerun.png"><img src="/images/uploads/2011/08/android_ndk_pmd_homerun.png" alt="android ndk pmd vmd irrlicht freetype"></a></p>
<p>いろいろなボタンをつけてみた。</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 11.10 でGNOME Shell を使ってみた</title>
    <url>/2011/08/21/ubuntu-11-10-gnome-shell/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_11_10_gnome_shell.png" alt="ubuntu 11.10 GNOME Shell"></p>
<p>Inspiron duo にUbuntu 11.10 アルファ3 amd64 をインストールして、デスクトップ環境をGNOME Shell に変更してみた。Ubuntu 11.10 で標準リポジトリにGNOME Shell のパッケージが復活したので、ソフトウェアセンターからインストール。Unity とGNOME Shell をログインマネージャで切り替えて使うことが可能になった。<br>Inspiron duo のオーディオデバイスを設定変更なしに認識できるようになってた。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Fennec を使ってみた</title>
    <url>/2011/09/23/fennec/</url>
    <content><![CDATA[<p><img src="/images/fennec.png" alt="fennec linux"></p>
<p><a href="http://nightly.mozilla.org/">http://nightly.mozilla.org/</a></p>
<p>Fennec(モバイル&#x2F;タブレット版のFirefox)をUbuntu 11.10 のGNOME Shell 上で使ってみた。<br>インタフェースはAndroid版のFirefox と似た感じで、同じようにタッチスクリーンの画面上を指でドラッグすることでスクロールもできた。左側の「+」ボタンでタブを追加。アドレスバーをタップするとページ一覧、ブックマーク、履歴、同期しているPCのタブ一覧を表示。今回使ったリビジョンでは残念ながら同期はうまく動かなかった。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Caribou を使ってみた</title>
    <url>/2011/09/28/caribou/</url>
    <content><![CDATA[<p>GNOME Shell が3.2 になったので、オンスクリーンキーボードCaribou を使ってみた。<br>使用するには、<br><img src="/images/caribou_on.png" alt="caribou"><br>こんな感じに。<br><img src="/images/caribou.png" alt="caribou"><br>Android 端末のように画面上のオンスクリーンキーボードのキーをタップすると文字が入力できる。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Conky-HTC を使ってみた</title>
    <url>/2011/10/08/conky-htc/</url>
    <content><![CDATA[<p><img src="/images/Conky-HTC.png" alt="Conky-HTC"><br><a href="http://wgacton.deviantart.com/art/Conky-HTC-v1-2-213418718">http://wgacton.deviantart.com/art/Conky-HTC-v1-2-213418718</a><br><a href="http://www.webupd8.org/2011/09/htc-like-clock-weather-conky.html">http://www.webupd8.org/2011/09/htc-like-clock-weather-conky.html</a></p>
<p>HTC のスマートフォンの待受画面のような、時計と天気を表示するConky スクリプトを使ってみた。元記事のコメントに従って修正したら、日本語も表示できた。位置が少しずれるので微調整が必要かもしれない。機能的にはAWN で事足りているけれどこちらは見た目がよいね。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux Mint 12 を試してみた</title>
    <url>/2011/11/06/linux-mint-12/</url>
    <content><![CDATA[<p><img src="/images/linux_mint_12_gnome_shell.png" alt="linux mint 12 gnome shell"></p>
<p><a href="http://ohheyitslou.blogspot.com/2011/11/tutorial-how-to-install-linux-mint-12.html">http://ohheyitslou.blogspot.com/2011/11/tutorial-how-to-install-linux-mint-12.html</a></p>
<p><a href="http://blog.linuxmint.com/?p=1851">http://blog.linuxmint.com/?p=1851</a></p>
<p>Ubuntu ベースで人気のディストリビューションLinux Mint のバージョン12 RC1 版が2011.11.11 にリリースされるようなので、リポジトリを更新してひと足お先に試してみた。(Daily Builds は公開されてないみたい？)<br>Linux Mint ではMint GNOME Shell Extensions (MGSE) でGNOME Shell の拡張機能が整理されていて、GNOME Shell 上でクラシックメニューのようなものを提供している。Ubuntu 同様、fglrx を組み込むと一部の画像やテキストがうまく描画されないのは仕方なしか。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Android 4.0 をビルドしてみよう（その1）</title>
    <url>/2011/11/15/android-4-0/</url>
    <content><![CDATA[<p><a href="http://source.android.com/source/download.html">http://source.android.com/source/download.html</a><br>Android 4.0 のソースコード（android-4.0.1_r1）が公開されたので、Ubuntu 11.10 64bit の環境でビルドしてみよう。手順はAndroid 2.3 の時と同じみたい。今回から（?）実験的に32bit 環境での手順も記載されている。<br>はやくAndroid-x86 にも取り込まれないかな。</p>
<ol>
<li><p>環境の構築<br><a href="http://source.android.com/source/initializing.html">http://source.android.com/source/initializing.html</a><br>前提パッケージlib32readline5-dev が見つからないのは、とりあえず無視してみる。</p>
</li>
<li><p>ソースコードのダウンロード<br><a href="http://source.android.com/source/downloading.html">http://source.android.com/source/downloading.html</a><br>今回もrepo を使ったダウンロードが遅い。</p>
</li>
<li><p>ソースコードのビルド<br><a href="http://source.android.com/source/building.html">http://source.android.com/source/building.html</a></p>
</li>
</ol>
<p>source.android.com に繋がりにくい時があるので、手順はhtml で保存しておいた方がよさそう。<br>ダウンロードが終わらないので、今日（今朝）はここまで。</p>
<p><strong>update:</strong><br>エミュレータでAndroid 4.0 Ice Cream Sandwich を動かしてみた。<br><img src="/images/android_4_ics.png" alt="android 4 ice cream sandwich"></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Android-x86 3.2 Honeycomb を試してみた</title>
    <url>/2011/11/21/android-x86-3-2-honeycomb/</url>
    <content><![CDATA[<p><img src="/images/android-x86_3.2.png" alt="android-x86 3.2 honeycomb"></p>
<p><a href="http://code.google.com/p/android-x86/downloads/list">http://code.google.com/p/android-x86/downloads/list</a><br><a href="http://code.google.com/p/android-x86/downloads/detail?name=android-x86-3.2-RC2-asus_laptop.iso">http://code.google.com/p/android-x86/downloads/detail?name=android-x86-3.2-RC2-asus_laptop.iso</a></p>
<p>Android のx86 ポート、Android-x86 3.2 Honeycomb RC2 のISO イメージが公開されていたので、android-x86-3.2-RC2-asus_laptop.iso を実機(DELL Inspiron Duo)と仮想環境で実行してみた。<br>DELL Inspiron Duo では最大解像度表示(1366x768)、無線LAN接続、日本語表示、サウンド、YouTube での動画再生等が動作した。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">app_68@laptop:/ $ <span class="built_in">uname</span> -a</span><br><span class="line">Linux localhost 3.0.1-android-x86-asus-laptop+ <span class="comment">#3 SMP PREEMPT Sun Nov 13 04:33:58 CST 2011 i686 GNU/Linux</span></span><br></pre></td></tr></table></figure>

<p><strong>update:</strong><br><a href="/images/uploads/2011/11/android-x86_3.2_inspiron_duo.png"><img src="/images/uploads/2011/11/android-x86_3.2_inspiron_duo.png" alt="android-x86 3.2 inspiron duo"></a><br>実機のスクリーンキャプチャは、Wi-Fi 接続してから、Android SDK をインストールしたPC から</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> ADBHOST=192.168.0.4</span><br><span class="line">$ adb devices</span><br><span class="line">* daemon not running. starting it now on port 5037 *</span><br><span class="line">* daemon started successfully *</span><br><span class="line">List of devices attached </span><br><span class="line">emulator-5554	device</span><br><span class="line"></span><br><span class="line">$ ddms</span><br></pre></td></tr></table></figure>

<p>でddms を起動して、「Device」-「Screen Capture…」メニューから取得する。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Wine + Proun で遊んでみた</title>
    <url>/2011/11/27/wine-proun/</url>
    <content><![CDATA[<p><img src="/images/wine_proun1.png" alt="wine proun"></p>
<p><a href="http://www.proun-game.com/">http://www.proun-game.com/</a><br><a href="http://www.awesomenauts.com/forum/viewtopic.php?f=7&t;=1049">http://www.awesomenauts.com/forum/viewtopic.php?f=7&t;=1049</a><br><a href="http://www.proun-game.com/UserTracks.html">http://www.proun-game.com/UserTracks.html</a></p>
<p>Wine を使ったらProun がLinux で動くようになっていたので、Ubuntu 11.10 x86_64(GNOME Shell) + Wine 1.3.28 + Proun(Patch v109 again, 19 October 2011)の環境で遊んでみた。<br>いつの間にかユーザトラックが増えていた。<br>ユーザトラック”Solar Coaster”が難しい。</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
  </entry>
  <entry>
    <title>Android-x86 4.0 ICS を試してみた</title>
    <url>/2011/11/28/android-x86-4-0-ics-2/</url>
    <content><![CDATA[<p><img src="/images/android-x86_4.0_ics_vm.png" alt="android-x86 4.0 ics vm"><br><a href="http://www.borncity.com/blog/2011/11/28/android-x86-ice-cream-sandwich-von-vmlite/">http://www.borncity.com/blog/2011/11/28/android-x86-ice-cream-sandwich-von-vmlite/</a><br>Android-x86 4.0 ICS(Ice Cream Sandwich)の仮想マシンイメージらしきものが公開されていたので、試してみた。</p>
<p><img src="/images/android-x86_4.0_ics_vm_ver.png" alt="android-x86 4.0 ics vm version"></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Diablo 3 ベータで遊んでみた</title>
    <url>/2011/12/06/diablo3-beta/</url>
    <content><![CDATA[<p><img src="/images/diablo3_install.png" alt="diablo 3 beta install"></p>
<p>Diablo 3 のベータテスタの抽選に当選したので、早速インストールしてみた。</p>
<p><a href="/images/uploads/2011/12/d3_demon_hunter.png"><img src="/images/uploads/2011/12/d3_demon_hunter.png" alt="diablo 3 beta demon hunter"></a></p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
  </entry>
  <entry>
    <title>Android-x86 4.0 ICS を実機で試してみた</title>
    <url>/2011/12/08/android-x86-4-0-ics/</url>
    <content><![CDATA[<p><img src="/images/android-x86_4.0_ics_asuslaptop.png" alt="android-x86 4.0 ics asus laptop"></p>
<p>Android-x86 4.0 ICS のISO イメージが公開されていたので実機(Inspiron duo)で試してみた。<br>ASUS Laptop 用のビルドが安定していた。AMD Brazos 用のビルドやTegav2 用のビルドでタッチスクリーンが動作したので、ビルドの設定(カーネルオプションとか)次第でより適合したビルドを作成できそう。Android-x86 のsparta(Inspiron duo)版ビルドの初期メンテナの人が年末年始でメンテナンスしてくれるみたいなので、期待して待っていよう。</p>
<p><a href="/images/uploads/2011/12/android-x86_4.0_ics_asuslaptop_ver.png"><img src="/images/uploads/2011/12/android-x86_4.0_ics_asuslaptop_ver.png" alt="android-x86 4.0 ics asus laptop ver"></a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress 3.3 を導入してみた</title>
    <url>/2011/12/11/wordpress-3-3/</url>
    <content><![CDATA[<p>WordPress 3.3 にアップデートしたらダッシュボードが使いやすくなってた。</p>
<blockquote>
<p>WordPress 3.3 へようこそ<br>最新版への更新ありがとうございます ! WordPress 3.3 を使うとあなたのルックス、性格、そして Web パブリッシングエクスペリエンスが向上します。いえ、実は最後の項目だけですが、まあいいでしょう :)</p>
</blockquote>
<p>サイトを引っ越してPHP のMemory Limit が64MB になったのでプラグインを追加してみた。</p>
<p><img src="/images/wptouch.png" alt="wordpress wptouch"></p>
<ul>
<li><p>WPtouch<br>スマートフォン向けテーマ</p>
</li>
<li><p>NextGEN Gallery<br>画像の一覧やスライドショー表示用のカスタムタグ、ウィジェット<br>作ってみた<a href="http://ktkr3d.site11.com/gallery/">ギャラリーページ</a></p>
</li>
<li><p>WP-PageNavi<br>ページめくりナビゲーション</p>
</li>
<li><p>SyntaxHighlighter Evolved<br>コード表示の整形</p>
</li>
</ul>
]]></content>
      <categories>
        <category>cms</category>
      </categories>
  </entry>
  <entry>
    <title>Nightingale を使ってみた</title>
    <url>/2011/12/20/nightingale/</url>
    <content><![CDATA[<p><img src="/images/nightingale_linux.png" alt="nightingale linux"><br><a href="http://getnightingale.com/">http://getnightingale.com</a><br>Nightingale 1.8.1 が公開されたのでUbuntu 11.10 で使ってみた。アドオンも続々移植されているので期待。Linux x86_64 にもネイティブで対応。OGV 以外のビデオも再生可能。</p>
<ol>
<li><p>実行するには</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./nightingale</span><br></pre></td></tr></table></figure>

</li>
<li><p>日本語表示に切り替えるには<br>[File]-[Language]-[日本語]を選択して再起動</p>
</li>
<li><p>アイコンをアプリケーションメニューに登録するには</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ alacarte</span><br></pre></td></tr></table></figure></li>
</ol>
<p>または、</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">ln</span> -s <span class="variable">$PWD</span>/nightingale /usr/bin/nightingale</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cp</span> <span class="variable">$PWD</span>/chrome/icons/default/default.xpm /usr/share/pixmaps/nightingale.xpm</span><br><span class="line">$ <span class="built_in">sudo</span> vi /usr/share/applications/nightingale.desktop</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>/usr/share/applications/nightingale.desktop</span></figcaption><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=Nightingale</span><br><span class="line">Comment=Nightingale Media Player</span><br><span class="line">Exec=nightingale</span><br><span class="line">Icon=nightingale.xpm</span><br><span class="line">Terminal=0</span><br><span class="line">Type=Application</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Categories=AudioVideo;Player;</span><br></pre></td></tr></table></figure>




<p><a href="http://forum.getnightingale.com/thread-174.html">http://forum.getnightingale.com/thread-174.html</a><br>フォーラム”Songbird Extensions to port?”で、有志の人たちがSongbird 用のアドオンを移植しているみたい。</p>
<ul>
<li><p>試して動いたもの</p>
<ul>
<li><p>MashTape</p>
</li>
<li><p>MediaFlow</p>
</li>
<li><p>MLyrics</p>
</li>
</ul>
</li>
<li><p>試してないもの</p>
<ul>
<li>SHOUTCast Radio</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>application</category>
      </categories>
  </entry>
  <entry>
    <title>Irrlicht 1.8.0 (trunk) をLinux で試してみた</title>
    <url>/2012/01/08/irrlicht-1-8-0_llinux/</url>
    <content><![CDATA[<p><img src="/images/irrlicht_1.8.0_trunk_linux.png" alt="irrlicht 1.8.0 trunk linux xeffects"></p>
<p><a href="http://irrlicht.convextech.ca/">http://irrlicht.convextech.ca/</a></p>
<p>Linux(Ubuntu 11.10 x86_64 + fglrx 8.991 + OpenGL&#x2F;GLSL 3.3 + XEffects 1.3 + OpenAL 1.13 + cAudio 2.1.0 + Bullet 2.7.6 + FreeType 2.4.4)にIrrlicht のtrunk(1.8.0 svn4028)版を入れて実行してみた。changeslog.txt を見てみると、機能追加と多くの不具合修正が含まれているようだ。</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 11.10 + GNOME Shell + Catalyst 12.1</title>
    <url>/2012/01/29/ubuntu-11-10-gnome-shell-catalyst-12-1/</url>
    <content><![CDATA[<p><img src="/images/gnome_shell_catalyst_12.1.png" alt="gnome shell catalyst 12.1 fglrx 8.930 ubuntu 11.10"></p>
<p>AMD Catalyst™ Proprietary Display Driver - Linux x86 &amp; Linux x86_64 の12.1 (fglrx 8.930)がリリースされたのでUbuntu 11.10 x86_64 の環境にインストールしてみた。GNOME Shell での画面のちらつきが無くなり、これでUnity とはサヨナラだ。</p>
<p>既にfglrx やfglrx-updates がインストールされていたらアンインストールしておいて、</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ wget http://www2.ati.com/drivers/linux/amd-driver-installer-12-1-x86.x86_64.run</span><br><span class="line">$ <span class="built_in">chmod</span> 755 amd-driver-installer-12-1-x86.x86_64.run</span><br><span class="line">$ ./amd-driver-installer-12-1-x86.x86_64.run --buildpkg Ubuntu/oneiric</span><br><span class="line">$ <span class="built_in">sudo</span> dpkg -i fglrx_8.930-0ubuntu1_amd64.deb fglrx-amdcccle_8.930-0ubuntu1_amd64.deb fglrx-dev_8.930-0ubuntu1_amd64.deb</span><br></pre></td></tr></table></figure>

<p>GNOME Shell に切り替えてAuto Hide Top Panel 拡張を入れれば、トップパネルを隠せる。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 12.04 Precise Pangolin alpha 2 + GNOME Shell</title>
    <url>/2012/02/04/ubuntu-12-04-precise-pangolin-alpha-2-gnome-shell/</url>
    <content><![CDATA[<p><img src="/images/ubuntu12.04.png" alt="ubuntu 12.04 precise pangolin apha 2 gnome shell"></p>
<p><a href="http://cdimage.ubuntu.com/releases/12.04/alpha-2/">http://cdimage.ubuntu.com/releases/12.04/alpha-2/</a></p>
<p>Ubuntu 12.04 Precise Pangolin のアルファ2 がリリースされたので、インストールしてみた。Linux カーネル は3.2。GNOME Shell も入れてみた。インストーラや一部のパッケージの動作がおかしいけれど、普通に使えそうな感じ。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 11.10 + Kinect + Irrlicht</title>
    <url>/2012/02/05/ubuntu-11-10-kinect-irrlicht/</url>
    <content><![CDATA[<p><img src="/images/irrlicht_sinbad_kinect.png" alt="irrlicht ubuntu 11.10 kinect NITE sinbad"></p>
<p><a href="http://irrlicht.sourceforge.net/forum/viewtopic.php?f=9&t;=45730">http://irrlicht.sourceforge.net/forum/viewtopic.php?f=9&t;=45730</a></p>
<p>Ubuntu 11.10 x86_64 にKinect の環境を構築してIrrlicht と連動させてみた。モデルはOrge3D のキャラクターSinbad(Sinbad.mesh)を使おうと思うので、Kinect.cpp とCPlayer.cpp の中のボーン名を変更しておく。ogremesh のボーン名やモーションは取り込めたけど、テクスチャがうまく貼れてないのはなんでだろう。キャリブレーションに成功すると以下のログが表示される。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">New User 1</span><br><span class="line">Calibration started for user 1</span><br><span class="line">Calibration complete, start tracking user 1</span><br></pre></td></tr></table></figure>

<p>キャリブレーション後に動きが連動しないのはb3d, ms3d, X 形式でないからかな。</p>
<p>Kinect の環境構築手順は<a href="http://ktkr3d.site11.com/2010/12/24/linux_kinect/">Ubuntu 10.10 の時</a>と基本的に同じだけど、最近のLinux ではカーネルドライバを無効にしないといけないみたい。</p>
<h3 id="Linux-Kernel-のKinect-ドライバの無効化"><a href="#Linux-Kernel-のKinect-ドライバの無効化" class="headerlink" title="Linux Kernel のKinect ドライバの無効化"></a>Linux Kernel のKinect ドライバの無効化</h3><p>&#x2F;lib&#x2F;modules&#x2F;3.0.0-16-generic&#x2F;kernel&#x2F;drivers&#x2F;media&#x2F;video&#x2F;gspca&#x2F;gspca_kinect.ko<br>まず、Linux Kernel 3.0 からKinect のカーネルドライバが組み込まれているので、あらかじめ無効にしておく。rmmod gspca_kinect かgspca_kinect.ko をリネームする。</p>
<h3 id="OpenNI-のインストール"><a href="#OpenNI-のインストール" class="headerlink" title="OpenNI のインストール"></a>OpenNI のインストール</h3><ol>
<li><p><a href="https://github.com/OpenNI/OpenNI/tree/unstable">https://github.com/OpenNI/OpenNI/tree/unstable</a> からダウンロードして展開</p>
</li>
<li><p>cd Platform&#x2F;Linux&#x2F;Build</p>
</li>
<li><p>make<br>ここで CreateRedist&#x2F;RedistMaker に実行パーミッションを与えておく</p>
</li>
<li><p>sudo make install</p>
</li>
<li><p>Redist&#x2F;*&#x2F;install.sh を実行する</p>
</li>
</ol>
<h3 id="ドライバ-avin2-のインストール"><a href="#ドライバ-avin2-のインストール" class="headerlink" title="ドライバ(avin2)のインストール"></a>ドライバ(avin2)のインストール</h3><ol>
<li><p><a href="https://github.com/avin2/SensorKinect">https://github.com/avin2/SensorKinect</a> からダウンロードして展開</p>
</li>
<li><p>cd Platform&#x2F;Linux&#x2F;Build</p>
</li>
<li><p>make<br>ここで CreateRedist&#x2F;RedistMaker に実行パーミッションを与えておく</p>
</li>
<li><p>sudo make install</p>
</li>
<li><p>Redist&#x2F;*&#x2F;install.sh を実行する</p>
</li>
</ol>
<h3 id="NITE-のインストール"><a href="#NITE-のインストール" class="headerlink" title="NITE のインストール"></a>NITE のインストール</h3><ol>
<li><p><a href="http://www.openni.org/Downloads/OpenNIModules.aspx">http://www.openni.org/Downloads/OpenNIModules.aspx</a> からダウンロードして展開（Ubuntu 10.10 用でも動く）</p>
</li>
<li><p>sudo .&#x2F;install.sh</p>
</li>
</ol>
<h3 id="サンプルを実行して動作確認"><a href="#サンプルを実行して動作確認" class="headerlink" title="サンプルを実行して動作確認"></a>サンプルを実行して動作確認</h3><ul>
<li><p>OpenNI のPlatform&#x2F;Linux&#x2F;Bin&#x2F; で、.&#x2F;NiViewer を実行</p>
</li>
<li><p>NITE のSamples&#x2F;Bin&#x2F;x64-Release で、.&#x2F;Sample-Players を実行</p>
</li>
</ul>
]]></content>
      <categories>
        <category>kinect</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 11.10 + blender 2.61</title>
    <url>/2012/02/06/ubuntu-11-10-blender-2-61/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_11.10_blender_2.61.png" alt="ubuntu 11.10 blender 2.61"></p>
<p><a href="https://launchpad.net/~irie/+archive/blender">https://launchpad.net/~irie/+archive/blender</a></p>
<p>Ubuntu 11.10 x86_64 にblender 2.61 を入れてみた。<br>blender 2.6 での日本語化は、</p>
<ol>
<li><p>「File」-「User Preferences」メニューで「System」タブを選択 </p>
</li>
<li><p>「International Fonts」をチェック</p>
</li>
<li><p>「Language」で「Japanese(日本語)」を選択</p>
</li>
<li><p>「Interface」と「Tooltip」をチェック</p>
</li>
<li><p>「デフォルトとして保存」を押す</p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 11.10 + Ogre 1.7.3 + Kinect</title>
    <url>/2012/02/10/ubuntu-11-10-ogre-1-7-3-kinect/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_ogre_kinect.png" alt="ubuntu ogre kinect sampleappsinbad openni nite "></p>
<p><a href="http://ktkr3d.site11.com/2010/12/24/linux_kinect/">一年くらい前にポーティング</a>したOpenNI&#x2F;NITE のデモSampleAppSinbad をUbuntu 11.10 x86_64 の環境で動かしてみた。</p>
<p>Ubuntu 11.10 x86_64 (Linux kernel 3.0.0-16)<br>OpenNI&#x2F;NITE 1.5.2<br>avin2-sensor 5.1.0.25<br>Ogre3d 1.7.3<br>gcc&#x2F;g++ 4.6.1<br>codeblocks 10.05</p>
<p>ソースコードとロードモジュール: <a href="https://github.com/ktkr3d/sample-app-sinbad">https://github.com/ktkr3d/sample-app-sinbad</a></p>
<p>Sample_Character.so のビルド時に以下のエラーがでるようになったけれど、</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">コンパイル中: src/CharacterSample.cpp</span><br><span class="line">リンク中 動的ライブラリ: ../bin/Sample_Character.so</span><br><span class="line">/usr/bin/ld: obj/Release/src/CharacterSample.o: relocation R_X86_64_32 against `.rodata.str1.1&#x27; can not be used when making a shared object; recompile with -fPIC</span><br><span class="line">obj/Release/src/CharacterSample.o: could not read symbols: Bad value</span><br><span class="line">collect2: ld はステータス 1 で終了しました</span><br><span class="line">プロセスはステータス 1 で終了しました (0 分 10 秒)</span><br><span class="line">0 個のエラー、 0 個の警告</span><br></pre></td></tr></table></figure>

<p>-fPIC オプションをつけたらビルドできた。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">コンパイル中: src/CharacterSample.cpp</span><br><span class="line">リンク中 動的ライブラリ: ../bin/Sample_Character.so</span><br><span class="line">出力サイズは 232.84 KB</span><br><span class="line">プロセスはステータス 0 で終了しました (0 分 5 秒)</span><br><span class="line">0 個のエラー、 0 個の警告</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>kinect</category>
      </categories>
  </entry>
  <entry>
    <title>Irrlicht  + Lens Flare Effect</title>
    <url>/2012/02/12/irrlicht-lensflare-effect/</url>
    <content><![CDATA[<p><img src="/images/irrlicht_lensflare.png" alt="irrlicht lens flare"></p>
<p><a href="http://irrlicht.sourceforge.net/forum/viewtopic.php?f=9&t;=44728">http://irrlicht.sourceforge.net/forum/viewtopic.php?f=9&t;=44728</a></p>
<p>Irrlicht フォーラムにレンズフレアのサンプルがあったのでLinux で試してみた。</p>
<p>Irrlicht 1.8.0<br>gcc&#x2F;g++ 4.6.1</p>
<p>一点修正。</p>
<figure class="highlight cpp"><figcaption><span>LensFlareSceneNode.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// constructor</span></span><br><span class="line"><span class="built_in">SFlareData</span>(E_FLARE_TYPE type, <span class="type">float</span> position, <span class="type">float</span> scale, video::SColor color)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Inspiron duo + Ubuntu 11.10 + Crystal HD</title>
    <url>/2012/02/19/inspiron-duo-ubuntu-11-10-crystal-hd/</url>
    <content><![CDATA[<p>Inspiron duo 上のUbuntu 11.10 x86_64 にBroadcom Crystal HD Decoder Driver を組み込んでみた。</p>
<figure class="highlight sh"><figcaption><span>必要なパッケージのインストール</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install build-essential g++ automake autoconf libtool libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>ソースの取得</span></figcaption><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://linuxtv.org/jarod/crystalhd.git</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>ドライバーのインストール</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> driver/linux/</span><br><span class="line">$ autoconf</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<p>コンパイル時に警告がでるので、とりあえず-w をつけた。</p>
<figure class="highlight sh"><figcaption><span>ライブラリのインストール</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> linux_lib/libcrystalhd/</span><br><span class="line">$ make</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>gstreamer プラグインのインストール</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> filters/gst/gst-plugin/</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ make</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>ファームウェアのコピー</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cp</span> firmware/fwbin/70015/* /lib/firmware/</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cp</span> firmware/fwbin/70012/* /lib/firmware/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Inspiron duo + android-x86 4.0 RC1</title>
    <url>/2012/02/28/inspiron-duo-android-x86-4-0-rc1/</url>
    <content><![CDATA[<p><img src="/images/android-x86_version.png" alt="android-x86 4.0 rc1 version"></p>
<p><a href="http://www.android-x86.org/releases/releasenote-4-0-rc1">http://www.android-x86.org/releases/releasenote-4-0-rc1</a></p>
<p>Android-x86 4.0 RC1 がリリースされたので試してみた。tegav2 のビルドをInspiron duo 実機で動かしてみた。</p>
<p><img src="/images/android-x86_youtube.png" alt="android-x86 4.0 rc1 yout ube"></p>
<p>Youtube の動画一覧画面はタッチスクリーンでヌルヌルスライドする。</p>
<p><img src="/images/android-x86_uname.png" alt="android-x86 40 rc1 terminal uname"></p>
<p>ターミナルの打鍵時にカチカチなる。</p>
<h3 id="動いたこと"><a href="#動いたこと" class="headerlink" title="動いたこと"></a>動いたこと</h3><ul>
<li><p>Win7&#x2F;Ubuntu&#x2F;Android-x86&#x2F;某OS のマルチブート（内蔵HDDのGPT環境）</p>
</li>
<li><p>タッチスクリーン（キャリブレーションOK）</p>
</li>
<li><p>Wi-Fi</p>
</li>
<li><p>Android Market</p>
</li>
<li><p>日本語入力</p>
</li>
<li><p>マウスカーソル表示</p>
</li>
<li><p>ターミナル</p>
</li>
<li><p>Youtube</p>
</li>
<li><p>Mobo Player</p>
</li>
<li><p>2chMate</p>
</li>
<li><p>Songbird</p>
</li>
<li><p>Seesmic</p>
</li>
<li><p>Google map</p>
</li>
</ul>
<h3 id="設定が必要そうなこと"><a href="#設定が必要そうなこと" class="headerlink" title="設定が必要そうなこと"></a>設定が必要そうなこと</h3><ul>
<li><p>イヤフォンを挿してもスピーカーから音声が出力されてしまう(ビルドパラメタかカーネルパラメタでなんとかなりそう)</p>
</li>
<li><p>キーボード入力(ビルドパラメタかカーネルパラメタでなんとかなりそう)</p>
</li>
</ul>
<p>sparta ビルドが復活すればInspiron duo での完成度があがると思う。</p>
<p><strong>Edit1:</strong><br><a href="http://groups.google.com/group/android-x86/browse_thread/thread/79d37d425a950d93?hl=en">http://groups.google.com/group/android-x86/browse_thread/thread/79d37d425a950d93?hl=en</a><br>Esc キー, スーパーキー(Windows)等は有効なので、<br>&#x2F;system&#x2F;usr&#x2F;keylayout&#x2F;AT_Translate*<br>に設定を追加すればなんとかできそう。</p>
<p>スピーカーについては、以前からsnd-hda-intel の設定に依存しているだけなので解決できそう。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>My Android-x86 4.0 RC1 for Inspiron duo</title>
    <url>/2012/03/02/my-android-x86-4-0-rc1-for-inspiron-duo/</url>
    <content><![CDATA[<p>Indpiron duo でandroid-x86 4.0 RC1 のtegav2 ビルドがほぼ動くので微調整してみよう。</p>
<ol>
<li>repo でandroid-x86 のソースコードを拾ってきて展開する。</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ repo init -u http://git.android-x86.org/manifest -b ics-x86</span><br><span class="line">$ repo <span class="built_in">sync</span></span><br></pre></td></tr></table></figure>




<ol start="2">
<li>キーボードの調整<br>tegav2 ビルドではキーレイアウトは以下のようになっている。</li>
</ol>
<figure class="highlight text"><figcaption><span>./device/tegatech/tegav2/AT_Translated_Set_2_keyboard.kl</span></figcaption><table><tr><td class="code"><pre><span class="line">key 1     HOME          WAKE_DROPPED</span><br><span class="line">key 114   VOLUME_DOWN</span><br><span class="line">key 115   VOLUME_UP</span><br><span class="line">key 125   APP_SWITCH</span><br><span class="line">key 127   ESCAPE        WAKE_DROPPED</span><br></pre></td></tr></table></figure>

<p>それ以外のキーも動作するように、このファイルをコピーしないようにする。</p>
<figure class="highlight text"><figcaption><span>./device/tegatech/tegav2/tegav2.mk</span></figcaption><table><tr><td class="code"><pre><span class="line">PRODUCT_COPY_FILES := \</span><br><span class="line">    $(LOCAL_PATH)/vold.fstab:system/etc/vold.fstab \</span><br><span class="line"></span><br><span class="line">#    $(LOCAL_PATH)/AT_Translated_Set_2_keyboard.kl:system/usr/keylayout/AT_Translated_Set_2_keyboard.kl \</span><br></pre></td></tr></table></figure>




<ol start="3">
<li>SDCARD の認識<br>tegav2 ビルドではfstab の設定が以下のようになっている。</li>
</ol>
<figure class="highlight text"><figcaption><span>./device/tegatech/tegav2/vold.fstab</span></figcaption><table><tr><td class="code"><pre><span class="line">dev_mount sdcard  /mnt/MicroSD auto /devices/pci0000:00/0000:00:1d.7/usb1/1-5/1-5:1.0</span><br><span class="line">dev_mount usb     /mnt/USB     auto</span><br></pre></td></tr></table></figure>

<p>デバイスの指定を外す。</p>
<figure class="highlight text"><figcaption><span>./device/tegatech/tegav2/vold.fstab</span></figcaption><table><tr><td class="code"><pre><span class="line">dev_mount sdcard  /mnt/MicroSD auto</span><br><span class="line">dev_mount usb     /mnt/USB     auto</span><br></pre></td></tr></table></figure>

<p>または、このファイルもコピーしないようにする。</p>
<figure class="highlight text"><figcaption><span>./device/tegatech/tegav2/tegav2.mk</span></figcaption><table><tr><td class="code"><pre><span class="line">PRODUCT_COPY_FILES := \</span><br><span class="line"></span><br><span class="line">#    $(LOCAL_PATH)/vold.fstab:system/etc/vold.fstab \</span><br><span class="line">#    $(LOCAL_PATH)/AT_Translated_Set_2_keyboard.kl:system/usr/keylayout/AT_Translated_Set_2_keyboard.kl \</span><br></pre></td></tr></table></figure>




<ol start="4">
<li>スピーカーの調整<br>ヘッドフォンを繋いでもPC のスピーカーがミュートしない。</li>
</ol>
<figure class="highlight text"><figcaption><span>./device/tegatech/tegav2/tegav2_defconfig</span></figcaption><table><tr><td class="code"><pre><span class="line">CONFIG_SND_HDA_INTEL=m</span><br><span class="line">CONFIG_SND_HDA_HWDEP=y</span><br><span class="line">CONFIG_SND_HDA_RECONFIG=y</span><br><span class="line"># CONFIG_SND_HDA_INPUT_BEEP is not set</span><br><span class="line"># CONFIG_SND_HDA_INPUT_JACK=y</span><br><span class="line"># CONFIG_SND_HDA_PATCH_LOADER=y</span><br><span class="line">CONFIG_SND_HDA_CODEC_REALTEK=y</span><br><span class="line">CONFIG_SND_HDA_CODEC_ANALOG is not set</span><br><span class="line">CONFIG_SND_HDA_CODEC_SIGMATEL=y</span><br><span class="line">CONFIG_SND_HDA_CODEC_VIA=y</span><br><span class="line">CONFIG_SND_HDA_CODEC_HDMI=y</span><br><span class="line">CONFIG_SND_HDA_CODEC_CIRRUS=y</span><br><span class="line">CONFIG_SND_HDA_CODEC_CONEXANT=y</span><br><span class="line">CONFIG_SND_HDA_CODEC_CA0110=y</span><br><span class="line">CONFIG_SND_HDA_CODEC_CMEDIA=y</span><br><span class="line">CONFIG_SND_HDA_CODEC_SI3054=y</span><br><span class="line"># CONFIG_SND_HDA_GENERIC is not set</span><br><span class="line">CONFIG_SND_HDA_GENERIC=y</span><br><span class="line">CONFIG_SND_HDA_POWER_SAVE=y</span><br><span class="line">CONFIG_SND_HDA_POWER_SAVE_DEFAULT=3</span><br></pre></td></tr></table></figure>

<p>とりあえず過去のsparta_defconfig を参考にsnd_hda 関連を書き換える。</p>
<ol start="5">
<li>ISO イメージの作成<br>ファイルの編集が済んだらビルド。メモリが少ないので多重度は1に。</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ make -j1 iso_img TARGET_PRODUCT=tegav2</span><br><span class="line">$</span><br></pre></td></tr></table></figure>





<p>キーボード入力ができるようになったけれど、仮想キーボードが表示されなくなったので、キーマッピングを追加するようにした方がよさそう。また、スピーカーの音は改善されなく、初期インストールアプリも減ってしまったので、見直しが必要だ。<br>tegav2.mk を見て、電源ボタンダブルクリックでシャットダウンする設定になっているのに気がついた。</p>
<p>EDIT1:<br>他のLinux と同様にオプションを追加してみよう。</p>
<figure class="highlight text"><figcaption><span>./device/tegatech/tegav2/tegav2_info</span></figcaption><table><tr><td class="code"><pre><span class="line">SNDDEV=&quot;snd-hda-intel model=ideapad&quot; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Nightingale 1.11.0</title>
    <url>/2012/03/06/nightingale-1-11-0/</url>
    <content><![CDATA[<p><img src="/images/nightingale_1.11.0.png" alt="nightingale 1.11.0"></p>
<p><a href="http://blog.getnightingale.com/2012/03/05/nightingale-1-11-0-our-first-official-release/">http://blog.getnightingale.com/2012/03/05/nightingale-1-11-0-our-first-official-release/</a></p>
<p>Nightingale 1.11.0 がリリースされたのでUbuntu 11.10 x86_64 で使ってみた。</p>
<ul>
<li><p>Shoutcast アドオンが使える</p>
</li>
<li><p>Songbird のフェザーPurple Rain に切り替えられる<br>「表示」-「フェザー」-「Purple Rain」を選択する。</p>
</li>
<li><p>マスストレージデバイス（Androidとか） と同期できる</p>
</li>
<li><p>歌詞を表示できる</p>
</li>
<li><p>動画を再生できる（プレビュー版より不安定かも）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>application</category>
      </categories>
  </entry>
  <entry>
    <title>Inspiron duo + android-x86 4.0 で仮想+物理キーボード入力</title>
    <url>/2012/03/07/android-x86-tegav2-physical-keyboard/</url>
    <content><![CDATA[<p><img src="/images/android-x86_4.0_virtual_physical_keyboard.png" alt="android-x86 4.0 virtual physical keyboard inspiron duo"></p>
<p>Inspiron duo 上のandroid-x86 4.0 tegav2 ビルドを物理キーボードと仮想キーボードで使えるようにしてみた。</p>
<p>.&#x2F;device&#x2F;tegatech&#x2F;tegav2&#x2F;AT_Translated_Set_2_keyboard.kl にキーレイアウトを追加すると、</p>
<ul>
<li><p>仮想キーボード入力中に物理キーボード入力できる。</p>
</li>
<li><p>タスクトレイのキーボード設定から、仮想キーボードを隠して物理キーボード入力に切り替えることができる。</p>
</li>
</ul>
<span id="more"></span>

<figure class="highlight text"><figcaption><span>./device/tegatech/tegav2/AT_Translated_Set_2_keyboard.kl</span></figcaption><table><tr><td class="code"><pre><span class="line"># Copyright (C) 2012 The Android-x86 Open Source Project</span><br><span class="line">#</span><br><span class="line"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"># you may not use this file except in compliance with the License.</span><br><span class="line"># You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">key 1     HOME          WAKE_DROPPED</span><br><span class="line">key 114   VOLUME_DOWN</span><br><span class="line">key 115   VOLUME_UP</span><br><span class="line">key 125   APP_SWITCH</span><br><span class="line">key 127   ESCAPE        WAKE_DROPPED</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line"></span><br><span class="line">#key 1     BACK              WAKE_DROPPED</span><br><span class="line">key 2     1</span><br><span class="line">key 3     2</span><br><span class="line">key 4     3</span><br><span class="line">key 5     4</span><br><span class="line">key 6     5</span><br><span class="line">key 7     6</span><br><span class="line">key 8     7</span><br><span class="line">key 9     8</span><br><span class="line">key 10    9</span><br><span class="line">key 11    0</span><br><span class="line">key 12    MINUS</span><br><span class="line">key 13    EQUALS</span><br><span class="line">key 14    DEL</span><br><span class="line">key 15    TAB</span><br><span class="line">key 16    Q</span><br><span class="line">key 17    W</span><br><span class="line">key 18    E</span><br><span class="line">key 19    R</span><br><span class="line">key 20    T</span><br><span class="line">key 21    Y</span><br><span class="line">key 22    U</span><br><span class="line">key 23    I</span><br><span class="line">key 24    O</span><br><span class="line">key 25    P</span><br><span class="line">key 26    LEFT_BRACKET</span><br><span class="line">key 27    RIGHT_BRACKET</span><br><span class="line">key 28    ENTER</span><br><span class="line">key 30    A</span><br><span class="line">key 31    S</span><br><span class="line">key 32    D</span><br><span class="line">key 33    F</span><br><span class="line">key 34    G</span><br><span class="line">key 35    H</span><br><span class="line">key 36    J</span><br><span class="line">key 37    K</span><br><span class="line">key 38    L</span><br><span class="line">key 39    SEMICOLON</span><br><span class="line">key 40    APOSTROPHE</span><br><span class="line">key 42    SHIFT_LEFT</span><br><span class="line">key 43    BACKSLASH</span><br><span class="line">key 44    Z</span><br><span class="line">key 45    X</span><br><span class="line">key 46    C</span><br><span class="line">key 47    V</span><br><span class="line">key 48    B</span><br><span class="line">key 49    N</span><br><span class="line">key 50    M</span><br><span class="line">key 51    COMMA</span><br><span class="line">key 52    PERIOD</span><br><span class="line">key 53    SLASH</span><br><span class="line">key 56    ALT_LEFT</span><br><span class="line">key 57    SPACE</span><br><span class="line">key 60    SOFT_RIGHT        WAKE</span><br><span class="line">key 61    CALL              WAKE_DROPPED</span><br><span class="line">key 62    ENDCALL           WAKE_DROPPED</span><br><span class="line">key 64    ENDCALL           WAKE_DROPPED</span><br><span class="line">key 103   DPAD_UP           WAKE_DROPPED</span><br><span class="line">key 105   DPAD_LEFT         WAKE_DROPPED</span><br><span class="line">key 106   DPAD_RIGHT        WAKE_DROPPED</span><br><span class="line">key 107   ENDCALL           WAKE_DROPPED</span><br><span class="line">key 108   DPAD_DOWN         WAKE_DROPPED</span><br><span class="line">key 113   VOLUME_MUTE</span><br><span class="line">#key 114   VOLUME_DOWN</span><br><span class="line">#key 115   VOLUME_UP</span><br><span class="line">key 116   POWER             WAKE</span><br><span class="line">#key 125   HOME              WAKE</span><br><span class="line">#key 127   MENU         WAKE_DROPPED</span><br><span class="line">key 139   MENU         WAKE_DROPPED</span><br><span class="line">key 150   EXPLORER</span><br><span class="line">key 155   ENVELOPE        </span><br><span class="line">key 211   FOCUS</span><br><span class="line">key 212   CAMERA</span><br><span class="line">key 215   AT</span><br><span class="line">key 221   DPAD_CENTER       WAKE_DROPPED</span><br><span class="line">key 227   STAR</span><br><span class="line">key 228   POUND</span><br><span class="line">key 230   SOFT_RIGHT        WAKE</span><br><span class="line">key 231   CALL              WAKE_DROPPED</span><br><span class="line">key 399   GRAVE</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Kubuntu-Active 12.04</title>
    <url>/2012/03/25/kubuntu-active-12-04/</url>
    <content><![CDATA[<p><img src="/images/kubuntu-active.png" alt="kubuntu active 12.04"></p>
<p><a href="http://cdimage.ubuntu.com/kubuntu-active/daily-live/current/">http://cdimage.ubuntu.com/kubuntu-active/daily-live/current/</a></p>
<p>KDE のPlasma Active がKubuntu ベースで公開されたのでインストールしてみた。<a href="http://ktkr3d.site11.com/2011/04/14/plasma-active-contour/">一年くらい前にOpenSUSE ベースのものを試した時</a>は使い方がよくわからなかったけど、何となく使い方がわかってきた。ウィジェットやショートカットの置き方とか、ワークスペースの作り方とか。</p>
<p><img src="/images/kubuntu-active_apps.png" alt="kubuntu active apps"></p>
<p>上部のパネルは二段階に展開できて、実行中のタスクとインストールされているアプリケーションの一覧を表示できる。画面キャプチャしたら、実行中のタスクのサムネイル表示がアイコン表示になったのはどうしてだろう？</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Remmina を使ってみた</title>
    <url>/2012/04/03/remmina/</url>
    <content><![CDATA[<p><img src="/images/remmina_preference.png" alt="remmina preference"></p>
<p>Ubuntu 12.04 のデフォルトのリモートデスクトップビューアRemmina を使ってみた。<br>Ubuntu 11.10 のデフォルトのリモートデスクトップビューアだったVinagre よりも操作性が良くて、パフォーマンスも良い気がする。もちろんUbuntu 11.10 でも利用できる。</p>
<p><img src="/images/remmina_plugins.png" alt="remmina plugins"></p>
<p>標準セットでRDP&#x2F;VNC&#x2F;SSH のプロトコルをサポートしている。また、プラグインで拡張できるようになっていて、他にも以下のパッケージが用意されていた。</p>
<ul>
<li><p>remmina-plugin-telepathy</p>
</li>
<li><p>remmina-plugin-gnome</p>
</li>
<li><p>remmina-plugin-xdmcp</p>
</li>
<li><p>remmina-plugin-nx</p>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME Shell 3.4 + Autohide Top Panel extension</title>
    <url>/2012/04/19/gnome-shell-3-4-autohide-top-panel-extension/</url>
    <content><![CDATA[<p><img src="/images/autohidetoppanel.png" alt="autohide top panel gnome shell extension"></p>
<p>ここ数日のアップデートでUbuntu 12.04 のGNOME Shell が安定しだしたので、個人的に最も重要なAutohide Top Panel extension を動くようにしてみた。手順は3.2 用のextension を導入して、対応バージョン情報を変更するだけ。</p>
<figure class="highlight text"><figcaption><span>/usr/share/gnome-shell/extensions/autohidetopbar2@werewolves.us/metadata.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">   &quot;shell-version&quot;: [ &quot;3.4&quot;, &quot;3.2.0&quot;, &quot;3.2&quot;, &quot;3.2.1&quot; ], </span><br><span class="line">   &quot;uuid&quot;: &quot;autohidetopbar2@werewolves.us&quot;,</span><br><span class="line">   &quot;name&quot;: &quot;Auto Hide Top Panel&quot;,</span><br><span class="line">   &quot;description&quot;: &quot;Auto hide the top panel&quot;,</span><br><span class="line">   &quot;url&quot;: &quot;http://fpmurphy.com/gnome-shell-extensions&quot;,</span><br><span class="line">   &quot;original-authors&quot;: [ &quot;Finnbarr P. Murphy&quot;, &quot;Kevin R. Kane&quot; ],</span><br><span class="line">   &quot;locale&quot;: &quot;locale&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上記の修正をした後、セッションを再起動して、拡張を有効にする。パネルをダブルクリックすると、自動的に隠すか、常時表示するかを切り替えられる。後はConky が安定したらUbuntu 12.04 + GNOME Shell に移行してもよさそう。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 12.04 + Conky</title>
    <url>/2012/04/22/ubuntu-12-04-conky/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_12.04_conky.png" alt="ubuntu 12.04 conky"></p>
<p>Ubuntu 12.04 のConky 1.8.1 の環境で、自前の.conkyrc の文字が表示されなくなったので、暫定対策してみた。試してみたところ、Droid Sans が認識されなくなっているみたいなので、省略してみた。fonts-droid はインストール済みでフォント名も変わってないと思うのだけど。</p>
<figure class="highlight text"><figcaption><span>~/.conkyrc</span></figcaption><table><tr><td class="code"><pre><span class="line">#    xftfont Droid Sans:size=10</span><br><span class="line">    xftfont :size=10</span><br></pre></td></tr></table></figure>

<p>Ubuntu 11.10 + Conky 1.8.1 では正常に表示されるし、DejaVu Sans はうまく処理されているようなので、Conky 自体の問題ではないかもしれない。ConkyForecast やパブリックIP アドレス取得スクリプト等の通信処理も若干不安定みたいだけど、Ubuntu 12.04 リリース時には安定していたらいいな。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu GNOME Shell Remix 12.04</title>
    <url>/2012/05/01/ubuntu-gnome-shell-remix-12-04/</url>
    <content><![CDATA[<p><img src="/images/ubnutu_gnome_shell_remix_12.04.png" alt="ubnutu gnome shell remix 12.04"></p>
<p><a href="http://ubuntu-gs-remix.sourceforge.net/p/download/">http://ubuntu-gs-remix.sourceforge.net/p/download/</a></p>
<p>Ubuntu GNOME Shell Remix 12.04 をクリーンインストールしてみた。<br>Unity デスクトップ環境や不要な設定(オーバーレイスクロールバーとか)が省略できてすっきり。<br>いつものようにトップパネルを隠して、Avant Window Navigator とConky を設定してみた。</p>
<p>オリジナルのUbuntu と比べると、システム設定画面に次の二つのアイコンが無いみたい。</p>
<ul>
<li><p>ユーザー向け - プライバシー</p>
</li>
<li><p>システム - 管理サービス</p>
</li>
</ul>
<p>よく見ると、各カテゴリのアイキャッチアイコンが利用不可状態になっている。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Irrlicht + Chopper Scene Node &amp; Control</title>
    <url>/2012/05/02/irrlicht-chopper-scene-node-control/</url>
    <content><![CDATA[<p><img src="/images/irrlicht_chopper.png" alt="irrlicht chopper scene node simple chopper control"></p>
<p><a href="http://irrlicht.sourceforge.net/forum/viewtopic.php?f=9&t;=46226">http://irrlicht.sourceforge.net/forum/viewtopic.php?f=9&t;=46226</a><br><a href="http://irrlicht.sourceforge.net/forum/viewtopic.php?f=9&t;=46250">http://irrlicht.sourceforge.net/forum/viewtopic.php?f=9&t;=46250</a></p>
<p>Irrlicht Forum にヘリコプターを操縦するデモがあったので、動かしてみた。ヘリコプターのモデルはBell UH-1 Iroquois (<a href="http://en.wikipedia.org/wiki/Bell_UH-1_Iroquois)%E3%81%A8%E3%81%84%E3%81%86%E6%A9%9F%E4%BD%93%E3%81%BF%E3%81%9F%E3%81%84%E3%80%82%E6%85%A3%E6%80%A7%E3%81%8C%E3%81%82%E3%81%A3%E3%81%A6%E3%80%81%E3%82%86%E3%81%A3%E3%81%9F%E3%82%8A%E3%81%A8%E5%8B%95%E3%81%8D%E5%87%BA%E3%81%99%E3%80%82%E8%B5%A4%E3%81%84%E7%B7%9A%E3%81%8C%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E7%94%A8%E3%81%AE%E5%9E%82%E7%9B%B4%E7%B7%9A%E3%80%82%E3%82%AD%E3%83%BC%E6%93%8D%E4%BD%9C%E3%81%AF%E4%BB%A5%E4%B8%8B%E3%80%82">http://en.wikipedia.org/wiki/Bell_UH-1_Iroquois)という機体みたい。慣性があって、ゆったりと動き出す。赤い線がデバッグ用の垂直線。キー操作は以下。</a><br>F1〜F10: カメラの切り替え<br>W&#x2F;S: pitchDown&#x2F;pitchUp<br>H: hover<br>Q&#x2F;E: rollLeft&#x2F;rollRight<br>R: resetRoll &amp; resetPitch<br>A&#x2F;D: turnLeft&#x2F;turnRight<br>Z: brake<br>X: stop<br>C: throttle</p>
<p>Blender 2.4 を使って、ヘリコプターのモデルを.ac 形式から.obj 形式に変換した。</p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Webilder - Wallpaper Changer</title>
    <url>/2012/05/03/webilder-wallpaper-changer/</url>
    <content><![CDATA[<p><img src="/images/webilder.png" alt="weblider  wallpaper changer"><br><a href="http://www.webilder.org/">http://www.webilder.org/</a><br>壁紙を自動で変更してくれるWebilder を使ってみた。あらかじめタグを指定しておくと、Flickr から関連する壁紙を自動的にダウンロードして、指定した時間間隔で切り替えてくれる。パネルに常駐したアイコンから手動でのダウンロードや壁紙切り替えもできる。<br>今回はOneiric 用の.deb を使ってインストールしてみた。Ubuntu 12.04 + GNOME Shell 3.4 の環境でダウンロード中にエラーが発生するけれど、ダウンロードは成功しているみたいなので気にしないでおこう。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 12.04 + Conky 1.9.0</title>
    <url>/2012/05/05/ubuntu-12-04-conky-1-9-0/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_12.04_conky_1.9.0.png" alt="ubuntu 12.04 conky 1.9.0"></p>
<p><a href="http://conky.sourceforge.net/">http://conky.sourceforge.net/</a></p>
<p>Ubuntu 12.04 のConky 1.8.1 の挙動が怪しい(アップタイムより大きい更新間隔で実行するexeci 等が原因でcore dump する過去の不具合に似ている)のでconky 1.9.0 のソースを取得してインストールしてみた。configure するとインストール済みの開発用ライブラリに応じて使える機能が追加されるので、適宜、開発用ライブラリを追加しておく。configure の際には、画像を表示するので、–enable-imlib2 もつけてみた。デフォルトでは、&#x2F;usr&#x2F;local&#x2F;bin&#x2F;conky にインストールされる。これでエラーが出なくなってすっきり。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./configure --enable-imlib2</span><br><span class="line">$ make</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<p>また、conkyForecast は以下の手順で設定した。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:conky-companions/ppa</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install conkyforecast</span><br><span class="line">$ <span class="built_in">cp</span> /usr/share/conkyforecast/conkyForecast.config ~/.conkyForecast.config</span><br></pre></td></tr></table></figure>

<p>xoap.weather.com ではなく、xml.weather.com から取得。地域は東京(JAXX0085)を設定。</p>
<figure class="highlight text"><figcaption><span>~/.conkyForecast.config</span></figcaption><table><tr><td class="code"><pre><span class="line">#=============================================#</span><br><span class="line"># EXPERT SETTINGS, NOT REQUIRED TO BE ALTERED #</span><br><span class="line">#=============================================#</span><br><span class="line">#BASE_XOAP_URL = http://xoap.weather.com/weather/local/&lt;LOCATION&gt;?cc=*&amp;dayf=5&amp;link=xoap&amp;prod=xoap&amp;par=&lt;XOAP_PARTNER_ID&gt;&amp;key=&lt;XOAP_LICENCE_KEY&gt;&amp;unit=m</span><br><span class="line">BASE_XOAP_URL = http://xml.weather.com/weather/local/&lt;LOCATION&gt;?cc=*&amp;dayf=10&amp;link=xoap&amp;prod=xoap&amp;par=&lt;XOAP_PARTNER_ID&gt;&amp;key=&lt;XOAP_LICENCE_KEY&gt;&amp;unit=m</span><br><span class="line">MAXIMUM_DAYS_FORECAST = 5</span><br><span class="line"></span><br><span class="line">#===============================================#</span><br><span class="line"># USER SETTINGS, EDIT BASED ON DOCUMENTED SETUP #</span><br><span class="line">#===============================================#</span><br><span class="line">CACHE_FOLDERPATH = /tmp/</span><br><span class="line">CONNECTION_TIMEOUT = 5</span><br><span class="line">EXPIRY_MINUTES = 30</span><br><span class="line">TIME_FORMAT = %H:%M</span><br><span class="line">DATE_FORMAT = %Y-%m-%d</span><br><span class="line">LOCALE = en</span><br><span class="line">XOAP_PARTNER_ID = </span><br><span class="line">XOAP_LICENCE_KEY =</span><br><span class="line">DEFAULT_LOCATION = JAXX0085</span><br><span class="line">AUTO_NIGHT = False</span><br><span class="line">PROXY_HOST = </span><br><span class="line">PROXY_PORT = 8080</span><br><span class="line">PROXY_USERNAME = </span><br><span class="line">PROXY_PASSWORD = </span><br></pre></td></tr></table></figure>

<p>天気予報の文言を日本語で表示するには、&#x2F;usr&#x2F;share&#x2F;conkyforecast&#x2F;locale&#x2F;ja&#x2F;* を作成しておいて、.conkyForecast.config でLOCALE &#x3D; ja を設定すればよさそう。中国語(zh)をサンプルにして作成すれば、少し楽かも。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Wine + Diablo 3 Downloader</title>
    <url>/2012/05/12/wine-diablo-3-downloader/</url>
    <content><![CDATA[<p><img src="/images/wine_diablo3_downloader.png" alt="wine diablo 3"><br><a href="http://us.blizzard.com/en-us/games/d3/?rhtml=y">http://us.blizzard.com/en-us/games/d3/?rhtml=y</a></p>
<p>2012&#x2F;5&#x2F;15 にDiablo 3 がリリースされるので、オンラインでデジタル版をPre-Order してみた。World of Warcraft の年間契約にDiablo 3 がバンドルされるという話もあったけれど、World of Warcraft は休止しているので、とりあえずDiablo 3 単品を購入。World of Warcraft はMists of Pandaria がリリースされたら少しだけ試してみよう。</p>
<p>Diablo3 ゲーム本体はクローズドベータ版もWine で動いたので、製品版でも多分動作すると思う。今回はダウンロードからLinux 上で試してみよう。</p>
<p>Diablo-III-8370-enUS-Installer-downloader.exe を右クリックして、Wine Windows Program Loader を選択。回線が細いので時間がかかるなぁ。その間に壁紙とConky をDiablo 仕様にしてみよう。</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
  </entry>
  <entry>
    <title>Wine + Diablo III</title>
    <url>/2012/05/19/wine-diablo-iii/</url>
    <content><![CDATA[<p><img src="/images/wine_diablo3.jpg" alt="wine diablo3"></p>
<p>週末になったので、Diablo III で遊ぼう！</p>
<p>Ubuntu 12.04 x86_64 + wine-1.5.4 + fglrx 8.960 の環境で遊んでみた。アップデータがうまく終了しなかったので、Windows のドライブをマウントして、インストールしたディレクトリに移動して、以下のコマンドで起動した。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ wine Diablo\ III.exe -launch</span><br></pre></td></tr></table></figure>

<p>たまにサウンドやグラフィックスに不具合があるものの、調子が良い時はWindows 上で動作している時とほとんど変わらない感じ。日本語も特に設定変更なしで入力できた。Z キーでズーム。スクリーンショットを撮る時は、GNOME のPrintScreen キーのショートカットを変更しておく。</p>
<p>なんとなく、Diablo III はシューティングゲームの要素が取り込まれているような、WoW に似ているような感じがする。弾幕避け、地雷避けとか。初回難しくても、何回かトライするとBOSS や雑魚キャラの攻撃パターンみたいなものがわかってきて、クリアできるようになる。<br>やっとアクトIIIまで到着した。何故か小指がつりそう。</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 12.04 + ownCloud 4.0</title>
    <url>/2012/05/23/ubuntu-12-04-owncloud-4-0/</url>
    <content><![CDATA[<p><img src="/images/owncloud_android.png" alt="owncloud android"></p>
<p><a href="http://owncloud.org/">http://owncloud.org/</a></p>
<p>ownCloud 4.0 が公開されたので、Ubuntu 12.04 をサーバにして、LAN 上のUbuntu とAndroid からアクセスしてみた。</p>
<p><a href="http://www.webupd8.org/2011/10/owncloud-2-your-personal-cloud-server.html">http://www.webupd8.org/2011/10/owncloud-2-your-personal-cloud-server.html</a><br>インストール方法はownCloud2 のインストール手順を参考にしてみたら、なんの迷いもなくできた。いつもwebupd8 はわかりやすくて便利だなぁ。日本語化は左下の「設定アイコン」-&gt;「Personal(個人設定)」で「Language(言語)」を「Japanese(日本語)」に設定する。</p>
<p><a href="/images/uploads/2012/05/owncloud_ubuntu.png"><img src="/images/uploads/2012/05/owncloud_ubuntu.png" alt="owncloud ubuntu chromium"></a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>MOC (music on console)</title>
    <url>/2012/05/31/moc-music-on-console/</url>
    <content><![CDATA[<p><img src="/images/moc.png" alt="moc music on console mocp"></p>
<p><a href="http://moc.daper.net/">http://moc.daper.net/</a><br>軽量なコンソール型のメディアプレーヤーMOC(Music On Console)を使ってみた。コマンドはmocp で、mocp を実行するとメディアを再生するサーバと操作用のクライアント画面が同時に起動する。クライアント画面を終了してもサーバはメディアの再生を継続するような仕組みになっている。moc-ffmpeg-plugin をインストールするとWMA, RealAudio, MP4, AAC 等のフォーマットの再生も可能。イコライザがついていたり、歌詞表示ができたり、テーマ変更もできたりする。日本語のタグやファイル名も表示可能。軽量だからwine で動かしているアプリケーションへの影響も少ないようだ。</p>
<span id="more"></span>

<h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install moc moc-ffmpeg-plugin</span><br></pre></td></tr></table></figure>



<h3 id="起動とサーバの停止"><a href="#起動とサーバの停止" class="headerlink" title="起動とサーバの停止"></a>起動とサーバの停止</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mocp </span><br><span class="line">$ mocp -x</span><br></pre></td></tr></table></figure>

<p>オプションの詳細はman mocp で。</p>
<h3 id="よく使うキー操作"><a href="#よく使うキー操作" class="headerlink" title="よく使うキー操作"></a>よく使うキー操作</h3><table>
<thead>
<tr>
<th align="center">キー</th>
<th align="left">動作</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[h][?]</td>
<td align="left">キーボードショートカット一覧を表示</td>
</tr>
<tr>
<td align="center">[ENTER]</td>
<td align="left">メディアの再生、フォルダの選択等</td>
</tr>
<tr>
<td align="center">[SPACE]</td>
<td align="left">ポーズ</td>
</tr>
<tr>
<td align="center">[q]</td>
<td align="left">mocp クライアント画面を終了(サーバは実行のまま)</td>
</tr>
<tr>
<td align="center">[Q]</td>
<td align="left">mocp クライアント画面を終了(サーバも終了)</td>
</tr>
<tr>
<td align="center">[TAB]</td>
<td align="left">左ペイン(ファイルリスト)と右ペイン(プレイリスト)を移動</td>
</tr>
<tr>
<td align="center">[l]</td>
<td align="left">選択しているペインのレイアウトを最大に</td>
</tr>
<tr>
<td align="center">[,][&lt;]</td>
<td align="left">ボリュームダウン(5%, 1%)</td>
</tr>
<tr>
<td align="center">[.][&gt;]</td>
<td align="left">ボリュームアップ(5%, 1%)</td>
</tr>
<tr>
<td align="center">[o]</td>
<td align="left">URL を開く</td>
</tr>
<tr>
<td align="center">[R]</td>
<td align="left">リピート再生の切り替え</td>
</tr>
<tr>
<td align="center">[S]</td>
<td align="left">シャッフル再生の切り替え</td>
</tr>
<tr>
<td align="center">[A]</td>
<td align="left">プレイリストに追加(ディレクトリは再帰的に)</td>
</tr>
<tr>
<td align="center">[L]</td>
<td align="left">歌詞表示(歌詞ファイルはメディアと同じファイル名で拡張子無し)</td>
</tr>
</tbody></table>
<h3 id="インターネットラジオの聞き方"><a href="#インターネットラジオの聞き方" class="headerlink" title="インターネットラジオの聞き方"></a>インターネットラジオの聞き方</h3><p>SHOUTcast で探して、ローカルにpls ファイルを保存して、開いたり、[o]で直接URL を入力したり。</p>
<h3 id="moc-で再生中のメディアの情報をConky-に表示するには"><a href="#moc-で再生中のメディアの情報をConky-に表示するには" class="headerlink" title="moc で再生中のメディアの情報をConky に表示するには"></a>moc で再生中のメディアの情報をConky に表示するには</h3><p>mocp -Q でいろいろな情報を取得して表示することができる。</p>
<figure class="highlight text"><figcaption><span>~/.conkyrc</span></figcaption><table><tr><td class="code"><pre><span class="line">$&#123;if_running mocp&#125;$&#123;font DejaVu Sans&#125;MUSIC (moc)$&#123;font&#125; $&#123;hr 2&#125;</span><br><span class="line">$&#123;font :size=10&#125;$&#123;execi 5 mocp -Q %title | nkf -w -F36-0&#125;$&#123;endif&#125;</span><br></pre></td></tr></table></figure>

<h3 id="テーマの変更"><a href="#テーマの変更" class="headerlink" title="テーマの変更"></a>テーマの変更</h3><p><a href="https://moc.daper.net/node/1408">https://moc.daper.net/node/1408</a></p>
<ol>
<li><p><code>/usr/share/doc/moc/examples/config.example.gz</code> を展開して<code>~/.moc/config</code> を作成</p>
</li>
<li><p><code>~/.moc/config</code> を編集してテーマを設定</p>
  <figure class="highlight ini"><figcaption><span>~/.moc/config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Theme file to use.  This can be absolute path or relative to</span></span><br><span class="line"><span class="comment"># /usr/share/moc/themes/ (depends on installation prefix) or</span></span><br><span class="line"><span class="comment"># ~/.moc/themes/ .</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:    Theme = laras_theme</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#Theme =</span></span><br><span class="line"><span class="attr">Theme</span> = transparent-background</span><br></pre></td></tr></table></figure>
</li>
<li><p>他のテーマを試してみる</p>
</li>
</ol>
<ul>
<li>&#x2F;usr&#x2F;share&#x2F;moc&#x2F;themes&#x2F;black_theme</li>
<li>&#x2F;usr&#x2F;share&#x2F;moc&#x2F;themes&#x2F;darkdot_theme</li>
<li>&#x2F;usr&#x2F;share&#x2F;moc&#x2F;themes&#x2F;example_theme</li>
<li>&#x2F;usr&#x2F;share&#x2F;moc&#x2F;themes&#x2F;green_theme</li>
<li>&#x2F;usr&#x2F;share&#x2F;moc&#x2F;themes&#x2F;moca_theme</li>
<li>&#x2F;usr&#x2F;share&#x2F;moc&#x2F;themes&#x2F;nightly_theme</li>
<li>&#x2F;usr&#x2F;share&#x2F;moc&#x2F;themes&#x2F;red_theme</li>
<li>&#x2F;usr&#x2F;share&#x2F;moc&#x2F;themes&#x2F;transparent-background</li>
<li>&#x2F;usr&#x2F;share&#x2F;moc&#x2F;themes&#x2F;yellow_red_theme</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>moc</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 8 Release Preview 64bit</title>
    <url>/2012/06/01/windows-8-release-preview-64bit/</url>
    <content><![CDATA[<p><img src="/images/windows8_boot_usb.png" alt="windows 8 boot usb"><br><a href="http://windows.microsoft.com/ja-JP/windows-8/download">http://windows.microsoft.com/ja-JP/windows-8/download</a><br>Linux の他にはWindows XP 32bit しか入っていないデスクトップPC にWindows 8 Release Preview 64bit をインストールしてみた。</p>
<ol>
<li><p>Windows XP 32bit 上でWindows 8 Release Preview 64bit ISO をダウンロード</p>
</li>
<li><p>Windows XP 32bit に「Windows 7 USB&#x2F;DVD ダウンロードツール」をインストール(過去にインストール済み)</p>
</li>
<li><p>32bit のbootsect.exe を「Windows 7 USB&#x2F;DVD ダウンロードツール」と同じフォルダにコピー</p>
</li>
<li><p>「Windows 7 USB&#x2F;DVD ダウンロードツール」を起動して、起動可能なUSB デバイスを作成</p>
</li>
<li><p>USB デバイスでブートしてWindows 8 をインストール</p>
</li>
</ol>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
  </entry>
  <entry>
    <title>Inspiron duo + Windows 8 64bit</title>
    <url>/2012/06/04/inspiron-duo-windows-8-64bit/</url>
    <content><![CDATA[<p><img src="/images/windows8_inspiron_duo.png" alt="windows 8 inspiron duo"></p>
<p>Inspiron duo にWindows 8 Release Preview をインストールしてみた。Inspiron duo のCPU はDual Core ATOM N550 で64bit 対応しているので、Windows 8 の64bit 版がインストールできる。</p>
<p><a href="/images/uploads/2012/06/windows8_metro.png"><img src="/images/uploads/2012/06/windows8_metro.png" alt="windows 8 metro"></a></p>
<p>Inspiron duo のスクリーンは10.1 インチの1366x768 でMetro はこんな感じで表示された。タッチスクリーンで横にスライドする。</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
  </entry>
  <entry>
    <title>Burg + Ubuntu 12.04 + Windows 8 + Android-x86 4.0</title>
    <url>/2012/06/06/burg-ubuntu-12-04-windows-8-android-x86-4-0/</url>
    <content><![CDATA[<p><img src="/images/burg_windows_8_ubuntu_12.04_android-x86_4.0.png" alt="burg windows 8 ubuntu 12.04 android-x86 4.0"></p>
<p>Ubuntu 12.04 とWindows 8 とAndroid-x86 4.0 のマルチブート環境を構築して、ブートローダをBurg にしてみた。<a href="/2011/05/07/burg-%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/">一年前</a>と同じことの繰り返しだけれど。</p>
<h3 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h3><ol>
<li><p>Windows 8 RP をインストール</p>
</li>
<li><p>Ubuntu 12.04 を&#x2F;dev&#x2F;sda3 にインストール<br>ブートローダ(GRUB)を&#x2F;dev&#x2F;sda にインストール</p>
</li>
<li><p>Android-x86 4.0 のISO の中にある以下の4つのファイルを&#x2F;dev&#x2F;sda3 (&#x2F;PATHTO&#x2F;Android-x86&#x2F;tegav2&#x2F;)にコピー</p>
</li>
</ol>
<pre><code>* initrd.img


* kernel


* ramdisk.img


* system.sfs
</code></pre>
<p>設定保存用のフォルダも作成</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> /PATHTO/Android-x86/tegav2/data</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>Burg のインストール</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:n-muench/burg</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update </span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install burg burg-themes</span><br></pre></td></tr></table></figure>



<ol start="5">
<li>Burg のテーマfortune とAndroid 用アイコンをgnome-look.org からダウンロードしてテーマ変更</li>
</ol>
<figure class="highlight text"><figcaption><span>/etc/default/burg</span></figcaption><table><tr><td class="code"><pre><span class="line">GRUB_GFXMODE=1366x768</span><br><span class="line">GRUB_THEME=fortune</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>/boot/burg/themes/fortune/icons/hover</span></figcaption><table><tr><td class="code"><pre><span class="line">  -slackware &#123; image = &quot;$$/grey_slackware.png:$$/large_slackware.png&quot; &#125;</span><br><span class="line">  -android &#123; image = &quot;$$/grey_android.png:$$/large_android.png&quot; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="6">
<li>Android-x86 用のブートエントリを追加</li>
</ol>
<figure class="highlight text"><figcaption><span>/etc/burg.d/40_custom</span></figcaption><table><tr><td class="code"><pre><span class="line">menuentry &quot;Android-x86 4.0&quot; --class android --class os &#123;</span><br><span class="line">    insmod ext2</span><br><span class="line">    set root=&#x27;(hd0,3)&#x27;</span><br><span class="line">    search --no-floppy --fs-uuid --set MY-UU-ID</span><br><span class="line">    echo &#x27;Loading Android-x86 4.0 ...&#x27;</span><br><span class="line">    linux /PATHTO/Android-x86/tegav2/kernel root=/dev/ram0 androidboot.hardware=tegav2 acpi_sleep=s3_bios,s3_mode SRC=/PATHTO/Android-x86/tegav2 DATA=</span><br><span class="line">    initrd /PATHTO/Android-x86/tegav2/initrd.img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="7">
<li>Burg の設定を更新</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> burg-install /dev/sda</span><br><span class="line">$ <span class="built_in">sudo</span> update-burg</span><br></pre></td></tr></table></figure>



<ol start="8">
<li>設定が有効になっているかを確認</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> burg-emu -D</span><br></pre></td></tr></table></figure>





<h3 id="パーティションレイアウト"><a href="#パーティションレイアウト" class="headerlink" title="パーティションレイアウト"></a>パーティションレイアウト</h3><p>デバイス<br>タイプ<br>サイズ<br>用途</p>
<p>&#x2F;dev&#x2F;sda1<br>ntfs<br>0.35 GiB<br>EFI</p>
<p>&#x2F;dev&#x2F;sda2<br>ntfs<br>150.00 GiB<br>Windows 8</p>
<p>&#x2F;dev&#x2F;sda3<br>ext4<br>145.00 GiB<br>Ubuntu 12.04,<br>Andorid-x86 4.0</p>
<p>&#x2F;dev&#x2F;sda4<br>swap<br>2.75 GiB<br>Linux swap</p>
<p>少し改善した手順は<a href="http://ktkr3d.site11.com/android-x86/">こちら</a></p>
]]></content>
      <categories>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>Firefox 13 + NewsFox </title>
    <url>/2012/06/09/firefox-13-newsfox/</url>
    <content><![CDATA[<p>Firefox のアドオンNewsFox を使ってRSS を購読しているのだけど、Firefox を13.0 にアップデートしてから、時々マウスのボタンダウンイベントがキャプチャーされて無効化されてしまうような挙動があったので、やっつけで暫定対策してみた。<del>Linux でもWindows でも発生する(?)ので、NewsFox 側に問題がありそう。いろいろFirefox のバグ回避もしているようだし。</del>とりあえず、ドラッグ開始しないようにreturn してしまうことにした。NewsFox でドラッグアンドドロップなんて飾りですよ。</p>
<figure class="highlight javascript"><figcaption><span>newsfox.xpi/chrome/newsfox.jar/content/newsfox/model.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dragIt</span>(<span class="params">evt</span>) &#123; <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>newsfox.xpi/chrome/newsfox.jar/content/newsfox/model.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dragArt</span>(<span class="params">evt</span>) &#123; <span class="keyword">return</span>; </span><br></pre></td></tr></table></figure>

<p>他に古いAPI を使っているところもあるようだし、早くアップデート版がリリースされるといいな。</p>
<p>newsfox.xpi &#x3D; {899DF1F8-2F43-4394-8315-37F6744E6319}.xpi</p>
]]></content>
      <categories>
        <category>firefox</category>
      </categories>
  </entry>
  <entry>
    <title>Android NDK + Android-x86 4.0.3</title>
    <url>/2012/06/17/android-ndk-android-x86-4-0-3/</url>
    <content><![CDATA[<p><img src="/images/android_ndk_android-x86.png" alt="android ndk android-x86 irrlicht"></p>
<p>Android 2.3 用のアプリをAndroid-x86 4.0.3 用にリビルドして、Inspiron duo 実機で動かしてみた。さすがにスマートフォンより動作が非常に軽快だけど、画面がiPod の広告みたいになってしまった。画像やフォントが表示されてないのは、なんでだろう。パスがずれているのかな。パスが違っていたらエラーになるはずなんだけど。ボタンイベントはタッチスクリーン上を指で押したら正しく動作した。</p>
<ol>
<li>Android 4.0.3 のターゲット情報は以下のとおり。ID は10。</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ android list target</span><br><span class="line"><span class="built_in">id</span>: 10 or <span class="string">&quot;android-15&quot;</span></span><br><span class="line">     Name: Android 4.0.3</span><br><span class="line">     Type: Platform</span><br><span class="line">     API level: 15</span><br><span class="line">     Revision: 3</span><br><span class="line">     Skins: WXGA720, QVGA, WSVGA, WQVGA400, WQVGA432, HVGA, WVGA854, WXGA800, WVGA800 (default)</span><br><span class="line">     ABIs : armeabi-v7a, x86</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>Application.mk でx86 を指定</li>
</ol>
<figure class="highlight text"><figcaption><span>Application.mk</span></figcaption><table><tr><td class="code"><pre><span class="line">#APP_ABI := armeabi armeabi-v7a</span><br><span class="line">APP_ABI := armeabi-v7a x86</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>プロジェクトをアップデート</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ android update project --path . --target 10</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>ビルド</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ndk-build clean</span><br><span class="line">$ ndk-build -j 4</span><br><span class="line">$ ant clean</span><br><span class="line">$ ant debug</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Android-x86 4.0.3 + Firefox(Fennec) 16.0a1</title>
    <url>/2012/06/23/android-x86-4-0-3-firefoxfennec-16-0a1/</url>
    <content><![CDATA[<p><img src="/images/android-x86_4.0.3_firefox_16.0a1.png" alt="android-x86 4.0.3 firefox fennec 16.0a1"></p>
<p><a href="https://wiki.mozilla.org/Mobile/Fennec/Android">https://wiki.mozilla.org/Mobile/Fennec/Android</a><br>Android-x86 用のFirefox がPlay ストアに登録されていないので、自分でx86 アーキテクチャ向けのAndroid 用Firefox(Fennec) をビルドしてみた。i386-linux-android 向けのmozconfig を見つけたけれど、そのままではうまくビルドできなかったので、修正して利用してみた。Android SDK&#x2F;NDK の環境はできているので、その後から始めよう。ビルドする環境はUbuntu 12.04 x86_64。Android 端末は、Inspiron duo にandroid-x86-4.0-RC1-tegav2.iso をインストール済み。</p>
<ol>
<li>ビルドするための依存関係の取得</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install mercurial ccache</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get build-dep firefox</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>Firefox のソースの取得</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hg <span class="built_in">clone</span> http://hg.mozilla.org/mozilla-central/ src</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>MOZCONFIG のカスタマイズ</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> src</span><br><span class="line">$ gedit mozconfig-android-x86</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>mozconfig-android-x86</span></figcaption><table><tr><td class="code"><pre><span class="line"># Global options</span><br><span class="line">mk_add_options MOZ_MAKE_FLAGS=&quot;-j4&quot;</span><br><span class="line"></span><br><span class="line"># Build Fennec</span><br><span class="line">ac_add_options --enable-application=mobile/android</span><br><span class="line"></span><br><span class="line"># Android</span><br><span class="line">ac_add_options --target=i386-linux-android</span><br><span class="line">ac_add_options --with-endian=little</span><br><span class="line">ac_add_options --with-android-ndk=&quot;$HOME/Projects/Android/android-ndk-r8&quot;</span><br><span class="line">ac_add_options --with-android-sdk=&quot;$HOME/Projects/Android/android-sdk-linux/platforms/android-15&quot;</span><br><span class="line">ac_add_options --with-android-version=10</span><br><span class="line">ac_add_options --with-android-platform=&quot;$HOME/Projects/Android/android-ndk-r8/platforms/android-14/arch-x86&quot;</span><br><span class="line">ac_add_options --with-system-zlib</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line">ac_add_options --disable-auto-deps</span><br><span class="line">ac_add_options --disable-debug</span><br><span class="line">ac_add_options --disable-debug-symbols</span><br><span class="line">ac_add_options --disable-tests</span><br><span class="line">ac_add_options --disable-ipdl-tests</span><br><span class="line">ac_add_options --enable-strip</span><br><span class="line">ac_add_options --enable-install-strip</span><br><span class="line"></span><br><span class="line"># updater</span><br><span class="line">ac_add_options --disable-updater</span><br><span class="line">ac_add_options --disable-update-channel</span><br><span class="line">ac_add_options --disable-update-packaging</span><br><span class="line"></span><br><span class="line"># crash reporter</span><br><span class="line">ac_add_options --disable-crashreporter</span><br><span class="line"></span><br><span class="line"># maintenance service</span><br><span class="line">ac_add_options --disable-maintenance-service</span><br><span class="line"></span><br><span class="line"># JDK</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-6-openjdk-amd64</span><br><span class="line"></span><br><span class="line"># branding</span><br><span class="line">ac_add_options --with-branding=mobile/android/branding/beta</span><br></pre></td></tr></table></figure>



<ol start="4">
<li><p>ロゴ画像の作成<br>他のサイズのロゴ画像を参考にサイズ40x40 のPNG 形式画像を作成する。<br>.&#x2F;mobile&#x2F;android&#x2F;branding&#x2F;beta&#x2F;content&#x2F;fennec_40x40.png</p>
</li>
<li><p>インストール先のAndroid 端末を無線LAN で接続する。</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> ADBHOST=192.168.0.4</span><br><span class="line">$ adb devices</span><br></pre></td></tr></table></figure>



<ol start="6">
<li>ビルドとインストール</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> MOZCONFIG=./mozconfig-android-x86</span><br><span class="line">$ make -f client.mk build_and_deploy</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<p>インストーラパッケージは以下に生成される。<br>.&#x2F;obj-x86_64-unknown-linux-gnu&#x2F;dist&#x2F;fennec-16.0a1.en-US.android-i386.apk</p>
<ol start="7">
<li>次回ビルド時にソースを最新の状態にするには</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hg pull -u</span><br></pre></td></tr></table></figure>




<span id="more"></span>
<p>いくつか気になることがあったので、修正してリビルドしてみた。</p>
<ul>
<li><p>about:buildconfig でAndroid SDK やAndroid NDK の絶対パスが見えてしまうので、&#x2F;tools&#x2F; 下からシンボリックリンクを張った。</p>
</li>
<li><p>branding をnightly に変更した。</p>
</li>
<li><p>ロゴ画像を追加するのをやめた。（必要なかった。）</p>
</li>
</ul>
<figure class="highlight text"><figcaption><span>mozconfig-android-x86</span></figcaption><table><tr><td class="code"><pre><span class="line"># Global options</span><br><span class="line">mk_add_options MOZ_MAKE_FLAGS=&quot;-j4&quot;</span><br><span class="line"></span><br><span class="line"># Build Fennec</span><br><span class="line">ac_add_options --enable-application=mobile/android</span><br><span class="line"></span><br><span class="line"># Android</span><br><span class="line">ac_add_options --target=i386-linux-android</span><br><span class="line">ac_add_options --with-endian=little</span><br><span class="line">ac_add_options --with-android-ndk=&quot;/tools/android-ndk-r8&quot;</span><br><span class="line">ac_add_options --with-android-sdk=&quot;/tools/android-sdk-linux/platforms/android-15&quot;</span><br><span class="line">ac_add_options --with-android-version=10</span><br><span class="line">ac_add_options --with-system-zlib</span><br><span class="line">ac_add_options --with-android-platform=&quot;/tools/android-ndk-r8/platforms/android-14/arch-x86&quot;</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line">ac_add_options --disable-auto-deps</span><br><span class="line">ac_add_options --disable-debug</span><br><span class="line">ac_add_options --disable-debug-symbols</span><br><span class="line">ac_add_options --disable-tests</span><br><span class="line">ac_add_options --disable-ipdl-tests</span><br><span class="line">ac_add_options --enable-strip</span><br><span class="line">ac_add_options --enable-install-strip</span><br><span class="line"></span><br><span class="line"># updater</span><br><span class="line">ac_add_options --disable-updater</span><br><span class="line">ac_add_options --disable-update-channel</span><br><span class="line">ac_add_options --disable-update-packaging</span><br><span class="line"></span><br><span class="line"># crash reporter</span><br><span class="line">ac_add_options --disable-crashreporter</span><br><span class="line"></span><br><span class="line"># maintenance service</span><br><span class="line">ac_add_options --disable-maintenance-service</span><br><span class="line"></span><br><span class="line"># JDK</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-6-openjdk-amd64</span><br><span class="line"></span><br><span class="line"># mozilla</span><br><span class="line">ac_add_options --with-branding=mobile/android/branding/nightly</span><br></pre></td></tr></table></figure>

<p>about:buildconfig の内容<br><a href="/images/uploads/2012/06/android-x86_firefox_fennec_16.0a1_buildconfig.png"><img src="/images/uploads/2012/06/android-x86_firefox_fennec_16.0a1_buildconfig.png" alt="android-x86 firefox fennec 16.0a1 buildconfig"></a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Irrlicht 1.8 trunk + XEffects</title>
    <url>/2012/06/30/irrlicht-1-8-trunk-xeffects/</url>
    <content><![CDATA[<p><img src="/images/irrlicht_1.8_xeffects.png" alt="irrlicht 1.8 xeffects"></p>
<p>Irrlicht 1.8 trunk でXEffects の影が有効にならなくなっていたので、XEffects のヘッダを修正してみた。Irrlicht 側のインタフェースが変わったのが原因かな。Irrlicht 1.8 ではXEffects を使っても画像が反転しないし、CGUITTFONT とも同時に使えるし、便利になったなぁ。環境はUbuntu 12.04 x86_64 + Irrlicht 1.8 trunk (SVN rev: 4170 ) + XEffects v1.3。</p>
<figure class="highlight cpp"><figcaption><span>EffectCB.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">OnSetConstants</span><span class="params">(irr::video::IMaterialRendererServices* services, irr::s32 userData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(services-&gt;<span class="built_in">getVideoDriver</span>()-&gt;<span class="built_in">getDriverType</span>() == irr::video::EDT_OPENGL)</span><br><span class="line">	&#123;</span><br><span class="line"><span class="comment">//		irr::f32 TexVar = 0;</span></span><br><span class="line">		irr::s32 TexVar = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//		services-&gt;setPixelShaderConstant(&quot;ColorMapSampler&quot;, (irr::f32*)(&amp;TexVar), 1);</span></span><br><span class="line">		services-&gt;<span class="built_in">setPixelShaderConstant</span>(<span class="string">&quot;ColorMapSampler&quot;</span>, &amp;TexVar, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		TexVar = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//		services-&gt;setPixelShaderConstant(&quot;ScreenMapSampler&quot;, (irr::f32*)(&amp;TexVar), 1);</span></span><br><span class="line">		services-&gt;<span class="built_in">setPixelShaderConstant</span>(<span class="string">&quot;ScreenMapSampler&quot;</span>, &amp;TexVar, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		TexVar = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//		services-&gt;setPixelShaderConstant(&quot;DepthMapSampler&quot;, (irr::f32*)(&amp;TexVar), 1);</span></span><br><span class="line">		services-&gt;<span class="built_in">setPixelShaderConstant</span>(<span class="string">&quot;DepthMapSampler&quot;</span>, &amp;TexVar, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		TexVar = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//		services-&gt;setPixelShaderConstant(&quot;UserMapSampler&quot;, (irr::f32*)(&amp;TexVar), 1);</span></span><br><span class="line">		services-&gt;<span class="built_in">setPixelShaderConstant</span>(<span class="string">&quot;UserMapSampler&quot;</span>, &amp;TexVar, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>irrlicht</tag>
      </tags>
  </entry>
  <entry>
    <title>Playing Diablo 3</title>
    <url>/2012/07/03/playing_diablo_3/</url>
    <content><![CDATA[<p><img src="/images/playing_a_wizard_in-diablo_3.jpg" alt="playing a wizard in diablo 3"></p>
<p>Nightmare レベルをすべてWine 上で遊んできてレベル50 になったWizard。Hell レベルでは死にまくりだけど、アカウントはなんとか生きていたみたい。当分はWindows 上で遊ぶのがよいのかな。</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
  </entry>
  <entry>
    <title>Burg + Clonezilla ISO</title>
    <url>/2012/07/06/burg-clonezilla-iso/</url>
    <content><![CDATA[<p><img src="/images/burg_clonezilla_iso.png" alt="burg clonezilla iso"></p>
<p>パーティション&#x2F;ディスククローンツールClonezilla のISO をBurg から起動してみた。ブートローダから直接ISO を指定するので、起動デバイスが不要で楽チン。Clonezilla は日本語表示も選択できるし、バックアップも簡単で速くていいかも。<br>GRUB 1.99 以降と違って、Burg は有効なカーネルのエントリーをすべて表示してしまうので、表示したい起動エントリーについてはGrub Customizer で選択した。</p>
<ol>
<li>Clonezilla 用の起動エントリーを追加。</li>
</ol>
<figure class="highlight text"><figcaption><span>/etc/burg.d/40_custom</span></figcaption><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">exec tail -n +3 $0</span><br><span class="line"># This file provides an easy way to add custom menu entries.  Simply type the</span><br><span class="line"># menu entries you want to add after this comment.  Be careful not to change</span><br><span class="line"># the &#x27;exec tail&#x27; line above.</span><br><span class="line">menuentry &quot;Android-x86 4.0.3&quot; --class android --class os &#123;</span><br><span class="line">	insmod ext2</span><br><span class="line">	set root=&#x27;(hd0,3)&#x27;</span><br><span class="line">	echo	&#x27;Loading Android-x86 4.0.3 ...&#x27;</span><br><span class="line">	linux /android-4.0-RC1/kernel root=/dev/ram0 androidboot.hardware=tegav2 acpi_sleep=s3_bios,s3_mode SRC=/android-4.0-RC1 DATA=</span><br><span class="line">	initrd /android-4.0-RC1/initrd.img</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">menuentry &quot;Clonezilla 20120620&quot; --class iso --class os &#123;</span><br><span class="line">	insmod ext2</span><br><span class="line">	set root=&#x27;(hd0,3)&#x27;</span><br><span class="line">	loopback loop &quot;/Clonezilla/clonezilla-live-20120620-precise.iso&quot; </span><br><span class="line">	linux (loop)/live/vmlinuz boot=live live-config union=aufs nolocales noprompt gfxpayload=800x600x16 ip=frommedia findiso=&quot;/Clonezilla/clonezilla-live-20120620-precise.iso&quot;</span><br><span class="line">	initrd (loop)/live/initrd.img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>ISO 用のアイコンが表示されるようにBurg のテーマを修正。</li>
</ol>
<figure class="highlight text"><figcaption><span>/boot/burg/themes/fortune/icons/hover</span></figcaption><table><tr><td class="code"><pre><span class="line">+class</span><br><span class="line">&#123;</span><br><span class="line">  -windows &#123; image = &quot;$$/grey_windows.png:$$/large_windows.png&quot; &#125;</span><br><span class="line">  -ubuntu &#123; image = &quot;$$/grey_ubuntu.png:$$/large_ubuntu.png&quot; &#125;</span><br><span class="line">  -debian &#123; image = &quot;$$/grey_debian.png:$$/large_debian.png&quot; &#125;</span><br><span class="line">  -suse &#123; image = &quot;$$/grey_opensuse.png:$$/large_opensuse.png&quot; &#125;</span><br><span class="line">  -freebsd &#123; image = &quot;$$/grey_freebsd.png:$$/large_freebsd.png&quot; &#125;</span><br><span class="line">  -macosx &#123; image = &quot;$$/grey_osx.png:$$/large_osx.png&quot; &#125;</span><br><span class="line">  -gentoo &#123; image = &quot;$$/grey_gentoo.png:$$/large_gentoo.png&quot; &#125;</span><br><span class="line">  -linuxmint &#123; image = &quot;$$/grey_linuxmint.png:$$/large_linuxmint.png&quot; &#125;</span><br><span class="line">  -mandrake &#123; image = &quot;$$/grey_mandrake.png:$$/large_mandrake.png&quot; &#125;</span><br><span class="line">  -arch &#123; image = &quot;$$/grey_arch.png:$$/large_arch.png&quot; &#125;</span><br><span class="line">  -fedora &#123; image = &quot;$$/grey_fedora.png:$$/large_fedora.png&quot; &#125;</span><br><span class="line">  -pclinuxos &#123; image = &quot;$$/grey_pclinuxos.png:$$/large_pclinuxos.png&quot; &#125;</span><br><span class="line">  -sabayon &#123; image = &quot;$$/grey_sabayon.png:$$/large_sabayon.png&quot; &#125;</span><br><span class="line">  -slackware &#123; image = &quot;$$/grey_slackware.png:$$/large_slackware.png&quot; &#125;</span><br><span class="line">  -android &#123; image = &quot;$$/grey_android.png:$$/large_android.png&quot; &#125;</span><br><span class="line">  -iso &#123; image = &quot;$$/grey_iso.png:$$/large_iso.png&quot; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-include &quot;../custom/icon_hover&quot;</span><br></pre></td></tr></table></figure>


<ol start="3">
<li>burg.cfg を更新</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> update-burg</span><br></pre></td></tr></table></figure>


<ol start="4">
<li><p>Grub Customizer で表示したい起動エントリーを選択する。<br>Grub Customizer はBurg が有効である場合に検知して、確認してくるので、Burg を更新するように選択する。</p>
</li>
<li><p>設定の確認</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> burg-emu -D</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Building Android 4.1 for x86 on Ubuntu 12.04</title>
    <url>/2012/07/11/building-android-4-1-for-x86-on-ubuntu-12-04/</url>
    <content><![CDATA[<p><img src="/images/android_4.1.1.png" alt="android 4.1.1 x86"></p>
<p><a href="http://source.android.com/source/download.html">http://source.android.com/source/download.html</a><br><a href="https://android.googlesource.com/platform/manifest">https://android.googlesource.com/platform/manifest</a></p>
<p>Android 4.1 Jelly Bean のソースが公開されたのでビルドしてみた。<del>.&#x2F;build&#x2F;target&#x2F;product&#x2F;generic_x86.mk があるので、使わせていただこう。</del>ビルド環境はUbuntu 12.04 x86_64。<del>インストール先はInspiron duo (Dual Core Atom N550, 1366x768, Touch Screen + Keyboard)。</del></p>
<ol>
<li>前提パッケージをインストール</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev libc6-dev lib32ncurses5-dev ia32-libs x11proto-core-dev libx11-dev lib32readline-gplv2-dev lib32z1-dev</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install gcc-multilib g++-multilib libc6-i386 libc6-dev-i386</span><br></pre></td></tr></table></figure>


<ol start="2">
<li><p>JDK をインストール<br>Oracle のサイトからjdk-6u33-linux-x64.bin を拾ってきて展開、.&#x2F;bin にパスを通しておく。</p>
</li>
<li><p>repo をインストール</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> ~/bin</span><br><span class="line">$ PATH=~/bin:<span class="variable">$PATH</span></span><br><span class="line">$ curl http://android.git.kernel.org/repo &gt; ~/bin/repo</span><br><span class="line">$ <span class="built_in">chmod</span> a+x ~/bin/repo</span><br></pre></td></tr></table></figure>


<ol start="4">
<li>ソースを取得(Android 4.1(Jelly Bean) の場合)</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> jellybean-x86</span><br><span class="line">$ <span class="built_in">cd</span> jellybean-x86</span><br><span class="line">$ repo init -u https://android.googlesource.com/platform/manifest -b android-4.1.1_r1</span><br><span class="line">$ repo <span class="built_in">sync</span></span><br></pre></td></tr></table></figure>


<ol start="5">
<li>ビルド</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> build/envsetup.sh</span><br><span class="line">$ lunch generic_x86-eng</span><br><span class="line">$ make -j8</span><br></pre></td></tr></table></figure>

<p>.&#x2F;out&#x2F;target&#x2F;product&#x2F;generic_x86&#x2F; にバイナリが作成されるので、GRUB から起動してあげればOK!、と思うけど、時間が掛かりそうなので、明日の朝確認しようzzz。</p>
<p>generic_x86-eng で失敗したので、lunch の選択肢に従って、full_x86-eng でやり直してみよう。make の実行は、C&#x2F;C++ の部分は多重度を8 にして、Java の部分は多重度を1 にできるとCPU とメモリが有効活用できて効率的なんだけど、できないのかな。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> build/envsetup.sh</span><br><span class="line">$ lunch vbox_x86-eng</span><br><span class="line">$ make android_disk_vdi -j1</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<p>VirtualBox イメージ(android_data_disk.vdi, android_system_disk.vdi)の生成と起動はできた。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME Shell + Touch Screen + onBoard</title>
    <url>/2012/07/15/gnome-shell-touch-screen-onboard/</url>
    <content><![CDATA[<p><img src="/images/gnome_shell_onboard.png" alt="gnome shell onboard"></p>
<p>Android-x86 やWindows 8 のタッチスクリーン操作が思いの外使い易かったので、Linux でもタッチスクリーン操作を試してみた。環境はUbuntu 12.04 x86_64, GNOME Shell 3.4.1, 仮想キーボード(onBoard), Inspiron duo(Touch Screen(10.1 inch, 1366x768) + Physical Keyboard(USA 配列))。以前試した時より機能が増えて、安定しているような気がする。それでも不安定になったら、Ctrl+Alt+F1 でkillall gnome-session して再ログイン。</p>
<ul>
<li><p>GNOME Shell のアクティビティ表示<br>画面左上隅をタップ</p>
</li>
<li><p>GNOME Shell のBottom Panel 表示<br>画面右下隅をタップ</p>
</li>
<li><p>ドック(AWN)の操作<br>画面下中央をタップ(「賢く隠す」設定にしているので)</p>
</li>
<li><p>文字入力</p>
<ul>
<li><p>あらかじめトップパネルのアクセシビリティアイコンから「スクリーンキーボード」を有効にしておく。</p>
</li>
<li><p>日本語入力開始&amp;終了は[Ctrl]+[SPACE]</p>
</li>
<li><p>LightDM ログインマネージャでも仮想キーボードでパスワードを入力できる。</p>
</li>
<li><p>root 権限を必要とするアプリケーション起動時のパスワード入力は標準のスクリーンキーボードCaribou で入力可能。(Bottom Panel にある)</p>
</li>
</ul>
</li>
<li><p>スクリーンキーボード(onBoard)のカスタマイズ</p>
<ul>
<li><p>設定「全般」で、「テキスト編集時に自動的に表示」、「onBoard が隠れている時にフローティングアイコンを表示」をチェック</p>
</li>
<li><p>設定「レイアウト」で、「コンパクト」「フルキーボード」「グリッド」から選択できる。</p>
</li>
<li><p>設定「テーマ」で、初期10個のテーマから選択できる。カスタマイズも可能。テーマ「Droid」を選択してみた。</p>
</li>
<li><p>スクリーンキーボードのサイズは四隅をドラッグすれば変更できる。</p>
</li>
<li><p>「123」でテンキーなどのフルキーボードに存在するキー入力ができる。</p>
</li>
</ul>
</li>
<li><p>文字選択<br>普通にドラッグ</p>
</li>
<li><p>コンテキストメニュー<br>レイアウト「フルキーボード」の「Menu」ボタンを選択。(タッチスクリーンのドライバの機能で長押しから表示できるかもしれない。)</p>
</li>
<li><p>画面の回転<br>システム設定「ディスプレイ」-「回転」から。(センサと連動できたような気もする。)</p>
</li>
<li><p>スクロール<br>Firefox のアドオンで何かあったような気がする。</p>
</li>
<li><p>マルチタッチ<br>ドライバでできたような気がする。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>telnet + nyancat</title>
    <url>/2012/07/25/telnet-nyancat/</url>
    <content><![CDATA[<p><img src="/images/telnet_nyancat.png" alt="telnet nyancat"></p>
<p><a href="http://www.omgubuntu.co.uk/2012/07/how-to-run-nyan-cat-in-the-terminal">http://www.omgubuntu.co.uk/2012/07/how-to-run-nyan-cat-in-the-terminal</a></p>
<p>telnet でnyancat してみた。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ telnet miku.acm.uiuc.edu</span><br></pre></td></tr></table></figure>

<p>終了はエスケープキーを忘れずに。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">^]quit</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 12.04 + POV-Ray 3.7.0 RC6</title>
    <url>/2012/07/29/ubuntu-12-04-pov-ray-3-7-0-rc6-2/</url>
    <content><![CDATA[<p><img src="/images/multiobj_alt_demo.png" alt="ubuntu 12.04 pov-ray 3.7.0 rc6"></p>
<p><a href="http://www.povray.org/beta/source/">http://www.povray.org/beta/source/</a><br><a href="http://www.povray.org/beta/source/unix-src-INSTALL.txt">http://www.povray.org/beta/source/unix-src-INSTALL.txt</a><br>POV-Ray 3.7.0 RC6 を試してみた。環境はUbuntu 12.04 x86_64, Intel® Core™ i7 CPU 930 @ 2.80GHz × 8。</p>
<p>64bit OS の場合は.&#x2F;configure の際に”–with-boost-thread&#x3D;boost_thread-mt” オプションを付けるといいらしい。3.7 からマルチスレッドに対応したらしい。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install build-essential</span><br><span class="line">$ wget http://www.povray.org/redirect/www.povray.org/beta/source/povray-3.7.0.RC6.tar.gz</span><br><span class="line">$ tar -zxvf povray-3.7.0.RC6.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> povray-3.7.0.RC6</span><br><span class="line">$ ./configure --with-boost-thread=boost_thread-mt COMPILED_BY=<span class="string">&quot;yourname &lt;youremail@somewhere.com&gt;&quot;</span></span><br><span class="line">$ make</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<p>POV-Ray Object Collection のサンプルをダウンロードしてレンダリング。<br><a href="http://lib.povray.org/searchcollection/index.php">http://lib.povray.org/searchcollection/index.php</a><br><a href="http://manpages.ubuntu.com/manpages/precise/man1/povray.1.html">http://manpages.ubuntu.com/manpages/precise/man1/povray.1.html</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ povray +W800 +H600 +A0.1 multiobj_alt_demo.pov</span><br></pre></td></tr></table></figure>

<p>右の立方体のレンダリング結果がサンプル画像とちょっと違うのは気のせいか？</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 12.10 alpha3 + GNOME Shell 3.5.4</title>
    <url>/2012/08/05/ubuntu-12-10-alpha3-gnome-shell-3-5-4/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_12_10_alpha3_gnome_shell_3_5_4.png" alt="ubuntu 12.10 alpha3 GNOME Shell 3.5.4"><br><a href="http://cdimage.ubuntu.com/releases/quantal/">http://cdimage.ubuntu.com/releases/quantal/</a><br>Ubuntu 12.10 alpha 3 x86_64 にGNOME Shell 3.5.4 を入れてみた。</p>
<ul>
<li><p>Linux Kernel が3.5.0 になった。</p>
</li>
<li><p>nautilus のGUI が変更されたみたい。</p>
</li>
<li><p>マウントポイントが&#x2F;media から&#x2F;run&#x2F;media&#x2F;$USER に移動したみたい。</p>
</li>
<li><p>firefox が15.0 に。Tab Utilities アドオンの挙動が少し変かもしれないので、Tab Mix Plus に移行。</p>
</li>
<li><p>GIMP が2.8 に。</p>
</li>
<li><p>アップデートマネージャがSoftware Updater に名前が変わった。</p>
</li>
<li><p>alpha3 時点でnVidia のGPU 環境でLive CD うまくブートしないみたい。</p>
</li>
</ul>
<p>いつものようにカスタマイズ</p>
<ul>
<li><p>フォルダを英語名に。</p>
</li>
<li><p>Avant Window Navigator を常駐。</p>
</li>
<li><p>conky を設定。conkyforecast は古いバージョンのものを使用。</p>
</li>
<li><p>Gnome Shell のAuto Hide Top Panel 拡張はmetadata.json の対応バージョンを3.5.4 にした。</p>
</li>
</ul>
<p>EDIT:<br>nVidia のGPU でも起動時のカーネルパラメータにnouveau.modeset&#x3D;0 を追加したら普通に起動できた。</p>
<p>EDIT2:<br>overlay-scrollbar を削除するとログインできなくなるみたいだ。あわてず、Ctrl+Alt+F1 で、sudo apt-cache search overlay-scrollbar してパッケージ名を探して、sudo apt-get install でインストール。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="built_in">export</span> LIBOVERLAY_SCROLLBAR=0 &gt;&gt; ~/.xprofile</span><br></pre></td></tr></table></figure>

<p>EDIT3:<br>nautilus でファイルの新規作成をするには、$HOME&#x2F;Templates にテンプレートファイルを入れておくとアプリケーションメニューやコンテキストメニューにNew Document メニューが表示されるようになるみたい。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME Shell Focus Effect Extension</title>
    <url>/2012/08/21/gnome-shell-focus-effect-extension/</url>
    <content><![CDATA[<p><img src="/images/gnome_shell_extension_focus_effect.png" alt="gnome shell extensio focus effect"></p>
<p><a href="https://github.com/paradoxxxzero/gnome-shell-focus-effects-extension">https://github.com/paradoxxxzero/gnome-shell-focus-effects-extension</a>  </p>
<p><a href="http://www.upubuntu.com/2012/08/how-to-install-gnome-shell-focus-effect.html">http://www.upubuntu.com/2012/08/how-to-install-gnome-shell-focus-effect.html</a></p>
<p>GNOME Shell のFocus Effect 拡張を使ってみた。フォーカスの切り替えでウィンドウがアニメーションする。なんか楽しい。非アクティブなウィンドウは少し傾いて、サイズが小さく、色はグレーになる。スクリプトはとても小さいので、何かに応用できるかもしれない。<br>副作用としては、非アクティブなウィンドウの選択に少しコツがいるようだ。また、何回か切り替えを繰り返した時に、ウィンドウが画面外に移動してしまう。その時は、[Alt]-[Space]で「移動」を選択して、ウィンドウを元の位置に動かすと回復できる。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>Rebuild avant-window-navigator package</title>
    <url>/2012/09/04/rebuild-avant-window-navigator-package-2/</url>
    <content><![CDATA[<p><img src="/images/awn_without_plus_icon.png" alt="avant window navigator without a green plus icon"></p>
<p><a href="https://bugs.launchpad.net/awn/+bug/990774">https://bugs.launchpad.net/awn/+bug/990774</a><br><a href="https://bugs.launchpad.net/awn/+bug/990774/comments/15">https://bugs.launchpad.net/awn/+bug/990774/comments/15</a></p>
<p>Ubuntu 12.04&#x2F;12.10 のAvant Window Navigator で表示される謎のプラスアイコンを消してみた。これですっきり。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get build-dep avant-window-navigator</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get -b <span class="built_in">source</span> avant-window-navigator</span><br><span class="line">$ <span class="built_in">sudo</span> dpkg -i *.deb</span><br></pre></td></tr></table></figure>



<h3 id="追記-2012-11-10"><a href="#追記-2012-11-10" class="headerlink" title="追記(2012&#x2F;11&#x2F;10)"></a>追記(2012&#x2F;11&#x2F;10)</h3><p><a href="https://bugs.launchpad.net/awn/+bug/990774/comments/21">https://bugs.launchpad.net/awn/+bug/990774/comments/21</a><br>リビルドしなくても、以下のコマンドで解決しました。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install libdesktop-agnostic-cfg-gconf</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 12.10 + Certificate Authority</title>
    <url>/2012/09/16/ubuntu-12-10-certificate-authority/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_ca.png" alt="ubuntu 12.10 certificate authority openssl ssl client"></p>
<p>Ubuntu 12.10 x86_64 の環境にオレオレ認証局を構築してクライアント証明書認証してみた。サーバはApache2 でクライアントはUbuntu 12.04 x86_64 上のFirefox。クライアントPC 側のネットワークはスマートフォンのWiMAX + Wi-Fi テザリングからインターネットに接続して、ダイナミックDNS でアドレス解決したサーバに到達する構成で試してみた。設定手順は、以下のページ。<br><a href="http://ktkr3d.site11.com/ca/">http://ktkr3d.site11.com/ca/</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Changing the date format in nautilus 3.6 list view</title>
    <url>/2012/09/24/changing-the-date-format-in-nautilus-3-6-list-view/</url>
    <content><![CDATA[<p><img src="/images/nautilus_list_view.png" alt="nautilus 3.6 list view modification date"><br><a href="https://bugzilla.gnome.org/show_bug.cgi?id=676898">https://bugzilla.gnome.org/show_bug.cgi?id=676898</a><br><a href="http://bugzilla-attachments.gnome.org/attachment.cgi?id=215060">http://bugzilla-attachments.gnome.org/attachment.cgi?id=215060</a></p>
<p>nautilus 3.6 のリストビューでは、あえて更新日付の書式をシンプル(informal)にしているようです。これはこれでアリなのですが、やはり詳細表示されていた方が統一感があって使い勝手がよいような気がするので、昔のISO 日付書式になるようにカスタマイズしてみました。dpkg-buildpackage でfakeroot が効かなかったので、sudo で実行しています。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get build-dep nautilus</span><br><span class="line">$ <span class="built_in">mkdir</span> nautilus &amp;&amp; <span class="built_in">cd</span> nautilus</span><br><span class="line">$ apt-get <span class="built_in">source</span> nautilus</span><br><span class="line">$ dpkg-source -x *.dsc</span><br><span class="line">$ <span class="built_in">cd</span> nautilus-3.*</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><figcaption><span>libnautilus-private/nautilus-file.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TODAY_TIME_FORMAT_24 N_(<span class="string">&quot;%R&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TODAY_TIME_FORMAT N_(<span class="string">&quot;%-I:%M %P&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THIS_MONTH_TIME_FORMAT N_(<span class="string">&quot;%b %-e&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THIS_YEAR_TIME_FORMAT N_(<span class="string">&quot;%b %-e&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ANYTIME_TIME_FORMAT N_(<span class="string">&quot;%b %-d %Y&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ANYTIME_TIME_FORMAT_ISO N_(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FULL_FORMAT N_(<span class="string">&quot;%a, %b %e %Y %I:%M:%S %p&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FULL_FORMAT_24 N_(<span class="string">&quot;%a, %b %e %Y %T&quot;</span>)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><figcaption><span>libnautilus-private/nautilus-file.c</span></figcaption><table><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    format = ANYTIME_TIME_FORMAT;</span><br><span class="line">&#125;</span><br><span class="line">format = ANYTIME_TIME_FORMAT_ISO;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> dpkg-buildpackage -us -uc -nc -b</span><br><span class="line">$ <span class="built_in">sudo</span> dpkg -i ../nautilus_3.*.deb</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>GNOME Shell extension - Drop Down Terminal</title>
    <url>/2012/09/24/gnome-shell-extension-drop-down-terminal/</url>
    <content><![CDATA[<p><img src="/images/drop_down_terminal_gnome_shell_extension.png" alt="gnome shell extension drop down terminal"><br><a href="https://extensions.gnome.org/extension/442/drop-down-terminal/">https://extensions.gnome.org/extension/442/drop-down-terminal/</a></p>
<p>Drop Down Terminal はGNOME Shell 3.5.2 (正確にはgjs &gt;&#x3D; 1.33.2 and vte3 &gt;&#x3D; 0.31, gnome-shell &gt;&#x3D; 3.2 らしい)以降で動作する、ターミナル画面を表示するためのGNOME Shell 拡張機能です。Ubuntu 12.10 + GNOME Shell 3.5.92 の環境で使ってみました。<br>GNOME Shell のデスクトップ環境で[F12]キーを押下すると、画面の上部に半透明なターミナル画面が瞬時に表示されます。もう一度[F12]キーを押すとターミナル画面が隠れます。作者のコメントによると、キーバインドはgsettings やdconf-editor でカスタマイズできるようです。<br>ちょっとしたターミナル操作をする場合にとても便利です。クリップボードからのペーストは[Shift]-[Insert]が使用できます。フォーカスが合っていない場合はマウスでクリックすると良いようです。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu GNOME Remix 12.10 beta</title>
    <url>/2012/09/28/ubuntu-gnome-remix-12-10-beta/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_gnome_remix.png" alt="ubuntu gnome remix 12.10 beta"><br><a href="https://wiki.ubuntu.com/UbuntuGNOME/ReleaseNotes/12.10Beta">https://wiki.ubuntu.com/UbuntuGNOME/ReleaseNotes/12.10Beta</a></p>
<p>Ubuntu GNOME Remix 12.10 betaが公開されたので、インストールしてみました。<br>Ubuntu のリポジトリを使いたいけれど、デスクトップ環境はGNOME Shell がよいので、今後、どちらをベースにして行くか悩みどころです。そこで、それぞれのデフォルトの構成を比較してみました。<br>どちらをベースにしても大差なさそうですが、ブラウザにFirefox を使うので、Ubuntu をインストールしておいて、ppa:gnome3-team&#x2F;gnome3 を追加する方が若干楽かもしれません。GDM のログイン画面やロック画面の外観が大幅に改善されていたので、LightDM からGDM に切り替えるのならば、Ubuntu GNOME Remix がよいかもしれません。</p>
<table>
<thead>
<tr>
<th align="left">Ubuntu</th>
<th align="left">Ubuntu GNOME Remix</th>
<th align="left">My Choice</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Unity</td>
<td align="left">GNOME Shell</td>
<td align="left">GNOME Shell + AWN*</td>
</tr>
<tr>
<td align="left">LightDM</td>
<td align="left">GDM</td>
<td align="left">?</td>
</tr>
<tr>
<td align="left">software-center</td>
<td align="left">gpk-application</td>
<td align="left">synaptic</td>
</tr>
<tr>
<td align="left">nautilus 3.4</td>
<td align="left">nautilus 3.4</td>
<td align="left">nautilus 3.6</td>
</tr>
<tr>
<td align="left">gnome-disks</td>
<td align="left">gnome-disks</td>
<td align="left">gparted</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">tweak-tool</td>
<td align="left">tweak-tool</td>
</tr>
<tr>
<td align="left">Firefox</td>
<td align="left">epiphany-browser</td>
<td align="left">Firefox</td>
</tr>
<tr>
<td align="left">Evolution</td>
<td align="left">Evolution</td>
<td align="left">GMail</td>
</tr>
<tr>
<td align="left">Evolution</td>
<td align="left">Evolution</td>
<td align="left">Google Calendar</td>
</tr>
<tr>
<td align="left">Rhythmbox</td>
<td align="left">Rhythmbox</td>
<td align="left">Moc</td>
</tr>
<tr>
<td align="left">Totem</td>
<td align="left">Totem</td>
<td align="left">VLC</td>
</tr>
<tr>
<td align="left">EoG</td>
<td align="left">EoG</td>
<td align="left">EoG</td>
</tr>
<tr>
<td align="left">Gedit</td>
<td align="left">Gedit</td>
<td align="left">Kate</td>
</tr>
<tr>
<td align="left">Libre-writer</td>
<td align="left">AbiWord</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">Libre-calc</td>
<td align="left">Gnumeric</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">ibus-anthy</td>
<td align="left">ibus-anthy</td>
<td align="left">ibus-mozc</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>VLC for Android-x86</title>
    <url>/2012/10/02/vlc-for-android-x86/</url>
    <content><![CDATA[<p><img src="/images/galaxias_vlc_for_android-x86.png" alt="vlc for android-x86"><br><a href="http://nightlies.videolan.org/build/android-x86/">http://nightlies.videolan.org/build/android-x86/</a></p>
<p>VLC for Android-x86 のデバッグ版が公開されていたので、使ってみました。実行環境は、Android-x86 4.0.4 RC2 tegav2 ビルドです。</p>
<p>ビルドする手順は以下のようです。<br><a href="http://wiki.videolan.org/AndroidCompile">http://wiki.videolan.org/AndroidCompile</a></p>
<p><strong>EDIT:</strong><br>VLC だと760p も全く問題なく再生できました。音量調節は上下にフリックします。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Openshot Video Editor 1.4.3</title>
    <url>/2012/10/11/openshot-video-editor-1-4-3/</url>
    <content><![CDATA[<p><img src="/images/openshot_3d_text.png" alt="openshot 1.4.3 3d text"><br><a href="http://www.openshot.org/">http://www.openshot.org/</a></p>
<p>Openshot はオープンソースな動画編集ソフトウェアです。バージョン1.4.3 では、Blender と連携して、3D 効果やアニメーションが強化されたようです。テキストの3D 効果では日本語フォントもレンダリングできました。</p>
<figure class="highlight sh"><figcaption><span>Openshot のインストール</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:jonoomph/openshot-edge</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install openshot openshot-doc</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><figcaption><span>Blender のインストール</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:irie/blender</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install blender</span><br></pre></td></tr></table></figure>

<p>例えば、[タイトル]-[新しい動画タイトル]メニューを選択して、テンプレートから「飛び散るテキスト」を選択します。タイトルには適当な文字列を入力し、フォントを指定して、[レンダリング]を実行します。時間がかかりますが、TrueType フォントが3D 化され、アニメーションしました。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Android-x86 4.0.4 + Firefox (Fennec) 19.0a1 / 16.0.1</title>
    <url>/2012/10/13/android-x86-4-0-4-firefox-fennec-19-0a1-16-0-1/</url>
    <content><![CDATA[<p><img src="/images/android-x86_firefox_19.0a1.png" alt="android-x86 firefoex fennec 19.0a1 16.0.1"></p>
<p><a href="https://wiki.mozilla.org/Mobile/Fennec/Android">https://wiki.mozilla.org/Mobile/Fennec/Android</a></p>
<p>Android-x86 4.0.4 (i386-linux-android) 向けにFirefox の開発バージョン19.0a1 と最新リリース版16.0.1 をビルドしてみました。ビルド環境はUbuntu 12.10 x86_64 です。手順は、<a href="/2012/06/23/android-x86-4-0-3-firefoxfennec-16-0a1/">前回</a>とほとんど同じです。</p>
<h3 id="ビルド用SDK-の配置"><a href="#ビルド用SDK-の配置" class="headerlink" title="ビルド用SDK の配置"></a>ビルド用SDK の配置</h3><ul>
<li><p>&#x2F;tools&#x2F;android-sdk-linux</p>
</li>
<li><p>&#x2F;tools&#x2F;android-ndk-r7c</p>
</li>
<li><p>&#x2F;tools&#x2F;jdk1.6.0_35</p>
</li>
</ul>
<h3 id="ビルド用依存パッケージの取得"><a href="#ビルド用依存パッケージの取得" class="headerlink" title="ビルド用依存パッケージの取得"></a>ビルド用依存パッケージの取得</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install mercurial ccache</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get build-dep firefox</span><br></pre></td></tr></table></figure>



<h3 id="開発版-19-0a1-をビルドする場合"><a href="#開発版-19-0a1-をビルドする場合" class="headerlink" title="開発版(19.0a1)をビルドする場合"></a>開発版(19.0a1)をビルドする場合</h3><ol>
<li>開発版ソースコードの取得</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /tools/apps/firefox/</span><br><span class="line">$ hg <span class="built_in">clone</span> http://hg.mozilla.org/mozilla-central/ src-central</span><br><span class="line">$ <span class="built_in">cd</span> src-central</span><br></pre></td></tr></table></figure>




<ol start="2">
<li>mozconfig のカスタマイズ</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> ./mobile/android/config/mozconfigs/android-x86/nightly .mozconfig</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>/tools/apps/firefox/src-central/.mozconfig</span></figcaption><table><tr><td class="code"><pre><span class="line">. &quot;$topsrcdir/mobile/android/config/mozconfigs/common&quot;</span><br><span class="line"></span><br><span class="line"># Global options</span><br><span class="line">mk_add_options MOZ_MAKE_FLAGS=&quot;-j4&quot;</span><br><span class="line"></span><br><span class="line"># Build Fennec</span><br><span class="line">ac_add_options --enable-application=mobile/android</span><br><span class="line"></span><br><span class="line"># Android</span><br><span class="line">ac_add_options --target=i386-linux-android</span><br><span class="line">ac_add_options --with-android-ndk=&quot;/tools/android-ndk-r7c&quot;</span><br><span class="line">ac_add_options --with-android-sdk=&quot;/tools/android-sdk-linux/platforms/android-14&quot;</span><br><span class="line">ac_add_options --with-android-version=14</span><br><span class="line">ac_add_options --with-system-zlib</span><br><span class="line">#ac_add_options --enable-update-channel=$&#123;MOZ_UPDATE_CHANNEL&#125;</span><br><span class="line"></span><br><span class="line"># IonMonkey disabled in bug 789373</span><br><span class="line">ac_add_options --disable-ion</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/tools/jdk1.6.0_35</span><br><span class="line">#export MOZILLA_OFFICIAL=1</span><br><span class="line">#export MOZ_TELEMETRY_REPORTING=1</span><br><span class="line"></span><br><span class="line">ac_add_options --with-branding=mobile/android/branding/nightly</span><br><span class="line"></span><br><span class="line"># Treat warnings as errors in directories with FAIL_ON_WARNINGS.</span><br><span class="line">ac_add_options --enable-warnings-as-errors</span><br><span class="line"></span><br><span class="line"># Use ccache</span><br><span class="line">ac_add_options --with-ccache=/usr/bin/ccache</span><br></pre></td></tr></table></figure>






<h3 id="リリース版-16-0-1-をビルドする場合"><a href="#リリース版-16-0-1-をビルドする場合" class="headerlink" title="リリース版(16.0.1)をビルドする場合"></a>リリース版(16.0.1)をビルドする場合</h3><ol>
<li>リリース版ソースコードの取得</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /tools/apps/firefox/</span><br><span class="line">$ hg <span class="built_in">clone</span> http://hg.mozilla.org/releases/mozilla-release src-release</span><br><span class="line">$ <span class="built_in">cd</span> src-release</span><br></pre></td></tr></table></figure>




<ol start="2">
<li>mozconfig のカスタマイズ</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> ./mobile/android/config/mozconfigs/android-x86/release .mozconfig</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>/tools/apps/firefox/src-release/.mozconfig</span></figcaption><table><tr><td class="code"><pre><span class="line"># Global options</span><br><span class="line">mk_add_options MOZ_MAKE_FLAGS=&quot;-j4&quot;</span><br><span class="line"></span><br><span class="line"># Build Fennec</span><br><span class="line">ac_add_options --enable-application=mobile/android</span><br><span class="line"></span><br><span class="line"># Android</span><br><span class="line">ac_add_options --target=i386-linux-android</span><br><span class="line">ac_add_options --with-android-ndk=&quot;/tools/android-ndk-r7c&quot;</span><br><span class="line">ac_add_options --with-android-sdk=&quot;/tools/android-sdk-linux/platforms/android-14&quot;</span><br><span class="line">ac_add_options --with-android-version=14</span><br><span class="line">ac_add_options --with-system-zlib</span><br><span class="line">#ac_add_options --enable-updater</span><br><span class="line">#ac_add_options --enable-update-channel=$&#123;MOZ_UPDATE_CHANNEL&#125;</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/tools/jdk1.6.0_35</span><br><span class="line">#export MOZILLA_OFFICIAL=1</span><br><span class="line">#export MOZ_TELEMETRY_REPORTING=1</span><br><span class="line"></span><br><span class="line">#ac_add_options --enable-official-branding</span><br><span class="line">ac_add_options --with-branding=mobile/android/branding/unofficial</span><br></pre></td></tr></table></figure>






<h3 id="firefox-のビルド"><a href="#firefox-のビルド" class="headerlink" title="firefox のビルド"></a>firefox のビルド</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ make -f client.mk build_and_deploy</span><br></pre></td></tr></table></figure>



<h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><p>以下のフォルダに生成された.apk ファイルをAndroid-x86 でインストールします。</p>
<figure class="highlight text"><figcaption><span>出力先</span></figcaption><table><tr><td class="code"><pre><span class="line">./obj-x86_64-unknown-linux-gnu/dist/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>firefox</category>
      </categories>
  </entry>
  <entry>
    <title>OpenELEC 2.0 + MediaTomb</title>
    <url>/2012/10/24/openelec-2-0-mediatomb/</url>
    <content><![CDATA[<p><img src="/images/openelec_2.png" alt="OpenELEC 2.0 XBMC"></p>
<p><a href="http://openelec.tv/get-openelec">http://openelec.tv/get-openelec</a><br><a href="http://wiki.openelec.tv/index.php?title=Installation">http://wiki.openelec.tv/index.php?title=Installation</a></p>
<p>OpenELEC (Open Embedded Linux Entertainment Center) はXBMC (旧名: XBox Media Center)の機能を持つ軽量なLinux ディストリビューションです。バージョン2.0 がリリースされたので、DLNA サーバのMediaTomb に繋げて試してみました。綺麗なテーマが多数用意されていて、動作は軽快でした。</p>
<p>OpenELEC をインストールするネットブックInspiron Duo はION ではないATOM 64bit プロセッサのPC なので、Intel x86_64 向けのアーカイブをダウンロードしました。「マニュアルインストール-マルチブート」の手順を参考にして、8GB のUSB メモリに2つのパーティションを作成し、Ubuntu 12.10 のGRUB ブートローダから起動するように設定しています。</p>
<h3 id="OpenELEC-2-0-のインストールと設定"><a href="#OpenELEC-2-0-のインストールと設定" class="headerlink" title="OpenELEC 2.0 のインストールと設定"></a>OpenELEC 2.0 のインストールと設定</h3><ol>
<li>USB メモリにパーティションを作成</li>
</ol>
<p>デバイス<br>フォーマット<br>サイズ<br>ラベル<br>ブートフラグ</p>
<p>&#x2F;dev&#x2F;sdb1<br>ext4<br>1GB<br>OE_SYSTEM<br>*</p>
<p>&#x2F;dev&#x2F;sdb2<br>ext4<br>7GB<br>OE_DATA</p>
<ol start="2">
<li>ファイルのコピー<br>&#x2F;dev&#x2F;sdb1 の直下に以下の２つのファイルをコピーします。</li>
</ol>
<pre><code>* KERNEL


* SYSTEM
</code></pre>
<ol start="3">
<li>クライアントのUbuntu でOpenELEC ブート用GRUB エントリの追加</li>
</ol>
<figure class="highlight text"><figcaption><span>/etc/grub.d/40_custom</span></figcaption><table><tr><td class="code"><pre><span class="line">menuentry &quot;OpenELEC 2.0&quot; &#123;</span><br><span class="line">    set root=(hd1,1)</span><br><span class="line">    linux /KERNEL boot=/dev/sdb1 disk=/dev/sdb2 quiet</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<ol start="4">
<li>クライアントのUbuntu でGRUB 設定の更新</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> update-grub</span><br></pre></td></tr></table></figure>




<ol start="5">
<li><p>OpenELEC の起動<br>クライアントPC を再起動して、GRUB の起動エントリからOpenELEC 2.0 を選択します。</p>
</li>
<li><p>言語と時刻の設定</p>
</li>
</ol>
<pre><code>1. [System]-[Settings]-[Appearance] の画面に進みます。


2. [Skin]-[Fonts] を**Arial based** に設定します。


3. [International]-[Language] をJapanese に設定します。


4. 地域、タイムゾーン(国)、タイムゾーンを設定します。
</code></pre>
<ol start="7">
<li>Wi-Fi の設定</li>
</ol>
<pre><code>1. [プログラム]-[OpenELEC OS Settings]-[Network] の画面に進みます。


2. Network Technology をWLAN に設定します。


3. Network Interface をwlan0 に設定します。


4. Static IP address, Network gateway, DNS server 1 を環境に合わせて設定します。
</code></pre>
<ol start="8">
<li>音量調整<br>ボリュームダウンは[Fn]-[F9]、ボリュームアップは[Fn]-[F10] でした。</li>
</ol>
<h3 id="MediaTomb-のインストールと設定"><a href="#MediaTomb-のインストールと設定" class="headerlink" title="MediaTomb のインストールと設定"></a>MediaTomb のインストールと設定</h3><p>サーバのUbnutu でMediaTomb の環境を設定します。</p>
<ol>
<li>MediaTomb のインストール</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install mediatomb</span><br></pre></td></tr></table></figure>




<ol start="2">
<li>MediaTomb の環境設定</li>
</ol>
<figure class="highlight text"><figcaption><span>/etc/default/mediatomb</span></figcaption><table><tr><td class="code"><pre><span class="line"># The network interface for MediaTomb to bind to and for which the multicast</span><br><span class="line"># routing entry should be added; &quot;&quot; if the route shouldn&#x27;t be added at all.</span><br><span class="line"># For example: INTERFACE=&quot;eth0&quot;</span><br><span class="line">INTERFACE=&quot;eth0&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><figcaption><span>/etc/mediatomb/config.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ui</span> <span class="attr">enabled</span>=<span class="string">&quot;yes&quot;</span> <span class="attr">show-tooltips</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">accounts</span> <span class="attr">enabled</span>=<span class="string">&quot;yes&quot;</span> <span class="attr">session-timeout</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">account</span> <span class="attr">user</span>=<span class="string">&quot;mediatomb&quot;</span> <span class="attr">password</span>=<span class="string">&quot;mediatomb&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">accounts</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ui</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><figcaption><span>/etc/mediatomb/config.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">hidden-files</span>=<span class="string">&quot;no&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filesystem-charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">filesystem-charset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">metadata-charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">metadata-charset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scripting</span> <span class="attr">script-charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><figcaption><span>/etc/mediatomb/config.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">extension-mimetype</span> <span class="attr">ignore-unknown</span>=<span class="string">&quot;no&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">map</span> <span class="attr">from</span>=<span class="string">&quot;mp4&quot;</span> <span class="attr">to</span>=<span class="string">&quot;video/mp4&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">map</span> <span class="attr">from</span>=<span class="string">&quot;mp3&quot;</span> <span class="attr">to</span>=<span class="string">&quot;audio/mpeg&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">map</span> <span class="attr">from</span>=<span class="string">&quot;ogg&quot;</span> <span class="attr">to</span>=<span class="string">&quot;application/ogg&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">map</span> <span class="attr">from</span>=<span class="string">&quot;asf&quot;</span> <span class="attr">to</span>=<span class="string">&quot;video/x-ms-asf&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">map</span> <span class="attr">from</span>=<span class="string">&quot;asx&quot;</span> <span class="attr">to</span>=<span class="string">&quot;video/x-ms-asf&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">map</span> <span class="attr">from</span>=<span class="string">&quot;wma&quot;</span> <span class="attr">to</span>=<span class="string">&quot;audio/x-ms-wma&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">map</span> <span class="attr">from</span>=<span class="string">&quot;wax&quot;</span> <span class="attr">to</span>=<span class="string">&quot;audio/x-ms-wax&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">map</span> <span class="attr">from</span>=<span class="string">&quot;wmv&quot;</span> <span class="attr">to</span>=<span class="string">&quot;video/x-ms-wmv&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">map</span> <span class="attr">from</span>=<span class="string">&quot;wvx&quot;</span> <span class="attr">to</span>=<span class="string">&quot;video/x-ms-wvx&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">map</span> <span class="attr">from</span>=<span class="string">&quot;wm&quot;</span> <span class="attr">to</span>=<span class="string">&quot;video/x-ms-wm&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>




<ol start="3">
<li>MediaTomb の再起動</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> service mediatomb restart</span><br></pre></td></tr></table></figure>




<ol start="4">
<li>公開するメディアの選択<br>アプリケーションメニューの[サウンドとビデオ]-[MediaTomb] メニューを選択すると、ブラウザ上に環境設定画面が表示されるので、公開するフォルダを選択します。</li>
</ol>
<h3 id="OpenELEC-からMediaTomb-への接続"><a href="#OpenELEC-からMediaTomb-への接続" class="headerlink" title="OpenELEC からMediaTomb への接続"></a>OpenELEC からMediaTomb への接続</h3><p>DLNA サーバのメディアを参照するには、以下のようにしました。</p>
<ol>
<li><p>[ビデオ]-[ファイル]の画面に進みます。</p>
</li>
<li><p>[ビデオを追加…]-[参照]-[UPnP Devices]を選択します。</p>
</li>
<li><p>MediaTomb というサーバ名が表示されますので、表示したい階層を選択して[OK]を押します。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 12.10 + Hibernate/Resume</title>
    <url>/2012/11/11/ubuntu-12-10-hibernateresume/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_12.10_hibernate.png" alt="ubuntu 12.10 hibernate"></p>
<p><a href="https://help.ubuntu.com/community/SwapFaq#line-98">https://help.ubuntu.com/community/SwapFaq#line-98</a></p>
<p>Ubuntu 12.10 をインストールしたネットブックInspiron duo をハイバネートするようにしてみました。ちなみにInspiron duo のディスプレイは、反転した状態でふたをしてもハイバネートやサスペンドしないようにできています。</p>
<ol>
<li>目標<br>ハイバネートでG1&#x2F;S4 に遷移した後、元の状態に復帰することが目標です。詳しく知らないのですが、ACPI 電源状態は以下のようです。</li>
</ol>
<p>G0<br>S0<br>起動状態</p>
<p>G1<br>S1<br>省電力</p>
<p>S2<br>CPU 電源OFF</p>
<p>S3<br>スタンバイ&#x2F;スリープ(Suspend to RAM)</p>
<p>S4<br>ハイバネート(Suspend to Disk)</p>
<p>G2<br>S5<br>ソフト電源OFF</p>
<p>G3<br>メカニカル電源OFF</p>
<ol start="2">
<li>コマンドラインで試してみます</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> pm-hibernate</span><br></pre></td></tr></table></figure>

<p>電源を入れても元の状態に復帰しないので、GRUB を設定することにします。</p>
<ol start="3">
<li>GRUB の設定<br>swap パーティションのUUID は&#x2F;etc&#x2F;fstab やgparted で調べておきます。</li>
</ol>
<figure class="highlight text"><figcaption><span>/etc/default/grub</span></figcaption><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX=&quot;resume=UUID=001d9fdb-7e31-40ab-af01-cb124b8bc710&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> update-grub</span><br><span class="line">$ <span class="built_in">sudo</span> update-initramfs -u</span><br></pre></td></tr></table></figure>

<p>これでハイバネート後に復帰するようになりました。</p>
<ol start="4">
<li>システム設定でハイバネートを選択できるようにします。</li>
</ol>
<figure class="highlight text"><figcaption><span>/etc/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla</span></figcaption><table><tr><td class="code"><pre><span class="line">[Re-enable hibernate by default]</span><br><span class="line">Identity=unix-user:*</span><br><span class="line">Action=org.freedesktop.upower.hibernate</span><br><span class="line">ResultActive=yes</span><br></pre></td></tr></table></figure>




<ol start="5">
<li>GNOME Shell のメニューからハイバネート<br><a href="https://extensions.gnome.org/extension/5/alternative-status-menu/">https://extensions.gnome.org/extension/5/alternative-status-menu/</a><br>Suspend メニューは表示されますが、Hibernate メニューがでてきませんでした。なぜだろう。<br><strong>Edit:</strong><br>暫定的に表示するには…</li>
</ol>
<figure class="highlight text"><figcaption><span>~/.local/share/gnome-shell/extensions/alternative-status-menu@gnome-shell-extensions.gcampax.github.com/extension.js</span></figcaption><table><tr><td class="code"><pre><span class="line">function updateHibernate(object, pspec, item) &#123;</span><br><span class="line">    //item.actor.visible = object.get_can_hibernate() &amp;&amp; settings.get_boolean(&#x27;allow-hibernate&#x27;);</span><br><span class="line">    item.actor.visible = object.get_can_hibernate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Unity 4.0 + GNOME Shell 3.6</title>
    <url>/2012/11/14/unity-4-0-gnome-shell-3-6/</url>
    <content><![CDATA[<p><img src="/images/unity3d_4.0_wine.png" alt="unity 4.0 wine 1.5.17"></p>
<p><a href="http://blogs.unity3d.com/2012/11/13/unity-4-is-out/">http://blogs.unity3d.com/2012/11/13/unity-4-is-out/</a></p>
<p>Unity 4.0 (デスクトップ環境のUnity ではなくUnity3D の方)がリリースされたので、フリー版をUbuntu 12.10 x86_64, Linux kernel 3.5.0, GNOME Shell 3.6.1 + Wine 1.5.17 の環境で試してみよう。</p>
<p>つづく…</p>
]]></content>
      <categories>
        <category>3d</category>
      </categories>
      <tags>
        <tag>unity3d</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 12.10 + Unity 4.0</title>
    <url>/2012/11/17/ubuntu-12-10-unity-4-0/</url>
    <content><![CDATA[<p><img src="/images/unity4_ubnuntu.png" alt="ubuntu 12.10 unity 4.0"></p>
<p>Unity 4.0 で作成したアプリをUbuntu 12.10 x86_64 上で動かしてみました。Unity 4.0 ではLinux 向けにネイティブアプリを出力できるようになっています。ビルドの設定では「x86」、「x86_64 」、「x86 + x86_64 (Universal)」が選択できます。Windows 8 の環境では以下のように表示されました。</p>
<p><a href="/images/uploads/2012/11/unity4_build_settings.png"><img src="/images/uploads/2012/11/unity4_build_settings-600x560.png" alt="unity 4.0 build settings"></a></p>
<p>ちなみに、過去(2009年なのでバージョン2.6 かな)のバージョンのUnity で作成したIsland Demo のWindows 向けロードモジュールがハードディスクの中にあったのでWine で動かしてみました。問題なく動きました。</p>
<p><a href="/images/uploads/2012/11/unity_island_demo_2009_wine.png"><img src="/images/uploads/2012/11/unity_island_demo_2009_wine-600x375.png" alt="unity island demo 2009 wine"></a></p>
<p><strong>Edit:</strong><br>Unity 4.0 で出力されたLinux 用実行形式ファイルの情報はこんな感じ。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ file MyFirst.x86*</span><br><span class="line">MyFirst.x86:    ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), <span class="keyword">for</span> GNU/Linux 2.6.15, BuildID[sha1]=0x650aeda57c5cf21ae3934e7a753eaef9ed525f2a, stripped</span><br><span class="line">MyFirst.x86_64: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), <span class="keyword">for</span> GNU/Linux 2.6.15, BuildID[sha1]=0xa877bae6da45dc12eb314505bf5ec6bf96b3b503, stripped</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>3d</category>
      </categories>
      <tags>
        <tag>unity3d</tag>
      </tags>
  </entry>
  <entry>
    <title>Thunderbird + GMail + Google Calendar + Google Tasks</title>
    <url>/2012/12/08/thunderbird-gmail-google-calendar-google-tasks/</url>
    <content><![CDATA[<p>Thunderbird とGoogle のメール、カレンダー、TODO を同期してみました。</p>
<h3 id="Thunderbird-のインストール"><a href="#Thunderbird-のインストール" class="headerlink" title="Thunderbird のインストール"></a>Thunderbird のインストール</h3><p>thunderbird をインストールします。</p>
<h3 id="Thunderbird-アドオンのインストール"><a href="#Thunderbird-アドオンのインストール" class="headerlink" title="Thunderbird アドオンのインストール"></a>Thunderbird アドオンのインストール</h3><p>Thunderbirdで、<br>[アドオン]メニューから下記のアドオンを検索してインストールします。</p>
<ul>
<li><p>Lightning<br><a href="https://addons.mozilla.org/ja/thunderbird/addon/lightning/">https://addons.mozilla.org/ja/thunderbird/addon/lightning/</a></p>
</li>
<li><p>Provider for Google Calendar<br><a href="https://addons.mozilla.org/ja/thunderbird/addon/provider-for-google-calendar/">https://addons.mozilla.org/ja/thunderbird/addon/provider-for-google-calendar/</a></p>
</li>
<li><p>Google Tasks Sync<br><a href="https://addons.mozilla.org/ja/thunderbird/addon/google-tasks-sync/">https://addons.mozilla.org/ja/thunderbird/addon/google-tasks-sync/</a></p>
</li>
<li><p>Google Contacts<br><a href="https://addons.mozilla.org/ja/thunderbird/addon/google-contacts/">https://addons.mozilla.org/ja/thunderbird/addon/google-contacts/</a></p>
</li>
</ul>
<h3 id="メールアカウントの設定"><a href="#メールアカウントの設定" class="headerlink" title="メールアカウントの設定"></a>メールアカウントの設定</h3><p>Thunderbird で、</p>
<ol>
<li><p>[新規作成]-[既存のメールアカウント…]メニューを選択</p>
</li>
<li><p>Google のアカウント情報を指定</p>
</li>
</ol>
<h3 id="Google-カレンダーのアドレスの取得"><a href="#Google-カレンダーのアドレスの取得" class="headerlink" title="Google カレンダーのアドレスの取得"></a>Google カレンダーのアドレスの取得</h3><p>Google カレンダーで、</p>
<ol>
<li><p>[設定]メニューを選択</p>
</li>
<li><p>[カレンダー]タブをクリック</p>
</li>
<li><p>[このカレンダーを共有]リンクをクリック</p>
</li>
<li><p>[カレンダーの情報]タブをクリック</p>
</li>
<li><p>カレンダーのアドレスの[XML]リンクを右クリックして[リンクのURLをコピー]</p>
</li>
</ol>
<h3 id="カレンダーの同期設定"><a href="#カレンダーの同期設定" class="headerlink" title="カレンダーの同期設定"></a>カレンダーの同期設定</h3><p>Thunderbird で、</p>
<ol>
<li>[新規作成]-[カレンダー…]メニューを選択</li>
</ol>
<pre><code>* カレンダーの保存先: ネットワークのサーバに保存する


* フォーマット: Google カレンダー


* 場所: 上記手順で取得したGoogle カレンダーのアドレス


* オフラインサポート: チェック


* パスワードマネージャにこのパスワードを保存する。: チェック


* カレンダー名を設定
</code></pre>
<h3 id="TODO-の同期設定"><a href="#TODO-の同期設定" class="headerlink" title="TODO の同期設定"></a>TODO の同期設定</h3><p>Thunderbird で、</p>
<ol>
<li><p>右下ペインの「Google Tasks Sync」の「Click here to get started.」をクリック</p>
</li>
<li><p>アカウント情報を指定してログイン</p>
</li>
<li><p>[アクセスを許可]をクリック</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Android-x86 4.2.1</title>
    <url>/2012/12/26/android-x86-4-2-1/</url>
    <content><![CDATA[<p><img src="/images/android-x86_4.2.1.png" alt="android-x86 4.2.1"></p>
<p><a href="http://code.google.com/p/android-x86/downloads/detail?name=android-x86-4.2-20121225.iso">http://code.google.com/p/android-x86/downloads/detail?name=android-x86-4.2-20121225.iso</a></p>
<p>Android-x86 4.2.1 が公開されたのでInspiron Duo にインストールして、Windows 8 64bit やUbuntu 12.10 x86_64 とのマルチブート環境を構築してみました。Android-x86 4.2 では過去の問題が改善されていることを確認できました。ファーストリリースだけあって、まだ動かない&#x2F;動作が不安定になるアプリがあるみたい。方向キー二度押ししても画面が回転しなくなったみたい。</p>
<h3 id="改善された過去の問題"><a href="#改善された過去の問題" class="headerlink" title="改善された過去の問題"></a>改善された過去の問題</h3><ul>
<li><p>物理&#x2F;仮想キーボードの切り替え、キーマップの改善</p>
</li>
<li><p>更新がおかしかった時計の改善</p>
</li>
<li><p>電源ボタン二度押ししなくても電源メニュー表示</p>
</li>
</ul>
<h3 id="Google-Play-からインストールしたアプリ"><a href="#Google-Play-からインストールしたアプリ" class="headerlink" title="Google Play からインストールしたアプリ"></a>Google Play からインストールしたアプリ</h3><ul>
<li><p>ES ファイルエクスプローラ</p>
</li>
<li><p>Google ドライブ</p>
</li>
<li><p>VLC</p>
</li>
<li><p>XiiaLive</p>
</li>
<li><p>Seesmic</p>
</li>
</ul>
<h3 id="自前でビルドしたアプリ"><a href="#自前でビルドしたアプリ" class="headerlink" title="自前でビルドしたアプリ"></a>自前でビルドしたアプリ</h3><ul>
<li>Fennec (Firefox) 19.0</li>
</ul>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Move the hot corner of the message tray</title>
    <url>/2012/12/31/move-the-hot-corner-of-the-message-tray/</url>
    <content><![CDATA[<p><a href="http://askubuntu.com/questions/203220/can-the-gnome-3-6-notification-area-be-shrinked">http://askubuntu.com/questions/203220/can-the-gnome-3-6-notification-area-be-shrinked</a></p>
<p>GNOME Shell 3.6 では画面下端にマウスカーソルを持って行くと、メッセージトレイが表示されます。オートハイドに設定したドックアプリ(AWN)と併用していると、ドックアプリを操作したいのにメッセージトレイが表示されてしまって、困ります。GNOME Shell 3.6 に対応したGNOME Shell extension が見当たりませんでしたので、GNOME Shell をカスタマイズして、暫定的に画面右下隅をメッセージトレイのホットコーナーにしてみました。</p>
<figure class="highlight javascript"><figcaption><span>/usr/share/gnome-shell/js/ui/messageTray.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Time the user needs to leave the mouse on the bottom pixel row to open the tray</span></span><br><span class="line"><span class="comment">//const TRAY_DWELL_TIME = 1000; // ms</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TRAY_DWELL_TIME</span> = <span class="number">50</span>; <span class="comment">// ms</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>/usr/share/gnome-shell/js/ui/messageTray.js</span></figcaption><table><tr><td class="code"><pre><span class="line">    <span class="attr">_checkTrayDwell</span>: <span class="keyword">function</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> monitor = <span class="title class_">Main</span>.<span class="property">layoutManager</span>.<span class="property">bottomMonitor</span>;</span><br><span class="line"><span class="comment">//      let shouldDwell = (x &gt;= monitor.x &amp;&amp; x &lt;= monitor.x + monitor.width &amp;&amp;</span></span><br><span class="line">        <span class="keyword">let</span> shouldDwell = (x &gt;= monitor.<span class="property">x</span> &amp;&amp; x == monitor.<span class="property">x</span> + monitor.<span class="property">width</span> - <span class="number">1</span> &amp;&amp;</span><br><span class="line">                           y == monitor.<span class="property">y</span> + monitor.<span class="property">height</span> - <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>/usr/share/gnome-shell/js/ui/messageTray.js</span></figcaption><table><tr><td class="code"><pre><span class="line">        <span class="variable language_">this</span>.<span class="title function_">_tween</span>(<span class="variable language_">this</span>.<span class="property">_desktopClone</span>, <span class="string">&#x27;_desktopCloneState&#x27;</span>, <span class="title class_">State</span>.<span class="property">SHOWN</span>,</span><br><span class="line"><span class="comment">//                  &#123; y: -this.actor.height,</span></span><br><span class="line">                    &#123; <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">                      <span class="attr">time</span>: <span class="variable constant_">ANIMATION_TIME</span>,</span><br><span class="line">                      <span class="attr">transition</span>: <span class="string">&#x27;easeOutQuad&#x27;</span>,</span><br><span class="line">                      <span class="attr">onUpdate</span>: <span class="title class_">Lang</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">_updateDesktopCloneClip</span>)</span><br><span class="line">                    &#125;);</span><br></pre></td></tr></table></figure>

<p>GNOME Shell Extension にして投稿してくれる人がいるといいな。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>moc 2.5.0 beta1 + patch r2519/r2520</title>
    <url>/2013/01/04/moc-2-5-0-beta1-patch-r2519r2520/</url>
    <content><![CDATA[<p><a href="http://moc.daper.net/node/850">http://moc.daper.net/node/850</a></p>
<p>moc (music on console) はコンソールで動作する軽量な音楽プレイヤーです。マルチバイト文字に依存してトリム位置がずれるバグがありましたが、解決(2.5.0 beta1 + patch r2519&#x2F;r2520)されました。これで日本語のパスやタグが入っていてもレイアウトが崩れなくなりました。現時点でのUbuntu のリポジトリに存在するmoc のバージョンは2.5.0 alpha4 + svn20120224-1ubuntu1 ですので、最新のソースを取得して、コンパイル、インストールしてみました。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get build-dep moc</span><br><span class="line">$ svn co svn://daper.net/moc/trunk</span><br><span class="line">$ <span class="built_in">cd</span> trunk</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ ./configure --prefix=/usr</span><br><span class="line">$ make -j4</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<p>過去の記事<br><a href="http://ktkr3d.site11.com/2012/05/31/moc-music-on-console/">http://ktkr3d.site11.com/2012/05/31/moc-music-on-console/</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 12.10 + Calipso CMS (node.js, express, MongoDB)</title>
    <url>/2013/01/12/ubuntu-12-10-calipso-cms-node-js-express-mongodb/</url>
    <content><![CDATA[<p><img src="/images/Calipso_CMS.png" alt="calipso node.js express mongodb ubuntu"></p>
<p><a href="https://github.com/cliftonc/calipso">https://github.com/cliftonc/calipso</a></p>
<p>Calipso はnode.js(サーバサイドJavaScript)、express(node.js 上のフレームワーク)、MongoDB で構築されたシンプルなCMS アプリです。node.js のお試し用にUbuntu 12.10 上でCalipso 0.3.17 の環境を構築してみました。</p>
<ol>
<li>パッケージのインストール<br>Ubuntu オフィシャルリポジトリのnode.js はバージョンが古いのでPPA のリポジトリを追加します。</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:chris-lea/node.js  </span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update  </span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install nodejs npm mongodb</span><br></pre></td></tr></table></figure>




<ol start="2">
<li>Calipso のインストールの前に<br>このままの状態でCalipso のインストールを進めると、node コマンドが見つからない旨のメッセージを出力して、途中で終了してしまいます。Debian&#x2F;Ubuntu には別にnode コマンドがあるため、node.js のコマンドはnodejs になっているようです。暫定的にシンボリックリンクを作成しておきます。作成したシンボリックリンク(&#x2F;usr&#x2F;bin&#x2F;node)は後で消しておきます。</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/bin/nodejs /usr/bin/node</span><br></pre></td></tr></table></figure>




<ol start="3">
<li>Calipso のインストールと起動</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> npm install -g node-gyp</span><br><span class="line">$ <span class="built_in">sudo</span> npm install -g calipso</span><br><span class="line">$ <span class="built_in">sudo</span> calipso site /var/www/MySite</span><br><span class="line">$ <span class="built_in">cd</span> /var/www/MySite</span><br><span class="line">$ <span class="built_in">sudo</span> calipso server</span><br></pre></td></tr></table></figure>




<ol start="4">
<li><p>ブラウザからアクセス<br><a href="http://localhost:3000/">http://localhost:3000</a><br>表示されたウィザードに従って、データベースの作成、アカウントの作成をします。表示に関しては、一応、日本語設定が用意されています。</p>
</li>
<li><p>nginx からリバースプロキシで接続</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install nginx</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>/etc/nginx/sites-available/default</span></figcaption><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    # First attempt to serve request as file, then</span><br><span class="line">    # as directory, then fall back to displaying a 404.</span><br><span class="line">    #try_files $uri $uri/ /index.html;</span><br><span class="line">    # Uncomment to enable naxsi on this location</span><br><span class="line">    # include /etc/nginx/naxsi.rules</span><br><span class="line">    proxy_pass http://localhost:3000/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> /etc/init.d/nginx reload</span><br><span class="line">$ <span class="built_in">sudo</span> /etc/init.d/nginx restart</span><br></pre></td></tr></table></figure>

<p><a href="http://localhost/">http://localhost</a> からアクセスできるようになります。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Windows 8 Boot Manager + GRUB4DOS + Android-x86</title>
    <url>/2013/01/19/windows-8-boot-manager-grub4dos-android-x86/</url>
    <content><![CDATA[<p>Windows 8 のブートマネージャからAndorid-x86 を起動する環境を、できるだけWindows 環境でできる手段で構築してみました。Andorid-x86 を起動する際にはGRUB がチェインロードされるような表示になります。Windows 8 のブートマネージャはタッチスクリーンが有効なので、キーボードを使わないで起動するOS を選択できますね。(ご質問いただいたので考えてみました)</p>
<ol>
<li><p>Windows 8 のインストール<br>Windows 8 をインストールします。私の環境では、以下のようなパーティション構成になりました。<br>第1パーティション(&#x2F;dev&#x2F;sda1) ntfs<br>第2パーティション(&#x2F;dev&#x2F;sda2) ntfs Windows 8</p>
</li>
<li><p>Andorid-x86 のインストール<br>Android-x86 をWindows 8 のインストールされているNTFS パーティションにインストールします。もちろん、別のパーティションにインストールしても構いません。<br>インストール先: &#x2F;dev&#x2F;sda2<br>フォーマット: しない<br>GRUB: インストールしない</p>
</li>
<li><p>GRUB4DOS のダウンロード<br><a href="http://sourceforge.net/projects/grub4dos/files/GRUB4DOS/">http://sourceforge.net/projects/grub4dos/files/GRUB4DOS/</a> からgrub4dos-0.4.4.zip をダウンロードして、ZIP内の以下の4つのファイルをC:\ に展開します。</p>
</li>
</ol>
<pre><code>* default


* grldr


* grldr.mbr


* menu.lst
</code></pre>
<ol start="4">
<li>GRUB4DOS の設定<br>GRUB4DOS でAndroid-x86 を起動できるようにC:\menu.lst を編集します。</li>
</ol>
<figure class="highlight text"><figcaption><span>C:¥menu.lst</span></figcaption><table><tr><td class="code"><pre><span class="line">timeout 3</span><br><span class="line">default /default</span><br><span class="line"></span><br><span class="line">title Android-x86 4.2.1 on /dev/sda2</span><br><span class="line">root (hd0,1)</span><br><span class="line">kernel /android-4.2-20121205/kernel root=/dev/ram0 androidboot.hardware=android_x86 acpi_sleep=s3_bios,s3_mode SRC=/android-4.2-20121205 DATA=</span><br><span class="line">initrd /android-4.2-20121205/initrd.img</span><br><span class="line">savedefault</span><br><span class="line"></span><br><span class="line">title Android-x86 4.0.4 on /dev/sda2</span><br><span class="line">root (hd0,1)</span><br><span class="line">kernel /android-4.0-RC2/kernel root=/dev/ram0 androidboot.hardware=tegav2 acpi_sleep=s3_bios,s3_mode SRC=/android-4.0-RC2 DATA=</span><br><span class="line">initrd /android-4.0-RC2/initrd.img</span><br><span class="line">savedefault</span><br></pre></td></tr></table></figure>

<p>※ 1番目のディスクの2番目のパーティション番号は(hd0,1) のように番号を-1した値になるので要注意です。<br>※ 複数のバージョンを切り替えたい場合は複数件登録します。ただし、この起動の切り替えはタッチスクリーンが使えません。<br>※ タイムアウト時間は好みで秒数を指定します。0にするとGRUB4DOSの画面が表示されなくなります。</p>
<ol start="5">
<li>Windows 8 ブートマネージャにGRUB4DOS を登録<br>コマンドプロンプトアイコンを右クリックして、「管理者として実行」します。</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; bcdedit /create /d <span class="string">&quot;Android-x86&quot;</span> /application BOOTSECTOR</span><br></pre></td></tr></table></figure>

<p>上記コマンドで表示された値{☆}を以下のコマンドで使います。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; bcdedit /set &#123;☆&#125; device partition=C:</span><br><span class="line">&gt; bcdedit /set &#123;☆&#125; path \grldr.mbr</span><br><span class="line">&gt; bcdedit /displayorder &#123;☆&#125; /addlast</span><br></pre></td></tr></table></figure>




<p>ちなみに一旦別のブートローダにしてしまった後にWindows 8 のブートマネージャに戻すには、コマンドプロンプトアイコンを右クリックして、「管理者として実行」して、以下のコマンドを実行します。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; bcdboot C:\Windows</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 13.04 + GNOME Shell</title>
    <url>/2013/01/26/ubuntu-13-04-gnome-shell/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_13_04_gnome_shell-600x375.png" alt="ubuntu 13.04 raring ringtail gnome shell">](&#x2F;images&#x2F;uploads&#x2F;2013&#x2F;01&#x2F;ubuntu_13_04_gnome_shell.png)</p>
<p><a href="http://cdimage.ubuntu.com/daily-live/">http://cdimage.ubuntu.com/daily-live/</a></p>
<p>Ubuntu 13.04 Raring Ringtail のデイリービルドがライブISO イメージで公開されていますので、そろそろ環境構築をし始めます。デスクトップ環境はGNOME Shell にします。</p>
<ul>
<li><p>Linux Kernel は3.8.0 でした。</p>
</li>
<li><p>GNOME Shell  (ppa:gnome3-team&#x2F;gnome3)は3.6.2 のままでした。今後、3.8 に向けて更新されると思います。</p>
</li>
<li><p>Avant Window Navigator パッケージが登録されていませんでした。公式リポジトリから消えるかもしれません。</p>
</li>
<li><p>Code::Blocks が12.11　になっていました。</p>
</li>
</ul>
<p>Avant Window Navigator が消えていて残念でした。これを契機にGNOME Shell 拡張のDash to Dock に移行しましょうか。<br>Dash to Dock のデフォルトのアニメーション設定は遅いので、設定で少し速くなるように変更しました。クリック感がないのと、ドックからアプリケーションを一括で閉じられないのが気になりますが、慣れでしょうか。しばらく触ってみて物足りなければ、自前でビルドするか、CairoDock を使うと思います。</p>
<p><strong>EDIT:</strong></p>
<h3 id="Avant-Window-Navigator"><a href="#Avant-Window-Navigator" class="headerlink" title="Avant Window Navigator"></a>Avant Window Navigator</h3><p><a href="http://www.webupd8.org/2012/11/how-to-install-avant-window-navigator.html">http://www.webupd8.org/2012/11/how-to-install-avant-window-navigator.html</a><br>やはり少し不便なので、webupd8 のリポジトリ(quantal)を利用してAWN をインストールしてみました。</p>
<p><a href="/images/uploads/2013/01/ubuntu_13_04_gnome_shell_awn.png"><img src="/images/uploads/2013/01/ubuntu_13_04_gnome_shell_awn-600x375.png" alt="ubuntu 13.04 gnome shell awn"></a></p>
<h3 id="Quit-from-Dash-拡張"><a href="#Quit-from-Dash-拡張" class="headerlink" title="Quit from Dash 拡張"></a>Quit from Dash 拡張</h3><p><a href="https://extensions.gnome.org/extension/559/quit-from-dash/">https://extensions.gnome.org/extension/559/quit-from-dash/</a><br>調べてみたら、Quit from Dash 拡張を使えば、Dash to Dock からでも複数起動した同種のアプリケーションを一括して終了させることができました。</p>
<h3 id="現在使用中のGNOME-Shell-Extension"><a href="#現在使用中のGNOME-Shell-Extension" class="headerlink" title="現在使用中のGNOME Shell Extension"></a>現在使用中のGNOME Shell Extension</h3><ul>
<li><p>Auto hide top panel</p>
</li>
<li><p>Drop down terminal</p>
</li>
<li><p>GMail Notify</p>
</li>
<li><p>メッセージトレイのカスタマイズ<br><a href="http://ktkr3d.site11.com/2012/12/31/move-the-hot-corner-of-the-message-tray/">http://ktkr3d.site11.com/2012/12/31/move-the-hot-corner-of-the-message-tray/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 13.04 + GNOME Shell 3.7.5</title>
    <url>/2013/02/07/ubuntu-13-04-gnome-shell-3-7-5/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_13.04_gnome_shell_3.7.5-600x337.png" alt="ubuntu_13.04_gnome_shell_3.7.5">](&#x2F;images&#x2F;uploads&#x2F;2013&#x2F;02&#x2F;ubuntu_13.04_gnome_shell_3.7.5.png)</p>
<p><a href="https://launchpad.net/~gnome3-team/+archive/gnome3">https://launchpad.net/~gnome3-team/+archive/gnome3</a><br><a href="https://launchpad.net/~ricotz/+archive/testing">https://launchpad.net/~ricotz/+archive/testing</a></p>
<p>Ubuntu 13.04 x86_64 デイリービルドにGNOME Shell 3.7.5 をインストールしてみました。</p>
<h3 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h3><p>以下のPPA をソフトウェアソースに追加して、gnome-shell パッケージをインストール&#x2F;アップデートします。</p>
<ul>
<li><p>ppa:gnome3-team&#x2F;gnome3</p>
</li>
<li><p>ppa:ricotz&#x2F;testing</p>
</li>
</ul>
<h3 id="GNOME-Shell-3-7-5-のチェンジログ"><a href="#GNOME-Shell-3-7-5-のチェンジログ" class="headerlink" title="GNOME Shell 3.7.5 のチェンジログ"></a>GNOME Shell 3.7.5 のチェンジログ</h3><p><a href="http://ftp.acc.umu.se/pub/GNOME/sources/gnome-shell/3.7/gnome-shell-3.7.5.news">http://ftp.acc.umu.se/pub/GNOME/sources/gnome-shell/3.7/gnome-shell-3.7.5.news</a></p>
<ul>
<li>MessageTray: pass keyboard events to tray icons</li>
<li>network: add support for virtual devices</li>
<li>gdm: Allow right-clicking buttons for left-handed users</li>
<li>Make list search results span all available horizontal space</li>
<li>Make Show-Applications button depress when held down</li>
<li>Set a max width on search results</li>
<li>Reserve scrollbar allocation for automatic policy</li>
<li>Improve scaling algorithm for window thumbnails</li>
</ul>
<h3 id="GNOME-Shell-Extension-のバージョン指定の更新"><a href="#GNOME-Shell-Extension-のバージョン指定の更新" class="headerlink" title="GNOME Shell Extension のバージョン指定の更新"></a>GNOME Shell Extension のバージョン指定の更新</h3><p>Auto hide the top panel GNOME Shell Extension のバージョン指定を更新して、暫定的に動作させてみました。</p>
<figure class="highlight text"><figcaption><span>.local/share/gnome-shell/extensions/autohidetopbar2@werewolves.us/metadata.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  &quot;description&quot;: &quot;Auto hide the top panel&quot;,</span><br><span class="line">  &quot;extension-id&quot;: &quot;auto-hide-top-panel&quot;, </span><br><span class="line">  &quot;gettext-domain&quot;: &quot;gnome-shell-extensions&quot;, </span><br><span class="line">  &quot;name&quot;: &quot;Auto Hide Top Panel&quot;,</span><br><span class="line">  &quot;settings-schema&quot;: &quot;org.gnome.shell.extensions.auto-hide-top-panel&quot;, </span><br><span class="line">  &quot;shell-version&quot;: [</span><br><span class="line">    &quot;3.5.92&quot;, &quot;3.6.1&quot;, &quot;3.6&quot;, &quot;3.7.5&quot;</span><br><span class="line">  ], </span><br><span class="line">  &quot;url&quot;: &quot;http://fpmurphy.com/gnome-shell-extensions&quot;,</span><br><span class="line">  &quot;uuid&quot;: &quot;autohidetopbar2@werewolves.us&quot;,</span><br><span class="line">  &quot;version&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Cloud9 IDE</title>
    <url>/2013/02/09/cloud9-ide/</url>
    <content><![CDATA[<p><img src="/images/cloud9_ide.png" alt="Cloud9 IDE"></p>
<p><a href="https://github.com/ajaxorg/cloud9">https://github.com/ajaxorg/cloud9</a><br><a href="http://nodejs.org/dist/">http://nodejs.org/dist/</a></p>
<p>Node.js の統合開発環境であるCloude9 IDE をローカル環境に構築してみました。Cloude9 IDE の動作前提となるNode.js のバージョンは古めなので、nvm(Node Version Manager)を利用して、Node.js v0.6.21 をインストールしました。ちなみに現在の最新のNode.js のバージョンはv0.9.9 のようです。</p>
<h3 id="Node-Version-Manager-のインストール"><a href="#Node-Version-Manager-のインストール" class="headerlink" title="Node Version Manager のインストール"></a>Node Version Manager のインストール</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install build-essential libssl-dev curl git</span><br><span class="line">$ git <span class="built_in">clone</span> git://github.com/creationix/nvm.git ~/.nvm</span><br></pre></td></tr></table></figure>



<h3 id="Node-js-v0-6-21-とsourcemint-のインストール"><a href="#Node-js-v0-6-21-とsourcemint-のインストール" class="headerlink" title="Node.js v0.6.21 とsourcemint のインストール"></a>Node.js v0.6.21 とsourcemint のインストール</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.nvm/nvm.sh</span><br><span class="line">$ nvm install v0.6.21</span><br><span class="line">$ nvm use v0.6.21</span><br><span class="line">$ npm install -g sm</span><br></pre></td></tr></table></figure>



<h3 id="Cound9-IDE-のインストール"><a href="#Cound9-IDE-のインストール" class="headerlink" title="Cound9 IDE のインストール"></a>Cound9 IDE のインストール</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ajaxorg/cloud9.git ~/cloud9</span><br><span class="line">$ <span class="built_in">cd</span> ~/cloud9</span><br><span class="line">$ sm install</span><br></pre></td></tr></table></figure>



<h3 id="Cound9-IDE-の実行"><a href="#Cound9-IDE-の実行" class="headerlink" title="Cound9 IDE の実行"></a>Cound9 IDE の実行</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.nvm/nvm.sh</span><br><span class="line">$ nvm use v0.6.21</span><br><span class="line">$ <span class="built_in">cd</span> ~/cloud9/bin &amp;&amp; ./cloud9.sh</span><br></pre></td></tr></table></figure>



<h3 id="Cound9-IDE-画面の表示"><a href="#Cound9-IDE-画面の表示" class="headerlink" title="Cound9 IDE 画面の表示"></a>Cound9 IDE 画面の表示</h3><p>ブラウザで<a href="http://localhost:3131/">http://localhost:3131/</a> を開く。</p>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>AppJS</title>
    <url>/2013/02/10/appjs/</url>
    <content><![CDATA[<p><img src="/images/appjs.png" alt="AppJS Node.js"><br><a href="http://appjs.org/">http://appjs.org/</a><br><a href="https://github.com/appjs/appjs">https://github.com/appjs/appjs</a><br><a href="https://github.com/appjs/appjs/wiki">https://github.com/appjs/appjs/wiki</a></p>
<p>Node.js アプリをコマンドラインからデスクトップアプリとして実行するAppJS を試してみました。HTML, CSS, JavaScript でアプリケーションが実装できて、Windows, Mac(32bit のみ), Linux(x86&#x2F;x86_64) に対応しています。Unity のグローバルメニューにも対応していました。Node.js のバージョンはv0.8 系が良いようです。Linux x86_64 の環境でv0.9.9 ではうまく動作しませんでした。</p>
<ol>
<li>Node.js v0.8.19 のインストール</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.nvm/nvm.sh</span><br><span class="line">$ nvm install v0.8.19</span><br></pre></td></tr></table></figure>




<ol start="2">
<li>AppJS のインストール</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.nvm/nvm.sh</span><br><span class="line">$ nvm use v0.8.19</span><br><span class="line">$ npm install -g appjs</span><br></pre></td></tr></table></figure>




<ol start="3">
<li>アプリケーションの準備</li>
</ol>
<figure class="highlight javascript"><figcaption><span>~/appjs/app.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// load appjs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> appjs = <span class="built_in">require</span>(<span class="string">&#x27;appjs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// serve static files from a directory</span></span><br><span class="line">appjs.<span class="title function_">serveFilesFrom</span>(__dirname + <span class="string">&#x27;/content&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// handle requests from the browser</span></span><br><span class="line">appjs.<span class="property">router</span>.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">request, response, next</span>)&#123;</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;Hey! How are you &#x27;</span> + request.<span class="title function_">post</span>(<span class="string">&#x27;firstname&#x27;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a window</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">window</span> = appjs.<span class="title function_">createWindow</span>(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">640</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">460</span>,</span><br><span class="line">  <span class="attr">alpha</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// prepare the window when first created</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">on</span>(<span class="string">&#x27;create&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Window Created&quot;</span>);</span><br><span class="line">  <span class="comment">// window.frame controls the desktop window</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">frame</span>.<span class="title function_">show</span>().<span class="title function_">center</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// the window is ready when the DOM is loaded</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Window Ready&quot;</span>);</span><br><span class="line">  <span class="comment">// directly interact with the DOM</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">process</span> = process;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">module</span> = <span class="variable language_">module</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="comment">// show chrome devtools on f12 or commmand+option+j</span></span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">keyIdentifier</span> === <span class="string">&#x27;F12&#x27;</span> || e.<span class="property">keyCode</span> === <span class="number">74</span> &amp;&amp; e.<span class="property">metaKey</span> &amp;&amp; e.<span class="property">altKey</span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">frame</span>.<span class="title function_">openDevTools</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// cleanup code when window is closed</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Window Closed&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><figcaption><span>~/appjs/content/index.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Firstname&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Lastname&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>




<ol start="4">
<li>実行</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.nvm/nvm.sh</span><br><span class="line">$ nvm use v0.8.19</span><br><span class="line">$ <span class="built_in">export</span> NODE_PATH=<span class="variable">$&#123;NVM_PATH&#125;</span>_modules</span><br><span class="line">$ <span class="built_in">cd</span> ~/appjs/</span><br><span class="line">$ node --harmony app.js</span><br></pre></td></tr></table></figure>


<p>サンプルでは、[F12]キーにwindow.frame.openDevTools() をアサインしていて、キー押下により開発ツールウィンドウが開くようになっています。<br><a href="/images/uploads/2013/02/node_devtool.png"><img src="/images/uploads/2013/02/node_devtool-600x470.png" alt="Node.js devtool"></a></p>
<p><strong>EDIT:</strong></p>
<h3 id="サンプルのカスタマイズ"><a href="#サンプルのカスタマイズ" class="headerlink" title="サンプルのカスタマイズ"></a>サンプルのカスタマイズ</h3><p>HelloWorld サンプルをカスタマイズしてみました。日本語表示、メニュー構成の変更、ファイルオープンダイアログ、lame&#x2F;speaker パッケージを使ったMP3 の再生など。<br><a href="/images/uploads/2013/02/hello_world_appjs.png"><img src="/images/uploads/2013/02/hello_world_appjs-600x457.png" alt="hello world appjs"></a><br><a href="/images/uploads/2013/02/mp3player_js.png"><img src="/images/uploads/2013/02/mp3player_js.png" alt="mp3 player node.js"></a></p>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>scrumblr</title>
    <url>/2013/02/10/scrumblr/</url>
    <content><![CDATA[<p><img src="/images/scrumblr.png" alt="scrumblr node.js"><br><a href="https://github.com/aliasaria/scrumblr">https://github.com/aliasaria/scrumblr</a></p>
<p>Node.js で実装された掲示板アプリscrumblr をインストールしてみました。socket.io を使っていて、複数のブラウザで掲示板をリアルタイムに共有できます。ちょっとしたメモをネットワークを介して共有するのに便利かもしれません。</p>
<ol>
<li>nvm のインストール</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install build-essential libssl-dev curl git</span><br><span class="line">$ git <span class="built_in">clone</span> git://github.com/creationix/nvm.git ~/.nvm</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>scrumblr のインストール</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install redis-server</span><br><span class="line">$ <span class="built_in">source</span> ~/.nvm/nvm.sh</span><br><span class="line">$ nvm install v0.9.9</span><br><span class="line">$ nvm use v0.9.9</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/aliasaria/scrumblr ~/scrumblr</span><br><span class="line">$ <span class="built_in">cd</span> ~/scrumblr</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>scrumblr サーバの実行</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start Scrumblr Server</span></span><br><span class="line"><span class="comment"># http://localhost:3132</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.nvm/nvm.sh</span><br><span class="line">nvm use v0.9.9</span><br><span class="line"><span class="built_in">cd</span> ~/scrumblr</span><br><span class="line">node server.js 3132</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>scrumblr の表示<br>ブラウザで<a href="http://localhost:3132/">http://localhost:3132</a> を開きます。</li>
</ol>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>Gitg and GeanyVC</title>
    <url>/2013/02/19/gitg-and-geanyvc/</url>
    <content><![CDATA[<p><img src="/images/gitg_without_overlay_scroll_bar.png" alt="gitg without overlay scroll bar"></p>
<p>Ubuntu 13.04 + GNOME Shell 3.7.5 で、Git クライアントを試してみました。</p>
<ul>
<li><p>Git クライアント一覧<br><a href="https://git.wiki.kernel.org/index.php/InterfacesFrontendsAndTools#Graphical_Interfaces">https://git.wiki.kernel.org/index.php/InterfacesFrontendsAndTools#Graphical_Interfaces</a></p>
</li>
<li><p>Git クライアント機能比較<br><a href="https://git.wiki.kernel.org/index.php/InterfacesFrontendsAndTools#Summary_.28feature_matrix.29">https://git.wiki.kernel.org/index.php/InterfacesFrontendsAndTools#Summary_.28feature_matrix.29</a></p>
</li>
</ul>
<h3 id="gitg"><a href="#gitg" class="headerlink" title="gitg"></a>gitg</h3><p>プッシュもできて使いやすそうです。日本語のpo を公開されている方がいらっしゃいましたので、利用させていただきました。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install gitg</span><br><span class="line">$ wget https://raw.github.com/miyucy/gitg-ja/master/ja.po</span><br><span class="line">$ sed -e <span class="string">&quot;s/, fuzzy//&quot;</span> ja.po | grep -v <span class="string">&quot;^#$&quot;</span> &gt; ja.po.cf</span><br><span class="line">$ msgfmt -o gitg.mo ja.po.cf</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cp</span> gitg.mo /usr/share/locale/ja/LC_MESSAGES/</span><br></pre></td></tr></table></figure>

<p><a href="http://sourceforge.jp/projects/freshmeat_gitg/howto/usage">http://sourceforge.jp/projects/freshmeat_gitg/howto/usage</a></p>
<ul>
<li><p>プッシュ<br>ローカルブランチのアイコン(オレンジ色)を右クリックして、[ブランチをプッシュ]サブメニューから選択します。</p>
</li>
<li><p>プル<br>[ファイル]-[Repository Properties]でリモートのURL を選んで[フェッチ]、[ブランチ]ドロップダウンリストを変更してリモートブランチを表示、リモートブランチのアイコンをローカルのブランチのアイコンにドラッグ、[マージ]を選択します。</p>
</li>
</ul>
<p>ただし、オーバーレイスクロールバーが有効になっていると、各ペインの背景色が黒くなってしまうようです。オーバーレイスクロールバーを無効にしておきます。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="built_in">export</span> LIBOVERLAY_SCROLLBAR=0 &gt;&gt; ~/.xprofile</span><br></pre></td></tr></table></figure>

<p>&#x2F;usr&#x2F;share&#x2F;gitg&#x2F;ui&#x2F;gitg-window.ui をカスタマイズすれば対処できるのかもしれませんが、よくわかりませんでした。</p>
<h3 id="GeanyVC"><a href="#GeanyVC" class="headerlink" title="GeanyVC"></a>GeanyVC</h3><p>私はテキストエディタにGeany を利用しているので、コミットならGeanyVC プラグインが利用できます。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install geany-plugin-vc</span><br></pre></td></tr></table></figure>

<p>インストールしたら、Geany の[ツール]-[プラグインマネージャ]でGeanyVC プラグインを有効にした後で、[ツール]-[VC]メニューから操作します。</p>
<h3 id="RabbitVCS"><a href="#RabbitVCS" class="headerlink" title="RabbitVCS"></a>RabbitVCS</h3><p>Ubuntu 13.04 のリポジトリにはパッケージがなく、12.10 のパッケージもNautilus のバージョンが新しいため(?)にうまく動きませんでした。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Android-x86 4.2.2</title>
    <url>/2013/02/28/android-x86-4-2-2/</url>
    <content><![CDATA[<p><img src="/images/android-x86_4.2.2_duo.png" alt="android-x86 4.2.2 inspiron duo"></p>
<p><a href="http://www.android-x86.org/releases/build-20130228">http://www.android-x86.org/releases/build-20130228</a></p>
<p>新しいAndorid-x86 4.2.2 のISO イメージが公開されたので、いつものようにInspion duo にインストールしてみました。Ubuntu をインストール済みのパーティションにフォーマットせずにインストールして、GRUB に起動用のエントリを追加しました。</p>
<figure class="highlight text"><figcaption><span>/etc/grub.d/40_custom</span></figcaption><table><tr><td class="code"><pre><span class="line">menuentry &quot;Android-x86 4.2.2&quot; --class android --class os &#123;</span><br><span class="line">    insmod ext2</span><br><span class="line">    set root=&#x27;(hd0,3)&#x27;</span><br><span class="line">    echo &#x27;Loading Android-x86 4.2.2 ...&#x27;</span><br><span class="line">    linux /android-4.2-test/kernel root=/dev/ram0 androidboot.hardware=android_x86 acpi_sleep=s3_bios,s3_mode SRC=/android-4.2-test DATA=</span><br><span class="line">    initrd /android-4.2-test/initrd.img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> update-grub</span><br></pre></td></tr></table></figure>

<p>今回のビルドは普通のデスクトップPC でも容易に起動しそうな気がします。</p>
<h3 id="EDIT"><a href="#EDIT" class="headerlink" title="EDIT"></a>EDIT</h3><p>デスクトップPC にインストールして、別のPC からAirDroid 経由で参照してみました。<br><a href="/images/uploads/2013/02/android-x86_4.2.2.png"><img src="/images/uploads/2013/02/android-x86_4.2.2.png" alt="android-x86 4.2.2"></a></p>
<p><a href="/images/uploads/2013/02/airdroid.png"><img src="/images/uploads/2013/02/airdroid.png" alt="airdroid android 4.2.2"></a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Xnoise Media Player 0.2.16 + MediterraneanNight GTK+ Theme</title>
    <url>/2013/03/10/xnoise-media-player-0-2-16-mediterraneannight-gtk-theme-2/</url>
    <content><![CDATA[<p><img src="/images/xnoise.png" alt="xnoise media player 0.2.16"></p>
<h3 id="xnoise"><a href="#xnoise" class="headerlink" title="xnoise"></a>xnoise</h3><p><a href="http://www.xnoise-media-player.com/">http://www.xnoise-media-player.com/</a><br>xnoise 0.2.16 がリリースされたのでUbuntu 13.04 x86_64 + GNOME Shell 3.7.90 の環境で試してみました。GStreamer を利用した音楽、ビデオ、インターネットストリームの再生が可能で、軽快に動作します。シンプルで整ったデザインになっています。また、コンテキストメニューに登録されている機能(ID3 タグ編集、親フォルダ表示)が便利です。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:shkn/xnoise</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install xnoise</span><br></pre></td></tr></table></figure>

<p><strong>主な機能:</strong></p>
<ul>
<li><p>メディアライブラリの高速な検索</p>
</li>
<li><p>アルバムアートグリッド表示</p>
</li>
<li><p>GStreamer を利用した音楽、ビデオ、ストリーム再生</p>
</li>
<li><p>イコライザ(プリセット付)</p>
</li>
<li><p>「最近再生された」「最も再生された」スマートプレイリスト</p>
</li>
<li><p>ID3 タグ編集</p>
</li>
<li><p>自動アルバムアート取得</p>
</li>
<li><p>軽量で高速</p>
</li>
<li><p>プラグイン(MPRIS、Magnatune、Last.fm、歌詞表示、通知、Ubuntu との連携)</p>
</li>
</ul>
<p><strong>Tips:</strong></p>
<ul>
<li><p>アルバムアート表示への切り替えは左上のX ロゴアイコンを押します。</p>
</li>
<li><p>インターネットストリームの追加は設定画面でURL を追加します。メイン画面左側のストリームライブラリ一覧に表示されたURL をクリックするとストリームに別名をつけることができます。</p>
</li>
<li><p>メニューバーの非表示は設定画面から実行します。(‘Use menu button’ ではわかりにくい…)</p>
</li>
<li><p>停止ボタンの非表示は設定画面から実行します。</p>
</li>
<li><p>トラックリストの列をカスタマイズするには、列名の上で右クリックして、各項目の表示&#x2F;非表示を切り替えます。</p>
</li>
<li><p>音が鳴らない場合は、一度、イコライザを表示してみるとよいかもしれません。</p>
</li>
<li><p>日本語化用のja.po を作って(作りかけて)みました。<br><a href="https://github.com/ktkr3d/xnoise-ja">https://github.com/ktkr3d/xnoise-ja</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ msgfmt -o ja.mo ja.po</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cp</span> ja.mo /usr/share/locale/ja/LC_MESSAGES/xnoise.mo</span><br></pre></td></tr></table></figure>






<h3 id="MediterraneanNight"><a href="#MediterraneanNight" class="headerlink" title="MediterraneanNight"></a>MediterraneanNight</h3><p><a href="http://gnome-look.org/content/show.php/?content=156782">http://gnome-look.org/content/show.php/?content=156782</a><br>今までGTK+ のテーマにGNOME Shell 標準のAdwaita を利用していましたが、選択箇所の文字が背景色と同じになって読めなくて困っていました。そこで、<a href="http://gnome-look.org/">http://gnome-look.org/</a> でGTK+ テーマを探したところ、MediterraneanNight がよさそうでしたので、あわせて利用してみました。ダウンロードしたアーカイブを<del>&#x2F;.themes&#x2F; と</del>&#x2F;.local&#x2F;share&#x2F;themes&#x2F; に展開して、gnome-tweak-tool の[テーマ]-[GTK+ テーマ]からテーマを選択して、適用します。<br>なお、このテーマは、GTK3 にunico-engine を、GTK2 にgtk2-engines-murrine とgtk2-engines-pixbuf を使用しますが、Ubuntu ではgtk2-engines-pixbuf がインストールされていませんでしたので、追加しておきます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install gtk2-engines-pixbuf</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu GNOME 13.04 daily build</title>
    <url>/2013/03/14/ubuntu-gnome-13-04-daily-build/</url>
    <content><![CDATA[<p><img src="/images/Ubuntu_GNOME_installer.png" alt="Ubuntu GNOME installer"></p>
<p><a href="http://cdimage.ubuntu.com/ubuntu-gnome/daily-live/current/">http://cdimage.ubuntu.com/ubuntu-gnome/daily-live/current/</a><br>Ubuntu GNOME 13.04 デイリービルドのISO イメージが公開されたので試してみました。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>BitTorrent Live Beta</title>
    <url>/2013/03/17/bittorrent-live-beta/</url>
    <content><![CDATA[<p><img src="/images/BitTorrentLive_Beta.png" alt="BitTorrent Live"></p>
<p><a href="http://live.bittorrent.com/">http://live.bittorrent.com/</a><br>P2P 技術を使ったWeb 型ライブストリーミングサービス「BitTorrent Live」のオープンベータテストが開始されたので、試してみました。Windows&#x2F;Mac&#x2F;Ubuntu 用のクライアントプログラムBTLive が配布されており、私はUbuntu 64bit 用をダウンロードしてインストールしました。インストールから視聴までの手順は以下のとおりです。</p>
<ol>
<li><p><a href="http://live.bittorrent.com/">http://live.bittorrent.com/</a> の一番下のリンクから各OS 用のクライアントプログラムをダウンロードして、インストールします。</p>
</li>
<li><p>[アプリケーション]-[インターネット]-[BTLive]を起動します。</p>
</li>
<li><p><a href="http://live.bittorrent.com/">http://live.bittorrent.com/</a> で公開されているチャンネルを視聴します。アカウントを登録すれば、配信もできます。配信はWebCam かエンコーダ等のアプリが利用できます。</p>
</li>
</ol>
<p>P2P なので、視聴者が増えた時に有利なようです。Peercast と同じような原理でしょうか。ポートを開ける手間がないのが、お手軽でよいかもしれません。手動でポートを開ける場合はUDP ports 31400-31499 らしいです。トレイアイコンをクリックすると、送受信のビットレートが表示されます。btlive コマンドのパラメタは以下のとおり。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ btlive --<span class="built_in">help</span></span><br><span class="line">usage: btlive [-h] [-v] [--force-version FORCED_VER] [-o OFFSET]</span><br><span class="line">              [-j TRACKER|SWARMPUBKEY] [--no-crashlog-reporting]</span><br><span class="line">              [--no-stats-thread] [--no-bench-thread] [--no-update-thread]</span><br><span class="line">              [--no-headless-thread] [--no-nat-detection] [--no-rtmp-server]</span><br><span class="line">              [--no-http-server] [--no-local-discovery] [--no-sysreqs]</span><br><span class="line">              [--ignore-headless | --force-headless] [--staging-bench]</span><br><span class="line">              [--staging-dau] [--staging-onair] [--testing-mode] [--nogui]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  -v, --version         show program<span class="string">&#x27;s version number and exit</span></span><br><span class="line"><span class="string">  --force-version FORCED_VER</span></span><br><span class="line"><span class="string">                        Forces Live to think that it is another version</span></span><br><span class="line"><span class="string">                        number. Must follow format 0.4.11.1234.</span></span><br><span class="line"><span class="string">  -o OFFSET, --offset OFFSET</span></span><br><span class="line"><span class="string">                        RTMP Server port offset (from 1935). A value of 100 is</span></span><br><span class="line"><span class="string">                        commonly used for sourcing.</span></span><br><span class="line"><span class="string">  -j TRACKER|SWARMPUBKEY, --join TRACKER|SWARMPUBKEY</span></span><br><span class="line"><span class="string">                        Swarm to autojoin on launch. Specify the tracker and</span></span><br><span class="line"><span class="string">                        the swarm public key, separated by a pipe symbol</span></span><br><span class="line"><span class="string">                        (&#x27;</span>|<span class="string">&#x27;).</span></span><br><span class="line"><span class="string">  --no-crashlog-reporting</span></span><br><span class="line"><span class="string">                        Disable all communication with the crashlog server.</span></span><br><span class="line"><span class="string">  --no-stats-thread     Disable debugging statistics being reported to</span></span><br><span class="line"><span class="string">                        graphite/statsd.</span></span><br><span class="line"><span class="string">  --no-bench-thread     Disable bench statistics.</span></span><br><span class="line"><span class="string">  --no-update-thread    Disable autoupdate checking.</span></span><br><span class="line"><span class="string">  --no-headless-thread  Disable all communication with the automation server.</span></span><br><span class="line"><span class="string">  --no-nat-detection    Disable NAT detection on launch.</span></span><br><span class="line"><span class="string">  --no-rtmp-server      Disable RTMP server.</span></span><br><span class="line"><span class="string">  --no-http-server      Disable HTTP server.</span></span><br><span class="line"><span class="string">  --no-local-discovery  Disable local peer discovery.</span></span><br><span class="line"><span class="string">  --no-sysreqs          Disable system requirements for launch/install.</span></span><br><span class="line"><span class="string">  --ignore-headless     Set headless_enabled pref to off and ignore any</span></span><br><span class="line"><span class="string">                        scheduled tests.</span></span><br><span class="line"><span class="string">  --force-headless      Set headless_enabled pref to on and join any scheduled</span></span><br><span class="line"><span class="string">                        tests.</span></span><br><span class="line"><span class="string">  --staging-bench       Use staging bench server for bench statistics.</span></span><br><span class="line"><span class="string">  --staging-dau         Use staging server for autoupdate.</span></span><br><span class="line"><span class="string">  --staging-onair       Use staging server for on-air messaging.</span></span><br><span class="line"><span class="string">  --testing-mode        Disable all non-essential network communication.</span></span><br><span class="line"><span class="string">                        Implies --no-crashlog-reporting, --no-nat-detection,</span></span><br><span class="line"><span class="string">                        --no-stats-thread, --no-update-thread, --no-headless-</span></span><br><span class="line"><span class="string">                        thread, and --no-sysreqs.</span></span><br><span class="line"><span class="string">  --nogui               Disable GUI/icon.</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>p2p</category>
      </categories>
  </entry>
  <entry>
    <title>Create a shortcut key in xnoise</title>
    <url>/2013/03/17/create-a-shortcut-key-in-xnoise/</url>
    <content><![CDATA[<p><img src="/images/xnoise_shortcut_key.png" alt="xnoise shortcut key"></p>
<p>先日のアップデートでxnoise のメディアブラウザ表示&#x2F;非表示切り替えボタンが無くなりました。ボタンがメディアブラウザの上に被っていたので邪魔ではあったのですが、無いと不便です。そこで、簡単にメディアブラウザの表示&#x2F;非表示を切り替えるためのショートカットキー(F9)を追加してみました。xnoise はVala 言語で実装されているようですので、valac パッケージをインストールして、ビルドしています。</p>
<ol>
<li>valac のインストールとソースコードの取得</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get build-dep xnoise</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install valac</span><br><span class="line">$ git <span class="built_in">clone</span> https://bitbucket.org/shuerhaaken/xnoise.git</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>ソースコードの修正</li>
</ol>
<figure class="highlight text"><figcaption><span>./xnoise/libxnoise/MainWindow/xnoise-main-window.vala</span></figcaption><table><tr><td class="code"><pre><span class="line">case Gdk.Key.F9: &#123;</span><br><span class="line">    toggle_media_browser_visibility();</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">case Gdk.Key.F11: &#123;</span><br><span class="line">    this.toggle_mainwindow_fullscreen();</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>ビルドとインストール</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> xnoise</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ make</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>ConkyForecast Japanese Translation</title>
    <url>/2013/03/24/conkyforecast-japanese-translation/</url>
    <content><![CDATA[<p><img src="/images/conkyforecast_japanese.png" alt="conkyforecast japanese"></p>
<p><a href="https://github.com/ktkr3d/conkyforecast-ja">https://github.com/ktkr3d/conkyforecast-ja</a></p>
<p>ConkyForecast 用の日本語PO ファイルを作成して、Conky-HTC を日本語化してみました。また、Conky-HTC の表示用スクリプトを整理してみました。</p>
<h4 id="パッケージのインストール"><a href="#パッケージのインストール" class="headerlink" title="パッケージのインストール"></a>パッケージのインストール</h4><p><a href="http://ktkr3d.site11.com/2011/10/09/conky-htc/">http://ktkr3d.site11.com/2011/10/09/conky-htc/</a><br>conky, conkyForecast, Conky-HTC パッケージをインストールして以下の構成にしておきます。</p>
<figure class="highlight text"><figcaption><span>フォルダ/ファイル構成</span></figcaption><table><tr><td class="code"><pre><span class="line">~/</span><br><span class="line">├── .fonts/</span><br><span class="line">├── .images/</span><br><span class="line">├── .conkyForecast.config</span><br><span class="line">├── .conkyrc</span><br><span class="line">├── .conky_start</span><br><span class="line">└── .vreme.template</span><br></pre></td></tr></table></figure>



<h4 id="conkyForecast-の日本語化"><a href="#conkyForecast-の日本語化" class="headerlink" title="conkyForecast の日本語化"></a>conkyForecast の日本語化</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/ktkr3d/conkyforecast-ja/raw/master/locale/ja/LC_MESSAGES/conkyForecast.po</span><br><span class="line">$ wget https://github.com/ktkr3d/conkyforecast-ja/raw/master/locale/ja/LC_MESSAGES/conkyForecastWU.po</span><br><span class="line">$ msgfmt -o conkyForecast.mo conkyForecast.po</span><br><span class="line">$ msgfmt -o conkyForecastWU.mo conkyForecastWU.po</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /usr/share/conkyforecast/locale/ja/LC_MESSAGES/</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cp</span> *.mo /usr/share/conkyforecast/locale/ja/LC_MESSAGES/</span><br></pre></td></tr></table></figure>




<h4 id="conkyForecast-config-の編集"><a href="#conkyForecast-config-の編集" class="headerlink" title="~&#x2F;.conkyForecast.config の編集"></a>~&#x2F;.conkyForecast.config の編集</h4><figure class="highlight text"><figcaption><span>~/.conkyForecast.config</span></figcaption><table><tr><td class="code"><pre><span class="line">#=============================================#</span><br><span class="line"># EXPERT SETTINGS, NOT REQUIRED TO BE ALTERED #</span><br><span class="line">#=============================================#</span><br><span class="line">#BASE_XOAP_URL = http://xoap.weather.com/weather/local/&lt;LOCATION&gt;?cc=*&amp;dayf=5&amp;link=xoap&amp;prod=xoap&amp;par=&lt;XOAP_PARTNER_ID&gt;&amp;key=&lt;XOAP_LICENCE_KEY&gt;&amp;unit=m</span><br><span class="line">BASE_XOAP_URL = http://xml.weather.com/weather/local/&lt;LOCATION&gt;?cc=*&amp;dayf=10&amp;link=xoap&amp;prod=xoap&amp;par=&lt;XOAP_PARTNER_ID&gt;&amp;key=&lt;XOAP_LICENCE_KEY&gt;&amp;unit=m</span><br><span class="line">MAXIMUM_DAYS_FORECAST = 10</span><br><span class="line"></span><br><span class="line">#===============================================#</span><br><span class="line"># USER SETTINGS, EDIT BASED ON DOCUMENTED SETUP #</span><br><span class="line">#===============================================#</span><br><span class="line">CACHE_FOLDERPATH = /tmp/</span><br><span class="line">CONNECTION_TIMEOUT = 5</span><br><span class="line">EXPIRY_MINUTES = 30</span><br><span class="line">TIME_FORMAT = %H:%M</span><br><span class="line">DATE_FORMAT = %Y-%m-%d</span><br><span class="line">LOCALE = ja</span><br><span class="line">XOAP_PARTNER_ID =</span><br><span class="line">XOAP_LICENCE_KEY =</span><br><span class="line">DEFAULT_LOCATION = JAXX0085</span><br><span class="line">AUTO_NIGHT = False</span><br><span class="line">PROXY_HOST = </span><br><span class="line">PROXY_PORT = 8080</span><br><span class="line">PROXY_USERNAME = </span><br><span class="line">PROXY_PASSWORD = </span><br></pre></td></tr></table></figure>




<h4 id="conkyrc-の編集"><a href="#conkyrc-の編集" class="headerlink" title="~&#x2F;.conkyrc の編集"></a>~&#x2F;.conkyrc の編集</h4><figure class="highlight text"><figcaption><span>~/.conkyrc</span></figcaption><table><tr><td class="code"><pre><span class="line"> # Time</span><br><span class="line">$&#123;voffset 35&#125;$&#123;goto 39&#125;$&#123;font Helvetica LT Std:style=Condensed:size=60&#125;$&#123;color 434343&#125;$&#123;time %H&#125;$&#123;goto 140&#125;$&#123;color 434343&#125;$&#123;time %M&#125;$&#123;font Helvetica LT Std:style=Condensed:size=18&#125;$&#123;color ffffff&#125;$&#123;goto 225&#125;$&#123;time %S&#125;</span><br><span class="line"> # Date</span><br><span class="line">$&#123;voffset 47&#125;$&#123;font TakaoPGothic:size=8&#125;$&#123;alignr 80&#125;$&#123;time %G&#125;/$&#123;time %m&#125;/$&#123;time %d&#125; ($&#123;time %a&#125;)</span><br><span class="line"> # City Name</span><br><span class="line">$&#123;voffset -40&#125;$&#123;goto 22&#125;$&#123;exec conkyForecast --datatype=CN&#125;</span><br><span class="line"> # Conditions Text, Current Temp</span><br><span class="line">$&#123;goto 22&#125;$&#123;execi 1800 conkyForecast --datatype=CT&#125;$&#123;voffset -20&#125;$&#123;goto 200&#125;$&#123;font Helvetica LT Std:size=24&#125;$&#123;execi 1800 conkyForecast -u --datatype=HT&#125;</span><br><span class="line"> # High Temp, Low Temp of Today</span><br><span class="line">$&#123;voffset -15&#125;$&#123;font Helvetica LT Std:style=Condensed:size=10&#125;#</span><br><span class="line">$&#123;goto 200&#125;$&#123;color ffaaaa&#125;$&#123;execi 1800 conkyForecast --datatype=HT -u --startday=0&#125;$&#123;color ffffff&#125; / $&#123;color aaaaff&#125;$&#123;execi 1800 conkyForecast --datatype=LT -u --startday=0&#125;</span><br><span class="line"> # High Temp, Low Temp of Next 5 Days</span><br><span class="line">$&#123;voffset 53&#125;$&#123;font Helvetica LT Std:style=Condensed:size=8&#125;#</span><br><span class="line">$&#123;goto  25&#125;$&#123;color ffaaaa&#125;$&#123;execi 1800 conkyForecast --datatype=HT -u --startday=1&#125;$&#123;color ffffff&#125; / $&#123;color aaaaff&#125;$&#123;execi 1800 conkyForecast --datatype=LT -u --startday=1&#125;#</span><br><span class="line">$&#123;goto  70&#125;$&#123;color ffaaaa&#125;$&#123;execi 1800 conkyForecast --datatype=HT -u --startday=2&#125;$&#123;color ffffff&#125; / $&#123;color aaaaff&#125;$&#123;execi 1800 conkyForecast --datatype=LT -u --startday=2&#125;#</span><br><span class="line">$&#123;goto 115&#125;$&#123;color ffaaaa&#125;$&#123;execi 1800 conkyForecast --datatype=HT -u --startday=3&#125;$&#123;color ffffff&#125; / $&#123;color aaaaff&#125;$&#123;execi 1800 conkyForecast --datatype=LT -u --startday=3&#125;#</span><br><span class="line">$&#123;goto 160&#125;$&#123;color ffaaaa&#125;$&#123;execi 1800 conkyForecast --datatype=HT -u --startday=4&#125;$&#123;color ffffff&#125; / $&#123;color aaaaff&#125;$&#123;execi 1800 conkyForecast --datatype=LT -u --startday=4&#125;#</span><br><span class="line">$&#123;goto 205&#125;$&#123;color ffaaaa&#125;$&#123;execi 1800 conkyForecast --datatype=HT -u --startday=5&#125;$&#123;color ffffff&#125; / $&#123;color aaaaff&#125;$&#123;execi 1800 conkyForecast --datatype=LT -u --startday=5&#125;</span><br><span class="line"> # Day of Week</span><br><span class="line">$&#123;font TakaoPGothic:size=8&#125;$&#123;color ffffff&#125;#</span><br><span class="line">$&#123;goto  37&#125;$&#123;execi 1800 conkyForecast --datatype=DW --shortweekday --startday=1&#125;#</span><br><span class="line">$&#123;goto  82&#125;$&#123;execi 1800 conkyForecast --datatype=DW --shortweekday --startday=2&#125;#</span><br><span class="line">$&#123;goto 127&#125;$&#123;execi 1800 conkyForecast --datatype=DW --shortweekday --startday=3&#125;#</span><br><span class="line">$&#123;goto 172&#125;$&#123;execi 1800 conkyForecast --datatype=DW --shortweekday --startday=4&#125;#</span><br><span class="line">$&#123;goto 217&#125;$&#123;execi 1800 conkyForecast --datatype=DW --shortweekday --startday=5&#125; </span><br><span class="line">$&#123;image ~/.images/base.png -p 12,30 -s 238x140&#125;</span><br><span class="line">$&#123;image ~/.images/base.png -p 12,190 -s 238x55&#125;</span><br><span class="line">$&#123;image ~/.images/flip_bg.png -p 30,10 -s 100x110&#125;</span><br><span class="line">$&#123;image ~/.images/flip_bg.png -p 130,10 -s 100x110&#125;</span><br><span class="line">$&#123;execpi 1800 conkyForecast --template=~/.vreme.template&#125;</span><br></pre></td></tr></table></figure>

<p>行中&#x2F;行末に# を挿入すると次の行と連結(改行をエスケープ)できます。<br>今日の最高&#x2F;最低気温を取得するために「–startday&#x3D;0」を指定してみましたが、値は無効かもしれません。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>conky</tag>
        <tag>Conky-HTC</tag>
        <tag>conkyForecast</tag>
        <tag>Translation</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio</title>
    <url>/2013/06/01/android-studio/</url>
    <content><![CDATA[<p><img src="/images/android-studio.png" alt="android-studo"><br><a href="http://developer.android.com/sdk/installing/studio.html">http://developer.android.com/sdk/installing/studio.html</a></p>
<p>Android Studio でサンプルアプリを作って動かしてみました。<br>Linux 版のアーカイブをダウンロードして展開し、android-studio&#x2F;bin&#x2F;studio.sh を実行します。ウィザードに従っていくと、サンプルアプリのapk ファイルが生成されます。</p>
<p><a href="/images/uploads/2013/06/android_studio_project.png"><img src="/images/uploads/2013/06/android_studio_project.png" alt="android_studio_project"></a></p>
<p>インストールして実行すると、こんな感じになりました。実行環境はAndroid 4.1.2 です。</p>
<p><a href="/images/uploads/2013/06/my_app.png"><img src="/images/uploads/2013/06/my_app.png" alt="my_app"></a></p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Octopress</title>
    <url>/2013/06/16/octopress/</url>
    <content><![CDATA[<img src="/images/octopress.png" class="">

<p><a href="http://ktkr3d.site11.com/">http://ktkr3d.site11.com</a> 上のWordPress からGitHub 上のOctopress にブログを移行してみました。</p>
<span id="more"></span>
<p>WordPress は便利なのですが、メモリ消費量が多くなってしまい、海外無料Webサービスでの運用が困難になってきました。（解決策はいろいろとあるとは思いますが。）</p>
<p>そこで、Github Pages + Octopress でブログサイトを構築してみることにしました。Markdown で記述していきますが、よく知らないので、これから覚えていくことにしましょう。</p>
<h3 id="使い方のメモ"><a href="#使い方のメモ" class="headerlink" title="使い方のメモ"></a>使い方のメモ</h3><p><a href="http://octopress.org/docs/">http://octopress.org/docs/</a></p>
<ul>
<li><p>新規記事の作成</p>
<pre><code>  $ rake new_post[&quot;title&quot;]
</code></pre>
</li>
<li><p>記事の編集</p>
</li>
</ul>
<p>	</p>
<p>.&#x2F;octopress&#x2F;source&#x2F;_posts&#x2F;*.markdown を編集します。<br>画像はsource&#x2F;images&#x2F; に格納することにします。<br>画像の挿入は</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%</span> <span class="name">img</span> /images/Ubuntu-GNOME-<span class="number">13</span>-<span class="number">10</span>.png <span class="number">600</span> <span class="template-tag">%&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>生成とデプロイ</p>
<pre><code>  $ rake generate &amp;&amp; rake deploy
</code></pre>
</li>
<li><p>新規ページの作成	</p>
<pre><code>  $ rake new_page[page-name]
</code></pre>
</li>
<li><p>スタイルの変更</p>
</li>
</ul>
<p>.&#x2F;octopress&#x2F;source&#x2F;stylesheets&#x2F; にスタイルシートがあります。<br>スタイルシートのカスタマイズは<code>./octopress/saas/custom/</code>にあるファイルを編集します。</p>
<p>OctoPress のテーマは画面幅が狭い場合にサイドバーが下部に移動するようになっているようですので、少し調整が必要そうです。</p>
]]></content>
      <categories>
        <category>cms</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu GNOME 13.10 Daily Build + Cairo-Dock</title>
    <url>/2013/06/16/ubuntu-gnome-13-dot-10-daily-build-plus-cairo-dock/</url>
    <content><![CDATA[<p><a href="/images/Ubuntu-GNOME-13-10.png"><img src="/images/Ubuntu-GNOME-13-10_tn.png" class=""></a></p>
<p><a href="http://cdimage.ubuntu.com/ubuntu-gnome/daily-live/current/">http://cdimage.ubuntu.com/ubuntu-gnome/daily-live/current/</a></p>
<p>Ubuntu GNOME 13.10 (Saucy) のデイリービルドが公開されていましたので、インストールしてみました。kernel 3.9.0, GNOME Shell 3.8.2, Firefox 22.0 でした。</p>
<span id="more"></span>
<p>いつものようにAvant Window Navigator を使いたかったのですが、うまく起動しなかったので、Cairo Dock に移行してみました。Cairo Dock は挙動が派手で好みではなかったのですが、テーマを変更して、詳細設定をしたらAWN みたいな挙動にすることができました。<br>その他で気になったのは、Code::Blocks が起動しないことと、GTK+ テーマのリストボックスの挙動が少し不自然なことくらいでしょうか。そのうち、直るでしょう。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 13.10 Daily Build + Mir</title>
    <url>/2013/07/01/ubuntu-13-dot-10-daily-build-plus-mir/</url>
    <content><![CDATA[<p><a href="/images/ubuntu_13_10_daily_build_mir.png"><img src="/images/ubuntu_13_10_daily_build_mir_tn.png" class=""></a></p>
<p><a href="https://launchpad.net/~mir-team/+archive/staging">https://launchpad.net/~mir-team/+archive/staging</a></p>
<p>Ubuntu 13.10 Daily Build にMir を適用してみました。現時点では若干もたつく感じがしますが、今後改善されるでしょう。</p>
<span id="more"></span> 

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-add-repository ppa:mir-team/staging</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get upgrade</span><br></pre></td></tr></table></figure>

<p>特に資料を参考にしていないので、正式な手順ではないかもしれませんし、不十分かもしれません。</p>
<p><a href="/images/ubuntu_13_10_daily_build_mir_gnome_shell.png"><img src="/images/ubuntu_13_10_daily_build_mir_gnome_shell_tn.png" class=""></a></p>
<p>GNOME Shell 3.8.3 で使った方が快適なような気がします。気のせいかもしれませんが。</p>
<p><a href="http://www.olli-ries.com/running-mir/">http://www.olli-ries.com/running-mir/</a></p>
<p>ここにインストール方法が書いてありました。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME Shell 3.9.4</title>
    <url>/2013/07/13/gnome-shell-3-dot-9-4/</url>
    <content><![CDATA[<p><a href="/images/gnome_shell_3_9_4.png"><img src="/images/gnome_shell_3_9_4_tn.png" class=""></a></p>
<p><a href="https://launchpad.net/~ricotz/+archive/testing">https://launchpad.net/~ricotz/+archive/testing</a></p>
<p>GNOME Shell 3.9.4 をUbuntu GNOME 13.10 にインストールしてみました。</p>
<span id="more"></span> 

<h4 id="GNOME-Shell-3-9-4-のインストール"><a href="#GNOME-Shell-3-9-4-のインストール" class="headerlink" title="GNOME Shell 3.9.4 のインストール"></a>GNOME Shell 3.9.4 のインストール</h4><pre><code>$ sudo add-apt-repository ppa:ricotz/testing
$ sudo apt-get update
$ sudo apt-get install gnome-shell
</code></pre>
<h4 id="ドックの設定"><a href="#ドックの設定" class="headerlink" title="ドックの設定"></a>ドックの設定</h4><p>前回のAWN に続き、このバージョンではCairo-Dock も動かなくなりました。Dash to Dock GNOME Shell 拡張も正常に動かないようです。Docky を使うことにしました。</p>
<pre><code>$ sudo apt-get install docky
</code></pre>
<h4 id="トップバーの非表示"><a href="#トップバーの非表示" class="headerlink" title="トップバーの非表示"></a>トップバーの非表示</h4><p>Hide Top Bar GNOME Shell 拡張が正常に動かなかったので、以前使用していた<a href="mailto:&#97;&#117;&#x74;&#x6f;&#x68;&#105;&#x64;&#x65;&#116;&#x6f;&#112;&#x62;&#97;&#x72;&#50;&#x40;&#119;&#x65;&#114;&#x65;&#119;&#111;&#x6c;&#118;&#101;&#115;&#x2e;&#117;&#115;">&#97;&#117;&#x74;&#x6f;&#x68;&#105;&#x64;&#x65;&#116;&#x6f;&#112;&#x62;&#97;&#x72;&#50;&#x40;&#119;&#x65;&#114;&#x65;&#119;&#111;&#x6c;&#118;&#101;&#115;&#x2e;&#117;&#115;</a> の方のGNOME Shell 拡張を使用してみました。<br>shell-version は3.9.4 を指定しました。</p>
<figure class="highlight js"><figcaption><span>metadata.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Auto hide the top panel&quot;</span>,</span><br><span class="line">  <span class="string">&quot;extension-id&quot;</span>: <span class="string">&quot;auto-hide-top-panel&quot;</span>, </span><br><span class="line">  <span class="string">&quot;gettext-domain&quot;</span>: <span class="string">&quot;gnome-shell-extensions&quot;</span>, </span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Auto Hide Top Panel&quot;</span>,</span><br><span class="line">  <span class="string">&quot;settings-schema&quot;</span>: <span class="string">&quot;org.gnome.shell.extensions.auto-hide-top-panel&quot;</span>, </span><br><span class="line">  <span class="string">&quot;shell-version&quot;</span>: [</span><br><span class="line">	<span class="string">&quot;3.5.92&quot;</span>,</span><br><span class="line">	<span class="string">&quot;3.6&quot;</span>,</span><br><span class="line">	<span class="string">&quot;3.6.1&quot;</span>,</span><br><span class="line">	<span class="string">&quot;3.9.4&quot;</span></span><br><span class="line">  ], </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://fpmurphy.com/gnome-shell-extensions&quot;</span>,</span><br><span class="line">  <span class="string">&quot;uuid&quot;</span>: <span class="string">&quot;autohidetopbar2@werewolves.us&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Docky + Cardapio</title>
    <url>/2013/07/14/docky-plus-cardapio/</url>
    <content><![CDATA[<p><a href="/images/docky_cardapio.png"><img src="/images/docky_cardapio_tn.png" class=""></a></p>
<p>Ubuntu 13.10 + GNOME Shell 3.9.4 上で、Docky に移行して困ったことは、以下でした。</p>
<ol>
<li>電源ボタンが無いこと</li>
<li>アプリケーションメニューがないこと</li>
</ol>
<p>Docky とCardapio の設定で上記を動くようにしてみました。</p>
<span id="more"></span> 

<h4 id="電源ボタンの設定"><a href="#電源ボタンの設定" class="headerlink" title="電源ボタンの設定"></a>電源ボタンの設定</h4><p>一番右の「画面のロック」アイコンを右クリックすることで、「画面のロック」、「ログアウト」、「サスペンド」、「再起動」、「シャットダウン」のようなサブメニューが表示されます。<br>「画面のロック」のアイコン上でマウスのホイールボタンで上下にホイールすると、デフォルトの動作を指定できます。<br>ボタン押下後に再起動かシャットダウンかを選択させる形式がよかったのですが、とりあえずこれで良しとしましょう。</p>
<h4 id="Cardapio-の設定"><a href="#Cardapio-の設定" class="headerlink" title="Cardapio の設定"></a>Cardapio の設定</h4><p>Cardapio を使ってDocky からアプリケーションメニューを表示することにします。</p>
<pre><code>$ sudo add-apt-repository ppa:cardapio-team/unstable
$ sudo apt-get update
$ sudo apt-get install cardapio
</code></pre>
<p>saucy 向けのCardapio が存在しなかったので、ソフトウェアソースをquantal 向けに切り替えてインストールしました。<br>cardapio を起動してみたところ、いくつかエラーが表示されたので、<code>/usr/lib/cardapio/Cardapio.py</code> を修正しました。</p>
<ol>
<li><p>以下を追加<br><br><code>from xdg import BaseDirectory</code></p>
</li>
<li><p>以下を置換<br><br><code>DesktopEntry.xdg_config_home</code> -&gt; <code>BaseDirectory.xdg_config_home</code></p>
</li>
<li><p>以下を置換<br><br><code>DesktopEntry.xdg_cache_home</code> -&gt; <code>BaseDirectory.xdg_cache_home</code></p>
</li>
</ol>
<h4 id="Docky-へCardapio-を登録"><a href="#Docky-へCardapio-を登録" class="headerlink" title="Docky へCardapio を登録"></a>Docky へCardapio を登録</h4><p>cardapio-helper というDocky のヘルパーを使うと、Docky アイコンクリックで、Cardapio が起動されるはずなのですが、うまく動作しませんでした。<br>仕方がないので、<code>/usr/share/applications/cardapio.desktop</code> をDocky にドラッグ&amp;ドロップして、メニューアイコンを登録しました。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME Shell Lock Screen</title>
    <url>/2013/07/15/gnome-shell-lock-screen/</url>
    <content><![CDATA[<p><a href="/images/gnome_shell_lock_screen.png"><img src="/images/gnome_shell_lock_screen.png" class=""></a></p>
<p>GNOME Shell のロック画面で表示される時刻のフォントの上部が欠けていたので、暫定対策しました。</p>
<span id="more"></span>

<h4 id="ロック画面のフォントの変更"><a href="#ロック画面のフォントの変更" class="headerlink" title="ロック画面のフォントの変更"></a>ロック画面のフォントの変更</h4><p><code>font-family: &quot;DejaVu Sans&quot;;</code>でフォントファミリーを指定しています。</p>
<figure class="highlight css"><figcaption><span>/usr/share/gnome-shell/theme/gnome-shell.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.screen-shield-clock-time</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;DejaVu Sans&quot;</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">64pt</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.screen-shield-clock-date</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;DejaVu Sans&quot;</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24pt</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="設定の反映"><a href="#設定の反映" class="headerlink" title="設定の反映"></a>設定の反映</h4><p>設定を反映するには、<code>Alt + F2</code> を押下、<code>r</code> を入力して<code>Enter</code>で、GNOME Shell を再起動します。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Zenity OctoPress Helper</title>
    <url>/2013/07/15/zenity-octopress-helper/</url>
    <content><![CDATA[<p><a href="/images/zenity_octopress_menu.png"><img src="/images/zenity_octopress_menu.png" class=""></a></p>
<p>OctoPress のフロントエンドをZenity で作ってみました。<br>Web ベースのUI を作っている方もいるようですが、とりあえずこれでもお手軽になりました。</p>
<span id="more"></span>

<h4 id="zenity-スクリプト"><a href="#zenity-スクリプト" class="headerlink" title="zenity スクリプト"></a>zenity スクリプト</h4><p><a href="/images/zenity_octopress_new_post.png"><img src="/images/zenity_octopress_new_post.png" class=""></a><br><br><a href="/images/zenity_octopress_deploy.png"><img src="/images/zenity_octopress_deploy.png" class=""></a></p>
<p>Zenity のリストボックス、テキスト入力、プログレスバー等を利用して、フロントエンドを作成します。</p>
<figure class="highlight sh"><figcaption><span>octopress_helper.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">OCTOPRESS_DIR=/mnt/common/github/octopress</span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:<span class="variable">$HOME</span>/.rvm/bin <span class="comment"># Add RVM to PATH for scripting</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.rvm/scripts/rvm</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$OCTOPRESS_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	pick=$(zenity --list --title <span class="string">&quot;OctoPress Helper&quot;</span> --text <span class="string">&quot;Select Action.&quot;</span> --radiolist --column Pick --column dummy --column Action --hide-column 2 <span class="literal">true</span> 0 <span class="string">&quot;New Post&quot;</span> <span class="literal">false</span> 1 <span class="string">&quot;New Page&quot;</span> <span class="literal">false</span> 2 <span class="string">&quot;Generate&quot;</span> <span class="literal">false</span> 3 <span class="string">&quot;Deploy&quot;</span> <span class="literal">false</span> 4 <span class="string">&quot;Preview&quot;</span> <span class="literal">false</span> 5 <span class="string">&quot;Open Posts Folder&quot;</span> <span class="literal">false</span> 6 <span class="string">&quot;Push Source&quot;</span>);</span><br><span class="line">	<span class="keyword">case</span> <span class="variable">$pick</span> <span class="keyword">in</span></span><br><span class="line">		0)</span><br><span class="line">			post_title=$(zenity --entry --title=<span class="string">&quot;New Post&quot;</span> --text=<span class="string">&quot;Enter Title.&quot;</span> )</span><br><span class="line">			<span class="keyword">if</span> [ <span class="variable">$&#123;#post_title&#125;</span> &gt; 0 ] ; <span class="keyword">then</span></span><br><span class="line">				rake new_post[<span class="string">&quot;<span class="variable">$post_title</span>&quot;</span>] &gt;(zenity --progress --title=<span class="string">&quot;New Post&quot;</span> --pulsate --auto-close --auto-kill)</span><br><span class="line">			<span class="keyword">fi</span></span><br><span class="line">			;;</span><br><span class="line">		1) </span><br><span class="line">			page_title=$(zenity --entry --title=<span class="string">&quot;New Page&quot;</span> --text=<span class="string">&quot;Enter Title.&quot;</span> )</span><br><span class="line">			<span class="keyword">if</span> [ <span class="variable">$&#123;#page_title&#125;</span> &gt; 0 ] ; <span class="keyword">then</span></span><br><span class="line">				rake new_page[<span class="string">&quot;<span class="variable">$page_title</span>&quot;</span>] &gt;(zenity --progress --title=<span class="string">&quot;New Page&quot;</span> --pulsate --auto-close --auto-kill)</span><br><span class="line">			<span class="keyword">fi</span></span><br><span class="line">			;;</span><br><span class="line">		2)</span><br><span class="line">			rake generate &gt;(zenity --progress --title=<span class="string">&quot;Generate&quot;</span> --pulsate --auto-close --auto-kill)</span><br><span class="line">			;;</span><br><span class="line">		3)</span><br><span class="line">			rake deploy &gt;(zenity --progress --title=<span class="string">&quot;Deploy&quot;</span> --pulsate --auto-close --auto-kill)</span><br><span class="line">			;;</span><br><span class="line">		4)</span><br><span class="line">			rake preview &gt;(zenity --progress --title=<span class="string">&quot;Preview&quot;</span> --pulsate --auto-close --auto-kill)</span><br><span class="line">			;;</span><br><span class="line">		5)</span><br><span class="line">			nautilus <span class="variable">$OCTOPRESS_DIR</span>/source/_posts/ &amp;</span><br><span class="line">			;;</span><br><span class="line">		6)</span><br><span class="line">			git add . &amp;&amp; git commit -m <span class="string">&#x27;update&#x27;</span> &amp;&amp; git push -u origin <span class="built_in">source</span> &gt;(zenity --progress --title=<span class="string">&quot;Push Source&quot;</span> --pulsate --auto-close --auto-kill)</span><br><span class="line">			;;</span><br><span class="line">		*)</span><br><span class="line">			<span class="built_in">break</span></span><br><span class="line">			;;</span><br><span class="line">	<span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h4 id="起動用ショートカットアイコン"><a href="#起動用ショートカットアイコン" class="headerlink" title="起動用ショートカットアイコン"></a>起動用ショートカットアイコン</h4><p>起動用のショートカットファイル<code>octopress_helper.desktop</code>を作成してドックにドラッグ&amp;ドロップします。<br>端末を非表示にする場合は<code>Terminal=false</code>とします。</p>
<figure class="highlight text"><figcaption><span>octopress_helper.desktop</span></figcaption><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=OctoPress Helper</span><br><span class="line">Exec=/mnt/common/home/Script/octopress_helper.sh</span><br><span class="line">Icon=/usr/share/pixmaps/octopress.png</span><br><span class="line">Terminal=true</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;</span><br><span class="line">StartupNotify=false</span><br></pre></td></tr></table></figure>

<h4 id="プレビュー"><a href="#プレビュー" class="headerlink" title="プレビュー"></a>プレビュー</h4><p>私は <code>rake preview</code> をログイン時に常駐させて、ブラウザから <code>http://localhost:4000/</code> にアクセスしてレイアウト結果を確認しています。フォルダ内の変更が監視されるので、多少の負荷はあるかもしれません。</p>
]]></content>
      <categories>
        <category>cms</category>
      </categories>
  </entry>
  <entry>
    <title>Compiling Irrlicht ogl-es branch for Android</title>
    <url>/2013/08/04/compiling-irrlicht-ogl-es-branch-for-android/</url>
    <content><![CDATA[<p><a href="/images/irrlicht_ogl-es_android.png"><img src="/images/irrlicht_ogl-es_android_tn.png" class=""></a></p>
<ul>
<li>Compiling Irrlicht ogl-es branch for Android on Ubuntu GNOME 13.10 x86_64.</li>
<li>Native C&#x2F;C++ Android Application (Native Activity).</li>
<li>Fullscreen (1080x1920)</li>
<li>Input Event Receiver</li>
<li>True Type Font (FreeType2)</li>
<li>OpenSL ES (Native Audio)<span id="more"></span></li>
</ul>
<h4 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h4><ul>
<li>Android SDK: 22.0.5</li>
<li>Android NDK: r9</li>
<li>Android Device: Android 4.1.2 (API level 16)</li>
<li>Irrlicht 1.9 [r4528]</li>
</ul>
<h4 id="Download-Irrlicht-ogl-es-branch"><a href="#Download-Irrlicht-ogl-es-branch" class="headerlink" title="Download Irrlicht ogl-es branch"></a>Download Irrlicht ogl-es branch</h4><p><code>http://sourceforge.net/p/irrlicht/code/</code></p>
<ol>
<li>Select <code>branches</code>, <code>ogl-es</code>, <code>Download Snapshot</code>.</li>
<li>Download.</li>
<li>Extract.</li>
</ol>
<h4 id="Compile-Irrlicht-Library"><a href="#Compile-Irrlicht-Library" class="headerlink" title="Compile Irrlicht Library"></a>Compile Irrlicht Library</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="built_in">source</span>/Irrlicht/Andorid</span><br><span class="line">$ ndk-build -j4</span><br></pre></td></tr></table></figure>

<p>-&gt; <code>lib/Android/libirrlicht.a</code></p>
<h4 id="Build-example"><a href="#Build-example" class="headerlink" title="Build example"></a>Build example</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> examples/17.HelloWorld_Mobile</span><br><span class="line">$ android update project --path . --target android-16</span><br><span class="line">$ ndk-build -j4</span><br><span class="line">$ ant debug</span><br></pre></td></tr></table></figure>

<p>-&gt; <code>examples/17.HellowWorld_Mobile/HelloWorldMobile-debug.apk</code></p>
<h4 id="TrueType-Font"><a href="#TrueType-Font" class="headerlink" title="TrueType Font"></a>TrueType Font</h4><p><code>include/irrUString.h</code>, <code>jni/CGUITTFont.h</code>, <code>jni/CGUITTFont.cpp</code> </p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Irrlicht Android Media Player</title>
    <url>/2013/08/11/irrlicht-android-media-player/</url>
    <content><![CDATA[<p><a href="/images/irrlicht_android_player_tab.png"><img src="/images/irrlicht_android_player_tab_tn.png" class=""></a></p>
<p>Android のNative Activity で実装したアプリからオーディオの再生ができたので、ミクさんが踊ってくれるメディアプレイヤー的なものにしてみました。</p>
<span id="more"></span>

<h4 id="PMD-とVMD-のロード処理の修正"><a href="#PMD-とVMD-のロード処理の修正" class="headerlink" title="PMD とVMD のロード処理の修正"></a>PMD とVMD のロード処理の修正</h4><p>以前のソースコードがHDD の故障とともに消えてしまったので、コードやMakefile を書きなおしていたところ、うまくロードできないPMD、VMD があることに気が付きました。<br>BinaryReader のロード処理で、プロセッサ種別に依存してうまく取り込めない(ARM CPU で構造体のアラインメントが異なる)のが原因のようです。<br>以前のバージョンのコンパイラ＋古いバージョンのAndroid デバイスでは動いていたような気がするのに。<br>原因は単純なので修正しておきました。</p>
<h4 id="Native-Activity-からのWakeLock-の制御"><a href="#Native-Activity-からのWakeLock-の制御" class="headerlink" title="Native Activity からのWakeLock の制御"></a>Native Activity からのWakeLock の制御</h4><p>少し経つと画面が暗くなって、画面が非表示状態になります。<br>PowerManager のWakeLock を制御すれば良さそうです。<br>Android NDK のNative Activity の場合はJNI を経由してPower Manager へアクセスするのかな。<br>後で調べておこう。</p>
<h4 id="画面インタフェース"><a href="#画面インタフェース" class="headerlink" title="画面インタフェース"></a>画面インタフェース</h4><ul>
<li><strong>パネル表示切替ボタン「⇅」</strong><br>画面下部の設定用のインタフェースの表示&#x2F;非表示を切り替える。曲目リスト、モデルリスト、環境設定のタブがある。  </li>
<li><strong>ミュート切替ボタン「♪」</strong><br>音声の出力状態を切り替える。OpenSL ES の<code>(*uriPlayerVolume)-&gt;SetMute()</code>をコールしている。  </li>
<li><strong>再生&#x2F;停止切替ボタン「▶」</strong><br>モーションと音声の再生&#x2F;停止を切り替える。アニメーションスピードの切り替えと<code>(*uriPlayerPlay)-&gt;SetPlayState()</code>をコールしている。モデルまたは曲を変更した場合は最初から開始する。  </li>
<li><strong>終了ボタン「×」</strong><br>アプリケーションを終了する。  </li>
<li><strong>カメラ位置スクロールバー</strong><br>カメラの位置を前後させる。</li>
</ul>
<h4 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h4><ul>
<li><code>state-&gt;onAppCmd</code> にコールバック関数を設定しているのにキックされない原因を調べる。</li>
<li><code>pFileSystem-&gt;createFileList()</code> が失敗する原因を調べる。</li>
<li>タスク復帰時に描画コンテキストをリストアする。</li>
<li>GUI のSkin を変更する。</li>
<li>Android 固有の入力イベントに対応する。</li>
</ul>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>Fedora 20</title>
    <url>/2013/10/05/fedora-20/</url>
    <content><![CDATA[<p><a href="/images/fedora_20.png"><img src="/images/fedora_20_tn.png" class=""></a></p>
<p>Fedora 20 alpha + GNOME Shell 3.10 をインストールしてみました。</p>
<h4 id="Fedora-20-alpha"><a href="#Fedora-20-alpha" class="headerlink" title="Fedora 20 alpha"></a>Fedora 20 alpha</h4><p><code>https://fedoraproject.org/ja/get-prerelease</code></p>
<h4 id="RPM-Fusion"><a href="#RPM-Fusion" class="headerlink" title="RPM Fusion"></a>RPM Fusion</h4><p><code>http://rpmfusion.org/Configuration</code></p>
<h4 id="その他の設定"><a href="#その他の設定" class="headerlink" title="その他の設定"></a>その他の設定</h4><ul>
<li>Autohide Top Bar extension</li>
<li>Cairo-Dock</li>
<li>Bluetooth Keyboard</li>
<li>VNC Server<br>  <code>sudo yum install vino</code> を実行すると、[設定]-[共有]-[画面共有]メニューが有効になる。クライアントからはSSH トンネル経由で接続する。</li>
</ul>
<span id="more"></span>

<h4 id="Android-からインターネット経由の通信と接続ツール"><a href="#Android-からインターネット経由の通信と接続ツール" class="headerlink" title="Android からインターネット経由の通信と接続ツール"></a>Android からインターネット経由の通信と接続ツール</h4><ul>
<li>SSH (Connect Bot)<br>  <code>https://play.google.com/store/apps/details?id=org.connectbot</code></li>
<li>VNC over SSH (bVNC Free)<br>  <code>https://play.google.com/store/apps/details?id=com.iiordanov.freebVNC</code><br>  SSH 上で、ターゲットホストへ接続</li>
<li>Samba over SSH (SSH Tunnel)<br>  <code>https://play.google.com/store/apps/details?id=org.sshtunnel</code><br>  SSH 上で、ローカルの10445 をリモートの445 にポートフォワード</li>
</ul>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Conky Google Now</title>
    <url>/2013/11/02/conky-google-now/</url>
    <content><![CDATA[<p><a href="/images/conky_google_now.png"><img src="/images/conky_google_now_tn.png" class=""></a></p>
<p><a href="http://satya164.deviantart.com/art/Conky-Google-Now-366545753">http://satya164.deviantart.com/art/Conky-Google-Now-366545753</a></p>
<p>ConkyForecast のスクリプトがうまく動かなくなったので、Conky Google Now に乗り換えてみました。<br>フォントをOpen Sans Light に統一しようかと思いましたが、行間が空いてしまったので止めておきました。</p>
<span id="more"></span>

<figure class="highlight text"><figcaption><span>.conkyrc</span></figcaption><table><tr><td class="code"><pre><span class="line"># Conky Google Now style #</span><br><span class="line"></span><br><span class="line"># Conky settings #</span><br><span class="line">background no</span><br><span class="line">update_interval 1</span><br><span class="line">double_buffer yes</span><br><span class="line">no_buffers yes</span><br><span class="line"></span><br><span class="line"># Window specifications #</span><br><span class="line">own_window yes</span><br><span class="line">own_window_type normal</span><br><span class="line">own_window_hints undecorated,below,sticky,skip_taskbar,skip_pager</span><br><span class="line">own_window_title </span><br><span class="line">own_window_colour 2D2D2D</span><br><span class="line"></span><br><span class="line">minimum_size 220</span><br><span class="line">maximum_width 220</span><br><span class="line"></span><br><span class="line"># Alignment #</span><br><span class="line">alignment tr</span><br><span class="line">gap_x 10</span><br><span class="line">gap_y 10</span><br><span class="line"></span><br><span class="line">border_inner_margin 15</span><br><span class="line">border_outer_margin 0</span><br><span class="line"></span><br><span class="line"># Graphics settings #</span><br><span class="line">draw_shades no</span><br><span class="line">draw_outline no</span><br><span class="line">draw_borders no</span><br><span class="line">draw_graph_borders no</span><br><span class="line"></span><br><span class="line"># Text settings #</span><br><span class="line">use_xft yes</span><br><span class="line">xftalpha 0</span><br><span class="line">xftfont Open Sans Light:size=10</span><br><span class="line"></span><br><span class="line">override_utf8_locale yes</span><br><span class="line"></span><br><span class="line">imlib_cache_size 0</span><br><span class="line"></span><br><span class="line"># Color scheme #</span><br><span class="line">default_color DCDCDC</span><br><span class="line"></span><br><span class="line">color1 0099CC</span><br><span class="line">color2 9933CC</span><br><span class="line">color3 669900</span><br><span class="line">color4 FF8800</span><br><span class="line">color5 CC0000</span><br><span class="line">color6 AAAAAA</span><br><span class="line">color7 484848</span><br><span class="line"></span><br><span class="line">TEXT</span><br><span class="line">$&#123;font Open Sans Light:size=13&#125;$&#123;time %G&#125;/$&#123;time %m&#125;/$&#123;time %d&#125; ($&#123;font TakaoPGothic:size=13&#125;$&#123;time %a&#125;$&#123;voffset -2&#125;$&#123;font Open Sans Light:size=13&#125;)$&#123;alignr&#125;$&#123;time %H&#125;:$&#123;time %M&#125;:$&#123;time %S&#125;</span><br><span class="line">$&#123;voffset -10&#125;$&#123;hr&#125;$&#123;color&#125;$&#123;voffset -5&#125;</span><br><span class="line"># WEATHER</span><br><span class="line">$&#123;execi 300 curl -s &quot;http://weather.yahooapis.com/forecastrss?w=1118370&amp;u=c&quot; -o ~/.cache/weather.xml&#125;$&#123;font Open Sans Light:size=15&#125;$&#123;execi 300 grep &quot;yweather:location&quot; ~/.cache/weather.xml | grep -o &quot;city=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot;&#125;, $&#123;execi 300 grep &quot;yweather:location&quot; ~/.cache/weather.xml | grep -o &quot;country=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot;&#125;$&#123;font&#125;</span><br><span class="line">$&#123;voffset -20&#125;$&#123;font Open Sans Light:size=48&#125;$&#123;alignr&#125;$&#123;execi 300 grep &quot;yweather:condition&quot; ~/.cache/weather.xml | grep -o &quot;temp=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot;&#125;°$&#123;font&#125;$&#123;voffset -15&#125;</span><br><span class="line">$&#123;execi 300 cp -f ~/.conky-google-now/$(grep &quot;yweather:condition&quot; ~/.cache/weather.xml | grep -o &quot;code=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot;).png ~/.cache/weather.png&#125;$&#123;image ~/.cache/weather.png -p 0,60 -s 60x60&#125;</span><br><span class="line">$&#123;execi 300 grep &quot;yweather:condition&quot; ~/.cache/weather.xml | grep -o &quot;text=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | tr &#x27;[a-z]&#x27; &#x27;[A-Z]&#x27;&#125;</span><br><span class="line">$&#123;image ~/.conky-google-now/wind.png -p 0,140 -s 15x15&#125;$&#123;goto 35&#125;$&#123;execi 300 grep &quot;yweather:wind&quot; ~/.cache/weather.xml | grep -o &quot;speed=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot;&#125;$&#123;execi 300 grep &quot;yweather:units&quot; ~/.cache/weather.xml | grep -o &quot;speed=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot;&#125;</span><br><span class="line">$&#123;image ~/.conky-google-now/humidity.png -p 0,160 -s 15x15&#125;$&#123;goto 35&#125;$&#123;execi 300 grep &quot;yweather:atmosphere&quot; ~/.cache/weather.xml | grep -o &quot;humidity=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot;&#125;%$&#123;voffset 10&#125;</span><br><span class="line">$&#123;goto 18&#125;$&#123;execi 300 grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;day=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==1&#x27; | tr &#x27;[a-z]&#x27; &#x27;[A-Z]&#x27;&#125;$&#123;goto 60&#125;$&#123;execi 300 grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;day=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==2&#x27; | tr &#x27;[a-z]&#x27; &#x27;[A-Z]&#x27;&#125;$&#123;goto 105&#125;$&#123;execi 300 grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;day=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==3&#x27; | tr &#x27;[a-z]&#x27; &#x27;[A-Z]&#x27;&#125;$&#123;goto 150&#125;$&#123;execi 300 grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;day=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==4&#x27; | tr &#x27;[a-z]&#x27; &#x27;[A-Z]&#x27;&#125;$&#123;goto 195&#125;$&#123;execi 300 grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;day=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==5&#x27; | tr &#x27;[a-z]&#x27; &#x27;[A-Z]&#x27;&#125;</span><br><span class="line">$&#123;execi 300 cp -f ~/.conky-google-now/$(grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;code=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==1&#x27;).png ~/.cache/weather-1.png&#125;$&#123;image ~/.cache/weather-1.png -p 0,210 -s 30x30&#125;$&#123;execi 300 cp -f ~/.conky-google-now/$(grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;code=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==2&#x27;).png ~/.cache/weather-2.png&#125;$&#123;image ~/.cache/weather-2.png -p 45,210 -s 30x30&#125;$&#123;execi 300 cp -f ~/.conky-google-now/$(grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;code=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==3&#x27;).png ~/.cache/weather-3.png&#125;$&#123;image ~/.cache/weather-3.png -p 90,210 -s 30x30&#125;$&#123;execi 300 cp -f ~/.conky-google-now/$(grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;code=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==4&#x27;).png ~/.cache/weather-4.png&#125;$&#123;image ~/.cache/weather-4.png -p 135,210 -s 30x30&#125;$&#123;execi 300 cp -f ~/.conky-google-now/$(grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;code=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==5&#x27;).png ~/.cache/weather-5.png&#125;$&#123;image ~/.cache/weather-5.png -p 180,210 -s 30x30&#125;$&#123;voffset 20&#125;</span><br><span class="line">$&#123;color ffaaaa&#125;$&#123;goto 20&#125;$&#123;execi 300 grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;high=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==1&#x27;&#125;°$&#123;goto 65&#125;$&#123;execi 300 grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;high=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==2&#x27;&#125;°$&#123;goto 110&#125;$&#123;execi 300 grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;high=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==3&#x27;&#125;°$&#123;goto 155&#125;$&#123;execi 300 grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;high=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==4&#x27;&#125;°$&#123;goto 200&#125;$&#123;execi 300 grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;high=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==5&#x27;&#125;°</span><br><span class="line">$&#123;voffset -5&#125;$&#123;color aaaaff&#125;$&#123;goto 20&#125;$&#123;execi 300 grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;low=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==1&#x27;&#125;°$&#123;goto 65&#125;$&#123;execi 300 grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;low=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==2&#x27;&#125;°$&#123;goto 110&#125;$&#123;execi 300 grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;low=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==3&#x27;&#125;°$&#123;goto 155&#125;$&#123;execi 300 grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;low=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==4&#x27;&#125;°$&#123;goto 200&#125;$&#123;execi 300 grep &quot;yweather:forecast&quot; ~/.cache/weather.xml | grep -o &quot;low=\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;\&quot;[^\&quot;]*\&quot;&quot; | grep -o &quot;[^\&quot;]*&quot; | awk &#x27;NR==5&#x27;&#125;°</span><br><span class="line"># *** SYSTEM ***</span><br><span class="line">$&#123;color AAAAAA&#125;$&#123;voffset 16&#125;$&#123;font DejaVu Sans:size=12&#125;SYSTEM$&#123;font&#125; $&#123;hr&#125;</span><br><span class="line">#$&#123;alignc 17&#125;$&#123;font Arial Black:size=12&#125;$&#123;nodename&#125;$&#123;font&#125;</span><br><span class="line">$&#123;font StyleBats:size=10&#125;i$&#123;font DejaVu Sans:size=10&#125;   Distro:  $&#123;alignr&#125;$&#123;exec lsb_release -d | sed -e &#x27;s/.*: //&#x27; | awk &#x27;&#123;print $2,$3&#125;&#x27;&#125;</span><br><span class="line">$&#123;font StyleBats:size=10&#125;i$&#123;font DejaVu Sans:size=10&#125;   Kernel:  $&#123;alignr&#125;$&#123;kernel&#125;</span><br><span class="line">$&#123;font StyleBats:size=10&#125;i$&#123;font DejaVu Sans:size=10&#125;   Arch:  $&#123;alignr&#125;$&#123;machine&#125;</span><br><span class="line">$&#123;font StyleBats:size=10&#125;A$&#123;font DejaVu Sans:size=10&#125;   CPU1: $&#123;cpu cpu1&#125;% $&#123;alignr&#125;$&#123;cpubar cpu1 8,60&#125;</span><br><span class="line">$&#123;font StyleBats:size=10&#125;A$&#123;font DejaVu Sans:size=10&#125;   CPU2: $&#123;cpu cpu2&#125;% $&#123;alignr&#125;$&#123;cpubar cpu2 8,60&#125;</span><br><span class="line">$&#123;font StyleBats:size=10&#125;A$&#123;font DejaVu Sans:size=10&#125;   CPU3: $&#123;cpu cpu3&#125;% $&#123;alignr&#125;$&#123;cpubar cpu3 8,60&#125;</span><br><span class="line">$&#123;font StyleBats:size=10&#125;A$&#123;font DejaVu Sans:size=10&#125;   CPU4: $&#123;cpu cpu4&#125;% $&#123;alignr&#125;$&#123;cpubar cpu4 8,60&#125;</span><br><span class="line">$&#123;font StyleBats:size=10&#125;A$&#123;font DejaVu Sans:size=10&#125;   CPU5: $&#123;cpu cpu5&#125;% $&#123;alignr&#125;$&#123;cpubar cpu5 8,60&#125;</span><br><span class="line">$&#123;font StyleBats:size=10&#125;A$&#123;font DejaVu Sans:size=10&#125;   CPU6: $&#123;cpu cpu6&#125;% $&#123;alignr&#125;$&#123;cpubar cpu6 8,60&#125;</span><br><span class="line">$&#123;font StyleBats:size=10&#125;A$&#123;font DejaVu Sans:size=10&#125;   CPU7: $&#123;cpu cpu7&#125;% $&#123;alignr&#125;$&#123;cpubar cpu7 8,60&#125;</span><br><span class="line">$&#123;font StyleBats:size=10&#125;A$&#123;font DejaVu Sans:size=10&#125;   CPU8: $&#123;cpu cpu8&#125;% $&#123;alignr&#125;$&#123;cpubar cpu8 8,60&#125;</span><br><span class="line">$&#123;font StyleBats:size=10&#125;g$&#123;font DejaVu Sans:size=10&#125;   RAM: $memperc% $&#123;alignr&#125;$&#123;membar 8,60&#125;</span><br><span class="line">$&#123;font StyleBats:size=10&#125;j$&#123;font DejaVu Sans:size=10&#125;   Swap: $swapperc% $&#123;alignr&#125;$&#123;swapbar 8,60&#125;</span><br><span class="line">#$&#123;font Webdings:size=10&#125;~$&#123;font DejaVu Sans:size=10&#125;  Battery: $&#123;battery_percent BAT0&#125;% $&#123;alignr&#125;$&#123;battery_bar 8,60 BAT0&#125;</span><br><span class="line">$&#123;font StyleBats:size=10&#125;q$&#123;font DejaVu Sans:size=10&#125;   Uptime: $&#123;alignr&#125;$&#123;uptime&#125;</span><br><span class="line"># *** FILESYSTEM ***</span><br><span class="line">$&#123;voffset 16&#125;$&#123;font DejaVu Sans:size=12&#125;FILESYSTEM$&#123;font&#125; $&#123;hr&#125;</span><br><span class="line">$&#123;font PizzaDude Bullets:size=10&#125;m$&#123;font DejaVu Sans:size=10&#125;   /:$&#123;alignr&#125;$&#123;fs_type /&#125;</span><br><span class="line">        $&#123;fs_used /&#125; / $&#123;fs_size /&#125; $&#123;alignr&#125;$&#123;fs_bar 8,60 /&#125;</span><br><span class="line">$&#123;font PizzaDude Bullets:size=10&#125;m$&#123;font DejaVu Sans:size=10&#125;   /mnt/common:$&#123;alignr&#125;$&#123;fs_type /mnt/common&#125;</span><br><span class="line">        $&#123;fs_used /mnt/common&#125; / $&#123;fs_size /mnt/common&#125; $&#123;alignr&#125;$&#123;fs_bar 8,60 /mnt/common&#125;</span><br><span class="line"># *** NETWORK ***</span><br><span class="line">$&#123;voffset 16&#125;$&#123;font DejaVu Sans:size=12&#125;NETWORK$&#123;font&#125; $&#123;hr&#125;#</span><br><span class="line">$&#123;if_existing /proc/net/route wlan0&#125;</span><br><span class="line">$&#123;font PizzaDude Bullets:size=10&#125;O$&#123;font DejaVu Sans:size=10&#125;   Up: $&#123;upspeed wlan0&#125; $&#123;alignr&#125;$&#123;upspeedgraph wlan0 8,60 000000 000000&#125;</span><br><span class="line">$&#123;font PizzaDude Bullets:size=10&#125;U$&#123;font DejaVu Sans:size=10&#125;   Down: $&#123;downspeed wlan0&#125; $&#123;alignr&#125;$&#123;downspeedgraph wlan0 8,60 000000 000000&#125;</span><br><span class="line">$&#123;font PizzaDude Bullets:size=10&#125;N$&#123;font DejaVu Sans:size=10&#125;   Upload: $&#123;alignr&#125;$&#123;totalup wlan0&#125;</span><br><span class="line">$&#123;font PizzaDude Bullets:size=10&#125;T$&#123;font DejaVu Sans:size=10&#125;   Download: $&#123;alignr&#125;$&#123;totaldown wlan0&#125;</span><br><span class="line">$&#123;font PizzaDude Bullets:size=10&#125;Z$&#123;font DejaVu Sans:size=10&#125;   Signal: $&#123;wireless_link_qual wlan0&#125;% $&#123;alignr&#125;$&#123;wireless_link_bar 8,60 wlan0&#125;</span><br><span class="line">$&#123;font PizzaDude Bullets:size=10&#125;a$&#123;font DejaVu Sans:size=10&#125;   Local IP: $&#123;alignr&#125;$&#123;addr wlan0&#125;</span><br><span class="line">$&#123;font PizzaDude Bullets:size=10&#125;b$&#123;font DejaVu Sans:size=10&#125;   Public IP: $&#123;alignr&#125;$&#123;execi 1800 ~/.conky/scripts/ip.sh&#125;#</span><br><span class="line">$&#123;else&#125;$&#123;if_existing /proc/net/route eth0&#125;</span><br><span class="line">$&#123;font PizzaDude Bullets:size=10&#125;O$&#123;font DejaVu Sans:size=10&#125;   Up: $&#123;upspeed eth0&#125; $&#123;alignr&#125;$&#123;upspeedgraph eth0 8,60 000000 000000&#125;</span><br><span class="line">$&#123;font PizzaDude Bullets:size=10&#125;U$&#123;font DejaVu Sans:size=10&#125;   Down: $&#123;downspeed eth0&#125; $&#123;alignr&#125;$&#123;downspeedgraph eth0 8,60 000000 000000&#125;</span><br><span class="line">$&#123;font PizzaDude Bullets:size=10&#125;N$&#123;font DejaVu Sans:size=10&#125;   Upload: $&#123;alignr&#125;$&#123;totalup eth0&#125;</span><br><span class="line">$&#123;font PizzaDude Bullets:size=10&#125;T$&#123;font DejaVu Sans:size=10&#125;   Download: $&#123;alignr&#125;$&#123;totaldown eth0&#125;</span><br><span class="line">$&#123;font PizzaDude Bullets:size=10&#125;a$&#123;font DejaVu Sans:size=10&#125;   Local IP: $&#123;alignr&#125;$&#123;addr eth0&#125;</span><br><span class="line">$&#123;font PizzaDude Bullets:size=10&#125;b$&#123;font DejaVu Sans:size=10&#125;   Public IP: $&#123;alignr&#125;$&#123;execi 1800 ~/.conky/scripts/ip.sh&#125;#</span><br><span class="line">$&#123;endif&#125;$&#123;endif&#125;</span><br><span class="line"># *** PROCESS ***</span><br><span class="line">$&#123;voffset 16&#125;$&#123;font DejaVu Sans:size=12&#125;PROCESSES$&#123;font DejaVu Sans:size=10&#125; $&#123;hr&#125;</span><br><span class="line">NAME $alignr CPU%  MEM%</span><br><span class="line">$&#123;top name 1&#125; $alignr $&#123;top cpu 1&#125;   $&#123;top mem 1&#125;</span><br><span class="line">$&#123;top name 2&#125; $alignr $&#123;top cpu 2&#125;   $&#123;top mem 2&#125;</span><br><span class="line">$&#123;top name 3&#125; $alignr $&#123;top cpu 3&#125;   $&#123;top mem 3&#125;</span><br><span class="line">$&#123;top name 4&#125; $alignr $&#123;top cpu 4&#125;   $&#123;top mem 4&#125;</span><br><span class="line">$&#123;top name 5&#125; $alignr $&#123;top cpu 5&#125;   $&#123;top mem 5&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>conky</category>
      </categories>
  </entry>
  <entry>
    <title>minetest</title>
    <url>/2013/11/04/minetest/</url>
    <content><![CDATA[<p><a href="/images/minetest_ogl42.png"><img src="/images/minetest_ogl42_tn.png" class=""></a></p>
<p><a href="http://minetest.net/">http://minetest.net/</a></p>
<p>minecraft のクローンminetest がUbuntu の標準リポジトリに登録されていたので、遊んでみました。<br>minetest はIrrlicht エンジンを利用して実装されています。<br>動作は軽快ですが、一部文字が表示されない箇所がありました。</p>
<span id="more"></span>

<h4 id="サーバへの接続方法"><a href="#サーバへの接続方法" class="headerlink" title="サーバへの接続方法"></a>サーバへの接続方法</h4><p>初期画面の一部の文字が表示されていなかったので、適当に勘を働かせて操作してみます。</p>
<ol>
<li>左から二番目のタブ(マルチプレイヤー)を選択</li>
<li>下のテキストボックスに、サーバのIP アドレスとポート番号を入力(<code>http://servers.minetest.net/</code>から適当に選ぶ)</li>
<li>右上から二番目のテキストボックスにパスワードを入力</li>
<li>右下のボタン(接続)を押下</li>
</ol>
<p>グラフィックがオンボードでATOM なOpenGL 1.4 の環境で動かしてみると、さすがに重かったです。</p>
<p><a href="/images/minetest_ogl14.png"><img src="/images/minetest_ogl14_tn.png" class=""></a></p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>screenfetch</title>
    <url>/2013/11/09/screenfetch/</url>
    <content><![CDATA[<p><a href="/images/screenfetch_debian.png"><img src="/images/screenfetch_debian_tn.png" class=""></a></p>
<p><a href="http://www.unixmen.com/find-system-information-screenfetch-tool/">http://www.unixmen.com/find-system-information-screenfetch-tool/</a></p>
<p>ScreenFetch でシステム情報を表示してみました。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>WordPress to Jekyll</title>
    <url>/2013/11/16/wordpress-to-jekyll/</url>
    <content><![CDATA[<p>無料Webサービスに設置していたブログのデータが消されてしまったので、バックアップデータをGitHub Pages に取り込むことにしました。<br>exitwp というスクリプトを使って、WordPress のデータをmarkdown に変換して、Octopress&#x2F;Jekyll に取り込みました。</p>
<p><a href="https://github.com/thomasf/exitwp">https://github.com/thomasf/exitwp</a></p>
<span id="more"></span>

<h4 id="exitwp-を取得"><a href="#exitwp-を取得" class="headerlink" title="exitwp を取得"></a>exitwp を取得</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/thomasf/exitwp</span><br><span class="line">$ <span class="built_in">cd</span> exitwp</span><br></pre></td></tr></table></figure>

<h4 id="バックアップデータを格納"><a href="#バックアップデータを格納" class="headerlink" title="バックアップデータを格納"></a>バックアップデータを格納</h4><p><code>./wordpress-xml/wordpress.xml</code></p>
<h4 id="前提パッケージをインストール"><a href="#前提パッケージをインストール" class="headerlink" title="前提パッケージをインストール"></a>前提パッケージをインストール</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install python-yaml python-bs4 python-html2text</span><br><span class="line">$ <span class="built_in">sudo</span> pip install --upgrade  -r pip_requirements.txt</span><br></pre></td></tr></table></figure>

<h4 id="変換実行"><a href="#変換実行" class="headerlink" title="変換実行"></a>変換実行</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python exitwp.py</span><br></pre></td></tr></table></figure>

<h4 id="Octopress-Jekyll-へ取り込み"><a href="#Octopress-Jekyll-へ取り込み" class="headerlink" title="Octopress&#x2F;Jekyll へ取り込み"></a>Octopress&#x2F;Jekyll へ取り込み</h4><p><code>./build/</code>ディレクトリに作成されたデータをOctopress&#x2F;Jekyll のディレクトリにコピーしてGenerate &amp; Deploy します。</p>
]]></content>
      <categories>
        <category>cms</category>
      </categories>
  </entry>
  <entry>
    <title>Partitions</title>
    <url>/2013/11/23/partitions/</url>
    <content><![CDATA[<p>構成変更前のパーティションレイアウトのメモ。</p>
<p>Markdown だと表組みが簡単に書けていいね。</p>
<span id="more"></span>

<h4 id="PC1-sda"><a href="#PC1-sda" class="headerlink" title="PC1 - sda"></a>PC1 - sda</h4><p>Hitachi HDS72105 465.76 GiB</p>
<table>
<thead>
<tr>
<th align="left">Partition</th>
<th align="right">Size</th>
<th align="left">FS</th>
<th align="left">Use</th>
</tr>
</thead>
<tbody><tr>
<td align="left">sda1</td>
<td align="right">0.35 GiB</td>
<td align="left">ntfs</td>
<td align="left">efi</td>
</tr>
<tr>
<td align="left">sda2</td>
<td align="right">150.00 GiB</td>
<td align="left">ntfs</td>
<td align="left">Windows 8</td>
</tr>
<tr>
<td align="left">sda3</td>
<td align="right">150.00 GiB</td>
<td align="left">ext4</td>
<td align="left">Ubuntu GNOME 12.10</td>
</tr>
<tr>
<td align="left">sda6</td>
<td align="right">150.00 GiB</td>
<td align="left">ext4</td>
<td align="left">Ubuntu GNOME 13.10</td>
</tr>
<tr>
<td align="left">sda5</td>
<td align="right">15.42 GiB</td>
<td align="left">linux-swap</td>
<td align="left">swap</td>
</tr>
</tbody></table>
<h4 id="PC1-sdb"><a href="#PC1-sdb" class="headerlink" title="PC1 - sdb"></a>PC1 - sdb</h4><p>WDC WD30EZRX-00D 2.73 TiB</p>
<table>
<thead>
<tr>
<th align="left">Partition</th>
<th align="right">Size</th>
<th align="left">FS</th>
<th align="left">Use</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-</td>
<td align="right">0.40 GiB</td>
<td align="left">ntfs</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">sdb5</td>
<td align="right">500.00 GiB</td>
<td align="left">ext4</td>
<td align="left">Ubuntu GNOME 13.04</td>
</tr>
<tr>
<td align="left">-</td>
<td align="right">499.61 GiB</td>
<td align="left">-</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">sdb3</td>
<td align="right">1.71 TiB</td>
<td align="left">ext4</td>
<td align="left">common</td>
</tr>
<tr>
<td align="left">sdb4</td>
<td align="right">44.52 GiB</td>
<td align="left">linux-swap</td>
<td align="left">swap</td>
</tr>
</tbody></table>
<h4 id="PC2-sda"><a href="#PC2-sda" class="headerlink" title="PC2 - sda"></a>PC2 - sda</h4><p>Hitachi HTS72323 298.09 GiB</p>
<table>
<thead>
<tr>
<th align="left">Partition</th>
<th align="right">Size</th>
<th align="left">FS</th>
<th align="left">Use</th>
</tr>
</thead>
<tbody><tr>
<td align="left">sda1</td>
<td align="right">0.35 GiB</td>
<td align="left">ntfs</td>
<td align="left">efi</td>
</tr>
<tr>
<td align="left">sda2</td>
<td align="right">150.00 GiB</td>
<td align="left">ntfs</td>
<td align="left">Windows 8</td>
</tr>
<tr>
<td align="left">sda3</td>
<td align="right">145.00 GiB</td>
<td align="left">ext4</td>
<td align="left">Ubuntu GNOME 13.10<br>Android-x86 4.3</td>
</tr>
<tr>
<td align="left">sda4</td>
<td align="right">2.75 GiB</td>
<td align="left">linux-swap</td>
<td align="left">swap</td>
</tr>
</tbody></table>
<h4 id="PC3-hda"><a href="#PC3-hda" class="headerlink" title="PC3 - hda"></a>PC3 - hda</h4><p>Hitachi HMS360606D5CF00 6.0 GB</p>
<table>
<thead>
<tr>
<th align="left">Partition</th>
<th align="right">Size</th>
<th align="left">FS</th>
<th align="left">Use</th>
</tr>
</thead>
<tbody><tr>
<td align="left">hda1</td>
<td align="right">0.13 GiB</td>
<td align="left">ext</td>
<td align="left">Lineo Linux</td>
</tr>
<tr>
<td align="left">hda2</td>
<td align="right">0.13 GiB</td>
<td align="left">linux-swap</td>
<td align="left">swap</td>
</tr>
<tr>
<td align="left">hda3</td>
<td align="right">5.29 GiB</td>
<td align="left">ext</td>
<td align="left">Debian</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu GNOME + GNOME3 PPA</title>
    <url>/2013/12/01/ubuntu-gnome-plus-gnome3-ppa/</url>
    <content><![CDATA[<p>Ubuntu GNOME にGNOME3 関連PPA を継ぎ足すのですが、各PPA に含まれるパッケージおよびそのバージョンに凸凹があったので、整理してみました。</p>
<span id="more"></span>

<h4 id="GNOME3-関連PPA"><a href="#GNOME3-関連PPA" class="headerlink" title="GNOME3 関連PPA"></a>GNOME3 関連PPA</h4><ul>
<li>ppa:gnome3-team&#x2F;gnome3-staging</li>
<li>ppa:gnome3-team&#x2F;gnome3-next</li>
<li>ppa:ricotz&#x2F;testing</li>
</ul>
<h4 id="Ubuntu-GNOME-13-10-GNOME3-PPA"><a href="#Ubuntu-GNOME-13-10-GNOME3-PPA" class="headerlink" title="Ubuntu GNOME 13.10 + GNOME3 PPA"></a>Ubuntu GNOME 13.10 + GNOME3 PPA</h4><p>|Staging|Next|Testing<br>:-|:-|:-|:-<br>clutter|1.14.4|1.14.4|1.14.5<br>gnome-control-center|3.10.1|-|-<br>gnome-desktop3|3.10.1|-|-<br>gnome-shell|3.10.2.1|3.10.1|3.11.2<br>gnome-tweak-tool|3.10.1|-|3.9.0<br>gtk+3.0|3.10.5|3.10.4|3.11.3<br>mutter|3.10.1.1|3.10.1.1|3.11.2</p>
<h4 id="Ubuntu-GNOME-14-04-GNOME3-PPA"><a href="#Ubuntu-GNOME-14-04-GNOME3-PPA" class="headerlink" title="Ubuntu GNOME 14.04 + GNOME3 PPA"></a>Ubuntu GNOME 14.04 + GNOME3 PPA</h4><p>|Staging|Next|Testing<br>:-|:-|:-|:-<br>clutter|1.16.0|-|1.14.5<br>gnome-control-center|-|-|-<br>gnome-desktop3|3.11.1|-|3.10.0<br>gnome-shell|3.10.2.1|-|3.11.2<br>gnome-tweak-tool|-|-|-<br>gtk+3.0|3.11.2|-|3.11.3<br>mutter|3.10.1.1|-|3.11.2</p>
<h4 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h4><p>現時点でUbuntu GNOME 14.04 の環境を新しいパッケージで整えるとしたら、Staging + Testing を基本として、13.10 のStaging からgnome-control-center とgnome-tweak-tool を入れるのが良さそうです。<br>混ぜると危険な気もしますけど。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>SteamOS</title>
    <url>/2013/12/14/steamos/</url>
    <content><![CDATA[<p><a href="/images/SteamOS-desktop.png"><img src="/images/SteamOS-desktop.png" class=""></a></p>
<p><a href="http://store.steampowered.com/steamos/">http://store.steampowered.com/steamos/</a></p>
<p><a href="https://gist.github.com/voltagex/7955961">https://gist.github.com/voltagex/7955961</a></p>
<p><a href="http://www.redgamingtech.com/how-to-install-steamos-on-virtual-box-virtual-machine/">http://www.redgamingtech.com/how-to-install-steamos-on-virtual-box-virtual-machine/</a></p>
<p>SteamOS のベータ版がリリースされたので、インストールしてみました。</p>
<span id="more"></span>
<p><a href="/images/steamos.png"><img src="/images/steamos_tn.png" class=""></a></p>
<p>SteamOS はDebian ベースのようです。<br>手順にしたがってISO に変換して仮想環境にインストールしてみました。<br>たまたま外出中で手元にPC がないので、スマートフォンから自宅のLinux マシンにVNC over SSH で繋いで作業してみました。ソフトキーボードは面倒ですね。</p>
<p>PrintScreen キーが使えなかったので、xwd を使いましたが、画像が少し変です。</p>
<p><a href="/images/SteamOS-login.png"><img src="/images/SteamOS-login.png" class=""></a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uname -a</span></span><br><span class="line">Linux steamos 3.10-3-amd64 <span class="comment">#1 SMP Debian 3.10.11-1st1 (2013-11-15) x86_64 GNU/Linux</span></span><br><span class="line"><span class="comment"># gnome-shell --version</span></span><br><span class="line">GNOME Shell 3.4.2</span><br></pre></td></tr></table></figure>

<h4 id="魔改造"><a href="#魔改造" class="headerlink" title="魔改造"></a>魔改造</h4><figure class="highlight text"><figcaption><span>/etc/apt/sources.list</span></figcaption><table><tr><td class="code"><pre><span class="line">deb http://ftp.jp.debian.org/debian stable main contrib non-free</span><br><span class="line">deb-src http://ftp.jp.debian.org/debian stable main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http://ftp.debian.org/debian/ wheezy-updates main contrib non-free</span><br><span class="line">deb-src http://ftp.debian.org/debian/ wheezy-updates main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http://security.debian.org/ wheezy/updates main contrib non-free</span><br><span class="line">deb-src http://security.debian.org/ wheezy/updates main contrib non-free</span><br></pre></td></tr></table></figure>

<p><a href="/images/SteamOS-japanese.png"><img src="/images/SteamOS-japanese.png" class=""></a></p>
<figure class="highlight text"><figcaption><span>/etc/apt/sources.list</span></figcaption><table><tr><td class="code"><pre><span class="line">deb http://ftp.jp.debian.org/debian experimental main contrib non-free</span><br><span class="line">deb-src http://ftp.jp.debian.org/debian experimental main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http://ftp.debian.org/debian/ -updates main contrib non-free</span><br><span class="line">deb-src http://ftp.debian.org/debian/ -updates main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http://security.debian.org/ /updates main contrib non-free</span><br><span class="line">deb-src http://security.debian.org/ /updates main contrib non-free</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Add remote location over SSH on XBMC</title>
    <url>/2013/12/22/add-remote-location-over-ssh-on-xbmc/</url>
    <content><![CDATA[<p><a href="/images/xbmc-ssh.png"><img src="/images/xbmc-ssh.png" class=""></a></p>
<p>外出先から自宅のPC に格納しているメディアにアクセスするためにXBMC を設定してみました。</p>
<span id="more"></span>

<p>Android やモバイルLinux にインストールしたXBMC からSSH 経由で自宅PC のメディアにアクセスするには、<code>Add network location</code> で <code>Secure Shell (SSH/SFTP)</code> プロトコルを選択します。</p>
<p>以下のクライアントで動作確認できました。</p>
<ul>
<li>Android 4.2 + XBMC 12.2</li>
<li>Android-x86 4.0 + XBMC 13.0 alpha10</li>
<li>Ubuntu GNOME 14.04 alpha1 + XBMC 12.0</li>
</ul>
<p>Linux の場合はsshfs でマウントしておいた方が何かと便利</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen</span><br><span class="line">$ ssh-copy-id -i .ssh/id_rsa.pub useranme@hostname -p 22222</span><br></pre></td></tr></table></figure>

<p><code>gnome-session-properties</code> で自動起動するアプリケーションに以下を追加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sshfs username@hostname:/mnt/common /mnt/common -p 22222 -o reconnect</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Cleaning</title>
    <url>/2013/12/29/cleaning/</url>
    <content><![CDATA[<p>年末だし、ハードディスクの中の重複したファイルを見つけて、削除してしまおう。</p>
<span id="more"></span>

<h4 id="対象とするファイル"><a href="#対象とするファイル" class="headerlink" title="対象とするファイル"></a>対象とするファイル</h4><ul>
<li>ファイルサイズが大きめ</li>
<li>不完全なファイルも存在する</li>
<li>ディレクトリ階層を再帰的に検索</li>
</ul>
<p>そのため、先頭1MB を対象としたハッシュ比較により、ファイルの同一性を検出します。</p>
<h4 id="スクリプト"><a href="#スクリプト" class="headerlink" title="スクリプト"></a>スクリプト</h4><figure class="highlight bash"><figcaption><span>~/test.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> /dev/null /tmp/list0.txt</span><br><span class="line">find . -<span class="built_in">type</span> f -<span class="built_in">exec</span> <span class="built_in">dd</span> <span class="keyword">if</span>=&#123;&#125; bs=1024 count=1000 of=/tmp/work.bin \; -<span class="built_in">exec</span> <span class="built_in">md5sum</span> /tmp/work.bin &gt;&gt; /tmp/list0.txt \; -<span class="built_in">exec</span> <span class="built_in">du</span> &#123;&#125;  &gt;&gt; /tmp/list0.txt \;</span><br><span class="line">sed <span class="string">&#x27;:loop; N; $!b loop; ;s/\/tmp\/work.bin\n//g&#x27;</span> /tmp/list0.txt &gt; /tmp/list1.txt</span><br><span class="line"><span class="built_in">sort</span> /tmp/list1.txt | <span class="built_in">uniq</span> -D -w 32  &gt; /tmp/list2.txt</span><br><span class="line"><span class="built_in">rm</span> /tmp/work.bin /tmp/list0.txt</span><br></pre></td></tr></table></figure>

<h4 id="スクリプトの実行"><a href="#スクリプトの実行" class="headerlink" title="スクリプトの実行"></a>スクリプトの実行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /PATH/TO/TARGET</span><br><span class="line">$ <span class="keyword">time</span> ~/test.sh</span><br></pre></td></tr></table></figure>

<h4 id="実行結果"><a href="#実行結果" class="headerlink" title="実行結果"></a>実行結果</h4><table>
<thead>
<tr>
<th align="left">出力されるファイル</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#x2F;tmp&#x2F;list1.txt</td>
<td align="left">ハッシュとサイズとパス</td>
</tr>
<tr>
<td align="left">&#x2F;tmp&#x2F;list2.txt</td>
<td align="left">重複しているファイルの一覧</td>
</tr>
</tbody></table>
<h3 id="ファイルの削除"><a href="#ファイルの削除" class="headerlink" title="ファイルの削除"></a>ファイルの削除</h3><p>ファイルのサイズとディレクトリを参照して冗長なファイルを削除します。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Remote Blogging with Octopress</title>
    <url>/2013/12/30/remote-blogging-with-octopress/</url>
    <content><![CDATA[<p><a href="/images/octopress_helper.png"><img src="/images/octopress_helper.png" class=""></a></p>
<p>モバイルPC からGitHub 上に構築したOctopress を更新してみます。<br>今回は、Octopress を設定済みのホストPC のリモートディレクトリをマウントして利用します。</p>
<span id="more"></span>

<h4 id="ホストPC-のディスクをsshfs-でマウント"><a href="#ホストPC-のディスクをsshfs-でマウント" class="headerlink" title="ホストPC のディスクをsshfs でマウント"></a>ホストPC のディスクをsshfs でマウント</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen</span><br><span class="line">$ ssh-copy-id -i ~/.ssh/id_rsa.pub username@hostname -p 22222</span><br><span class="line">$ ssh username@hostname -p 22222</span><br><span class="line">$ sshfs username@hostname:/mnt/common /mnt/common -p 22222 -o reconnect</span><br></pre></td></tr></table></figure>

<p>自動でマウントするには、<code>gnome-session-properties</code> で設定するか、<code>/etc/fstab</code> に設定します。</p>
<h4 id="Ruby-のインストール"><a href="#Ruby-のインストール" class="headerlink" title="Ruby のインストール"></a>Ruby のインストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -L https://get.rvm.io | bash -s stable --ruby</span><br><span class="line">$ rvm install 1.9.3</span><br><span class="line">$ rvm use 1.9.3</span><br><span class="line">$ rvm rubygems latest</span><br><span class="line">$ <span class="built_in">cd</span> /mnt/common/github/octopress</span><br><span class="line">$ bundle install</span><br></pre></td></tr></table></figure>

<h4 id="bashrc-の設定"><a href="#bashrc-の設定" class="headerlink" title=".bashrc の設定"></a>.bashrc の設定</h4><figure class="highlight bash"><figcaption><span>.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.rvm/bin <span class="comment"># Add RVM to PATH for scripting</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.rvm/scripts/rvm</span><br></pre></td></tr></table></figure>

<h4 id="Git-の設定"><a href="#Git-の設定" class="headerlink" title="Git の設定"></a>Git の設定</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">$ git config --global user.email mail_account_name@mail_domain_name</span><br></pre></td></tr></table></figure>

<h4 id="GitHub-の設定"><a href="#GitHub-の設定" class="headerlink" title="GitHub の設定"></a>GitHub の設定</h4><p>GitHub にログインして~&#x2F;.ssh&#x2F;id_rsa.pub を登録</p>
<h4 id="Octopress-Helper-の設定"><a href="#Octopress-Helper-の設定" class="headerlink" title="Octopress Helper の設定"></a>Octopress Helper の設定</h4><p><a href="http://ktkr3d.github.io/blog/2013/10/08/yad/">http://ktkr3d.github.io/blog/2013/10/08/yad/</a></p>
<p><a href="http://ktkr3d.github.io/blog/2013/07/15/zenity-octopress-helper/">http://ktkr3d.github.io/blog/2013/07/15/zenity-octopress-helper/</a></p>
]]></content>
      <categories>
        <category>cms</category>
      </categories>
  </entry>
  <entry>
    <title>Scroll up/down button add-on for firefox</title>
    <url>/2014/01/02/scroll-up-slash-down-button-add-on-for-firefox/</url>
    <content><![CDATA[<p><a href="/images/scroll_buttons.png"><img src="/images/scroll_buttons.png" class=""></a></p>
<p>Firefox にスクロールアップ&#x2F;ダウンボタンを追加してみました。</p>
<span id="more"></span>

<p>タブレットにインストールしたLinux のFirefox ではタッチスクリーンを使ったスクロール操作が面倒でした。<br>スクロールバーは細くて扱い難く、スクロールバーの近辺のリンクは誤って選択してしまいます。</p>
<p>Android のようにドラッグでスクロールできるアドオンもありますが、副作用もあります。<br>ツールバーでスクロールボタンを実装しているアドオンを探してみましたが、見つけられませんでした。</p>
<p>幸い、ページ先頭&#x2F;ページ末尾に移動できるボタンを実装したToolbar Buttons アドオンがありましたので、改造して代用することにしました。<br>XUL の<code>cmd_scrollBottom</code> を<code>cmd_scrollPageDown</code> に、<code>cmd_scrollTop</code> を<code>cmd_scrollPageUp</code> に置換しています。</p>
<h4 id="Toolbar-Buttons-アドオンのインストール"><a href="#Toolbar-Buttons-アドオンのインストール" class="headerlink" title="Toolbar Buttons アドオンのインストール"></a>Toolbar Buttons アドオンのインストール</h4><p><a href="https://addons.mozilla.org/ja/firefox/addon/toolbar-buttons/">https://addons.mozilla.org/ja/firefox/addon/toolbar-buttons/</a></p>
<h4 id="スクリプトの改造-修正前"><a href="#スクリプトの改造-修正前" class="headerlink" title="スクリプトの改造(修正前)"></a>スクリプトの改造(修正前)</h4><figure class="highlight xml"><figcaption><span>tbutton.jar/content/browser.xul</span></figcaption><table><tr><td class="code"><pre><span class="line">oncommand=&quot;document.commandDispatcher.getControllerForCommand(&#x27;cmd_scrollBottom&#x27;).doCommand(&#x27;cmd_scrollBottom&#x27;);&quot; /&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><figcaption><span>tbutton.jar/content/browser.xul</span></figcaption><table><tr><td class="code"><pre><span class="line">oncommand=&quot;document.commandDispatcher.getControllerForCommand(&#x27;cmd_scrollTop&#x27;).doCommand(&#x27;cmd_scrollTop&#x27;);&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h4 id="スクリプトの改造-修正後"><a href="#スクリプトの改造-修正後" class="headerlink" title="スクリプトの改造(修正後)"></a>スクリプトの改造(修正後)</h4><figure class="highlight xml"><figcaption><span>tbutton.jar/content/browser.xul</span></figcaption><table><tr><td class="code"><pre><span class="line">oncommand=&quot;document.commandDispatcher.getControllerForCommand(&#x27;cmd_scrollPageDown&#x27;).doCommand(&#x27;cmd_scrollPageDown&#x27;);&quot; /&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><figcaption><span>tbutton.jar/content/browser.xul</span></figcaption><table><tr><td class="code"><pre><span class="line">oncommand=&quot;document.commandDispatcher.getControllerForCommand(&#x27;cmd_scrollPageUp&#x27;).doCommand(&#x27;cmd_scrollPageUp&#x27;);&quot; /&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>firefox</category>
      </categories>
  </entry>
  <entry>
    <title>gitg 0.3.1</title>
    <url>/2014/01/10/gitg-0-dot-3-1/</url>
    <content><![CDATA[<p><a href="/images/gitg_0.3.1_vala.png"><img src="/images/gitg_0.3.1_vala.png" alt="gitg 0.3.1" title="gitg 0.3.1"></a></p>
<p><a href="https://wiki.gnome.org/Apps/Gitg#Get_gitg">https://wiki.gnome.org/Apps/Gitg#Get_gitg</a></p>
<p>VALA 言語で書き直されたgitg 0.3.1 がリリースされたので、ビルドして実行してみました。</p>
<span id="more"></span>

<h4 id="libgit2"><a href="#libgit2" class="headerlink" title="libgit2"></a>libgit2</h4><p>前提の<code>libgit2</code>をインストールします。<code>cmake</code> する際に<code>THREADSAFE</code> をON にしておきます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/libgit2/libgit2.git</span><br><span class="line">$ <span class="built_in">cd</span> libgit2</span><br><span class="line">$ <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">$ cmake .. -DTHREADSAFE:BOOL=ON</span><br><span class="line">$ <span class="built_in">sudo</span> cmake --build . --target install</span><br></pre></td></tr></table></figure>

<h4 id="libgit2-glib"><a href="#libgit2-glib" class="headerlink" title="libgit2-glib"></a>libgit2-glib</h4><p>前提の<code>libgit2-glib</code>をインストールします。API の引数が足らない旨のエラーが出るので、引数を追加します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://git.gnome.org/browse/libgit2-glib</span><br></pre></td></tr></table></figure>

<figure class="highlight vala"><figcaption><span>./libgit2-glib/libgit2-glib/ggit-ref.c</span></figcaption><table><tr><td class="code"><pre><span class="line">gboolean</span><br><span class="line">ggit_ref_has_reflog (GgitRef *ref)</span><br><span class="line">&#123;</span><br><span class="line">	g_return_val_if_fail (GGIT_IS_REF (ref), FALSE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//	return git_reference_has_log (_ggit_native_get (ref)) == 1;</span></span><br><span class="line">	<span class="keyword">return</span> git_reference_has_log (_ggit_native_get (ref), git_reference_name(ref)) == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> libgit2-glib</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ make</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h4 id="libgd"><a href="#libgd" class="headerlink" title="libgd"></a>libgd</h4><p>libgd をダウンロードします。<br>後でgitg のフォルダにコピーします。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://git.gnome.org/libgd</span><br></pre></td></tr></table></figure>

<h4 id="gitg"><a href="#gitg" class="headerlink" title="gitg"></a>gitg</h4><p><code>gitg</code>をインストールします。</p>
<p><code>https://download.gnome.org/sources/gitg/0.3/gitg-0.3.1.tar.xz</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> gitg-0.3.1</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ make </span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>gitg</tag>
      </tags>
  </entry>
  <entry>
    <title>gEdit 3.11.2</title>
    <url>/2014/01/12/gedit-3-dot-11-dot-2/</url>
    <content><![CDATA[<p><a href="/images/gedit_3.11.2.png"><img src="/images/gedit_3.11.2.png" alt="gedit 3.11.2" title="gedit 3.11.2"></a></p>
<p><a href="http://worldofgnome.org/gedit-3-12-migrates-to-hig-3/">http://worldofgnome.org/gedit-3-12-migrates-to-hig-3/</a></p>
<p>gEdit 3.11.2 がリリースされたので、ビルドして実行してみました。<br>(私はgedit ではなくgeany を常用してますけれど)</p>
<p>Gitg もそうですが、GNOME Human Interface Guidelines(HIG) 3 に準拠したアプリが続々とリリースされていますね。</p>
<span id="more"></span>

<h4 id="gtksouceview-3-0"><a href="#gtksouceview-3-0" class="headerlink" title="gtksouceview-3.0"></a>gtksouceview-3.0</h4><p>前提となる<code>gtksouceview-3.0</code> のバージョン3.11.2 をビルドしてインストールします。</p>
<p><code>ftp://ftp.gnome.org/pub/GNOME/sources/gtksourceview/3.11/gtksourceview-3.11.2.tar.xz</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure</span><br><span class="line">$ make -j4</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h4 id="libgd"><a href="#libgd" class="headerlink" title="libgd"></a>libgd</h4><p>libgd をダウンロードします。<br>後でgedit のフォルダにコピーします。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://git.gnome.org/libgd</span><br></pre></td></tr></table></figure>

<h4 id="gedit"><a href="#gedit" class="headerlink" title="gedit"></a>gedit</h4><p>gedit をビルドします。<br>make するとgedit 3.11.2 が起動します。</p>
<p><code>https://git.gnome.org/browse/gedit/snapshot/gedit-3.11.2.tar.gz</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./autogen.sh</span><br><span class="line">$ ./configure</span><br><span class="line">$ make -j4</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>MikuMikuPenguin</title>
    <url>/2014/01/12/mikumikupenguin/</url>
    <content><![CDATA[<p><a href="/images/mikumikupenguin.png"><img src="/images/mikumikupenguin.png" alt="MikuMikuPenguin" title="MikuMikuPenguin"></a></p>
<p><a href="https://github.com/sn0w75/MikuMikuPenguin">https://github.com/sn0w75/MikuMikuPenguin</a></p>
<p>ニコニコ動画でMikuMikuPenguin が公開されていたので、試してみました。<br>作成者の方に感謝です。今後に期待ですね。</p>
<span id="more"></span>

<h4 id="実行環境"><a href="#実行環境" class="headerlink" title="実行環境"></a>実行環境</h4><table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">環境</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ディストロ</td>
<td align="left">Ubuntu GNOME 14.04 a1</td>
</tr>
<tr>
<td align="left">デスクトップ環境</td>
<td align="left">GNOME Shell 3.11.3</td>
</tr>
<tr>
<td align="left">Linux カーネル</td>
<td align="left">3.12.0</td>
</tr>
<tr>
<td align="left">コンパイラ</td>
<td align="left">gcc&#x2F;g++ 4.8.2</td>
</tr>
<tr>
<td align="left">ビデオカード</td>
<td align="left">GeForce GTX 560 Ti&#x2F;PCIe&#x2F;SSE2</td>
</tr>
</tbody></table>
<h4 id="前提ライブラリ等"><a href="#前提ライブラリ等" class="headerlink" title="前提ライブラリ等"></a>前提ライブラリ等</h4><p>確か、こんな感じで入れたと思う。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install git dialog automake autoconf libtool libglfw-dev libBullet-dev libglm-dev libSOIL-dev libSDL2-dev libsdl2-mixer-dev</span><br></pre></td></tr></table></figure>

<h4 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure</span><br><span class="line">$ make -j4</span><br></pre></td></tr></table></figure>

<h4 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./pmx</span><br><span class="line">This is PMXViewer, a demonstration using the MikuMikuPenguin library.</span><br><span class="line">Usage: pmx [options] model_file.pmx motion_file.vmd</span><br><span class="line">Options: </span><br><span class="line">  -s	Play sound file to go with VMD motion</span><br><span class="line">	Only formats compatible with your build of SDL2_mixer are accepted.</span><br><span class="line">	If libmmp was compiled without SDL2_mixer support, no music will play.</span><br><span class="line"></span><br><span class="line">  --<span class="built_in">help</span>	display this <span class="built_in">help</span> and <span class="built_in">exit</span></span><br><span class="line">  --version	output version information and <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">FOR JAPANESE DOCUMENTATION, SEE:</span><br><span class="line">&lt;file:///usr/local/share/mikumikupenguin/doc/README_JP.html&gt;</span><br><span class="line"></span><br><span class="line">Report bugs to &lt;ibenrunnin@gmail.com&gt; (English or Japanese is ok).</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>3d</category>
      </categories>
      <tags>
        <tag>mmd</tag>
      </tags>
  </entry>
  <entry>
    <title>Irrlicht 1.9 trunk</title>
    <url>/2014/01/13/irrlicht-1-dot-9-trunk/</url>
    <content><![CDATA[<p><a href="/images/irrlicht_1.9_trunk.png"><img src="/images/irrlicht_1.9_trunk.png" alt="Irrlicht 1.9 trunk" title="Irrlicht 1.9 trunk"></a></p>
<p><a href="http://sourceforge.net/p/irrlicht/code/HEAD/tarball">http://sourceforge.net/p/irrlicht/code/HEAD/tarball</a></p>
<p>Irrlicht はオープンソースでマルチプラットフォーム対応の3D エンジンです。<br>Irrlicht 1.9 trunk を試してみたら、シェーダーのバグが修正されていました。</p>
<span id="more"></span>

<h4 id="実行環境"><a href="#実行環境" class="headerlink" title="実行環境"></a>実行環境</h4><table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">環境</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ディストロ</td>
<td align="left">Ubuntu GNOME 14.04 a1</td>
</tr>
<tr>
<td align="left">デスクトップ環境</td>
<td align="left">GNOME Shell 3.11.3</td>
</tr>
<tr>
<td align="left">Linux カーネル</td>
<td align="left">3.12.0</td>
</tr>
<tr>
<td align="left">コンパイラ</td>
<td align="left">gcc&#x2F;g++ 4.8.2</td>
</tr>
<tr>
<td align="left">ビデオカード</td>
<td align="left">GeForce GTX 560 Ti&#x2F;PCIe&#x2F;SSE2</td>
</tr>
</tbody></table>
<h4 id="ディレクトリ構成"><a href="#ディレクトリ構成" class="headerlink" title="ディレクトリ構成"></a>ディレクトリ構成</h4><p>OS を入れ替える度に忘れてしまうのでメモ。</p>
<table>
<thead>
<tr>
<th align="left">内容</th>
<th align="left">パス</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Irrlicht 3D エンジン</td>
<td align="left">&#x2F;mnt&#x2F;common&#x2F;tools&#x2F;irrlicht-trunk</td>
</tr>
<tr>
<td align="left">Bullet</td>
<td align="left">&#x2F;mnt&#x2F;common&#x2F;tools&#x2F;bullet-2.76</td>
</tr>
<tr>
<td align="left">サウンドエンジン</td>
<td align="left">&#x2F;mnt&#x2F;common&#x2F;tools&#x2F;cAudio2.1.0-Linux_64</td>
</tr>
<tr>
<td align="left">アプリソース</td>
<td align="left">&#x2F;mnt&#x2F;common&#x2F;home&#x2F;Projects&#x2F;Irrlicht&#x2F;examples&#x2F;XEffects</td>
</tr>
<tr>
<td align="left">IrrMMD</td>
<td align="left">&#x2F;mnt&#x2F;common&#x2F;home&#x2F;Projects&#x2F;Irrlicht&#x2F;examples&#x2F;XEffects&#x2F;irrmmd</td>
</tr>
<tr>
<td align="left">実行ディレクトリ</td>
<td align="left">&#x2F;mnt&#x2F;common&#x2F;home&#x2F;Projects&#x2F;Irrlicht&#x2F;bin&#x2F;Linux</td>
</tr>
<tr>
<td align="left">リソース</td>
<td align="left">&#x2F;mnt&#x2F;common&#x2F;home&#x2F;Projects&#x2F;Irrlicht&#x2F;bin&#x2F;Linux&#x2F;media</td>
</tr>
</tbody></table>
<p>Bullet とcAudio は以前ビルドしたものを再利用する。<br>.so を実行ディレクトリにコピーしておく。</p>
<p>IrrMMD(PMD&#x2F;VMDローダ) は<code>http://gunload.web.fc2.com/irrlicht/download.html</code>からダウンロードする。</p>
<p><code>/mnt/common/tools/irrlicht-trunk/include/irrUString.h</code> は<code>http://irrlicht.sourceforge.net/forum//viewtopic.php?t=37296</code> からダウンロードする。</p>
<h4 id="前提パッケージ等"><a href="#前提パッケージ等" class="headerlink" title="前提パッケージ等"></a>前提パッケージ等</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get -y install build-essential xserver-xorg-dev x11proto-xf86vidmode-dev libxxf86vm-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libxext-dev libxcursor-dev</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install libfreetype6-dev freeglut3-dev libboost-dev libglew1.5-dev libtheora-dev libopenal-dev codeblocks</span><br></pre></td></tr></table></figure>

<h4 id="Irrlicht-のビルド"><a href="#Irrlicht-のビルド" class="headerlink" title="Irrlicht のビルド"></a>Irrlicht のビルド</h4><p><code>http://sourceforge.net/p/irrlicht/code/HEAD/tarball</code> の<code>trunk</code> を選んで、<code>Download Snapshot</code> ボタンを押下する。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /mnt/common/tools/irrlicht-trunk/source/Irrlicht</span><br><span class="line">$ make -j4</span><br></pre></td></tr></table></figure>

<h4 id="Code-Blocks-の設定"><a href="#Code-Blocks-の設定" class="headerlink" title="Code::Blocks の設定"></a>Code::Blocks の設定</h4><p>Settings -&gt; Compiler -&gt; Search directories で設定</p>
<table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">パス</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Compiler</td>
<td align="left">&#x2F;mnt&#x2F;common&#x2F;tools&#x2F;irrlicht-trunk&#x2F;include</td>
</tr>
<tr>
<td align="left">&#x2F;mnt&#x2F;common&#x2F;tools&#x2F;cAudio2.1.0-Linux_64&#x2F;include</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">&#x2F;mnt&#x2F;common&#x2F;tools&#x2F;bullet-2.76&#x2F;src</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">&#x2F;usr&#x2F;include&#x2F;freetype2</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Linker</td>
<td align="left">&#x2F;mnt&#x2F;common&#x2F;tools&#x2F;irrlicht-trunk&#x2F;lib&#x2F;Linux</td>
</tr>
<tr>
<td align="left">&#x2F;mnt&#x2F;common&#x2F;tools&#x2F;cAudio2.1.0-Linux_64&#x2F;lib&#x2F;linux-64</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">&#x2F;mnt&#x2F;common&#x2F;tools&#x2F;bullet-2.76&#x2F;lib_x86_64</td>
<td align="left"></td>
</tr>
</tbody></table>
<h4 id="サンプルアプリ"><a href="#サンプルアプリ" class="headerlink" title="サンプルアプリ"></a>サンプルアプリ</h4><p><code>https://github.com/ktkr3d/irrlicht-sandbox</code></p>
]]></content>
      <categories>
        <category>irrlicht</category>
      </categories>
  </entry>
  <entry>
    <title>File-roller 3.11.4</title>
    <url>/2014/01/15/file-roller-3-dot-11-dot-4/</url>
    <content><![CDATA[<p><a href="/images/file-roller-3.11.4.png"><img src="/images/file-roller-3.11.4.png" alt="File Roller 3.11.4" title="File Roller 3.11.4"></a></p>
<p><a href="https://git.gnome.org/browse/file-roller/">https://git.gnome.org/browse/file-roller/</a></p>
<p>gitg, gedit に続きfile-roller もGNOME HIG 3 に対応したのでビルドして実行してみました。</p>
<span id="more"></span>

<h4 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h4><p><code>https://git.gnome.org/browse/file-roller/tag/?id=3.11.4</code> からダウンロードする。</p>
<h4 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./autogen.sh</span><br><span class="line">$ make -j4</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h4 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ file-roller</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Cairo Dock Session</title>
    <url>/2014/01/19/cairo-dock-session/</url>
    <content><![CDATA[<p><a href="/images/ccsm-window-management.png"><img src="/images/ccsm-window-management.png" alt="Compiz Config Setting Manager" title="Compiz Config Setting Manager"></a></p>
<p><a href="http://glx-dock.org/ww_page.php?p=Cairo-Dock%20Session&lang=en">http://glx-dock.org/ww_page.php?p=Cairo-Dock%20Session&amp;lang=en</a></p>
<p>今まで<code>パネルを隠せる</code>という理由でGNOME Shell を使って来ましたが、Cairo Dock を使っているのなら、Cairo Dock Session を利用するという方法もありました。<br>ディスプレイマネージャで<code>Cairo-Dock(GNOME)</code>を選択してログインします。</p>
<span id="more"></span>

<p>ただし、そのままだと[Alt]+[Tab] キーによるウィンドウの切り替えが使えませんので、Compiz のスイッチャープラグインを利用します。</p>
<h4 id="ccsm-compiz-plugins-のインストール"><a href="#ccsm-compiz-plugins-のインストール" class="headerlink" title="ccsm, compiz-plugins のインストール"></a>ccsm, compiz-plugins のインストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install ccsm compiz-plugins</span><br></pre></td></tr></table></figure>

<h4 id="スイッチャーの設定"><a href="#スイッチャーの設定" class="headerlink" title="スイッチャーの設定"></a>スイッチャーの設定</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ccsm</span><br></pre></td></tr></table></figure>

<p><code>ウィンドウ・マネージメント</code>から<code>Static Application Switcher</code>を有効にして、ショートカットキーを設定します。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Android-x86 4.4.2</title>
    <url>/2014/01/22/android-x86-4-dot-4-2/</url>
    <content><![CDATA[<p><a href="/images/android-x86_4.4.2.png"><img src="/images/android-x86_4.4.2.png" alt="Android-x86 kitkat 4.4.2" title="Android-x86 kitkat 4.4.2"></a></p>
<p><a href="https://drive.google.com/folderview?id=0BwGIrsQjBkyQOERnOVFTMDV6YWs&usp=sharing">https://drive.google.com/folderview?id=0BwGIrsQjBkyQOERnOVFTMDV6YWs&amp;usp=sharing</a></p>
<p>Andorid-x86 4.4.2 (kitkat-x86) on DELL Inspiron Duo</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Android-x86 4.4.2 local Build</title>
    <url>/2014/01/25/android-x86-4-dot-4-2-local-build/</url>
    <content><![CDATA[<p><a href="/images/android-x86_4.4.2_local_build.png"><img src="/images/android-x86_4.4.2_local_build.png" alt="Android-x86 kitkat 4.4.2 local build" title="Android-x86 kitkat 4.4.2 local build"></a></p>
<p><a href="http://www.android-x86.org/getsourcecode">http://www.android-x86.org/getsourcecode</a></p>
<span id="more"></span>

<h4 id="Get-source-and-Build"><a href="#Get-source-and-Build" class="headerlink" title="Get source and Build"></a>Get source and Build</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> android-x86</span><br><span class="line">$ <span class="built_in">cd</span> android-x86</span><br><span class="line">$ repo init -u http://git.android-x86.org/manifest -b kitkat-x86</span><br><span class="line">$ repo <span class="built_in">sync</span></span><br><span class="line">$ make -j4 iso_img TARGET_PRODUCT=android_x86</span><br></pre></td></tr></table></figure>
<h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mkdir</span> /android-2014-01-25/</span><br><span class="line">$ <span class="built_in">cd</span> out/target/product/x86/</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cp</span> -r data/ initrd.img kernel ramdisk.img system/ /android-2014-01-25/</span><br></pre></td></tr></table></figure>

<h4 id="Configure-the-GRUB-boot-loader"><a href="#Configure-the-GRUB-boot-loader" class="headerlink" title="Configure the GRUB boot loader"></a>Configure the GRUB boot loader</h4><figure class="highlight text"><figcaption><span>/etc/grub.d/40_custom</span></figcaption><table><tr><td class="code"><pre><span class="line">menuentry &quot;Android-x86 4.4.2 2014-01-25&quot; --class android --class os &#123;</span><br><span class="line">    insmod ext2</span><br><span class="line">    set root=&#x27;(hd0,3)&#x27;</span><br><span class="line">    echo &#x27;Loading Android-x86 4.4.2 2014-01-25 ...&#x27;</span><br><span class="line">    linux /android-2014-01-25/kernel root=/dev/ram0 androidboot.hardware=android_x86 acpi_sleep=s3_bios,s3_mode SRC=/android-2014-01-25 DATA=</span><br><span class="line">    initrd /android-2014-01-25/initrd.img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> update-grub</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Android-x86 Custom Build</title>
    <url>/2014/01/26/android-x86-custom-build/</url>
    <content><![CDATA[<p><a href="/images/android-x86_custom_build.png"><img src="/images/android-x86_custom_build.png" alt="Android-x86 custom build" title="Android-x86 custom build"></a></p>
<p><a href="https://groups.google.com/forum/#!msg/android-x86/yJXD4CeHWC4/RG2p3QzZlBgJ">https://groups.google.com/forum/#!msg/android-x86/yJXD4CeHWC4/RG2p3QzZlBgJ</a></p>
<p>Android-x86 Custom Build for DELL Inspiron Duo</p>
<ul>
<li>Acellerometer&#x2F;magnetometer(lsm303dlh) driver</li>
<li>Physical keyboard layout</li>
<li>Product Information</li>
</ul>
<span id="more"></span>

<h4 id="Get-Source"><a href="#Get-Source" class="headerlink" title="Get Source"></a>Get Source</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> ics-x86</span><br><span class="line">$ <span class="built_in">cd</span> ics-x86</span><br><span class="line">$ repo init -u http://git.android-x86.org/manifest -b ics-x86</span><br><span class="line">$ repo <span class="built_in">sync</span></span><br></pre></td></tr></table></figure>

<h4 id="Download-patch-and-Extract"><a href="#Download-patch-and-Extract" class="headerlink" title="Download patch and Extract"></a>Download patch and Extract</h4><p><code>https://groups.google.com/group/android-x86/attach/1894d90cdda96d44/ics-x86-DellDuo-patches.tar?part=4&amp;view=1</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar xvf ics-x86-DellDuo-patches.tar</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tree -F .</span><br><span class="line">.</span><br><span class="line">├── device/</span><br><span class="line">│   └── dell/</span><br><span class="line">│       └── duo/</span><br><span class="line">│           ├── AT_Translated_Set_2_keyboard.kl</span><br><span class="line">│           ├── AndroidBoard.mk</span><br><span class="line">│           ├── AndroidProducts.mk</span><br><span class="line">│           ├── BoardConfig.mk</span><br><span class="line">│           ├── duo.mk</span><br><span class="line">│           ├── duo_defconfig</span><br><span class="line">│           ├── duo_info</span><br><span class="line">│           ├── init.duo.rc</span><br><span class="line">│           ├── init.duo.sh</span><br><span class="line">│           ├── io_switch/</span><br><span class="line">│           │   ├── Android.mk</span><br><span class="line">│           │   └── io_switch.c</span><br><span class="line">│           ├── overlays/</span><br><span class="line">│           │   ├── frameworks/</span><br><span class="line">│           │   │   └── base/</span><br><span class="line">│           │   │       └── core/</span><br><span class="line">│           │   │           └── res/</span><br><span class="line">│           │   │               └── res/</span><br><span class="line">│           │   │                   └── xml/</span><br><span class="line">│           │   │                       └── storage_list.xml</span><br><span class="line">│           │   └── packages/</span><br><span class="line">│           │       └── apps/</span><br><span class="line">│           │           └── Browser/</span><br><span class="line">│           │               └── res/</span><br><span class="line">│           │                   └── values/</span><br><span class="line">│           │                       └── strings.xml</span><br><span class="line">│           ├── system.prop</span><br><span class="line">│           ├── vendorsetup.sh</span><br><span class="line">│           └── vold.fstab</span><br><span class="line">├── hardware/</span><br><span class="line">│   └── libsensors/</span><br><span class="line">│       ├── Android.mk</span><br><span class="line">│       └── lsm303dlh_a_sensor.c</span><br><span class="line">└── kernel/</span><br><span class="line">    ├── drivers/</span><br><span class="line">    │   └── hwmon/</span><br><span class="line">    │       ├── Kconfig</span><br><span class="line">    │       ├── Makefile</span><br><span class="line">    │       ├── lsm303dlh_a.c</span><br><span class="line">    │       └── lsm303dlh_m.c</span><br><span class="line">    └── include/</span><br><span class="line">        └── linux/</span><br><span class="line">            └── lsm303dlh.h</span><br><span class="line"></span><br><span class="line">23 directories, 23 files</span><br></pre></td></tr></table></figure>

<h4 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make -j4 iso_img TARGET_PRODUCT=duo</span><br></pre></td></tr></table></figure>

<h4 id="Ad-hoc-solution-1"><a href="#Ad-hoc-solution-1" class="headerlink" title="Ad hoc solution 1"></a>Ad hoc solution 1</h4><p>Downgrade Bison 3.0.2 to 2.7.1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get remove bison</span><br><span class="line">$ wget https://launchpad.net/bison/head/2.7.1/+download/bison-2.7.1.tar.gz</span><br><span class="line">$ tar zxvf bison-2.7.1.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> bison-2.7.1</span><br><span class="line">$ ./configure</span><br><span class="line">$ make -j4</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h4 id="Ad-hoc-solution-2"><a href="#Ad-hoc-solution-2" class="headerlink" title="Ad hoc solution 2"></a>Ad hoc solution 2</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/include/x86_64-linux-gnu/zconf.h /usr/include</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Girlfriend (prototype)</title>
    <url>/2014/02/06/girlfriend-prototype/</url>
    <content><![CDATA[<p><a href="/images/girlfriend-prototype.png"><img src="/images/girlfriend-prototype.png" alt="GNOME theme girlfriend app" title="GNOME theme girlfriend app"></a></p>
<p><a href="http://worldofgnome.org/girlfriend-app-available-4-testing/">http://worldofgnome.org/girlfriend-app-available-4-testing/</a></p>
<p>(^q^)くおえうえーーーるえうおおおｗｗｗ</p>
<iframe width="560" height="315" src="//www.youtube.com/embed/63vghOXuNDc" frameborder="0" allowfullscreen></iframe>

<span id="more"></span>

<h4 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/alexis-diavatis/Girlfriend-App.git</span><br></pre></td></tr></table></figure>

<h4 id="Get-node-webkit"><a href="#Get-node-webkit" class="headerlink" title="Get node-webkit"></a>Get node-webkit</h4><p><code>https://github.com/rogerwang/node-webkit</code></p>
<h4 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> ILG_CLIENT_PATH=/mnt/common/github/Girlfriend-App/ </span><br><span class="line">$ ./nw/nw ./app/app.nw</span><br></pre></td></tr></table></figure>

<h4 id="ad-hoc-solution-1"><a href="#ad-hoc-solution-1" class="headerlink" title="ad hoc solution 1"></a>ad hoc solution 1</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -sf /lib/x86_64-linux-gnu/libudev.so.1 /lib/x86_64-linux-gnu/libudev.so.0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>application</category>
      </categories>
  </entry>
  <entry>
    <title>Android-x86 4.4 RC1</title>
    <url>/2014/02/15/android-x86-4-dot-4-rc1/</url>
    <content><![CDATA[<p><a href="/images/android-x86-4.4-rc1.png"><img src="/images/android-x86-4.4-rc1.png" alt="Android-x86 4.4 RC1 kitkat" title="Android-x86 4.4 RC1 kitkat"></a></p>
<p><a href="http://www.android-x86.org/releases/releasenote-4-4-rc1">http://www.android-x86.org/releases/releasenote-4-4-rc1</a></p>
<span id="more"></span>

<h4 id="DELL-Inspiron-1090"><a href="#DELL-Inspiron-1090" class="headerlink" title="DELL Inspiron 1090"></a>DELL Inspiron 1090</h4><p>What works: Audio, Wi-Fi, Touch Screen, Touch Pad, Physical Keyboard, Mouse, Camera, USB Memory</p>
<p>What does not:</p>
<h4 id="Desktop-PC"><a href="#Desktop-PC" class="headerlink" title="Desktop PC"></a>Desktop PC</h4><p>SPEC: Flaming Blade GTI, i7-930, GeForce GTX 560Ti</p>
<figure class="highlight text"><figcaption><span>kernel option</span></figcaption><table><tr><td class="code"><pre><span class="line">video=uvesa UVESA_MODE=1280x1024</span><br></pre></td></tr></table></figure>

<p>What works: Audio, LAN(DHCP), Physical Keyboard, Mouse, USB Memory</p>
<p>What does not: Google Map</p>
<h4 id="VirtualBox-on-Desktop-PC-Linux"><a href="#VirtualBox-on-Desktop-PC-Linux" class="headerlink" title="VirtualBox on  Desktop PC(Linux)"></a>VirtualBox on  Desktop PC(Linux)</h4><p>What works: Audio, LAN(DHCP), Physical Keyboard, Mouse</p>
<p>What does not: Google Map</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu GNOME 14.04 Beta 1</title>
    <url>/2014/03/01/ubuntu-gnome-14-dot-04-beta-1/</url>
    <content><![CDATA[<p><a href="/images/ubuntu-gnome-14-04-beta-1.png"><img src="/images/ubuntu-gnome-14-04-beta-1.png" alt="Ubuntu GNOME 14.01 Beta 1" title="Ubuntu GNOME 14.01 Beta 1"></a><br><code>http://cdimage.ubuntu.com/ubuntu-gnome/releases/14.04/beta-1/</code></p>
<p>Ubuntu GNOME 14.04 ベータ1 が公開されたのでクリーンインストールしました。ついでにAndroid-x86 もインストールして、3OS のマルチブート環境にしました。</p>
<span id="more"></span>

<h4 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h4><p>DELL Indpiron 1090<br>すでにWindows 8.1 がインストールされています。<br>この第3パーティションにインストールします。</p>
<h4 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h4><p>・Ubuntu GNOME 13.10<br><code>http://cdimage.ubuntu.com/ubuntu-gnome/releases/14.04/beta-1/</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:gnome3-team/gnome3-staging</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get upgrade</span><br></pre></td></tr></table></figure>

<h4 id="カスタマイズ"><a href="#カスタマイズ" class="headerlink" title="カスタマイズ"></a>カスタマイズ</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ LANG=C xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure>

<h4 id="アプリケーションの追加"><a href="#アプリケーションの追加" class="headerlink" title="アプリケーションの追加"></a>アプリケーションの追加</h4><ul>
<li>audacious</li>
<li>cairo-dock</li>
<li>conky</li>
<li>geany</li>
<li>gimp</li>
<li>nkf</li>
<li>onboard</li>
<li>sshfs</li>
<li>thunderbird</li>
<li>openssh-server</li>
<li>synaptic</li>
<li>xbmc</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>XBMC Customize</title>
    <url>/2014/03/05/xbmc-customize/</url>
    <content><![CDATA[<p><a href="/images/xbmc_customize.png"><img src="/images/xbmc_customize.png" alt="XBMC Customize" title="XBMC Customize"></a></p>
<p>XBMC のビデオOSD　画面に終了ボタンを付けました。タッチスクリーンで使用した場合に、簡単に終了できるようになりました。</p>
<span id="more"></span>

<h4 id="タッチスクリーンの有効化"><a href="#タッチスクリーンの有効化" class="headerlink" title="タッチスクリーンの有効化"></a>タッチスクリーンの有効化</h4><figure class="highlight bash"><figcaption><span>/usr/bin/xbmc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">export</span> SDL_MOUSE_RELATIVE=0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="終了ボタンの追加"><a href="#終了ボタンの追加" class="headerlink" title="終了ボタンの追加"></a>終了ボタンの追加</h4><figure class="highlight xml"><figcaption><span>/usr/share/xbmc/addons/skin.confluence/720p/VideoOSD.xml:291-295</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- !LiveTV --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">control</span> <span class="attr">type</span>=<span class="string">&quot;group&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">posx</span>&gt;</span>355r<span class="tag">&lt;/<span class="name">posx</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">posy</span>&gt;</span>60r<span class="tag">&lt;/<span class="name">posy</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">animation</span> <span class="attr">effect</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">time</span>=<span class="string">&quot;200&quot;</span>&gt;</span>VisibleChange<span class="tag">&lt;/<span class="name">animation</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><figcaption><span>/usr/share/xbmc/addons/skin.confluence/720p/VideoOSD.xml:382-407</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">control</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;255&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Power push button<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">posx</span>&gt;</span>280<span class="tag">&lt;/<span class="name">posx</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">posy</span>&gt;</span>5<span class="tag">&lt;/<span class="name">posy</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">width</span>&gt;</span>45<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">height</span>&gt;</span>45<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span>&gt;</span>31003<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">font</span>&gt;</span>-<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aligny</span>&gt;</span>-<span class="tag">&lt;/<span class="name">aligny</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">onclick</span>&gt;</span>ActivateWindow(ShutdownMenu)<span class="tag">&lt;/<span class="name">onclick</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">texturefocus</span> <span class="attr">border</span>=<span class="string">&quot;5&quot;</span>&gt;</span>floor_buttonFO.png<span class="tag">&lt;/<span class="name">texturefocus</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">texturenofocus</span> <span class="attr">border</span>=<span class="string">&quot;5&quot;</span>&gt;</span>floor_button.png<span class="tag">&lt;/<span class="name">texturenofocus</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">onleft</span>&gt;</span>21<span class="tag">&lt;/<span class="name">onleft</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">onright</span>&gt;</span>21<span class="tag">&lt;/<span class="name">onright</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">onup</span>&gt;</span>9002<span class="tag">&lt;/<span class="name">onup</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ondown</span>&gt;</span>9003<span class="tag">&lt;/<span class="name">ondown</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">control</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">control</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Power Icon<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">posx</span>&gt;</span>285<span class="tag">&lt;/<span class="name">posx</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">posy</span>&gt;</span>10<span class="tag">&lt;/<span class="name">posy</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">width</span>&gt;</span>35<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">height</span>&gt;</span>35<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aspectratio</span>&gt;</span>keep<span class="tag">&lt;/<span class="name">aspectratio</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">texture</span>&gt;</span>icon_power.png<span class="tag">&lt;/<span class="name">texture</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">control</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>application</category>
      </categories>
  </entry>
  <entry>
    <title>Numix Desktop Dock</title>
    <url>/2014/03/09/numix-desktop-dock/</url>
    <content><![CDATA[<p><a href="/images/Numix_Desktop_Dock.png"><img src="/images/Numix_Desktop_Dock.png" alt="Numix Desktop Dock" title="Numix Desktop Dock"></a></p>
<p><a href="https://github.com/rbnquintero/nos-dock">https://github.com/rbnquintero/nos-dock</a> <br /><br><a href="https://github.com/numixproject/nos-dock">https://github.com/numixproject/nos-dock</a></p>
<p>Numix Desktop Dock はGNOME Shell 拡張Dash to Dock をフォークし、画面下位置にドックを配置するように改変されたGNOME Shell拡張です。</p>
<span id="more"></span>

<h4 id="取得"><a href="#取得" class="headerlink" title="取得"></a>取得</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/rbnquintero/nos-dock.git</span><br><span class="line">$ <span class="built_in">cd</span> nos-dock</span><br></pre></td></tr></table></figure>

<p><code>https://github.com/numixproject/nos-dock.git</code> はクリアされた？</p>
<h4 id="カスタマイズ"><a href="#カスタマイズ" class="headerlink" title="カスタマイズ"></a>カスタマイズ</h4><figure class="highlight javascript"><figcaption><span>myDash.js:43</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//this.parent(&#123; //name: &#x27;dash&#x27;,               //This will inherit styling from the original gnome dock</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">parent</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;dash&#x27;</span>,               <span class="comment">//This will inherit styling from the original gnome dock</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>myDash.js:391</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//let newIconSize = 16;</span></span><br><span class="line"><span class="keyword">let</span> newIconSize = <span class="number">48</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>metadata.json:2</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//&quot;shell-version&quot;: [&quot;3.10&quot;],</span></span><br><span class="line"><span class="string">&quot;shell-version&quot;</span>: [<span class="string">&quot;3.11.90&quot;</span>, <span class="string">&quot;3.10&quot;</span>],</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><figcaption><span>stylesheet.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#dash</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">9px</span> <span class="number">9px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="日本語化"><a href="#日本語化" class="headerlink" title="日本語化"></a>日本語化</h4><figure class="highlight javascript"><figcaption><span>metadata.json:8</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;gettext-domain&quot;</span>: <span class="string">&quot;dashtodock&quot;</span>, <span class="comment">//&quot;gettext-domain&quot;: &quot;nos-dock&quot;,</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>prefs.js:11</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Gettext</span> = imports.<span class="property">gettext</span>.<span class="title function_">domain</span>(<span class="string">&#x27;dashtodock&#x27;</span>); <span class="comment">//const Gettext = imports.gettext.domain(&#x27;nos-dock&#x27;);</span></span><br></pre></td></tr></table></figure>

<h4 id="ビルド-インストール"><a href="#ビルド-インストール" class="headerlink" title="ビルド&amp;インストール"></a>ビルド&amp;インストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>

<h4 id="アプリケーションメニューの準備"><a href="#アプリケーションメニューの準備" class="headerlink" title="アプリケーションメニューの準備"></a>アプリケーションメニューの準備</h4><p><a href="http://ktkr3d.github.io/blog/2013/07/14/docky-plus-cardapio/">http://ktkr3d.github.io/blog/2013/07/14/docky-plus-cardapio/</a></p>
<p><code>/usr/share/applications/cardapio.desktop</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> ~/.gtk-bookmarks</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /usr/share/applications/cardapio.desktop ~/.config/autostart/</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>~/.config/autostart cardapio.desktop:5</span></figcaption><table><tr><td class="code"><pre><span class="line">Exec=cardapio hidden</span><br></pre></td></tr></table></figure>

<h4 id="シャットダウン-再起動メニューの準備"><a href="#シャットダウン-再起動メニューの準備" class="headerlink" title="シャットダウン&#x2F;再起動メニューの準備"></a>シャットダウン&#x2F;再起動メニューの準備</h4><figure class="highlight text"><figcaption><span>~/.local/share/applications/indicator-session-quit.desktop</span></figcaption><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=Power Off</span><br><span class="line">TryExec=/usr/bin/gnome-session-quit</span><br><span class="line">Exec=/usr/bin/gnome-session-quit --power-off</span><br><span class="line">Icon=system-shutdown</span><br><span class="line">Terminal=false</span><br><span class="line">Type=Application</span><br><span class="line">Categories=System;</span><br><span class="line">Version=1.0</span><br><span class="line">X-Ubuntu-Gettext-Domain=indicator-session</span><br></pre></td></tr></table></figure>

<h4 id="メニューアイコンの追加登録"><a href="#メニューアイコンの追加登録" class="headerlink" title="メニューアイコンの追加登録"></a>メニューアイコンの追加登録</h4><p><code>cardapio.desktop</code>, <code>indicator-session-quit.desktop</code> を追加します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dconf <span class="built_in">read</span> /org/gnome/shell/favorite-apps</span><br><span class="line">[<span class="string">&#x27;firefox.desktop&#x27;</span>, <span class="string">&#x27;thunderbird.desktop&#x27;</span>, <span class="string">&#x27;xbmc.desktop&#x27;</span>, <span class="string">&#x27;audacious.desktop&#x27;</span>, <span class="string">&#x27;codeblocks.desktop&#x27;</span>, <span class="string">&#x27;geany.desktop&#x27;</span>, <span class="string">&#x27;gitg.desktop&#x27;</span>, <span class="string">&#x27;nautilus.desktop&#x27;</span>, <span class="string">&#x27;gnome-terminal.desktop&#x27;</span>, <span class="string">&#x27;gnome-tweak-tool.desktop&#x27;</span>, <span class="string">&#x27;gnome-control-center.desktop&#x27;</span>, <span class="string">&#x27;update-manager.desktop&#x27;</span>]</span><br><span class="line">$ dconf write /org/gnome/shell/favorite-apps <span class="string">&quot;[&#x27;firefox.desktop&#x27;, &#x27;thunderbird.desktop&#x27;, &#x27;xbmc.desktop&#x27;, &#x27;audacious.desktop&#x27;, &#x27;codeblocks.desktop&#x27;, &#x27;geany.desktop&#x27;, &#x27;gitg.desktop&#x27;, &#x27;nautilus.desktop&#x27;, &#x27;gnome-terminal.desktop&#x27;, &#x27;gnome-tweak-tool.desktop&#x27;, &#x27;gnome-control-center.desktop&#x27;, &#x27;update-manager.desktop&#x27;, &#x27;cardapio.desktop&#x27;, &#x27;indicator-session-quit.desktop&#x27;]&quot;</span></span><br></pre></td></tr></table></figure>

<p><a href="/images/application_quit_menu.png"><img src="/images/application_quit_menu.png" alt="Numix Desktop Dock" title="Numix Desktop Dock"></a></p>
<h4 id="今後の対応が期待されること"><a href="#今後の対応が期待されること" class="headerlink" title="今後の対応が期待されること"></a>今後の対応が期待されること</h4><ul>
<li>インテリハイドの検知位置が画面左隅(フォーク前)のままなのを画面下に</li>
<li>ツールチップの表示位置</li>
<li>GNOME Shell のアプリケーション一覧画面では元の左側ドックのままに</li>
<li>ドラッグアンドドロップによるアイコンの並び替え</li>
</ul>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME 3.12</title>
    <url>/2014/04/03/gnome-3-dot-12/</url>
    <content><![CDATA[<p><a href="/images/Ubuntu14.04_GNOME3.12.png"><img src="/images/Ubuntu14.04_GNOME3.12.png" alt="GNOME 3.12" title="GNOME 3.12"></a></p>
<p><code>ppa:gnome3-team/gnome3-staging</code> からGNOME 3.12 をインストールしました。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Dash to Dock on Bottom - GNOME Shell Extension</title>
    <url>/2014/04/06/dash-to-dock-on-bottom-gnome-shell-extension/</url>
    <content><![CDATA[<p><a href="/images/dash-to-dock-on-bottom.png"><img src="/images/dash-to-dock-on-bottom.png" alt="Dash to Dock on Bottom" title="Dash to Dock on Bottom"></a></p>
<p><a href="https://github.com/ktkr3d/dash-to-dock-on-bottom">https://github.com/ktkr3d/dash-to-dock-on-bottom</a></p>
<p>Dash to Dock on Bottom は画面下部にドックを表示するGNOME Shell 拡張です。<br><a href="https://extensions.gnome.org/extension/307/dash-to-dock/">Dash to Dock</a> からフォークしています。</p>
<span id="more"></span>

<h4 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ktkr3d/dash-to-dock-on-bottom.git</span><br><span class="line">$ <span class="built_in">cd</span> dash-to-dock-on-bottom</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>

<p><code>~/.local/share/gnome-shell/extensions/dash-to-dock-on-bottom@ktkr3d.gmail.com/</code> にインストールされます。</p>
<h4 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h4><p><code>gnome-tweak-tool</code> の拡張機能のページでDash to Dock on Bottom を有効にして、<br>設定画面を開きます。</p>
<p><a href="/images/ddb-prefs.png"><img src="/images/ddb-prefs.png" alt="Dash to Dock on Bottom" title="Dash to Dock on Bottom"></a></p>
<h4 id="一時的制限事項"><a href="#一時的制限事項" class="headerlink" title="一時的制限事項"></a>一時的制限事項</h4><ul>
<li>「Dock を固定して常に表示する」を「オン」にします。</li>
<li>アイコンの並び替えはオーバービュー画面のDock で実行できます。</li>
</ul>
<h4 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h4><ul>
<li>電源ボタン<figure class="highlight text"><figcaption><span>indicator-session-quit.desktop</span></figcaption><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=Power Off</span><br><span class="line">TryExec=/usr/bin/gnome-session-quit</span><br><span class="line">Exec=/usr/bin/gnome-session-quit --power-off</span><br><span class="line">Icon=system-shutdown</span><br><span class="line">Terminal=false</span><br><span class="line">Type=Application</span><br><span class="line">Categories=System;</span><br><span class="line">Version=1.0</span><br><span class="line">X-Ubuntu-Gettext-Domain=indicator-session</span><br></pre></td></tr></table></figure></li>
<li>アプリケーションボタン<br /><code>cardapio</code> をお気に入りに追加します。</li>
<li>お気に入りのバックアップ<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dconf <span class="built_in">read</span> /org/gnome/shell/favorite-apps</span><br></pre></td></tr></table></figure></li>
<li>お気に入りのリストア<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dconf write /org/gnome/shell/favorite-apps <span class="string">&quot;&lt;dconf read で出力された内容(ダブルクォート必要)&gt;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h4><ul>
<li>自動非表示機能</li>
<li>アイコンのドラッグアンドドロップ</li>
<li>オーバービュー画面の挙動を整理</li>
<li>アイコンのリサイズ</li>
<li>マウスホイール操作</li>
</ul>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>RTMP Streaming on Linux</title>
    <url>/2014/05/01/rtmp-streaming-on-linux/</url>
    <content><![CDATA[<p><a href="/images/simplescreenrecorder_rtmp.png"><img src="/images/simplescreenrecorder_rtmp.png" alt="simplescreenrecorder rtmp" title="simplescreenrecorder rtmp"></a></p>
<p>Linux 環境のスクリーンキャストをRTMP プロトコルを利用して、音声付きでストリーミング配信します。最終的には、Peercast ネットワークに配信してみようと思います。</p>
<p><a href="http://www.maartenbaert.be/simplescreenrecorder/live-streaming/">http://www.maartenbaert.be/simplescreenrecorder/live-streaming/</a><br /><br><a href="http://www.rtmpd.com/">http://www.rtmpd.com/</a><br /><br><a href="http://www.pecastation.org/">http://www.pecastation.org/</a><br /></p>
<span id="more"></span>

<h4 id="配信環境"><a href="#配信環境" class="headerlink" title="配信環境"></a>配信環境</h4><ul>
<li>Ubuntu 14.04 x86_64, GNOME Shell 3.12.1</li>
<li>SimpleScreenRecorder<br />デスクトップ上の矩形を音声付きでFLV 形式にエンコードします。</li>
<li>C++ RTMP Server<br />RTMP プロトコルで、FLV 形式のデータを受信し、RTMP プロトコルで配信します。</li>
<li>PeerCastStation<br />RTMP サーバに接続し、Peercast ネットワークにストリームを配信します。</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">SimpleScreenRecorder (Linux)</span><br><span class="line">    -&gt; C++ RTMP Server (Linux)</span><br><span class="line">        -&gt; PeerCastStation (Linux)</span><br><span class="line">            -&gt; Internet</span><br></pre></td></tr></table></figure>

<p>上記が目標とする構成で、RTMP サーバへの接続と公開まではできました。<br>Linux 環境上で、PeerCastStation 1.7.9.1 がRTMP サーバからうまく受信できなかったので、Peercast ネットワークへの配信については<a href="#temporary">暫定構成</a>で実行しました。</p>
<h4 id="C-RTMP-Server-のビルドと起動"><a href="#C-RTMP-Server-のビルドと起動" class="headerlink" title="C++ RTMP Server のビルドと起動"></a>C++ RTMP Server のビルドと起動</h4><p><a href="http://wiki.rtmpd.com/quickbuild">http://wiki.rtmpd.com/quickbuild</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install g++ subversion cmake make libssl-dev</span><br><span class="line">$ svn co --username anonymous --password <span class="string">&quot;&quot;</span> https://svn.rtmpd.com/crtmpserver/trunk crtmpserver</span><br><span class="line">$ <span class="built_in">cd</span> crtmpserver/builders/cmake/</span><br><span class="line">$ ./run</span><br></pre></td></tr></table></figure>

<p>もしくは、<code>crtmpserver</code> というパッケージを利用してもよいかもしれません。</p>
<h4 id="SimpleScreenRecorder-の設定"><a href="#SimpleScreenRecorder-の設定" class="headerlink" title="SimpleScreenRecorder の設定"></a>SimpleScreenRecorder の設定</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install simplescreenrecorder</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">設定値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Video Input:</td>
<td align="left">select “Record a fixed rectangle”</td>
</tr>
<tr>
<td align="left">set Left, Top, Width, Height Value</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">set Frame rate: “10”</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Audio Input:</td>
<td align="left">“Pulse Audio”</td>
</tr>
<tr>
<td align="left">“Monitor of 内部オーディオ アナログステレオ”</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">File:</td>
<td align="left">Save as: <code>rtmp://localhost/live/livestream</code></td>
</tr>
<tr>
<td align="left">Separate file per segment: DO NOT CHECK!</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Container: select “other…”, then “flv”</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Video</td>
<td align="left">Codec: “Other…”, then “libx264”</td>
</tr>
<tr>
<td align="left">Bit rate (inkbps): “100”</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Custom options: <code>preset=fast, minrate=100, maxrate=100, bufsize=2000, keyint=60</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Audio:</td>
<td align="left">Codec: “AAC”</td>
</tr>
<tr>
<td align="left">Bit rate (in kbps): “64”</td>
<td align="left"></td>
</tr>
</tbody></table>
<h4 id="動作確認1"><a href="#動作確認1" class="headerlink" title="動作確認1"></a>動作確認1</h4><p>ブラウザで、<code>http://dl.dropboxusercontent.com/u/2918563/flvplayback.swf</code> にアクセスして、以下を確認します。別のPC から接続する場合はサーバのIP アドレスに置き換えます。</p>
<ul>
<li><code>rtmp://127.0.0.1/flvplayback</code> にコネクトできていること</li>
<li><code>livestream</code> を選択して、<code>Play</code> ボタン押下でデスクトップの映像と音声が再生されること</li>
</ul>
<h4 id="動作確認2"><a href="#動作確認2" class="headerlink" title="動作確認2"></a>動作確認2</h4><p>以下のコマンドで、デスクトップの映像と音声が再生されるか確認します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ffplay <span class="string">&quot;rtmp://localhost/flvplayback/livestream&quot;</span></span><br></pre></td></tr></table></figure>

<p>以下のエラーは後で調べておこう。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[rtmp @ 0x7f4008001600] Server error: call to function _checkbw failed</span><br><span class="line">[flv @ 0x7f40080008c0] Stream discovered after head already parsed  </span><br></pre></td></tr></table></figure>

<h4 id="動作確認3"><a href="#動作確認3" class="headerlink" title="動作確認3"></a>動作確認3</h4><p>Android のBSPlayer FREE で<code>rtmp://192.168.0.2/flvplayback/livestream</code> を開くと再生されます。</p>
<p><a href="https://play.google.com/store/apps/details?id=com.bsplayer.bspandroid.free&hl=ja">https://play.google.com/store/apps/details?id=com.bsplayer.bspandroid.free&amp;hl=ja</a></p>
<h4 id="PeerCastStation-の設定"><a href="#PeerCastStation-の設定" class="headerlink" title="PeerCastStation の設定"></a>PeerCastStation の設定</h4><p>PeerCastStation の開発版(1.7.9.1)をダウンロードして展開します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mono PeerCastStation.exe</span><br></pre></td></tr></table></figure>

<p>ブラウザで<code>http://localhost:7144</code> にアクセスします。ページが開けない場合は、<code>lsof -i -P</code> で<code>mono</code> のプロセスがリッスンしているポート番号を指定します。</p>
<p>「リレー」ページの「配信」ボタンを押下します。</p>
<table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">設定値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ソース</td>
<td align="left">RTMP Source</td>
</tr>
<tr>
<td align="left">ストリームURL</td>
<td align="left"><code>rtmp://localhost/flvplayback/livestream</code></td>
</tr>
<tr>
<td align="left">ストリームタイプ</td>
<td align="left">Flash Video (FLV)</td>
</tr>
<tr>
<td align="left">チャンネル名</td>
<td align="left">(任意の名称を設定)</td>
</tr>
</tbody></table>
<p>Error になってしまって、Searching やReceiving とならないのはなんでだろう？</p>
<div id="temporary" />

<h4 id="暫定構成"><a href="#暫定構成" class="headerlink" title="暫定構成"></a>暫定構成</h4><p><a href="http://fukure.sakura.ne.jp/wordpress/archives/1168">http://fukure.sakura.ne.jp/wordpress/archives/1168</a></p>
<p>Peercast がうまくRTMP を受信できなかったので、HTTP で受信できるような構成にしました。<br>そのために必要なFlazrDumper がLinux でうまく動かなかったので、途中からWindows PC を経由するようにしました。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">SimpleScreenRecorder (Linux)</span><br><span class="line">    -&gt; FlazrDumper (Windiows)</span><br><span class="line">        -&gt; PeerCastStation (Windows)</span><br><span class="line">            -&gt; Internet</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">アプリ</th>
<th align="left">設定値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SimpleScreenRecorder</td>
<td align="left">rtmp:&#x2F;&#x2F;192.168.0.4&#x2F;live&#x2F;livestream</td>
</tr>
<tr>
<td align="left">FlazrDumper</td>
<td align="left">rtmp:&#x2F;&#x2F;localhost&#x2F;live&#x2F;livestream</td>
</tr>
<tr>
<td align="left">PeercastStation</td>
<td align="left"><code>http://localhost:8888/</code></td>
</tr>
</tbody></table>
<p><a href="/images/screencast_desktop.png"><img src="/images/screencast_desktop.png" alt="screencast linux desktop" title="screencast linux desktop"></a></p>
]]></content>
      <categories>
        <category>p2p</category>
      </categories>
  </entry>
  <entry>
    <title>SimpleScreenRecorder + PeerCastStation</title>
    <url>/2014/05/05/simplescreenrecorder-plus-peercaststation/</url>
    <content><![CDATA[<p>SimpleScreenRecorder とPeerCastStation を使って、Linux デスクトップのスクリーンキャストをPeercast ネットワークに配信してみました。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">SimpleScreenRecorder (Linux)</span><br><span class="line">    -&gt; PeerCastStation (Linux)</span><br><span class="line">        -&gt; Internet</span><br></pre></td></tr></table></figure>

<p><a href="http://www.maartenbaert.be/simplescreenrecorder/">http://www.maartenbaert.be/simplescreenrecorder/</a><br><a href="http://www.pecastation.org/">http://www.pecastation.org/</a></p>
<span id="more"></span>

<h4 id="PeerCastStation-の起動"><a href="#PeerCastStation-の起動" class="headerlink" title="PeerCastStation の起動"></a>PeerCastStation の起動</h4><p><a href="http://www.pecastation.org/">http://www.pecastation.org/</a> からPeerCastStation 開発版（1.7.9.1）のアーカイブをダウンロードして、展開します。以下のコマンドで起動します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mono PeerCastStation.exe</span><br></pre></td></tr></table></figure>

<p>mono をサービスとして起動するには、</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mono-service -d:/PATH_TO_PEERCASTSTATION -m:PeerCastStaion /PATH_TO_PEERCASTSTATION/PeerCastStation.exe</span><br></pre></td></tr></table></figure>

<h4 id="PeerCastStation-の配信設定"><a href="#PeerCastStation-の配信設定" class="headerlink" title="PeerCastStation の配信設定"></a>PeerCastStation の配信設定</h4><p>ブラウザで<code>http://localhost:7144</code>を開きます。開けない場合は、<code>lsof -i -P</code> で<code>mono</code> プロセスがリッスンしているポート番号を指定します。</p>
<p>リレー画面で「配信」ボタンを押して、以下を指定します。</p>
<p><a href="/images/01_PCS.png"><img src="/images/01_PCS.png" alt="01_PCS.png" title="01_PCS.png"></a></p>
<table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">設定値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ソース</td>
<td align="left">RTMP Source</td>
</tr>
<tr>
<td align="left">ソースURL</td>
<td align="left">rtmp:&#x2F;&#x2F;localhost&#x2F;live&#x2F;livestream</td>
</tr>
<tr>
<td align="left">ストリームタイプ</td>
<td align="left">Flash Video (FLV)</td>
</tr>
<tr>
<td align="left">掲載YP</td>
<td align="left">（掲載する場合はYP選択）</td>
</tr>
<tr>
<td align="left">チャンネル名</td>
<td align="left">（任意のチェンネル名）</td>
</tr>
</tbody></table>
<h4 id="SimpleScreenRecorder-の起動"><a href="#SimpleScreenRecorder-の起動" class="headerlink" title="SimpleScreenRecorder の起動"></a>SimpleScreenRecorder の起動</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install simplescreenrecorder</span><br><span class="line">$ simplescreenrecorder</span><br></pre></td></tr></table></figure>

<h4 id="SimpleScreenRecorder-でエンコード開始"><a href="#SimpleScreenRecorder-でエンコード開始" class="headerlink" title="SimpleScreenRecorder でエンコード開始"></a>SimpleScreenRecorder でエンコード開始</h4><p><a href="/images/02_SSR.png"><img src="/images/02_SSR.png" alt="02_SSR.png" title="02_SSR.png"></a></p>
<p><a href="/images/03_SSR.png"><img src="/images/03_SSR.png" alt="03_SSR.png" title="03_SSR.png"></a></p>
<p><a href="/images/04_SSR.png"><img src="/images/04_SSR.png" alt="04_SSR.png" title="04_SSR.png"></a></p>
<table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">項目</th>
<th align="left">設定値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">File</td>
<td align="left">Save as</td>
<td align="left">rtmp:&#x2F;&#x2F;localhost&#x2F;live&#x2F;livestream</td>
</tr>
<tr>
<td align="left">Container</td>
<td align="left">Other…</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Container name</td>
<td align="left">flv</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Video</td>
<td align="left">Codec</td>
<td align="left">Other…</td>
</tr>
<tr>
<td align="left">Codec name</td>
<td align="left">libx264</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Bit rate (inkbps)</td>
<td align="left">404</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Custom options</td>
<td align="left"><code>preset=fast, minrate=404, maxrate=404, bufsize=200, keyint=60</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Audio</td>
<td align="left">Codec</td>
<td align="left">AAC</td>
</tr>
</tbody></table>
<p>※ OpenGL から直接キャプチャする場合<br><a href="http://www.maartenbaert.be/simplescreenrecorder/recording-steam-games/">http://www.maartenbaert.be/simplescreenrecorder/recording-steam-games/</a></p>
]]></content>
      <categories>
        <category>p2p</category>
      </categories>
  </entry>
  <entry>
    <title>Peercast Radio Update</title>
    <url>/2014/06/21/peercast-radio-update/</url>
    <content><![CDATA[<p><a href="/images/peercast-radio_nav-button.png"><img src="/images/peercast-radio_nav-button.png" alt="peercast-radio_nav-button" title="peercast-radio nav-button"></a></p>
<p><a href="https://github.com/ktkr3d/peercast-radio">https://github.com/ktkr3d/peercast-radio</a></p>
<p>Peercast の視聴を便利にするFirefox 拡張「Peercast Radio」をアップデートしました。<br>数年前によくわからなかった、初回インストール後の再起動時にナビゲーションバーにボタンを追加する方法がわかりました。</p>
<h4 id="Peercast-Radio-0-1-12-直リンク"><a href="#Peercast-Radio-0-1-12-直リンク" class="headerlink" title="Peercast Radio 0.1.12 (直リンク)"></a>Peercast Radio 0.1.12 (直リンク)</h4><p><a href="https://github.com/ktkr3d/peercast-radio/raw/master/release/peercast_radio_0.1.12_20140621.xpi">https://github.com/ktkr3d/peercast-radio/raw/master/release/peercast_radio_0.1.12_20140621.xpi</a></p>
<span id="more"></span>

<h4 id="初回インストール後の再起動時にナビゲーションバーにボタンを追加する方法"><a href="#初回インストール後の再起動時にナビゲーションバーにボタンを追加する方法" class="headerlink" title="初回インストール後の再起動時にナビゲーションバーにボタンを追加する方法"></a>初回インストール後の再起動時にナビゲーションバーにボタンを追加する方法</h4><p>ナビゲーションバーにボタンを追加するスクリプトを作って、overlay.xul から呼び出します。</p>
<figure class="highlight javascript"><figcaption><span>./chrome/content/overlay.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Installs the toolbar button with the given ID into the given</span></span><br><span class="line"><span class="comment"> * toolbar, if it is not already present in the document.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; toolbarId The ID of the toolbar to install to.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; id The ID of the button to install.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; afterId The ID of the element to insert after. <span class="doctag">@optional</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">installButton</span>(<span class="params">toolbarId, id, afterId</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id)) &#123;</span><br><span class="line">        <span class="keyword">var</span> toolbar = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(toolbarId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If no afterId is given, then append the item to the toolbar</span></span><br><span class="line">        <span class="keyword">var</span> before = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (afterId) &#123;</span><br><span class="line">            <span class="keyword">let</span> elem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(afterId);</span><br><span class="line">            <span class="keyword">if</span> (elem &amp;&amp; elem.<span class="property">parentNode</span> == toolbar)</span><br><span class="line">                before = elem.<span class="property">nextElementSibling</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        toolbar.<span class="title function_">insertItem</span>(id, before);</span><br><span class="line">        toolbar.<span class="title function_">setAttribute</span>(<span class="string">&quot;currentset&quot;</span>, toolbar.<span class="property">currentSet</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">persist</span>(toolbar.<span class="property">id</span>, <span class="string">&quot;currentset&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (toolbarId == <span class="string">&quot;addon-bar&quot;</span>)</span><br><span class="line">            toolbar.<span class="property">collapsed</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Application</span>.<span class="property">prefs</span>.<span class="title function_">getValue</span>(<span class="string">&quot;extensions.peercast-radio.first-kick&quot;</span>, <span class="literal">false</span>)) &#123;</span><br><span class="line">    <span class="title function_">installButton</span>(<span class="string">&quot;nav-bar&quot;</span>, <span class="string">&quot;peercast-radio-toolbarbutton&quot;</span>);</span><br><span class="line">    <span class="comment">// The &quot;addon-bar&quot; is available since Firefox 4</span></span><br><span class="line">    <span class="comment">// installButton(&quot;addon-bar&quot;, &quot;my-extension-addon-bar-button&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><figcaption><span>./chrome/content/overlay.xul</span></figcaption><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript; version=1.8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;overlay.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>p2p</category>
      </categories>
  </entry>
  <entry>
    <title>Debian/Renesas SH4 port update</title>
    <url>/2014/07/13/debian-slash-renesas-sh4-port-update/</url>
    <content><![CDATA[<p>USL-5P のDebian が古くなってきたので、debian-ports.org のSH4 用Debian に入れ替えてみました。<br>ブートしたけれど、パッケージの更新でエラーが出るので、最新のrootfs を作って差し替えたくなりました。</p>
<span id="more"></span>

<h4 id="使ったもの"><a href="#使ったもの" class="headerlink" title="使ったもの"></a>使ったもの</h4><ul>
<li><a href="http://www42.tok2.com/home/forester3/rootfs/sidsh4base20130621.tar.bz2">http://www42.tok2.com/home/forester3/rootfs/sidsh4base20130621.tar.bz2</a></li>
<li><a href="http://www42.tok2.com/home/forester3/kernel4usl5p/3.14/modules-3.14.2-landisk.tar.gz">http://www42.tok2.com/home/forester3/kernel4usl5p/3.14/modules-3.14.2-landisk.tar.gz</a></li>
<li><a href="http://www42.tok2.com/home/forester3/kernel4usl5p/3.14/vmlinuz-3.14.2-landisk">http://www42.tok2.com/home/forester3/kernel4usl5p/3.14/vmlinuz-3.14.2-landisk</a></li>
<li><a href="http://iohack.sourceforge.jp/kogiidena/debian26/base/landisk-tools-20070612.tgz">http://iohack.sourceforge.jp/kogiidena/debian26/base/landisk-tools-20070612.tgz</a></li>
</ul>
<h4 id="構築手順"><a href="#構築手順" class="headerlink" title="構築手順"></a>構築手順</h4><p><a href="http://d.hatena.ne.jp/forester3/20101207/1291347850">http://d.hatena.ne.jp/forester3/20101207/1291347850</a></p>
<h4 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gpg --keyserver pgpkeys.mit.edu --recv-keys AA651E74623DB0B8</span></span><br><span class="line"><span class="comment"># gpg -a --export AA651E74623DB0B8 |apt-key add -</span></span><br><span class="line"><span class="comment"># apt-get update</span></span><br><span class="line"><span class="comment"># apt-get upgrade --fix-missing</span></span><br><span class="line"><span class="comment"># reboot</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Change Debian/SH4 Software Sources</title>
    <url>/2014/07/17/change-debian-slash-sh4-software-sources/</url>
    <content><![CDATA[<p>debian-ports.org ベースのDebian&#x2F;SH4 環境を構築して、インストール済みの機能は動きましたが、パッケージの更新や追加がうまくいきません。<br>依存関係の問題があったり、一部のパッケージがcorrupt しているようです。</p>
<p>代替として、sillicon-linux さんのパッケージを利用させていただくことにしました。</p>
<span id="more"></span>

<h4 id="APT-LINE-の変更"><a href="#APT-LINE-の変更" class="headerlink" title="APT-LINE の変更"></a>APT-LINE の変更</h4><figure class="highlight text"><figcaption><span>/etc/apt/sources.list</span></figcaption><table><tr><td class="code"><pre><span class="line">deb http://www.si-linux.co.jp/pub/debian-sh/jessie-sh4 jessie main</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /etc/apt/</span></span><br><span class="line"><span class="comment"># mv sources.list sources.list_backup</span></span><br><span class="line"><span class="comment"># echo deb http://www.si-linux.co.jp/pub/debian-sh/jessie-sh4 jessie main &gt; sources.list</span></span><br><span class="line"><span class="comment"># apt-get update</span></span><br><span class="line"><span class="comment"># apt-get install nano wget locales netbase openssh-server openssh-client wakeonlan libkrb5-dev libkeyutils1 nettle-dev libgnutls-deb0-28 libtasn1-6 libprocps3 libaudit1</span></span><br></pre></td></tr></table></figure>

<h4 id="vi-のインストール"><a href="#vi-のインストール" class="headerlink" title="vi のインストール"></a>vi のインストール</h4><p>vim が見つからないので、nvi を入れました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt-get install nvi</span></span><br></pre></td></tr></table></figure>

<h4 id="locale-の設定"><a href="#locale-の設定" class="headerlink" title="locale の設定"></a>locale の設定</h4><p>locale-gen がメモリ不足で失敗するので、swap を拡張しておく。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dd if=/dev/zero of=/mnt/512MiB.swap bs=1024 count=524288</span></span><br><span class="line"><span class="comment"># chmod 600 /mnt/512MiB.swap</span></span><br><span class="line"><span class="comment"># mkswap /mnt/512MiB.swap</span></span><br><span class="line"><span class="comment"># swapon /mnt/512MiB.swap</span></span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>/etc/locale.gen</span></figcaption><table><tr><td class="code"><pre><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">ja_JP.UTF-8 UTF-8</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># locale-gen</span></span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line">export LC_ALL=ja_JP.UTF-8</span><br></pre></td></tr></table></figure>

<h4 id="manpages-manpages-ja-のインストール"><a href="#manpages-manpages-ja-のインストール" class="headerlink" title="manpages, manpages-ja のインストール"></a>manpages, manpages-ja のインストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt-get install manpages manpages-ja</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Change Debian/SH4 Software Sources Again</title>
    <url>/2014/07/21/change-debian-slash-sh4-software-sources-again/</url>
    <content><![CDATA[<p>Debian jessie-sh4 からDebian wheezy-sh4 に切り替えました。<br>jessie に比べて、パッケージが揃っていて、依存関係の整合性もありそうです。</p>
<p><a href="http://www.si-linux.co.jp/catwiki/index.php?DebianSH">http://www.si-linux.co.jp/catwiki/index.php?DebianSH</a></p>
<span id="more"></span>

<h4 id="最初に使うもの"><a href="#最初に使うもの" class="headerlink" title="最初に使うもの"></a>最初に使うもの</h4><ul>
<li><a href="http://www42.tok2.com/home/forester3/rootfs/sidsh4base20130621.tar.bz2">http://www42.tok2.com/home/forester3/rootfs/sidsh4base20130621.tar.bz2</a></li>
<li><a href="http://www42.tok2.com/home/forester3/kernel4usl5p/3.14/modules-3.14.2-landisk.tar.gz">http://www42.tok2.com/home/forester3/kernel4usl5p/3.14/modules-3.14.2-landisk.tar.gz</a></li>
<li><a href="http://www42.tok2.com/home/forester3/kernel4usl5p/3.14/vmlinuz-3.14.2-landisk">http://www42.tok2.com/home/forester3/kernel4usl5p/3.14/vmlinuz-3.14.2-landisk</a></li>
<li><a href="http://iohack.sourceforge.jp/kogiidena/debian26/base/landisk-tools-20070612.tgz">http://iohack.sourceforge.jp/kogiidena/debian26/base/landisk-tools-20070612.tgz</a></li>
</ul>
<p>wheezy-sh4 のベースユーザランドでうまくブートできなかったので、一旦上記構成でブートさせます。</p>
<h4 id="Debian-SH-のインストール"><a href="#Debian-SH-のインストール" class="headerlink" title="Debian SH のインストール"></a>Debian SH のインストール</h4><p><a href="http://d.hatena.ne.jp/forester3/20101207/1291347850">http://d.hatena.ne.jp/forester3/20101207/1291347850</a></p>
<h4 id="apt-line-の変更"><a href="#apt-line-の変更" class="headerlink" title="apt-line の変更"></a>apt-line の変更</h4><figure class="highlight text"><figcaption><span>/etc/apt/sources.list</span></figcaption><table><tr><td class="code"><pre><span class="line">deb [arch=sh4] http://www.si-linux.co.jp/pub/debian-sh/wheezy-sh4 wheezy main</span><br><span class="line">deb [arch=all] http://ftp.jp.debian.org/debian/ wheezy main contrib non-free</span><br><span class="line">deb-src http://ftp.jp.debian.org/debian/ wheezy main contrib non-free</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt-get update</span></span><br><span class="line"><span class="comment"># apt-get upgrade</span></span><br></pre></td></tr></table></figure>

<h4 id="パッケージの追加"><a href="#パッケージの追加" class="headerlink" title="パッケージの追加"></a>パッケージの追加</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt-get install wget vim locales natbase openssh-server openssh-client wakeonlan man-db manpages manpages-ja curl git</span></span><br></pre></td></tr></table></figure>

<h4 id="タイムゾーンの変更"><a href="#タイムゾーンの変更" class="headerlink" title="タイムゾーンの変更"></a>タイムゾーンの変更</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dpkg-reconfigure tzdata</span></span><br><span class="line">Asia -&gt; Tokyo</span><br></pre></td></tr></table></figure>

<h4 id="ユーザの追加"><a href="#ユーザの追加" class="headerlink" title="ユーザの追加"></a>ユーザの追加</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># adduser hogehoge</span></span><br></pre></td></tr></table></figure>

<h4 id="sshd-の設定変更"><a href="#sshd-の設定変更" class="headerlink" title="sshd の設定変更"></a>sshd の設定変更</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/ssh/sshd_config</span></span><br><span class="line"><span class="comment"># service ssh restart</span></span><br></pre></td></tr></table></figure>

<h4 id="ロケールの準備"><a href="#ロケールの準備" class="headerlink" title="ロケールの準備"></a>ロケールの準備</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dd if=/dev/zero of=/mnt/512MiB.swap bs=1024 count=524288</span></span><br><span class="line"><span class="comment"># chmod 600 /mnt/512MiB.swap</span></span><br><span class="line"><span class="comment"># mkswap /mnt/512MiB.swap</span></span><br><span class="line"><span class="comment"># swapon /mnt/512MiB.swap</span></span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>/etc/locale.gen</span></figcaption><table><tr><td class="code"><pre><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">ja_JP.UTF-8 UTF-8</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># locale-gen</span></span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line">export LC_ALL=ja_JP.UTF-8</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx + PHP-FPM + Pico</title>
    <url>/2014/07/21/nginx-plus-php-fpm-plus-pico/</url>
    <content><![CDATA[<p><a href="/images/pico-cms.png"><img src="/images/pico-cms.png" alt="pico-cms" title="pico-cms"></a></p>
<p><a href="http://picocms.org/">http://picocms.org/</a></p>
<p>Pico はMarkdown 形式のテキストで記事を作成するCMS ソフトウェアです。<br>Debian&#x2F;SH4 環境にNginx, PHP-FPM, Pico をインストールして構築してみました。</p>
<span id="more"></span>

<h4 id="Pico-の取得と展開"><a href="#Pico-の取得と展開" class="headerlink" title="Pico の取得と展開"></a>Pico の取得と展開</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/picocms/Pico/archive/master.zip -O pico.zip</span><br><span class="line">$ unzip pico.zip</span><br><span class="line">$ <span class="built_in">rm</span> pico.zip</span><br></pre></td></tr></table></figure>

<h4 id="テーマの変更"><a href="#テーマの変更" class="headerlink" title="テーマの変更"></a>テーマの変更</h4><p><a href="https://github.com/kiiiyo/pico-theme">https://github.com/kiiiyo/pico-theme</a><br>以下のようにthemes フォルダにbootstrap テーマファイルを展開する。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tree -d ./pico/themes/</span><br><span class="line">./pico/themes/</span><br><span class="line">├── bootstrap</span><br><span class="line">│   └── assets</span><br><span class="line">│       ├── css</span><br><span class="line">│       ├── img</span><br><span class="line">│       └── js</span><br><span class="line">└── default</span><br><span class="line">    └── scripts</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><figcaption><span>./pico/config.php</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;site_title&#x27;</span>] = <span class="string">&#x27;USL-5P&#x27;</span>;			<span class="comment">// Site title</span></span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;base_url&#x27;</span>] = <span class="string">&#x27;&#x27;</span>; 				<span class="comment">// Override base URL (e.g. http://example.com)</span></span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;theme&#x27;</span>] = <span class="string">&#x27;bootstrap&#x27;</span>; 			<span class="comment">// Set the theme (defaults to &quot;default&quot;)</span></span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;date_format&#x27;</span>] = <span class="string">&#x27;jS M Y&#x27;</span>;		<span class="comment">// Set the PHP date format</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Override any of the default settings below:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">$config[&#x27;site_title&#x27;] = &#x27;Pico&#x27;;			// Site title</span></span><br><span class="line"><span class="comment">$config[&#x27;base_url&#x27;] = &#x27;&#x27;; 				// Override base URL (e.g. http://example.com)</span></span><br><span class="line"><span class="comment">$config[&#x27;theme&#x27;] = &#x27;default&#x27;; 			// Set the theme (defaults to &quot;default&quot;)</span></span><br><span class="line"><span class="comment">$config[&#x27;date_format&#x27;] = &#x27;jS M Y&#x27;;		// Set the PHP date format</span></span><br><span class="line"><span class="comment">$config[&#x27;twig_config&#x27;] = array(			// Twig settings</span></span><br><span class="line"><span class="comment">	&#x27;cache&#x27; =&gt; false,					// To enable Twig caching change this to CACHE_DIR</span></span><br><span class="line"><span class="comment">	&#x27;autoescape&#x27; =&gt; false,				// Autoescape Twig vars</span></span><br><span class="line"><span class="comment">	&#x27;debug&#x27; =&gt; false					// Enable Twig debug</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment">$config[&#x27;pages_order_by&#x27;] = &#x27;alpha&#x27;;	// Order pages by &quot;alpha&quot; or &quot;date&quot;</span></span><br><span class="line"><span class="comment">$config[&#x27;pages_order&#x27;] = &#x27;asc&#x27;;			// Order pages &quot;asc&quot; or &quot;desc&quot;</span></span><br><span class="line"><span class="comment">$config[&#x27;excerpt_length&#x27;] = 50;			// The pages excerpt length (in words)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// To add a custom config setting:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">$config[&#x27;custom_setting&#x27;] = &#x27;Hello&#x27;; 	// Can be accessed by &#123;&#123; config.custom_setting &#125;&#125; in a theme</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="Nginx-PHP-FPM-のインストールと設定"><a href="#Nginx-PHP-FPM-のインストールと設定" class="headerlink" title="Nginx, PHP-FPM のインストールと設定"></a>Nginx, PHP-FPM のインストールと設定</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># apt-get install nginx php5-fpm</span><br><span class="line"># mkdir /etc/nginx/ssl</span><br><span class="line"># cd /etc/nginx/ssl</span><br><span class="line"># openssl genrsa -des3 -out server.key 1024</span><br><span class="line"># openssl req -new -key server.key -out server.csr</span><br><span class="line"># cp server.key server.key.org</span><br><span class="line"># openssl rsa -in server.key.org -out server.key</span><br><span class="line"># openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</span><br><span class="line"># rm /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><figcaption><span>/etc/nginx/sites-available/pico</span></figcaption><table><tr><td class="code"><pre><span class="line"># nginx/php5-fpm/pico</span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    #server_name yourdomain.com www.yourdomain.com; # Domain name pointed to server</span><br><span class="line"></span><br><span class="line">    root /home/USERNAME/pico/; # Location of gpeasy installation root</span><br><span class="line">    index index.html index.htm index.php; # Default index files to try</span><br><span class="line">    try_files $uri $uri/ /index.php?$args; # Rewrite rules for gpeasy (pass /request as argument to cms)</span><br><span class="line"></span><br><span class="line">    #php5-fpm</span><br><span class="line">    location ~ \.php$</span><br><span class="line">    &#123;</span><br><span class="line">        fastcgi_pass unix:/var/run/php5-fpm.sock;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /\.ht</span><br><span class="line">    &#123;</span><br><span class="line">            deny all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    #server_name yourdomain.com www.yourdomain.com; # Domain name pointed to server</span><br><span class="line"></span><br><span class="line">    root /home/USERNAME/pico/; # Location of gpeasy installation root</span><br><span class="line">    index index.html index.htm index.php; # Default index files to try</span><br><span class="line">    try_files $uri $uri/ /index.php?$args; # Rewrite rules for gpeasy (pass /request as argument to cms)</span><br><span class="line"></span><br><span class="line">    #php5-fpm</span><br><span class="line">    location ~ \.php$</span><br><span class="line">    &#123;</span><br><span class="line">        fastcgi_pass unix:/var/run/php5-fpm.sock;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /\.ht</span><br><span class="line">    &#123;</span><br><span class="line">            deny all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/server.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/server.key; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># ln -s /etc/nginx/sites-available/pico /etc/nginx/sites-enabled/pico</span><br><span class="line"># service nginx restart</span><br></pre></td></tr></table></figure>

<h4 id="リモートホストに設置した場合のTIPS"><a href="#リモートホストに設置した場合のTIPS" class="headerlink" title="リモートホストに設置した場合のTIPS"></a>リモートホストに設置した場合のTIPS</h4><p><code>sshfs</code> を使って、リモートホストの<code>~/pico/</code> をローカルホストの<code>~/pico/</code> にマウントすると便利。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen</span><br><span class="line">$ ssh-copy-id -i ~/.ssh/id_rsa.pub username@hostname -p 22222</span><br><span class="line">$ ssh username@hostname -p 22222</span><br><span class="line">$ <span class="built_in">mkdir</span> ~/pico</span><br><span class="line">$ sshfs username@hostname:/home/username/pico ~/pico -p 22222 -o reconnect</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Pico Theme TRAVEL</title>
    <url>/2014/07/26/pico-theme-travel/</url>
    <content><![CDATA[<p><a href="/images/pico-theme-travel.png"><img src="/images/pico-theme-travel.png" alt="pico-theme-travel" title="pico-theme-travel"></a></p>
<p><a href="https://github.com/ktkr3d/pico-theme-travel">https://github.com/ktkr3d/pico-theme-travel</a></p>
<p>Pico はMarkdown 形式のテキストで記事を作成するCMS ソフトウェアです。<br>Pico 用のテーマ「トラベル」を作ってみました。<br>Pico のプラグインと連携して、レスポンシブデザイン、Twitter, Google+, タグ, ページ化に対応しています。<br>タグが少しうまく動いていないことと、CSS の最適化は残課題です。</p>
<span id="more"></span>

<h4 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes</span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:ktkr3d/pico-theme-travel.git</span><br><span class="line">$ tree -d</span><br><span class="line">.</span><br><span class="line">├── default</span><br><span class="line">│   └── scripts</span><br><span class="line">└── pico-theme-travel</span><br><span class="line">    └── assets</span><br><span class="line">        ├── css</span><br><span class="line">        ├── img</span><br><span class="line">        └── js</span><br><span class="line">            └── libs</span><br></pre></td></tr></table></figure>

<h4 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h4><p>config.php をサイトに合わせて編集します。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Change</span></span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;site_title&#x27;</span>] = <span class="string">&#x27;your site title&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;theme&#x27;</span>] = <span class="string">&#x27;pico-theme-travel&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add</span></span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;theme_travel_site_description&#x27;</span>] = <span class="string">&#x27;site description&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;theme_travel_site_auther&#x27;</span>] = <span class="string">&#x27;site auther&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;theme_travel_tags_enable&#x27;</span>] = <span class="string">&#x27;false&#x27;</span>; <span class="comment">// https://github.com/szymonkaliski/Pico-Tags-Plugin</span></span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;theme_travel_twitter_enable&#x27;</span>] = <span class="string">&#x27;false&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;theme_travel_twitter_account&#x27;</span>] = <span class="string">&#x27;twitter account&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;theme_travel_google_plus_enable&#x27;</span>] = <span class="string">&#x27;false&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;theme_travel_google_plus_account&#x27;</span>] = <span class="string">&#x27;google+ account&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;theme_travel_rss_enable&#x27;</span>] = <span class="string">&#x27;false&#x27;</span>; <span class="comment">// https://github.com/gilbitron/Pico-RSS-Plugin</span></span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;theme_travel_pagination_enable&#x27;</span>] = <span class="string">&#x27;false&#x27;</span>; <span class="comment">// https://github.com/rewdy/Pico-Pagination</span></span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;theme_travel_disqus_enable&#x27;</span>] = <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;theme_travel_disqus_short_name&#x27;</span>] = <span class="string">&#x27;disqus short name&#x27;</span>;</span><br><span class="line"><span class="variable">$config</span>[<span class="string">&#x27;theme_travel_site_fqdn_path&#x27;</span>] = <span class="string">&#x27;foo.bar.com&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="トラベルテーマについて"><a href="#トラベルテーマについて" class="headerlink" title="トラベルテーマについて"></a>トラベルテーマについて</h4><p>トラベルテーマは、Movable Type, Wordpress, Octopress, PukiWiki にインスパイアされています。</p>
]]></content>
      <categories>
        <category>cms</category>
      </categories>
  </entry>
  <entry>
    <title>Customizing Applications Menu Extension</title>
    <url>/2014/09/06/customizing-application-menu-extension/</url>
    <content><![CDATA[<p><a href="/images/apps-menu-icon.png"><img src="/images/apps-menu-icon.png" alt="apps-menu-icon" title="apps-menu-icon"></a></p>
<p>GNOME Shell の拡張機能Applications Menu のボタンを文字列からアイコンに変更してみました。</p>
<span id="more"></span>
<figure class="highlight javascript"><figcaption><span>/usr/share/gnome-shell/extensios/extension.js[282-285]</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">_label</span> = <span class="keyword">new</span> <span class="title class_">St</span>.<span class="title class_">Label</span>(&#123; <span class="comment">//text: _(&quot;Applications&quot;),</span></span><br><span class="line">                             <span class="attr">style_class</span>: <span class="string">&#x27;apps-menu-button&#x27;</span>,</span><br><span class="line">                             <span class="attr">y_expand</span>: <span class="literal">true</span>,</span><br><span class="line">                             <span class="attr">y_align</span>: <span class="title class_">Clutter</span>.<span class="property">ActorAlign</span>.<span class="property">CENTER</span> &#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><figcaption><span>/usr/share/gnome-shell/extensios/stylesheet.css[9-12]</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.apps-menu-button</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;/usr/share/icons/Adwaita/24x24/places/start-here.png&#x27;</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CSS-だけで実装する方法"><a href="#CSS-だけで実装する方法" class="headerlink" title="CSS だけで実装する方法"></a>CSS だけで実装する方法</h4><p>Applications Menu 拡張が更新されると無効になってしまうので、別のCSS で設定する方法を考えてみました。</p>
<figure class="highlight css"><figcaption><span>another_css.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#panelApplications</span> <span class="selector-class">.panel-status-menu-box</span> StLabel<span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;/usr/share/icons/Adwaita/24x24/places/start-here.png&#x27;</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Applications-Menu-Icon-拡張機能"><a href="#Applications-Menu-Icon-拡張機能" class="headerlink" title="Applications Menu Icon 拡張機能"></a>Applications Menu Icon 拡張機能</h4><p>個別のGNOME Shell 拡張機能にしてみました。</p>
<p><a href="https://github.com/ktkr3d/apps-menu-icon">https://github.com/ktkr3d/apps-menu-icon</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo</title>
    <url>/2014/09/14/hexo/</url>
    <content><![CDATA[<p><a href="/images/hexo.png"><img src="/images/hexo.png" alt="hexo" title="hexo"></a></p>
<p><a href="http://hexo.io/">http://hexo.io/</a><br /><br><a href="http://hexo.io/docs/">http://hexo.io/docs/</a></p>
<p>node.js 製の静的サイトジェネレータhexo を試してみました。</p>
<p>Github Pages へも展開できるようなので、Jekyll &#x2F; Octopress  よりも使い勝手がよければ、移行してもよいかもしれません。</p>
<span id="more"></span>

<h4 id="nvm-のインストール"><a href="#nvm-のインストール" class="headerlink" title="nvm のインストール"></a>nvm のインストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install build-essential libssl-dev curl git</span><br><span class="line">$ git <span class="built_in">clone</span> git://github.com/creationix/nvm.git ~/.nvm</span><br><span class="line">$ <span class="built_in">source</span> ~/.nvm/nvm.sh</span><br><span class="line">$ nvm install v0.10.31</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># nvm</span></span><br><span class="line">[[ -s <span class="string">&quot;<span class="variable">$HOME</span>/.nvm/nvm.sh&quot;</span> ]] &amp;&amp; . <span class="string">&quot;<span class="variable">$HOME</span>/.nvm/nvm.sh&quot;</span></span><br><span class="line">nvm use v0.10.31 &gt; /dev/null</span><br><span class="line"><span class="built_in">export</span> NODE_PATH=<span class="variable">$&#123;NVM_PATH&#125;</span>_modules</span><br></pre></td></tr></table></figure>

<h4 id="hexo-のインストール"><a href="#hexo-のインストール" class="headerlink" title="hexo のインストール"></a>hexo のインストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure>

<h4 id="ブログの作成"><a href="#ブログの作成" class="headerlink" title="ブログの作成"></a>ブログの作成</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init hexoblog</span><br><span class="line">$ <span class="built_in">cd</span> hexoblog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<h4 id="サーバの起動とアクセス"><a href="#サーバの起動とアクセス" class="headerlink" title="サーバの起動とアクセス"></a>サーバの起動とアクセス</h4><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure>

<p><code>http://localhost:4000/</code></p>
]]></content>
      <categories>
        <category>cms</category>
      </categories>
  </entry>
  <entry>
    <title>Applications Menu Icon Extension</title>
    <url>/2014/09/15/application-menu-icon-extension/</url>
    <content><![CDATA[<p><a href="/images/apps-menu-icon-extension.png"><img src="/images/apps-menu-icon-extension.png" alt="apps-menu-icon-extension" title="apps-menu-icon-extension"></a></p>
<p><a href="https://github.com/ktkr3d/apps-menu-icon">https://github.com/ktkr3d/apps-menu-icon</a></p>
<p>アプリケーションメニュー拡張機能のトップパネル上のボタンラベルをアイコンに変更する拡張機能を作ってみました。<br>アイコンのサイズを大きくしていくとトップパネルをはみ出して表示されるようになります。</p>
<p>この拡張機能を有効にするためには、あらかじめアプリケーションメニュー拡張機能を有効にしておく必要があります。</p>
<span id="more"></span>

<h4 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:ktkr3d/apps-menu-icon.git ~/.local/share/gnome-shell/extensions/apps-menu-icon@ktkr3d.github.io</span><br></pre></td></tr></table></figure>

<h4 id="カスタマイズ"><a href="#カスタマイズ" class="headerlink" title="カスタマイズ"></a>カスタマイズ</h4><p>単なるCSS ですので、テキストエディタで設定をカスタマイズできます。</p>
<figure class="highlight css"><figcaption><span>~/.local/share/gnome-shell/extensions/apps-menu-icon@ktkr3d.github.io/stylesheet.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#panelApplications</span> <span class="selector-class">.panel-status-menu-box</span> StLabel<span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;icons/ubuntu-logo48.png&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    background: url(&#x27;/usr/share/icons/Adwaita/24x24/places/start-here.png&#x27;);</span></span><br><span class="line"><span class="comment">    background: url(&#x27;icons/Fedora.png&#x27;);</span></span><br><span class="line"><span class="comment">    background: url(&#x27;icons/Debian.png&#x27;);</span></span><br><span class="line"><span class="comment">    background: url(&#x27;icons/Suse.png&#x27;);</span></span><br><span class="line"><span class="comment">    background: url(&#x27;icons/Ubuntu.png&#x27;);</span></span><br><span class="line"><span class="comment">    background-size: 24px 24px;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">40px</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">設定項目</th>
<th align="left">設定内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">background</td>
<td align="left">アイコンのイメージファイルのパス</td>
</tr>
<tr>
<td align="left">background-size</td>
<td align="left">アイコンのサイズ</td>
</tr>
<tr>
<td align="left">width</td>
<td align="left">トップパネルのボタンの幅</td>
</tr>
</tbody></table>
<h4 id="設定画面"><a href="#設定画面" class="headerlink" title="設定画面"></a>設定画面</h4><p><a href="/images/apps-menu-icon-prefs.png"><img src="/images/apps-menu-icon-prefs.png" alt="apps-menu-icon-prefs" title="apps-menu-icon-prefs"></a></p>
<p>設定画面のモックアップを作ってみました。設定画面(<code>prefs.js</code>)はGtk アプリをJavascript で実装します。これから制御を実装していきます。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>Fedora 21 wayland</title>
    <url>/2014/09/23/fedora-21-wayland/</url>
    <content><![CDATA[<p><a href="/images/fedora_21_wayland.png"><img src="/images/fedora_21_wayland.png" alt="fedora 21 wayland" title="fedora 21 wayland"></a></p>
<p><a href="http://tuxdiary.com/2014/09/01/try-wayland-with-gnome/">http://tuxdiary.com/2014/09/01/try-wayland-with-gnome/</a><br /><br><a href="http://fedoraproject.org/wiki/Workstation">http://fedoraproject.org/wiki/Workstation</a></p>
<p>Fedora 21 Alpha RC1 で、GNOME 3.14 (3.13.91) をwayland で動かしてみました。</p>
<span id="more"></span>

<ol>
<li><p>ライブISO イメージでFedora 21 を起動</p>
</li>
<li><p>[Ctrl]+[Alt]+[F2] でコンソール起動</p>
</li>
<li><p><code>liveuser</code> でログインして、以下のコマンドを実行</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> systemctl stop gdm</span><br><span class="line">$ <span class="built_in">sudo</span> dnf install gnome-session-wayland-session</span><br><span class="line">$ gnome-session --session=gnome-wayland</span><br></pre></td></tr></table></figure>

<p>GDM 終了時に画面が乱れたら、再度[Ctrl]+[Alt]+[F2]を押下する。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>fedora</tag>
        <tag>gnome</tag>
        <tag>wayland</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu GNOME 14.10 + GNOME 3.14 + Wayland</title>
    <url>/2014/09/27/ubuntu-gnome-14-dot-10-plus-gnome-3-dot-14-plus-wayland/</url>
    <content><![CDATA[<p><a href="/images/ubuntu_gnome_wayland.png"><img src="/images/ubuntu_gnome_wayland.png" alt="ubuntu gnome wayland" title="ubuntu gnome wayland"></a></p>
<p>Ubuntu GNOME 14.10 Beta + GNOME 3.14 (3.13.92) をWayland で動かしてみました。<br>テキトーにやっているので、本当にWayland が有効になっているのか、怪しいですけれど。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -ef | grep wayland</span><br><span class="line">hoge      1376  1344  0 17:36 ?        00:00:00 gnome-session --session=gnome-wayland</span><br><span class="line">hoge      1454  1376  0 17:36 ?        00:00:00 /usr/bin/ssh-agent /usr/bin/dbus-launch --exit-with-session /usr/bin/im-launch gnome-session --session=gnome-wayland</span><br><span class="line">hoge      1457     1  0 17:36 ?        00:00:00 /usr/bin/dbus-launch --exit-with-session /usr/bin/im-launch gnome-session --session=gnome-wayland</span><br><span class="line">hoge      1857  1776  8 17:37 tty1     00:00:31 gnome-shell --wayland --display-server</span><br><span class="line">hoge      1884  1857  1 17:37 tty1     00:00:03 /usr/bin/Xwayland :1 -rootless -noreset -listen 37 -listen 38 -displayfd 39</span><br><span class="line">hoge      3585  2198  0 17:43 pts/7    00:00:00 grep --color=auto wayland</span><br></pre></td></tr></table></figure>

<p>普通にGNOME Shell が動いているように見えますが、いくつか問題がありそうです。</p>
<ul>
<li>Guake が動かなかった</li>
<li>gnome-control-center のメニューが少なくなった</li>
</ul>
<span id="more"></span>

<h4 id="GDM-のセッションリストにgnome-wayland-セッションを追加"><a href="#GDM-のセッションリストにgnome-wayland-セッションを追加" class="headerlink" title="GDM のセッションリストにgnome-wayland セッションを追加"></a>GDM のセッションリストにgnome-wayland セッションを追加</h4><figure class="highlight text"><figcaption><span>/usr/share/xsessions/gnome-wayland.desktop</span></figcaption><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=GNOME on Wayland</span><br><span class="line">Comment=This session logs you into GNOME on Wayland</span><br><span class="line">Exec=gnome-session --session=gnome-wayland</span><br><span class="line">TryExec=gnome-session</span><br><span class="line">Icon=</span><br><span class="line">Type=Application</span><br><span class="line">DesktopNames=GNOME on Wayland</span><br><span class="line">X-LightDM-DesktopName=GNOME on Wayland</span><br><span class="line">X-Ubuntu-Gettext-Domain=gnome-session-3.0</span><br><span class="line">X-GDM-Session-Type=wayland</span><br></pre></td></tr></table></figure>

<p>Restart して、GDM のセッションリストから<code>GNOME on Wayland</code> を選択します。</p>
<h4 id="GNOME-Shell-の起動"><a href="#GNOME-Shell-の起動" class="headerlink" title="GNOME Shell の起動"></a>GNOME Shell の起動</h4><p>[Ctrl]+[Alt]+[F1] でコンソールに入ってログインし、以下を実行します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gnome-shell --wayland --display-server</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>gnome</tag>
        <tag>wayland</tag>
        <tag>gnome shell</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>sonydb</title>
    <url>/2014/10/12/sonydb/</url>
    <content><![CDATA[<p><a href="https://github.com/mattn/sonydb">https://github.com/mattn/sonydb</a></p>
<p>sonydb は古いウォークマンをSonicStage 無しで使うためのツールです。<br>以前はJSymphonic を使っていたのですが、初期化に手間がかかるので乗り換えてみました。</p>
<span id="more"></span>

<h4 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install libid3-3.8.3-dev</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/mattn/sonydb.git</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><figcaption><span>sonydb.cpp[2658-2664]</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* detect_letter[] = &#123;</span><br><span class="line">	<span class="string">&quot;/media/hogehoge/ECC8-B676&quot;</span>,</span><br><span class="line">	<span class="string">&quot;/media/usbdisk&quot;</span>,</span><br><span class="line">	<span class="string">&quot;/media/usbdisk1&quot;</span>,</span><br><span class="line">	<span class="string">&quot;/media/WALKMAN&quot;</span>,</span><br><span class="line">	<span class="literal">NULL</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> sonydb</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h4 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> /media/hogehoge/ECC8-B676/OMGAUDIO/04CNTINF.DAT</span><br></pre></td></tr></table></figure>

<h4 id="UTF-16be-でタグ付け"><a href="#UTF-16be-でタグ付け" class="headerlink" title="UTF-16be でタグ付け"></a>UTF-16be でタグ付け</h4><p>UTF-16be でタグを書き込むためにeasytag を使います。</p>
<p>easytag を起動して、Edit &gt;&gt; Preference &gt;&gt; “ID3 タグの設定”</p>
<p><a href="/images/easytag.png"><img src="/images/easytag.png" alt="easytag" title="easytag"></a></p>
<h4 id="曲の一覧表示"><a href="#曲の一覧表示" class="headerlink" title="曲の一覧表示"></a>曲の一覧表示</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sonydb songs</span><br></pre></td></tr></table></figure>

<h4 id="曲の一括転送"><a href="#曲の一括転送" class="headerlink" title="曲の一括転送"></a>曲の一括転送</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sonydb songsadd /path/to/*.mp3</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /path/to -name <span class="string">&quot;*.mp3&quot;</span> -<span class="built_in">exec</span> sonydb songsadd &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<h4 id="曲の削除"><a href="#曲の削除" class="headerlink" title="曲の削除"></a>曲の削除</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">seq</span> 1 10 |xargs -n 1 -t sonydb songsdel</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>application</category>
      </categories>
  </entry>
  <entry>
    <title>Evolve OS Alpha4</title>
    <url>/2014/10/14/evolve-os-alpha4/</url>
    <content><![CDATA[<p><a href="/images/evolve-os_a4_screen.png"><img src="/images/evolve-os_a4_screen.png" alt="evolve os alpha4" title="evolve os alpha4"></a></p>
<p><a href="https://evolve-os.com/">https://evolve-os.com/</a><br /><br><a href="https://github.com/evolve-os/budgie-desktop">https://github.com/evolve-os/budgie-desktop</a></p>
<p>Evolve OS はGNOME 3 系の綺麗なデザインのディストリビューションです。<br>デスクトップ環境はbudgie-desktop で、各種ディストリビューションでも利用することができるようです。</p>
<span id="more"></span>

<h4 id="USB-ディスクの作成"><a href="#USB-ディスクの作成" class="headerlink" title="USB ディスクの作成"></a>USB ディスクの作成</h4><p><code>unetbootin</code> ではなく、<code>dd</code> を使います。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">dd</span> <span class="keyword">if</span>=Evolve-OS-Alpha4.iso of=/dev/sdX</span><br></pre></td></tr></table></figure>

<h4 id="構成部品"><a href="#構成部品" class="headerlink" title="構成部品"></a>構成部品</h4><p>スタートメニュー等が用意されています。パネルは上部に配置することも可能です。</p>
<p><a href="/images/evolve-os_a4_start.png"><img src="/images/evolve-os_a4_start.png" alt="evolve os alpha4" title="evolve os alpha4"></a></p>
<h4 id="Ubuntu-用"><a href="#Ubuntu-用" class="headerlink" title="Ubuntu 用"></a>Ubuntu 用</h4><p>Ubuntu 用にPPA が用意されており、Ubuntu GNOME の対応GNOME のバージョンに従って、GNOME 3.10 用は<code>trusty</code>, GNOME 3.12 用は<code>utopic</code> になっているようです。<br>Ubuntu GNOME 14.04 (trusty) にGNOME 3.12 を入れている場合は、<code>utopic</code> を利用するとよいようです。（以下のように）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:sukso96100/budgie-desktop</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> /etc/apt/sources.list.d/sukso96100-budgie-desktop-trusty.list /etc/apt/sources.list.d/sukso96100-budgie-desktop-utopic.list</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>sukso96100-budgie-desktop-utopic.list</span></figcaption><table><tr><td class="code"><pre><span class="line">deb http://ppa.launchpad.net/sukso96100/budgie-desktop/ubuntu utopic main</span><br><span class="line"># deb-src http://ppa.launchpad.net/sukso96100/budgie-desktop/ubuntu trusty main</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install budgie-desktop</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu GNOME + Cairo Dock</title>
    <url>/2014/11/26/ubuntu-gnome-plus-cairo-dock/</url>
    <content><![CDATA[<p><a href="/images/ubuntu-cairo-dock2.png"><img src="/images/ubuntu-cairo-dock2.png" alt="ubuntu-cairo-dock" title="ubuntu-cairo-dock"></a></p>
<p>Ubuntu GNOME にCairo Dock を入れて、Chrome OS やBudgie Desktop のようなドックにしてみました。</p>
<span id="more"></span>

<h4 id="Cairo-Dock-のインストール"><a href="#Cairo-Dock-のインストール" class="headerlink" title="Cairo Dock のインストール"></a>Cairo Dock のインストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install cairo-dock</span><br></pre></td></tr></table></figure>

<h4 id="Cairo-Dock-の詳細設定"><a href="#Cairo-Dock-の詳細設定" class="headerlink" title="Cairo Dock の詳細設定"></a>Cairo Dock の詳細設定</h4><table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">設定項目</th>
<th align="left">設定値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">動作-&gt;位置</td>
<td align="left">相対的な配置位置</td>
<td align="left">0.000</td>
</tr>
<tr>
<td align="left">画面の境界までの距離</td>
<td align="left">5</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">動作-&gt;表示</td>
<td align="left">表示</td>
<td align="left">現在のウィンドウがドックに重なった時に隠す</td>
</tr>
<tr>
<td align="left">外観-&gt;Style</td>
<td align="left">background color</td>
<td align="left">無色透明</td>
</tr>
<tr>
<td align="left">outline color</td>
<td align="left">無色透明</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">外観-&gt;アイコン</td>
<td align="left">アイコン同士の間隔</td>
<td align="left">10</td>
</tr>
<tr>
<td align="left">アイコンのズームの最大値</td>
<td align="left">1.000</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">外観-&gt;ラベル</td>
<td align="left">外観Style</td>
<td align="left">Custom</td>
</tr>
</tbody></table>
<h4 id="アプリケーション・メニューの編集"><a href="#アプリケーション・メニューの編集" class="headerlink" title="アプリケーション・メニューの編集"></a>アプリケーション・メニューの編集</h4><table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">設定項目</th>
<th align="left">設定値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">アイコン</td>
<td align="left">画像のファイル名</td>
<td align="left"><code>/usr/share/icons/gnome/scalable/actions/view-grid-symbolic.svg</code></td>
</tr>
<tr>
<td align="left">設定</td>
<td align="left">ログアウトおよび&#x2F;またはシャットダウンの表示</td>
<td align="left">両方</td>
</tr>
</tbody></table>
<h4 id="Ubuntu-GNOME-のカスタマイズ"><a href="#Ubuntu-GNOME-のカスタマイズ" class="headerlink" title="Ubuntu GNOME のカスタマイズ"></a>Ubuntu GNOME のカスタマイズ</h4><ul>
<li>トップバーを隠す拡張機能を適用します。<br /><a href="https://extensions.gnome.org/extension/545/hide-top-bar/">https://extensions.gnome.org/extension/545/hide-top-bar/</a></li>
<li>トップバーの端の丸みを取る拡張機能を入れても良いです。<br /><a href="https://extensions.gnome.org/extension/814/straight-top-bar/">https://extensions.gnome.org/extension/814/straight-top-bar/</a></li>
</ul>
<h4 id="アイコンテーマの変更"><a href="#アイコンテーマの変更" class="headerlink" title="アイコンテーマの変更"></a>アイコンテーマの変更</h4><p>好みのアイコンに変更します。私はmoblin のアイコンにしてみました。<br /><br><a href="https://launchpad.net/ubuntu/+archive/primary/+files/moblin-icon-theme_0.10.0.orig.tar.gz">https://launchpad.net/ubuntu/+archive/primary/+files/moblin-icon-theme_0.10.0.orig.tar.gz</a></p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
  </entry>
  <entry>
    <title>GNOME Boxes</title>
    <url>/2014/12/31/gnome-boxes/</url>
    <content><![CDATA[<p><a href="/images/gnome-boxes.png"><img src="/images/gnome-boxes.png" alt="gnome-boxes" title="gnome-boxes"></a></p>
<p>GNOME Boxes は仮想マシンを動かしたり、リモートホストに接続できるアプリケーションです。</p>
<p><a href="https://help.gnome.org/users/gnome-boxes/stable/index.html.en">https://help.gnome.org/users/gnome-boxes/stable/index.html.en</a></p>
<span id="more"></span>

<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>操作はシンプルです。ボックスを新規作成する際に以下から選択します。</p>
<ol>
<li>URL を指定する（ネットワーク経由で利用する）</li>
<li>ファイルを選択する（仮想マシンを作成する）</li>
</ol>
<p>一度作成したボックスを一時停止したり、再接続したりできます。<br>仮想マシンであれば、メモリやディスクの割り当て、スナップショットの取得等ができます。</p>
<p>起動中のボックスはカラーで表示され、一時停止中のボックスはグレーで表示されます。</p>
]]></content>
      <categories>
        <category>gnome</category>
      </categories>
      <tags>
        <tag>gnome-boxes</tag>
        <tag>vm</tag>
      </tags>
  </entry>
  <entry>
    <title>Borderlands 2 Japanese Localization</title>
    <url>/2015/01/01/borderlands-2-japanese-localization/</url>
    <content><![CDATA[<p><a href="/images/borderlands2.png"><img src="/images/borderlands2.png" alt="borderlands2" title="borderlands2"></a></p>
<p><a href="http://pcgamingwiki.com/wiki/Borderlands_2">http://pcgamingwiki.com/wiki/Borderlands_2</a></p>
<p>Borderlands 2 はGearbox Software が開発したRPG &amp; FPS なゲームで、Linux 版をSteam から購入できます。<br>ただし、Linux 環境ではWindows 版でサポートされている日本語(GUI&#x2F;音声&#x2F;字幕)が利用できません。<br>そこで、Linux 環境で日本語化の設定をしてみました。</p>
<span id="more"></span>

<h4 id="Windows-環境"><a href="#Windows-環境" class="headerlink" title="Windows 環境"></a>Windows 環境</h4><table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">OS</td>
<td align="left">Windows 8 64bit</td>
</tr>
<tr>
<td align="left">プログラム</td>
<td align="left">C:\Program Files(x86)\Steam\steamapps\common\Borderlands 2\</td>
</tr>
<tr>
<td align="left">設定</td>
<td align="left">%USERPROFILE%\Documents\My Games\Borderlands 2\WillowGame\Config\</td>
</tr>
<tr>
<td align="left">言語</td>
<td align="left">日本語(GUI&#x2F;音声&#x2F;字幕)</td>
</tr>
</tbody></table>
<h4 id="Linux-環境"><a href="#Linux-環境" class="headerlink" title="Linux 環境"></a>Linux 環境</h4><table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">OS</td>
<td align="left">Ubuntu GNOME 15.04 a1 x86_64</td>
</tr>
<tr>
<td align="left">プログラム</td>
<td align="left">$HOME&#x2F;‘.steam&#x2F;steam&#x2F;steamapps&#x2F;common&#x2F;Borderlands 2&#x2F;‘</td>
</tr>
<tr>
<td align="left">設定</td>
<td align="left">$HOME&#x2F;‘.local&#x2F;share&#x2F;aspyr-media&#x2F;borderlands 2&#x2F;willowgame&#x2F;config&#x2F;‘</td>
</tr>
<tr>
<td align="left">言語</td>
<td align="left">英語(GUI&#x2F;音声&#x2F;字幕) -&gt; 日本語(GUI&#x2F;音声&#x2F;字幕)</td>
</tr>
</tbody></table>
<h4 id="日本語GUI-日本語字幕化"><a href="#日本語GUI-日本語字幕化" class="headerlink" title="日本語GUI&#x2F;日本語字幕化"></a>日本語GUI&#x2F;日本語字幕化</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HOME</span>/<span class="string">&#x27;.steam/steam/steamapps/common/Borderlands 2/steamassets/willowgame/localization/&#x27;</span></span><br><span class="line">$ <span class="built_in">mv</span> int int.back </span><br><span class="line">$ <span class="built_in">cp</span> -r <span class="string">&#x27;/media/hoge/windows8/Program Files (x86)/Steam/steamapps/common/Borderlands 2/WillowGame/Localization/JPN&#x27;</span> int</span><br><span class="line">$ <span class="built_in">cd</span> int</span><br><span class="line">$ rename <span class="string">&#x27;y/A-Z/a-z/&#x27;</span> *</span><br><span class="line">$ rename <span class="string">&#x27;s/.jpn/.int/&#x27;</span> *.jpn</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>$HOME/'.local/share/aspyr-media/borderlands 2/willowgame/config/willowengine.ini'</span></figcaption><table><tr><td class="code"><pre><span class="line">#SubtitleFontName=ui_fonts.font_willowbody_18pt</span><br><span class="line">SubtitleFontName=ui_fonts.font_willowbody_18pt_jpn </span><br></pre></td></tr></table></figure>

<h4 id="日本語音声化"><a href="#日本語音声化" class="headerlink" title="日本語音声化"></a>日本語音声化</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HOME</span>/<span class="string">&#x27;.steam/steam/steamapps/common/Borderlands 2/steamassets/willowgame/cookedpcconsole/&#x27;</span> </span><br><span class="line">$ <span class="built_in">cp</span> -r <span class="string">&#x27;/media/hoge/windows8/Program Files (x86)/Steam/steamapps/common/Borderlands 2/WillowGame/CookedPCConsole/Japanese&#x27;</span> japanese</span><br><span class="line">$ <span class="built_in">cd</span> japanese</span><br><span class="line">$ rename <span class="string">&#x27;y/A-Z/a-z/&#x27;</span> *</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>$HOME/'.local/share/aspyr-media/borderlands 2/willowgame/config/willowengine.ini'</span></figcaption><table><tr><td class="code"><pre><span class="line">#WwiseLanguageEquivalent_INT=English(US)</span><br><span class="line">WwiseLanguageEquivalent_INT=Japanese</span><br></pre></td></tr></table></figure>

<h4 id="ついでに軽量化"><a href="#ついでに軽量化" class="headerlink" title="ついでに軽量化"></a>ついでに軽量化</h4><figure class="highlight text"><figcaption><span>$HOME/'.local/share/aspyr-media/borderlands 2/willowgame/config/willowengine.ini'</span></figcaption><table><tr><td class="code"><pre><span class="line">#DynamicShadows=True</span><br><span class="line">DynamicShadows=False</span><br><span class="line">#Bloom=True</span><br><span class="line">Bloom=False</span><br><span class="line">#bAllowLightShafts=True</span><br><span class="line">bAllowLightShafts=False</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>game</category>
      </categories>
  </entry>
  <entry>
    <title>Chinachu</title>
    <url>/2015/01/19/chinachu/</url>
    <content><![CDATA[<p><a href="/images/chinachu.png"><img src="/images/chinachu.png" alt="chinachu" title="chinachu"></a></p>
<p><a href="http://chinachu.akkar.in/">http://chinachu.akkar.in/</a><br><br><a href="https://github.com/kanreisa/Chinachu/wiki/Installation">https://github.com/kanreisa/Chinachu/wiki/Installation</a></p>
<p>録画システムChinachu を構築してみました。</p>
<span id="more"></span>

<h4 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://github.com/kanreisa/Chinachu.git</span><br><span class="line">$ <span class="built_in">cd</span> Chinachu</span><br><span class="line">$ ./chinachu installer</span><br></pre></td></tr></table></figure>

<h4 id="環境設定-config-json"><a href="#環境設定-config-json" class="headerlink" title="環境設定 - config.json"></a>環境設定 - config.json</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> config.sample.json config.json</span><br></pre></td></tr></table></figure>

<ul>
<li>wuiUsers を削除</li>
<li>tuners を環境に合わせて修正</li>
<li>channels を地域に合わせて設定</li>
<li>出力先ディレクトリを設定</li>
</ul>
<h4 id="環境設定-rules-json"><a href="#環境設定-rules-json" class="headerlink" title="環境設定 - rules.json"></a>環境設定 - rules.json</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> [] &gt; rules.json</span><br></pre></td></tr></table></figure>

<h4 id="システムへのLSB-Init-Script設定"><a href="#システムへのLSB-Init-Script設定" class="headerlink" title="システムへのLSB Init Script設定"></a>システムへのLSB Init Script設定</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./chinachu service operator initscript &gt; /tmp/chinachu-operator</span><br><span class="line">$ ./chinachu service wui initscript &gt; /tmp/chinachu-wui</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chown</span> root:root /tmp/chinachu-operator /tmp/chinachu-wui</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /tmp/chinachu-operator /tmp/chinachu-wui</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> /tmp/chinachu-operator /tmp/chinachu-wui /etc/init.d/</span><br><span class="line">$ <span class="built_in">sudo</span> /usr/lib/insserv/insserv chinachu-operator</span><br><span class="line">$ <span class="built_in">sudo</span> /usr/lib/insserv/insserv chinachu-wui</span><br></pre></td></tr></table></figure>

<h4 id="サービスを開始"><a href="#サービスを開始" class="headerlink" title="サービスを開始"></a>サービスを開始</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> service chinachu-operator start</span><br><span class="line">$ <span class="built_in">sudo</span> service chinachu-wui start</span><br></pre></td></tr></table></figure>

<h4 id="ポートの確認"><a href="#ポートの確認" class="headerlink" title="ポートの確認"></a>ポートの確認</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> lsof -c node | grep LISTEN</span><br></pre></td></tr></table></figure>

<h4 id="LAN-内からのアクセス"><a href="#LAN-内からのアクセス" class="headerlink" title="LAN 内からのアクセス"></a>LAN 内からのアクセス</h4><p>予約は<code>http://192.168.0.2:10772/</code> からWeb インタフェースで実行する。</p>
<p>VLC で視聴する場合は、メディアライブラリにxspf を連結したものを取り込んでおくとよさそう。<br>Kodi で視聴する場合は、各局のストリームのURL を.strm に記載しておく。</p>
<h4 id="モバイル-Android-からのアクセス"><a href="#モバイル-Android-からのアクセス" class="headerlink" title="モバイル(Android)からのアクセス"></a>モバイル(Android)からのアクセス</h4><p>ConnectBot アプリで以下のようにSSH トンネルを設定する。</p>
<table>
<thead>
<tr>
<th align="left">設定項目</th>
<th align="left">設定値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">タイプ</td>
<td align="left">ローカル</td>
</tr>
<tr>
<td align="left">ソースポート</td>
<td align="left">10772</td>
</tr>
<tr>
<td align="left">転送先</td>
<td align="left">localhost:10772</td>
</tr>
</tbody></table>
<p>ConenctBot でサーバに接続した状態で、Android のブラウザから<code>http://localhost:10772/</code>へアクセスする。ブラウザ内でストリーミング再生が可能。</p>
]]></content>
      <categories>
        <category>application</category>
      </categories>
  </entry>
  <entry>
    <title>Octopress 3</title>
    <url>/2015/01/24/octopress-3/</url>
    <content><![CDATA[<p><a href="/images/octopress3.png"><img src="/images/octopress3.png" alt="octopress 3" title="octopress 3"></a></p>
<p><a href="https://github.com/octopress/octopress">https://github.com/octopress/octopress</a></p>
<p>Octopress 3 でブログを作成してみました。</p>
]]></content>
      <categories>
        <category>cms</category>
      </categories>
  </entry>
  <entry>
    <title>Octopress to Hexo</title>
    <url>/2015/01/31/Octopress-to-Hexo/</url>
    <content><![CDATA[<p><img src="/images/hexo-logo.png" alt="hexo" title="hexo"></p>
<p><a href="http://hexo.io/">http://hexo.io/</a><br><a href="http://hexo.io/docs/">http://hexo.io/docs/</a><br><a href="https://github.com/wzpan/hexo-theme-freemind">https://github.com/wzpan/hexo-theme-freemind</a></p>
<p>ブログをOctopress からHexo に変更してみました。</p>
<span id="more"></span>

<h2 id="node-js-のインストール"><a href="#node-js-のインストール" class="headerlink" title="node.js のインストール"></a>node.js のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install build-essential libssl-dev curl git</span><br><span class="line">$ git <span class="built_in">clone</span> git://github.com/creationix/nvm.git ~/.nvm</span><br><span class="line">$ <span class="built_in">source</span> ~/.nvm/nvm.sh</span><br><span class="line">$ nvm install v0.10</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line">[[ -s <span class="string">&quot;<span class="variable">$HOME</span>/.nvm/nvm.sh&quot;</span> ]] &amp;&amp; . <span class="string">&quot;<span class="variable">$HOME</span>/.nvm/nvm.sh&quot;</span></span><br><span class="line">nvm use v0.10 &gt; /dev/null</span><br><span class="line"><span class="built_in">export</span> NODE_PATH=<span class="variable">$&#123;NVM_PATH&#125;</span>_modules</span><br></pre></td></tr></table></figure>

<h2 id="Hexo-のインストール"><a href="#Hexo-のインストール" class="headerlink" title="Hexo のインストール"></a>Hexo のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo</span><br><span class="line">$ hexo init hexo_blog</span><br><span class="line">$ <span class="built_in">cd</span> hexo_blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<h2 id="テーマとプラグインのインストール"><a href="#テーマとプラグインのインストール" class="headerlink" title="テーマとプラグインのインストール"></a>テーマとプラグインのインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/wzpan/hexo-theme-freemind.git themes/freemind</span><br><span class="line">$ npm install hexo-tag-bootstrap --save</span><br><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<p>以下のファイルも作っておきます。</p>
<ul>
<li><code>./source/categories/index.html</code></li>
<li><code>./source/tags/index.html</code></li>
<li><code>./themes/freemind/languages/ja-JP.yml</code></li>
</ul>
<figure class="highlight html"><figcaption><span>./themes/freemind/layout/_partial/head.ejs を修正</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;% if (theme.rss)&#123; %&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;alternate&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%- config.root %&gt;&lt;%- theme.rss %&gt;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&lt;%= config.title %&gt;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/atom+xml&quot;</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><figcaption><span>./themes/freemind/layout/widget/search.ejs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hq&quot;</span> <span class="attr">value</span>=<span class="string">&quot;site:&lt;%- config.url.replace(/^https?:\/\//, &#x27;&#x27;) %&gt;&quot;</span>&gt;</span>	</span><br></pre></td></tr></table></figure>

<h2 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h2><p>Hexo 用の設定とテーマ用の設定を利用環境にあわせて修正します。</p>
<figure class="highlight text"><figcaption><span>./_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">language: ja-JP</span><br><span class="line">theme: freemind</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>./themes/freemind/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">slogan: &quot;なにか おもしろいこと ないかな&quot;</span><br></pre></td></tr></table></figure>

<h2 id="データ移行"><a href="#データ移行" class="headerlink" title="データ移行"></a>データ移行</h2><p>各種CMS からデータを移行するためのコマンドが用意されていますが、今回は単純にMarkdown と画像をインポートしました。</p>
<ul>
<li><code>./source/_posts/</code></li>
<li><code>./source/images/</code></li>
<li><code>./themes/freemind/source/favicon.ico</code></li>
</ul>
<h2 id="コマンド"><a href="#コマンド" class="headerlink" title="コマンド"></a>コマンド</h2><table>
<thead>
<tr>
<th align="left">コマンド</th>
<th align="center">別名</th>
<th align="left">説明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">hexo new</td>
<td align="center">n</td>
<td align="left">新しい記事の作成</td>
</tr>
<tr>
<td align="left">hexo generate</td>
<td align="center">g</td>
<td align="left">静的ファイルの生成</td>
</tr>
<tr>
<td align="left">hexo server</td>
<td align="center">s</td>
<td align="left">ローカルサーバの起動</td>
</tr>
<tr>
<td align="left">hexo deploy</td>
<td align="center">d</td>
<td align="left">Web サイトへデプロイ</td>
</tr>
<tr>
<td align="left">hexo new page</td>
<td align="center"></td>
<td align="left">新しいページの作成</td>
</tr>
<tr>
<td align="left">hexo clean</td>
<td align="center"></td>
<td align="left">生成したファイルとキャッシュの消去</td>
</tr>
</tbody></table>
<h2 id="404-ページ"><a href="#404-ページ" class="headerlink" title="404 ページ"></a>404 ページ</h2><p><code>404.md</code> というファイルを作成しておくとGitHub のサイト上に存在しないパスが指定された場合に表示されるページを生成できます。</p>
<figure class="highlight text"><figcaption><span>./source/404.md</span></figcaption><table><tr><td class="code"><pre><span class="line">title: 404 Page Not Found</span><br><span class="line">---</span><br><span class="line">[Top Page](/)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cms</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Helper Shell Script</title>
    <url>/2015/02/05/Hexo-Helper-Shell-Script/</url>
    <content><![CDATA[<p><img src="/images/hexo-helper.png" alt="hexo-helper" title="hexo-helper"></p>
<p>Hexo をGUI で支援するスクリプトをzenity で書いてみました。</p>
<span id="more"></span>

<h2 id="シェルスクリプト"><a href="#シェルスクリプト" class="headerlink" title="シェルスクリプト"></a>シェルスクリプト</h2><p>コマンドラインでHEXO を操作できる環境が整っていることが前提です。</p>
<figure class="highlight bash"><figcaption><span>/PATH/TO/hexo-helper.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">[[ -s <span class="string">&quot;<span class="variable">$HOME</span>/.nvm/nvm.sh&quot;</span> ]] &amp;&amp; . <span class="string">&quot;<span class="variable">$HOME</span>/.nvm/nvm.sh&quot;</span></span><br><span class="line">nvm use v0.10 &gt; /dev/null</span><br><span class="line"><span class="built_in">export</span> NODE_PATH=<span class="variable">$&#123;NVM_PATH&#125;</span>_modules</span><br><span class="line"></span><br><span class="line">SOURCE_REPOSITORY=bitbucket</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ] ; <span class="keyword">then</span></span><br><span class="line">	zenity --error --text=<span class="string">&quot;Usage: hexo-helper.sh hexo_path&quot;</span></span><br><span class="line">	<span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">HEXODIR=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span> ! [ -d <span class="variable">$HEXODIR</span> ] ; <span class="keyword">then</span></span><br><span class="line">    zenity --error --text=<span class="string">&quot;Bad directory.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HEXODIR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	count=`ps -ef | grep <span class="string">&quot;hexo server&quot;</span> | grep -v grep | <span class="built_in">wc</span> -l`</span><br><span class="line">	<span class="keyword">if</span> [ <span class="variable">$count</span> = 0 ]; <span class="keyword">then</span></span><br><span class="line">		hexoserverstatus=<span class="string">&quot;[DOWN]&quot;</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		hexoserverstatus=<span class="string">&quot;[UP]&quot;</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">	pick=$(zenity --list --radiolist \</span><br><span class="line">			--title <span class="string">&quot;Hexo Helper&quot;</span> --text <span class="string">&quot;<span class="variable">$HEXODIR</span>&quot;</span> \</span><br><span class="line">			--width=240 --height=320 \</span><br><span class="line">			--column Pick --column dummy --column Action --hide-column 2 --print-column=2 \</span><br><span class="line">			<span class="literal">true</span>  0 <span class="string">&quot;New Post&quot;</span> \</span><br><span class="line">			<span class="literal">false</span> 1 <span class="string">&quot;New Page&quot;</span> \</span><br><span class="line">			<span class="literal">false</span> 2 <span class="string">&quot;Generate&quot;</span> \</span><br><span class="line">			<span class="literal">false</span> 3 <span class="string">&quot;Deploy&quot;</span> \</span><br><span class="line">			<span class="literal">false</span> 4 <span class="string">&quot;Start Server&quot;</span> \</span><br><span class="line">			<span class="literal">false</span> 5 <span class="string">&quot;<span class="variable">$hexoserverstatus</span> Preview&quot;</span> \</span><br><span class="line">			<span class="literal">false</span> 6 <span class="string">&quot;Stop Server&quot;</span> \</span><br><span class="line">			<span class="literal">false</span> 7 <span class="string">&quot;Open Posts Folder&quot;</span> \</span><br><span class="line">			<span class="literal">false</span> 8 <span class="string">&quot;Push Source&quot;</span>);</span><br><span class="line">	<span class="keyword">case</span> <span class="variable">$pick</span> <span class="keyword">in</span></span><br><span class="line">		<span class="string">&quot;0&quot;</span>)</span><br><span class="line">			post_title=`zenity --entry --title=<span class="string">&quot;New Post&quot;</span> --text=<span class="string">&quot;Enter Title.&quot;</span>`</span><br><span class="line">			<span class="keyword">if</span> [ $? -ne 0 ] ; <span class="keyword">then</span></span><br><span class="line">				<span class="built_in">continue</span></span><br><span class="line">			<span class="keyword">fi</span></span><br><span class="line">			<span class="keyword">if</span> [ <span class="variable">$&#123;#post_title&#125;</span> &gt; 0 ] ; <span class="keyword">then</span></span><br><span class="line">				hexo new <span class="string">&quot;<span class="variable">$post_title</span>&quot;</span> | \</span><br><span class="line">					sed -r <span class="string">&quot;s/\x1B\[([0-9]&#123;1,2&#125;(;[0-9]&#123;1,2&#125;)?)?[m|K]//g&quot;</span> | \</span><br><span class="line">						zenity --text-info --title=<span class="string">&quot;New Post&quot;</span> --width=640 --height=480 --auto-scroll</span><br><span class="line">			<span class="keyword">fi</span></span><br><span class="line">			;;</span><br><span class="line">		<span class="string">&quot;1&quot;</span>) </span><br><span class="line">			page_title=$(zenity --entry --title=<span class="string">&quot;New Page&quot;</span> --text=<span class="string">&quot;Enter Title.&quot;</span> )</span><br><span class="line">			<span class="keyword">if</span> [ <span class="variable">$&#123;#page_title&#125;</span> &gt; 0 ] ; <span class="keyword">then</span></span><br><span class="line">				hexo new page <span class="string">&quot;<span class="variable">$page_title</span>&quot;</span> | \</span><br><span class="line">					sed -r <span class="string">&quot;s/\x1B\[([0-9]&#123;1,2&#125;(;[0-9]&#123;1,2&#125;)?)?[m|K]//g&quot;</span> | \</span><br><span class="line">						zenity --text-info --title=<span class="string">&quot;New Page&quot;</span> --width=640 --height=480 --auto-scroll</span><br><span class="line">			<span class="keyword">fi</span></span><br><span class="line">			;;</span><br><span class="line">		<span class="string">&quot;2&quot;</span>)</span><br><span class="line">			(<span class="built_in">echo</span> <span class="string">&quot;Generating...&quot;</span> ; hexo generate ) | \</span><br><span class="line">				zenity --text-info --title=<span class="string">&quot;Generate&quot;</span> --width=640 --height=480 --auto-scroll</span><br><span class="line">			;;</span><br><span class="line">		<span class="string">&quot;3&quot;</span>)</span><br><span class="line">			(<span class="built_in">echo</span> <span class="string">&quot;Deploying...&quot;</span> ; hexo deploy ) | \</span><br><span class="line">				sed -r <span class="string">&quot;s/\x1B\[([0-9]&#123;1,2&#125;(;[0-9]&#123;1,2&#125;)?)?[m|K]//g&quot;</span> | \</span><br><span class="line">					zenity --text-info --title=<span class="string">&quot;Deploy&quot;</span> --width=640 --height=480 --auto-scroll</span><br><span class="line">			;;</span><br><span class="line">		<span class="string">&quot;4&quot;</span>)</span><br><span class="line">			count=`ps -ef | grep <span class="string">&quot;hexo server&quot;</span> | grep -v grep | <span class="built_in">wc</span> -l`</span><br><span class="line">			<span class="keyword">if</span> [ <span class="variable">$count</span> = 0 ]; <span class="keyword">then</span></span><br><span class="line">				hexo server &amp;</span><br><span class="line">				<span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 0 5 100`; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>; <span class="built_in">sleep</span> 0.25; <span class="keyword">done</span> | zenity --progress --text <span class="string">&quot;Starting Server...&quot;</span> --auto-close --no-cancel</span><br><span class="line">			<span class="keyword">fi</span></span><br><span class="line">			;;</span><br><span class="line">		<span class="string">&quot;5&quot;</span>)</span><br><span class="line">			xdg-open http://localhost:4000/ &amp;</span><br><span class="line">			;;</span><br><span class="line">		<span class="string">&quot;6&quot;</span>)</span><br><span class="line">			count=`ps -ef | grep <span class="string">&quot;hexo server&quot;</span> | grep -v grep | <span class="built_in">wc</span> -l`</span><br><span class="line">			<span class="keyword">if</span> [ <span class="variable">$count</span> != 0 ]; <span class="keyword">then</span></span><br><span class="line">				<span class="built_in">kill</span> -9 `ps -ef | grep <span class="string">&quot;hexo server&quot;</span> | grep -v grep | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">				<span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 0 5 100`; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>; <span class="built_in">sleep</span> 0.25; <span class="keyword">done</span> | zenity --progress --text <span class="string">&quot;Stopping Server...&quot;</span> --auto-close --no-cancel</span><br><span class="line">			<span class="keyword">fi</span></span><br><span class="line">			;;</span><br><span class="line">		<span class="string">&quot;7&quot;</span>)</span><br><span class="line">			xdg-open <span class="variable">$HEXODIR</span>/source/_posts/ &amp;</span><br><span class="line">			;;</span><br><span class="line">		<span class="string">&quot;8&quot;</span>)</span><br><span class="line">			git add . &amp;&amp; git commit -m <span class="string">&#x27;update&#x27;</span> &amp;&amp; git push -u <span class="variable">$SOURCE_REPOSITORY</span> <span class="built_in">source</span> | \</span><br><span class="line">				sed -r <span class="string">&quot;s/\x1B\[([0-9]&#123;1,2&#125;(;[0-9]&#123;1,2&#125;)?)?[m|K]//g&quot;</span> | \</span><br><span class="line">					zenity --text-info --title=<span class="string">&quot;Push Source&quot;</span> --width=640 --height=480 --auto-scroll</span><br><span class="line">			;;</span><br><span class="line">		*)</span><br><span class="line">			<span class="built_in">exit</span> 0</span><br><span class="line">			;;</span><br><span class="line">	<span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="アプリケーションメニュー"><a href="#アプリケーションメニュー" class="headerlink" title="アプリケーションメニュー"></a>アプリケーションメニュー</h2><figure class="highlight text"><figcaption><span>~/.local/share/applications/hexo-helper.desktop</span></figcaption><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=Hexo Helper</span><br><span class="line">Exec=/PATH/TO/hexo-helper.sh /PATH/TO/HEXODIR</span><br><span class="line">Icon=/PATH/TO/hexo-helper-icon.png</span><br><span class="line">Terminal=false</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;</span><br><span class="line">StartupNotify=false</span><br></pre></td></tr></table></figure>

<h2 id="アイコン"><a href="#アイコン" class="headerlink" title="アイコン"></a>アイコン</h2><p><img src="/images/hexo-helper-icon.png" alt="hexo-helper-icon" title="hexo-helper-icon"></p>
<h2 id="Generate-画面"><a href="#Generate-画面" class="headerlink" title="Generate 画面"></a>Generate 画面</h2><p><img src="/images/hexo-helper-generate.png" alt="hexo-helper-generate" title="hexo-helper-generate"></p>
]]></content>
      <categories>
        <category>cms</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>HandBrakeCLI</title>
    <url>/2015/02/08/HandBrakeCLI/</url>
    <content><![CDATA[<p><img src="https://handbrake.fr/img/logo.png" alt="HandBrake" title="HandBrake"></p>
<p><a href="https://handbrake.fr/">https://handbrake.fr/</a></p>
<p>HandBrake は動画ファイルの形式を変換するソフトウェアです。HandBrake を使って動画ファイルをコマンドラインでエンコードするスクリプトを書いてみました。</p>
<span id="more"></span>

<h2 id="処理の概要"><a href="#処理の概要" class="headerlink" title="処理の概要"></a>処理の概要</h2><ul>
<li>HandBrake のコマンドラインインタフェース<code>HandBrakeCLI</code> を使用します。</li>
<li>HandBrake の<code>Universal</code> というプリセットを使って、M2TS 形式をMP4 に変換します。</li>
<li>変換元ディレクトリにあるファイルを変換して、変換先ディレクトリに格納します。</li>
<li>すでに変換したファイルはスキップします。</li>
<li>変換元ディレクトリの中のファイルが最近(10分以内)更新されている場合は処理の開始をスキップします。</li>
</ul>
<h2 id="HandBrakeCLI-のインストール"><a href="#HandBrakeCLI-のインストール" class="headerlink" title="HandBrakeCLI のインストール"></a>HandBrakeCLI のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository  ppa:stebbins/handbrake-releases</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install handbrake-cli</span><br></pre></td></tr></table></figure>

<h2 id="変換スクリプト"><a href="#変換スクリプト" class="headerlink" title="変換スクリプト"></a>変換スクリプト</h2><figure class="highlight bash"><figcaption><span>m2ts2m4v.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">SRCDIR=/PATH/TO/SOURCE_DIRECTORY</span><br><span class="line">DSTDIR=/PATH/TO/DESTINATION_DIRECTORY</span><br><span class="line">ENC=HandBrakeCLI</span><br><span class="line">PRESET=<span class="string">&quot;Universal&quot;</span></span><br><span class="line">WAITMIN=10</span><br><span class="line">SRCEXT=m2ts</span><br><span class="line">DSTEXT=m4v</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! [ -d <span class="variable">$SRCDIR</span> ] || ! [ -d <span class="variable">$DSTDIR</span> ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Bad directory.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">count=`ps -ef | grep <span class="variable">$ENC</span> | grep -v grep | <span class="built_in">wc</span> -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$count</span> != 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$ENC</span> <span class="string">&quot;is already running.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$SRCDIR</span></span><br><span class="line"></span><br><span class="line">hits=`find . -maxdepth 1 -mmin -<span class="variable">$WAITMIN</span> -<span class="built_in">type</span> f | <span class="built_in">wc</span> -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$hits</span> -gt 0 ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Source directory is currently used.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> *</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;f##*.&#125;</span> != <span class="variable">$SRCEXT</span> ] ; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;skip <span class="variable">$&#123;f&#125;</span> ...&quot;</span></span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    g=<span class="variable">$&#123;f/\.$SRCEXT/\.$DSTEXT&#125;</span></span><br><span class="line">    <span class="keyword">if</span> [ -e <span class="variable">$DSTDIR</span>/<span class="variable">$&#123;g&#125;</span> ] ; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;skip <span class="variable">$&#123;f&#125;</span> ...&quot;</span></span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Processing <span class="variable">$&#123;f&#125;</span> ...&quot;</span></span><br><span class="line">    <span class="variable">$ENC</span> -i <span class="string">&quot;<span class="variable">$SRCDIR</span>/<span class="variable">$&#123;f&#125;</span>&quot;</span> -o <span class="string">&quot;<span class="variable">$DSTDIR</span>/<span class="variable">$&#123;g&#125;</span>&quot;</span> --preset=<span class="variable">$PRESET</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="スクリプトの実行"><a href="#スクリプトの実行" class="headerlink" title="スクリプトの実行"></a>スクリプトの実行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./m2ts2m4v.sh</span><br></pre></td></tr></table></figure>

<p>cron に設定すれば定期的に処理を実行してくれます。<br>毎日4:00 に実行する場合、<code>crontab -e</code> で以下のように設定します。</p>
<figure class="highlight text"><figcaption><span>crontab -e</span></figcaption><table><tr><td class="code"><pre><span class="line">0 4 * * * /PATH/TO/m2ts2m4v.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>multimedia</category>
      </categories>
      <tags>
        <tag>handbrake</tag>
      </tags>
  </entry>
  <entry>
    <title>USL-5P to Raspberry Pi 2</title>
    <url>/2015/02/21/USL-5P-to-Raspberry-Pi-2/</url>
    <content><![CDATA[<p><img src="/images/usl5p-rasspi2b.png" alt="USL-5P Raspberry Pi 2" title="USL-5P Raspberry Pi 2"></p>
<p>USL-5P から Raspberry Pi 2 に移行してみよう！</p>
<p><a href="http://www.iodata.jp/product/hdd/lanhdd/usl-5p/index.htm">http://www.iodata.jp/product/hdd/lanhdd/usl-5p/index.htm</a><br><a href="http://www.raspberrypi.org/products/raspberry-pi-2-model-b/">http://www.raspberrypi.org/products/raspberry-pi-2-model-b/</a></p>
<span id="more"></span>

<h2 id="基本ハード仕様比較"><a href="#基本ハード仕様比較" class="headerlink" title="基本ハード仕様比較"></a>基本ハード仕様比較</h2><table>
<thead>
<tr>
<th align="left">&nbsp;</th>
<th align="left">USL-5P</th>
<th align="left">Raspberry Pi 2 Model B</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Year</td>
<td align="left">2004</td>
<td align="left">2015</td>
</tr>
<tr>
<td align="left">Vendor</td>
<td align="left">IO-Data</td>
<td align="left">Raspberry Pi Foundation</td>
</tr>
<tr>
<td align="left">CPU</td>
<td align="left">Hitachi SH-4</td>
<td align="left">ARM Cortex-A7 900MHz 4core</td>
</tr>
<tr>
<td align="left">GPU</td>
<td align="left">-</td>
<td align="left">Broadcom VideoCore IV</td>
</tr>
<tr>
<td align="left">Memory</td>
<td align="left">64MB</td>
<td align="left">1GB</td>
</tr>
<tr>
<td align="left">USB</td>
<td align="left">USB 2.0 x5</td>
<td align="left">USB 2.0 x4</td>
</tr>
<tr>
<td align="left">USB Bus power</td>
<td align="left">1000mA</td>
<td align="left">?</td>
</tr>
<tr>
<td align="left">LAN</td>
<td align="left">10&#x2F;100 Mbps x1</td>
<td align="left">10&#x2F;100 Mbps x1</td>
</tr>
<tr>
<td align="left">Sound out</td>
<td align="left">-</td>
<td align="left">3.5 mm Jack, HDMI</td>
</tr>
<tr>
<td align="left">Video out</td>
<td align="left">-</td>
<td align="left">HDMI</td>
</tr>
<tr>
<td align="left">Video in</td>
<td align="left">-</td>
<td align="left">14pin MIPICSI</td>
</tr>
<tr>
<td align="left">GPIO</td>
<td align="left">-</td>
<td align="left">GPIO 40pin</td>
</tr>
<tr>
<td align="left">Power source</td>
<td align="left">DC5V</td>
<td align="left">DC5V</td>
</tr>
<tr>
<td align="left">Power ratings</td>
<td align="left">2.2A(MAX)</td>
<td align="left">600 mA</td>
</tr>
</tbody></table>
<h2 id="カスタマイズ仕様比較"><a href="#カスタマイズ仕様比較" class="headerlink" title="カスタマイズ仕様比較"></a>カスタマイズ仕様比較</h2><table>
<thead>
<tr>
<th align="left">&nbsp;</th>
<th align="left">USL-5P</th>
<th align="left">Raspberry Pi 2</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Storage</td>
<td align="left">6GB Micro Drive</td>
<td align="left">16GB microSDHC</td>
</tr>
<tr>
<td align="left">OS</td>
<td align="left">Debian wheezy(7.0)</td>
<td align="left">Ubuntu trusty(14.04.2)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>raspberry-pi</category>
      </categories>
      <tags>
        <tag>raspberry-pi</tag>
        <tag>usl-5p</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu on Raspberry Pi 2</title>
    <url>/2015/02/20/Ubuntu-on-Raspberry-Pi-2/</url>
    <content><![CDATA[<p><img src="/images/ubuntu-on-raspberry-pi-2.png" alt="Ubuntu on Raspberry Pi 2" title="Uuntu on Raspberry Pi 2"></p>
<p><a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0362">http://gihyo.jp/admin/serial/01/ubuntu-recipe/0362</a></p>
<p>Raspberry Pi 2 にUbuntu 14.04 をインストールしてみました。<br>デスクトップ環境としては想像以上に軽快に動作しています。</p>
<p>一旦GNOME Shell をインストールしてみたものの描画に問題があるので、Xfce を初めて使うことにしました。<br>いつも使っているConky スクリプトの色がおかしいのは後で修正することにします。</p>
<span id="more"></span>

<h2 id="別のスクリーンショット"><a href="#別のスクリーンショット" class="headerlink" title="別のスクリーンショット"></a>別のスクリーンショット</h2><p><img src="/images/raspberry-pi2.png" alt="Ubuntu on Raspberry Pi 2" title="Uuntu on Raspberry Pi 2"></p>
<h2 id="リモート接続設定-VNC-編"><a href="#リモート接続設定-VNC-編" class="headerlink" title="リモート接続設定(VNC 編)"></a>リモート接続設定(VNC 編)</h2><figure class="highlight bash"><figcaption><span>@raspi2</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install x11vnc xinetd</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>/etc/xinetd.d/x11vnc</span></figcaption><table><tr><td class="code"><pre><span class="line">service x11vnc</span><br><span class="line">&#123;</span><br><span class="line">    type = UNLISTED</span><br><span class="line">    disable = no</span><br><span class="line">    socket_type = stream</span><br><span class="line">    protocol = tcp</span><br><span class="line">    wait = no</span><br><span class="line">    user = root</span><br><span class="line">    server = /usr/bin/x11vnc</span><br><span class="line">    server_args = -inetd -o /var/log/x11vnc.log -display :0 -forever -bg -rfbauth /etc/vncpasswd -shared -enablehttpproxy -forever -nolookup -auth /var/run/lightdm/root/:0</span><br><span class="line">    port = 5900</span><br><span class="line">    flags = IPv6</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><figcaption><span>@raspi2</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> x11vnc -storepasswd /etc/vncpasswd</span><br><span class="line">$ service xinetd restart</span><br></pre></td></tr></table></figure>

<p>クライアントからremmmina 等のVNC クライアントソフトで接続します。<br>私の環境ではRaspberry Pi 本体にHDMI を接続していると1280x1024 で、HDMI を接続していないと656x416 で表示されるようです。</p>
<h2 id="リモート接続設定-XDMCP-編"><a href="#リモート接続設定-XDMCP-編" class="headerlink" title="リモート接続設定(XDMCP 編)"></a>リモート接続設定(XDMCP 編)</h2><p>Raspberry Pi 側で接続を許可するように設定します。</p>
<figure class="highlight text"><figcaption><span>/etc/lightdm/lightdm.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">[SeatDefaults]</span><br><span class="line">xserver-allow-tcp=true</span><br><span class="line">xdmcp-port=177</span><br><span class="line"></span><br><span class="line">[XDMCPServer]</span><br><span class="line">enabled=true</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><figcaption><span>@raspi2</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> restart lightdm</span><br></pre></td></tr></table></figure>

<p>remmina のプラグインを利用して接続します。デスクトップのサイズを指定できます。</p>
<figure class="highlight bash"><figcaption><span>@client</span></figcaption><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install remmina-plugin-xdmcp</span><br></pre></td></tr></table></figure>

<h2 id="これから試したいこと"><a href="#これから試したいこと" class="headerlink" title="これから試したいこと"></a>これから試したいこと</h2><ul>
<li>SH4&#x2F;Debian からの移行</li>
<li>自作ケース</li>
<li>Irrlicht</li>
<li>Peercast or PeerCastStation(mono)</li>
<li>nginx &amp; hexo</li>
</ul>
<h2 id="boot-config-txt-の設定変更"><a href="#boot-config-txt-の設定変更" class="headerlink" title="&#x2F;boot&#x2F;config.txt の設定変更"></a>&#x2F;boot&#x2F;config.txt の設定変更</h2><p>&#x2F;boot&#x2F;config.txt を変更することで、conky の色の修正と、VNC で接続した時の画面サイズを変更できました。</p>
<figure class="highlight text"><figcaption><span>/boot/config.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">framebuffer_width=1024</span><br><span class="line">framebuffer_height=576</span><br><span class="line">framebuffer_depth=24</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>raspberry-pi</category>
      </categories>
  </entry>
  <entry>
    <title>Irrlicht on Raspberry Pi 2</title>
    <url>/2015/02/23/Irrlicht-on-Raspberry-Pi-2/</url>
    <content><![CDATA[<p><img src="/images/irrlicht-on-raspberry-pi-2.png" alt="Irrlicht on Raspberry Pi 2" title="Irrlicht on Raspberry Pi 2"></p>
<p><a href="http://ktkr3d.github.io/irrlicht/">http://ktkr3d.github.io/irrlicht/</a><br><a href="https://github.com/ktkr3d/irrlicht-sandbox">https://github.com/ktkr3d/irrlicht-sandbox</a></p>
<p>Raspberry Pi 2 でIrrlicht Engine を動かしてみよう！</p>
<span id="more"></span>

<h2 id="Irrlicht-Engine-のビルド"><a href="#Irrlicht-Engine-のビルド" class="headerlink" title="Irrlicht Engine のビルド"></a>Irrlicht Engine のビルド</h2><p><a href="http://sourceforge.net/p/irrlicht/code/HEAD/tree/trunk/">http://sourceforge.net/p/irrlicht/code/HEAD/tree/trunk/</a><br>からソースを取得</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="built_in">source</span>/Irrlicht</span><br><span class="line">$ make -j4</span><br></pre></td></tr></table></figure>

<p>HelloWorld は普通に動きました。<br>trunk から持ってきたけれど、ogl-es から持ってきた方がよかったかな。</p>
<h2 id="Demo-プログラム"><a href="#Demo-プログラム" class="headerlink" title="Demo プログラム"></a>Demo プログラム</h2><p>GL&#x2F;SL, Sound, MMD のデモを試してみます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ktkr3d/irrlicht-sandbox.git</span><br></pre></td></tr></table></figure>

<p>XEffects のデモをexamples ディレクトリに展開します。</p>
<h2 id="cAudio-Build"><a href="#cAudio-Build" class="headerlink" title="cAudio Build"></a>cAudio Build</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/R4stl1n/cAudio.git</span><br></pre></td></tr></table></figure>

<p>普通にビルドしたらエラーを吐いたので以下のコードを追加しました。</p>
<figure class="highlight text"><figcaption><span>cAudio/DependenciesSource/libvorbis-1.3.2/CMakeLists.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">set(CMAKE_POSITION_INDEPENDENT_CODE ON)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> cAudio/CMake</span><br><span class="line">$ cmake ../ -DCAUDIO_DEPENDENCIES_DIR=../Dependencies/</span><br><span class="line">$ make -j4</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h2 id="Bullet"><a href="#Bullet" class="headerlink" title="Bullet"></a>Bullet</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://bullet.googlecode.com/files/bullet-2.82-r2704.tgz</span><br><span class="line">$ tar xvf bullet-2.82-r2704.tgz</span><br><span class="line">$ <span class="built_in">cd</span> bullet-2.82-r2704</span><br><span class="line">$ cmake . -G <span class="string">&quot;Unix Makefiles&quot;</span> -DSHARED_LIB=ON</span><br><span class="line">$ make -j4</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h2 id="Code-Blocks-でビルド"><a href="#Code-Blocks-でビルド" class="headerlink" title="Code::Blocks でビルド"></a>Code::Blocks でビルド</h2><p>新しいバージョンで仕様が変わったところを微修正します。</p>
<ul>
<li>getAvailableDeviceName() が無くなったので省略。</li>
<li>libcAudio.2.1.0.so を libcAudio.so に修正してリンク。</li>
</ul>
<p>XEffects デモをビルドして実行します。<br>実行中に<code>GL_INVALID_FRAMEBUFFER_OPERATION</code> を拾うので修正しないといけないようです。<br>とりあえず今日はここまで。</p>
]]></content>
      <categories>
        <category>3d</category>
      </categories>
      <tags>
        <tag>irrlicht</tag>
        <tag>raspberry-pi</tag>
      </tags>
  </entry>
  <entry>
    <title>MEAN.JS Stack on Raspberry Pi 2</title>
    <url>/2015/03/01/MEAN-JS-Stack-on-Raspberry-Pi-2/</url>
    <content><![CDATA[<p><img src="/images/mean-js-on-raspberry-pi-2.png" alt="MEAN.JS on Raspberry Pi 2" title="MEAN.JS on Raspberry Pi 2"></p>
<ul>
<li><a href="http://meanjs.org/">http://meanjs.org/</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-a-mean-js-stack-on-an-ubuntu-14-04-server">https://www.digitalocean.com/community/tutorials/how-to-install-a-mean-js-stack-on-an-ubuntu-14-04-server</a></li>
</ul>
<p>Raspberry Pi 2 にMEAN.JS スタックを構築してみよう！<br>MEAN (MongoDB, Express, AngularJS, Node.js)はWeb アプリケーションを構築するためのフレームワークです。MEAN.io ( <a href="http://mean.io/">http://mean.io/</a> )とMEAN.JS ( <a href="http://meanjs.org/">http://meanjs.org/</a> )がありますが、今回はMEAN.JS を使ってみました。<br><a href="http://www.creativeworkline.com/2014/05/meanio-vs-meanjs-comparison/">http://www.creativeworkline.com/2014/05/meanio-vs-meanjs-comparison/</a></p>
<span id="more"></span>

<h2 id="前提環境"><a href="#前提環境" class="headerlink" title="前提環境"></a>前提環境</h2><table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Hardware</td>
<td align="left">Raspberry Pi 2</td>
</tr>
<tr>
<td align="left">CPU</td>
<td align="left">ARM Cortex-A7</td>
</tr>
<tr>
<td align="left">OS</td>
<td align="left">Xubuntu 14.04.2</td>
</tr>
<tr>
<td align="left">IP Address</td>
<td align="left">192.168.0.6</td>
</tr>
</tbody></table>
<h2 id="Node-js-v0-12-0"><a href="#Node-js-v0-12-0" class="headerlink" title="Node.js v0.12.0"></a>Node.js v0.12.0</h2><p>v0.12.0 のARM 版バイナリが公開されていないので、自分でビルドします。</p>
<p><a href="http://elinux.org/Node.js_on_RPi">http://elinux.org/Node.js_on_RPi</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://nodejs.org/dist/v0.12.0/node-v0.12.0.tar.gz</span><br><span class="line">$ tar -xzf node-v0.12.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> node-v0.12.0</span><br><span class="line">$ ./configure</span><br><span class="line">$ make -j4</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install mongodb</span><br></pre></td></tr></table></figure>

<h2 id="残りのコンポーネント"><a href="#残りのコンポーネント" class="headerlink" title="残りのコンポーネント"></a>残りのコンポーネント</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> npm install -g bower grunt-cli</span><br><span class="line">$ <span class="built_in">sudo</span> git <span class="built_in">clone</span> https://github.com/meanjs/mean.git /opt/mean</span><br><span class="line">$ <span class="built_in">cd</span> /opt/mean</span><br><span class="line">$ <span class="built_in">sudo</span> npm install</span><br><span class="line">$ <span class="built_in">sudo</span> bower --allow-root --config.interactive=<span class="literal">false</span> install</span><br></pre></td></tr></table></figure>

<h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /opt/mean</span><br><span class="line">$ grunt</span><br></pre></td></tr></table></figure>

<p><code>http://192.168.0.6:3000</code> へアクセスします。</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>mean.js</tag>
        <tag>mongodb</tag>
        <tag>express.js</tag>
        <tag>angular.js</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Dash on Raspberry Pi 2</title>
    <url>/2015/03/08/Linux-Dash-on-Raspberry-Pi-2/</url>
    <content><![CDATA[<p><img src="/images/linux-dash-on-raspberry-pi-2.png" alt="Linux Dash on Raspberry Pi 2" title="Linux Dash on Raspberry Pi 2"></p>
<p><a href="https://github.com/afaqurk/linux-dash">https://github.com/afaqurk/linux-dash</a></p>
<p>Linux Dash はWeb で参照できるシンプルなLinux 用のシステムモニタです。<br>PHP, Node.js, Go で利用できます。私はRaspberry Pi 2 にNode.js をインストールして実行してみました。</p>
<span id="more"></span>

<h2 id="Ubuntu-15-04-へアップグレード"><a href="#Ubuntu-15-04-へアップグレード" class="headerlink" title="Ubuntu 15.04 へアップグレード"></a>Ubuntu 15.04 へアップグレード</h2><p>Linux Dash とは関係ないですが、Ubuntu 15.04 にアップグレードしました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install update-manager-core</span><br><span class="line">$ <span class="built_in">sudo</span> do-release-upgrade -d</span><br></pre></td></tr></table></figure>

<h2 id="Node-js-のインストール"><a href="#Node-js-のインストール" class="headerlink" title="Node.js のインストール"></a>Node.js のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install build-essential git</span><br><span class="line">$ wget http://nodejs.org/dist/v0.12.0/node-v0.12.0.tar.gz</span><br><span class="line">$ tar -xzf node-v0.12.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> node-v0.12.0</span><br><span class="line">$ ./configure</span><br><span class="line">$ make -j4</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h2 id="Linux-Dash-のインストール"><a href="#Linux-Dash-のインストール" class="headerlink" title="Linux Dash のインストール"></a>Linux Dash のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/afaqurk/linux-dash.git</span><br><span class="line">$ <span class="built_in">cd</span> linux-dash</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<h2 id="アクセス用のポート番号の設定"><a href="#アクセス用のポート番号の設定" class="headerlink" title="アクセス用のポート番号の設定"></a>アクセス用のポート番号の設定</h2><figure class="highlight javascript"><figcaption><span>server/index.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//server.listen(80);</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">20080</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Linux-Dash-の起動"><a href="#Linux-Dash-の起動" class="headerlink" title="Linux Dash の起動"></a>Linux Dash の起動</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node server</span><br></pre></td></tr></table></figure>

<p><a href="http://192.168.0.6:20080/">http://192.168.0.6:20080/</a> にアクセスします。</p>
<p><img src="/images/linux-dash-on-raspberry-pi-2-basic-info.png" alt="Linux Dash on Raspberry Pi 2 Basic Info" title="Linux Dash on Raspberry Pi 2 Basic Info"></p>
]]></content>
  </entry>
  <entry>
    <title>PeerCastStation on Raspberry Pi 2</title>
    <url>/2015/03/10/PeerCastStation-on-Raspberry-Pi-2/</url>
    <content><![CDATA[<p><img src="/images/peercaststation-on-raspberry-pi-2.png" alt="PeerCastStation on Raspberry Pi 2" title="PeerCastStation on Raspberry Pi 2"></p>
<p>Raspberry Pi 2 でPeerCastStation を動かしてみました。</p>
<span id="more"></span>

<h2 id="PeerCastStation-の取得と実行"><a href="#PeerCastStation-の取得と実行" class="headerlink" title="PeerCastStation の取得と実行"></a>PeerCastStation の取得と実行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install mono-complete unzip</span><br><span class="line">$ wget http://www.pecastation.org/files/PeerCastStation-1.9.1.zip</span><br><span class="line">$ unzip PeerCastStation-1.9.1.zip</span><br><span class="line">$ <span class="built_in">cd</span> PeerCastStation-1.9.1</span><br><span class="line">$ mono PeerCastStation.exe</span><br></pre></td></tr></table></figure>

<h2 id="接続"><a href="#接続" class="headerlink" title="接続"></a>接続</h2><p><a href="http://192.168.0.6:7144/">http://192.168.0.6:7144/</a></p>
<h2 id="サービスとして実行する場合"><a href="#サービスとして実行する場合" class="headerlink" title="サービスとして実行する場合"></a>サービスとして実行する場合</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mono-service PeerCastStation.exe</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>peercast</tag>
        <tag>raspberrypi</tag>
      </tags>
  </entry>
  <entry>
    <title>Raspberry Pi 2 + Docker + ownCloud</title>
    <url>/2015/04/02/Raspberry-Pi-2-Docker-ownCloud/</url>
    <content><![CDATA[<p><img src="/images/raspberrypi2-docker-owncloud.png" alt="Raspberry Pi 2 + Docker + ownCloud" title="Raspberry Pi 2 + Docker + ownCloud"></p>
<p><a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0364">http://gihyo.jp/admin/serial/01/ubuntu-recipe/0364</a></p>
<p>Raspberry Pi 2 にDocker&#x2F;ownCloud を導入してみました。</p>
<span id="more"></span>

<h2 id="OS-のダウンロードとmicroSDHC-への書き込み"><a href="#OS-のダウンロードとmicroSDHC-への書き込み" class="headerlink" title="OS のダウンロードとmicroSDHC への書き込み"></a>OS のダウンロードとmicroSDHC への書き込み</h2><p><a href="http://www.finnie.org/software/raspberrypi/">http://www.finnie.org/software/raspberrypi/</a> からダウンロードします。</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/www.finnie.org/software</span><span class="regexp">/raspberrypi/</span><span class="number">2015</span>-<span class="number">0</span>3-<span class="number">0</span>2-ubuntu-trusty.zip</span><br><span class="line"><span class="variable">$ </span>unzip <span class="number">2015</span>-<span class="number">0</span>3-<span class="number">0</span>2-ubuntu-trusty.zip</span><br><span class="line"><span class="variable">$ </span>dd <span class="keyword">if</span>=<span class="number">2015</span>-<span class="number">0</span>3-<span class="number">0</span>2-ubuntu-trusty.img <span class="keyword">of</span>=<span class="regexp">/dev/sdh</span> bs=<span class="number">1</span>M</span><br></pre></td></tr></table></figure>

<p>microSDHC をマウントします。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install qemu-user-static</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /media/ubuntu/578bc54c-c04b-4ced-8691-7633c4a841cd</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">cp</span> /usr/bin/qemu-arm-static usr/bin</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> mount -t proc proc proc</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> mount --rbind /dev dev</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> mount --rbind /sys sys</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> run/resolvconf</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/resolv.conf &gt; run/resolvconf/resolv.conf</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">chroot</span> . /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">apt install openssh-server avahi-daemon</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">exit</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf run/resolvconf</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> umount -l sys</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> umount -l dev</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> umount proc</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">rm</span> usr/bin/qemu-arm-static</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ルートパーティションの拡張"><a href="#ルートパーティションの拡張" class="headerlink" title="ルートパーティションの拡張"></a>ルートパーティションの拡張</h2><p>Raspberry Pi を起動して、ubuntu&#x2F;ubuntu でログインします。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> fdisk /dev/mmcblk0</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">No.</th>
<th align="left">プロンプト</th>
<th align="left">入力</th>
<th align="left">意味</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">Command:</td>
<td align="left">d</td>
<td align="left">区画を削除</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">Partition number:</td>
<td align="left">2</td>
<td align="left">第二パーティション</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">Command:</td>
<td align="left">n</td>
<td align="left">新しい区画を作成</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">Partition type:</td>
<td align="left">p</td>
<td align="left">プライマリパーティション</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">Partition number:</td>
<td align="left">2</td>
<td align="left">第二パーティション</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">First sector:</td>
<td align="left">(デフォルト)</td>
<td align="left">最初から</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">Last sector:</td>
<td align="left">(デフォルト)</td>
<td align="left">残り全部</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">Command:</td>
<td align="left">w</td>
<td align="left">テーブルを書き込んで終了</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> reboot</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> resize2fs /dev/mmcblk0p2</span></span><br></pre></td></tr></table></figure>

<h2 id="Docker-のインストール"><a href="#Docker-のインストール" class="headerlink" title="Docker のインストール"></a>Docker のインストール</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo mkdir <span class="regexp">/mnt/</span>docker<span class="regexp">/tmp /m</span>nt<span class="regexp">/docker/</span>docker</span><br><span class="line">$ sudo apt install docker.io</span><br><span class="line">$ sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br><span class="line">$ <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>/etc/default/docker.io</span></figcaption><table><tr><td class="code"><pre><span class="line">DOCKER_OPTS=&quot;-g /mnt/docker/docker&quot;</span><br><span class="line">export TMPDIR=&quot;/mnt/docker/tmp&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> restart docker.io</span></span><br></pre></td></tr></table></figure>

<h2 id="ownCloud-のインストール"><a href="#ownCloud-のインストール" class="headerlink" title="ownCloud のインストール"></a>ownCloud のインストール</h2><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">$ git clone https:<span class="symbol">//github.com/jchaney/owncloud.git</span></span><br><span class="line">$ cd owncloud</span><br><span class="line">$ sed <span class="operator">-</span>i <span class="string">&quot;s,ubuntu:14.04,mazzolino/armhf-ubuntu,&quot;</span> Dockerfile</span><br><span class="line">$ sed <span class="operator">-</span>i <span class="string">&quot;s,^<span class="char escape_">\(</span>ADD         <span class="char escape_">\)</span><span class="char escape_">\(</span>extensions.sh<span class="char escape_">\)</span> <span class="char escape_">\(</span>extensions.conf<span class="char escape_">\)</span> <span class="char escape_">\(</span>/var/www/owncloud/apps/<span class="char escape_">\)</span>,<span class="char escape_">\1</span><span class="char escape_">\2</span> <span class="char escape_">\4</span><span class="char escape_">\n</span><span class="char escape_">\1</span><span class="char escape_">\3</span> <span class="char escape_">\4</span>,&quot;</span> Dockerfile</span><br><span class="line">$ sudo mkdir <span class="operator">-</span>p <span class="symbol">/mnt/docker/owncloud</span></span><br><span class="line">$ sudo chown $&#123;USER&#125;: <span class="symbol">/mnt/docker/owncloud</span></span><br><span class="line">$ docker build <span class="operator">-</span>t ubuntu<span class="symbol">/owncloud</span> .</span><br></pre></td></tr></table></figure>

<h2 id="ownCloud-の実行"><a href="#ownCloud-の実行" class="headerlink" title="ownCloud の実行"></a>ownCloud の実行</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ docker run -p <span class="number">80</span>:<span class="number">80</span> --name nginx -v <span class="regexp">/mnt/</span>docker<span class="regexp">/owncloud:/</span><span class="keyword">var</span><span class="regexp">/www/</span>owncloud<span class="regexp">/data ubuntu/</span>owncloud</span><br></pre></td></tr></table></figure>

<h2 id="Android-端末からの接続"><a href="#Android-端末からの接続" class="headerlink" title="Android 端末からの接続"></a>Android 端末からの接続</h2><p>以下のようにConnectBot のポート転送を設定して、SSH で接続後、ブラウザから<code>localhost:10080</code>にアクセスします。</p>
<table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">鍵の名前</td>
<td align="left">http</td>
</tr>
<tr>
<td align="left">タイプ</td>
<td align="left">ローカル</td>
</tr>
<tr>
<td align="left">ソースポート</td>
<td align="left">10080</td>
</tr>
<tr>
<td align="left">転送先</td>
<td align="left">localhot:80</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>Kodi Live TV with Chinachu</title>
    <url>/2015/04/29/Kodi-Live-TV-with-Chinachu/</url>
    <content><![CDATA[<p><img src="/images/kodi-livetv-chinachu.png" alt="Kodi Live TV with Chinachu" title="Kodi Live TV with Chinachu"></p>
<ul>
<li><a href="http://mzyy94.com/blog/2015/02/21/kodi-livetv-chinachu/">http://mzyy94.com/blog/2015/02/21/kodi-livetv-chinachu/</a></li>
<li><a href="https://github.com/mzyy94/Chinachu-IPTV-API-addon">https://github.com/mzyy94/Chinachu-IPTV-API-addon</a></li>
</ul>
<p>Kodi とChinachu でライブTV を視聴する環境を構築してみました。</p>
<span id="more"></span>

<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><table>
<thead>
<tr>
<th align="left">Software</th>
<th align="left">Version</th>
</tr>
</thead>
<tbody><tr>
<td align="left">OS</td>
<td align="left">Ubuntu GNOME 15.04</td>
</tr>
<tr>
<td align="left">Kernel</td>
<td align="left">3.19.0-15</td>
</tr>
<tr>
<td align="left">DE</td>
<td align="left">GNOME Shell 3.16.1</td>
</tr>
<tr>
<td align="left">Kodi</td>
<td align="left">15.0-BETA1</td>
</tr>
<tr>
<td align="left">PVR Simple IPTV Client</td>
<td align="left">1.11.0</td>
</tr>
<tr>
<td align="left">Chinachu-IPTV-API-addon</td>
<td align="left">2015-02-21</td>
</tr>
</tbody></table>
<h2 id="Chinachu-IPTV-API-addon-の設定"><a href="#Chinachu-IPTV-API-addon-の設定" class="headerlink" title="Chinachu-IPTV-API-addon の設定"></a>Chinachu-IPTV-API-addon の設定</h2><p><a href="https://github.com/mzyy94/Chinachu-IPTV-API-addon/blob/master/README.md">https://github.com/mzyy94/Chinachu-IPTV-API-addon/blob/master/README.md</a></p>
<h2 id="PVR-Simple-IPTV-Client-のインストール"><a href="#PVR-Simple-IPTV-Client-のインストール" class="headerlink" title="PVR Simple IPTV Client のインストール"></a>PVR Simple IPTV Client のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install kodi-pvr-iptvsimple</span><br></pre></td></tr></table></figure>

<h2 id="PVR-Simple-IPTV-Client-の設定"><a href="#PVR-Simple-IPTV-Client-の設定" class="headerlink" title="PVR Simple IPTV Client の設定"></a>PVR Simple IPTV Client の設定</h2><table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">項目</th>
<th align="left">値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">一般</td>
<td align="left">M3U プレイリストのURL</td>
<td align="left"><a href="http://192.168.0.2:10772/api/iptv/channel.m3u8">http://192.168.0.2:10772/api/iptv/channel.m3u8</a></td>
</tr>
<tr>
<td align="left">EPG 設定</td>
<td align="left">XML TV URL</td>
<td align="left"><a href="http://192.168.0.2:10772/api/iptv/epg.xml">http://192.168.0.2:10772/api/iptv/epg.xml</a></td>
</tr>
</tbody></table>
<h2 id="TV-の設定"><a href="#TV-の設定" class="headerlink" title="TV の設定"></a>TV の設定</h2><table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">項目</th>
<th align="left">値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">一般</td>
<td align="left">LCD有効</td>
<td align="left">Enabled</td>
</tr>
</tbody></table>
<h2 id="Chinachu-で録画した動画視聴の設定"><a href="#Chinachu-で録画した動画視聴の設定" class="headerlink" title="Chinachu で録画した動画視聴の設定"></a>Chinachu で録画した動画視聴の設定</h2><p><a href="https://github.com/mzyy94/plugin.video.chinachu/blob/master/README.md">https://github.com/mzyy94/plugin.video.chinachu/blob/master/README.md</a></p>
]]></content>
      <categories>
        <category>multimedia</category>
      </categories>
      <tags>
        <tag>kodi</tag>
        <tag>chinachu</tag>
      </tags>
  </entry>
  <entry>
    <title>Nagios on Raspberry Pi 2</title>
    <url>/2015/06/28/Nagios-on-Raspberry-Pi-2/</url>
    <content><![CDATA[<p><img src="/images/nagios.png" alt="Nagios on Raspberry Pi 2" title="Nagios on Raspberry Pi 2"></p>
<p><a href="https://www.nagios.org/">https://www.nagios.org/</a><br><a href="https://help.ubuntu.com/lts/serverguide/nagios.html">https://help.ubuntu.com/lts/serverguide/nagios.html</a></p>
<span id="more"></span>
<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install nagios3 nagios-nrpe-plugin</span><br></pre></td></tr></table></figure>
<h2 id="監視ホストの追加"><a href="#監視ホストの追加" class="headerlink" title="監視ホストの追加"></a>監視ホストの追加</h2><figure class="highlight ini"><figcaption><span>/etc/nagios3/conf.d/ridge_nagios2.cfg</span></figcaption><table><tr><td class="code"><pre><span class="line">define host&#123;</span><br><span class="line">  use                   generic-host</span><br><span class="line">  host_name             ridge</span><br><span class="line">  alias                 ridge</span><br><span class="line">  address               192.168.0.2</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">define service&#123;</span><br><span class="line">  use                   generic-service</span><br><span class="line">  host_name             ridge</span><br><span class="line">  service_description   PING</span><br><span class="line">  check_command         check_ping!500,10%!1000,20%</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Nagios-の再起動"><a href="#Nagios-の再起動" class="headerlink" title="Nagios の再起動"></a>Nagios の再起動</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> /etc/init.d/nagios3 restart</span><br></pre></td></tr></table></figure>

<h2 id="Nagios-で確認"><a href="#Nagios-で確認" class="headerlink" title="Nagios で確認"></a>Nagios で確認</h2><p><code>http://192.168.0.6/nagios3</code> にアクセスして、サイドバーからHosts を選択します。</p>
]]></content>
      <categories>
        <category>operation</category>
      </categories>
      <tags>
        <tag>raspberrypi</tag>
        <tag>nagios</tag>
      </tags>
  </entry>
  <entry>
    <title>Redmine on Raspberry Pi 2</title>
    <url>/2015/06/28/Redmine-on-Raspberry-Pi-2/</url>
    <content><![CDATA[<p><img src="/images/redmine.png" alt="Redmine on Raspberry Pi 2" title="Redmine on Raspberry Pi 2"></p>
<p><a href="http://redmine.jp/">http://redmine.jp/</a></p>
<p>プロジェクト管理ツールRedmine をRaspberry Pi 2 にインストールしてみました。</p>
<span id="more"></span>

<h2 id="パッケージのインストール"><a href="#パッケージのインストール" class="headerlink" title="パッケージのインストール"></a>パッケージのインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install apache2 libapache2-mod-passenger</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install bundler</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install mysql-server mysql-client</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install redmine redmine-mysql</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/share/redmine/public /var/www/html/redmine</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chown</span> -R www-data:www-data /usr/share/redmine</span><br></pre></td></tr></table></figure>

<h2 id="Apache2-の設定と再起動"><a href="#Apache2-の設定と再起動" class="headerlink" title="Apache2 の設定と再起動"></a>Apache2 の設定と再起動</h2><figure class="highlight text"><figcaption><span>/etc/apache2/sites-available/000-default.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;Directory /redmine&gt;</span><br><span class="line">    Options FollowSymLinks</span><br><span class="line">    RailsBaseURI /redmine</span><br><span class="line">    PassengerResolveSymlinksInDocumentRoot on</span><br><span class="line">    AllowOverride None</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>/etc/apache2/mods-available/passenger.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_passenger.c&gt;</span><br><span class="line">  PassengerDefaultUser www-data</span><br><span class="line">  PassengerRoot /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini</span><br><span class="line">  PassengerDefaultRuby /usr/bin/ruby</span><br><span class="line">  RailsBaseURI /redmine</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> service apache2 restart</span><br></pre></td></tr></table></figure>

<h2 id="Redmine-へのアクセス"><a href="#Redmine-へのアクセス" class="headerlink" title="Redmine へのアクセス"></a>Redmine へのアクセス</h2><p><code>http://192.168.0.6/redmine</code> にアクセスします。初期管理者ユーザ&#x2F;パスワードはadmin&#x2F;admin　です。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>raspberrypi</tag>
        <tag>redmine</tag>
      </tags>
  </entry>
  <entry>
    <title>UEFI Boot Ubuntu USB Memory</title>
    <url>/2015/07/05/UEFI-Boot-Ubuntu-USB-Memory/</url>
    <content><![CDATA[<p><img src="/images/patriot_64gb.jpg" alt="Patriot Memory 64GB" title="Patriot Memory 64GB"><br>セキュアブートなタブレット端末向けに、Ubuntu を起動するためのUSB メモリ環境を作成しました。</p>
<span id="more"></span>

<p>以下の環境で作業します。</p>
<table>
<thead>
<tr>
<th align="center">環境</th>
<th align="center">状態</th>
</tr>
</thead>
<tbody><tr>
<td align="center">作業PC&#x2F;HDD</td>
<td align="center">作業PC を内蔵HDD から起動</td>
</tr>
<tr>
<td align="center">作業PC&#x2F;USB</td>
<td align="center">作業PC を外付USB から起動</td>
</tr>
<tr>
<td align="center">タブレット&#x2F;SSD</td>
<td align="center">タブレットを内蔵SSD から起動</td>
</tr>
<tr>
<td align="center">タブレット&#x2F;USB</td>
<td align="center">タブレットを外付USB から起動</td>
</tr>
</tbody></table>
<h3 id="［作業PC-HDD］-パーティションの作成"><a href="#［作業PC-HDD］-パーティションの作成" class="headerlink" title="［作業PC&#x2F;HDD］ パーティションの作成"></a>［作業PC&#x2F;HDD］ パーティションの作成</h3><p>GPrted を使って64GB のUSB メモリに3つの基本パーティションを作成します。</p>
<table>
<thead>
<tr>
<th align="left">Partition</th>
<th align="left">FS Type</th>
<th align="right">Size</th>
<th align="left">Label</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#x2F;dev&#x2F;sdb1</td>
<td align="left">fat32</td>
<td align="right">384MB</td>
<td align="left">efi</td>
</tr>
<tr>
<td align="left">&#x2F;dev&#x2F;sdb2</td>
<td align="left">ext4</td>
<td align="right">52GB</td>
<td align="left">patriot</td>
</tr>
<tr>
<td align="left">&#x2F;dev&#x2F;sdb3</td>
<td align="left">swap</td>
<td align="right">5GB</td>
<td align="left">-</td>
</tr>
</tbody></table>
<h3 id="［作業PC-HDD］-rEFInd-のインストール"><a href="#［作業PC-HDD］-rEFInd-のインストール" class="headerlink" title="［作業PC&#x2F;HDD］ rEFInd のインストール"></a>［作業PC&#x2F;HDD］ rEFInd のインストール</h3><p>以下のURL からUEFI 対応のブートマネージャrEFInd のzip を取得して、展開します。<br><a href="http://www.rodsbooks.com/refind/getting.html">http://www.rodsbooks.com/refind/getting.html</a></p>
<p>rEFInd を&#x2F;dev&#x2F;sdb1 にインストールします。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> refind-bin-0.8.7/</span><br><span class="line">$ bash install.sh --usedefault /dev/sdb1 --alldrivers</span><br></pre></td></tr></table></figure>

<h3 id="［作業PC-HDD］-Ubuntu-のインストーラの設定"><a href="#［作業PC-HDD］-Ubuntu-のインストーラの設定" class="headerlink" title="［作業PC&#x2F;HDD］ Ubuntu のインストーラの設定"></a>［作業PC&#x2F;HDD］ Ubuntu のインストーラの設定</h3><p>ISO で配布されているUbuntu のインストーラをGRUB から起動するように設定します。<br>ubuntu-gnome-15.04-desktop-amd64.iso を第1HDDの第3パーティション(hd0,3)の&#x2F;boot&#x2F;iso&#x2F; ディレクトリに配置しておきます。</p>
<figure class="highlight text"><figcaption><span>/etc/grub.d/40_custom</span></figcaption><table><tr><td class="code"><pre><span class="line">menuentry &#x27;ISO Ubuntu GNOME 15.04&#x27; &#123;</span><br><span class="line">	isofile=ubuntu-gnome-15.04-desktop-amd64.iso</span><br><span class="line">	loopback loop (hd0,3)/boot/iso/$isofile</span><br><span class="line">	linux (loop)/casper/vmlinuz.efi boot=casper iso-scan/filename=/boot/iso/$isofile noprompt noeject</span><br><span class="line">	initrd (loop)/casper/initrd.lz</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> update-grub</span><br></pre></td></tr></table></figure>

<h3 id="［作業PC-HDD］-Ubuntu-のインストール"><a href="#［作業PC-HDD］-Ubuntu-のインストール" class="headerlink" title="［作業PC&#x2F;HDD］ Ubuntu のインストール"></a>［作業PC&#x2F;HDD］ Ubuntu のインストール</h3><p>GRUB からUbuntu のインストーラ<code>ISO Ubuntu GNOME 15.04</code>を選択して、&#x2F;dev&#x2F;sdb2 にインストールします。</p>
<ul>
<li>サードパーティのソフトウェアをインストール</li>
<li>ブートローダは&#x2F;dev&#x2F;sdb2 にインストール</li>
</ul>
<h3 id="［作業PC-USB］-カーネルのダウングレード"><a href="#［作業PC-USB］-カーネルのダウングレード" class="headerlink" title="［作業PC&#x2F;USB］ カーネルのダウングレード"></a>［作業PC&#x2F;USB］ カーネルのダウングレード</h3><p>Ubuntu GNOME 15.04 x86_64 (カーネル3.19)をインストールしましたが、利用するタブレットのWi-Fi はカーネル3.19 環境においてフリーズを誘発します。<br><a href="https://bugs.archlinux.org/task/44269">https://bugs.archlinux.org/task/44269</a></p>
<p>そこでカーネルを3.18 にダウングレードすることにしました。<br><a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/">http://kernel.ubuntu.com/~kernel-ppa/mainline/</a></p>
<p>USB から起動して、カーネル3.18.17 のDEB パッケージをインストールします。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> kernel-3.18.17</span><br><span class="line">$ <span class="built_in">cd</span> kernel-3.18.17</span><br><span class="line">$ wget -c kernel.ubuntu.com/~kernel-ppa/mainline/v3.18.17-vivid/linux-headers-3.18.17-031817_3.18.17-031817.201506292232_all.deb</span><br><span class="line">$ wget -c kernel.ubuntu.com/~kernel-ppa/mainline/v3.18.17-vivid/linux-headers-3.18.17-031817-generic_3.18.17-031817.201506292232_amd64.deb</span><br><span class="line">$ wget -c kernel.ubuntu.com/~kernel-ppa/mainline/v3.18.17-vivid/linux-image-3.18.17-031817-generic_3.18.17-031817.201506292232_amd64.deb</span><br><span class="line">$ <span class="built_in">sudo</span> dpkg -i *.deb</span><br></pre></td></tr></table></figure>

<h3 id="［タブレット-SSD］-タブレットでセキュアブートを解除"><a href="#［タブレット-SSD］-タブレットでセキュアブートを解除" class="headerlink" title="［タブレット&#x2F;SSD］ タブレットでセキュアブートを解除"></a>［タブレット&#x2F;SSD］ タブレットでセキュアブートを解除</h3><p>セキュアブートを解除した後、USB から起動します。</p>
<h3 id="［タブレット-USB］-タブレットでUbuntu-を起動"><a href="#［タブレット-USB］-タブレットでUbuntu-を起動" class="headerlink" title="［タブレット&#x2F;USB］ タブレットでUbuntu を起動"></a>［タブレット&#x2F;USB］ タブレットでUbuntu を起動</h3><p>USB デバイスからの起動を選択すると、rEFInd の画面が表示されます。<br>rEFInd 上で複数のカーネルから3.18.17 を選択して起動します。</p>
]]></content>
  </entry>
  <entry>
    <title>UEFI &amp; MBR Boot Ubuntu USB Memory</title>
    <url>/2015/07/18/UEFI-MBR-Boot-Ubuntu-USB-Memory/</url>
    <content><![CDATA[<p><img src="/images/patriot_64gb.jpg" alt="Patriot Memory 64GB" title="Patriot Memory 64GB"><br>タブレット端末向けに、Ubuntu を起動するためのUSB メモリ環境を作成しました。<br>その２(GRUB2 編)です。</p>
<span id="more"></span>

<p>以下の環境で作業します。</p>
<table>
<thead>
<tr>
<th align="center">環境</th>
<th align="center">状態</th>
</tr>
</thead>
<tbody><tr>
<td align="center">作業PC&#x2F;HDD</td>
<td align="center">作業PC を内蔵HDD から起動</td>
</tr>
<tr>
<td align="center">作業PC&#x2F;USB</td>
<td align="center">作業PC を外付USB から起動</td>
</tr>
<tr>
<td align="center">タブレット&#x2F;SSD</td>
<td align="center">タブレットを内蔵SSD から起動</td>
</tr>
<tr>
<td align="center">タブレット&#x2F;USB</td>
<td align="center">タブレットを外付USB から起動</td>
</tr>
</tbody></table>
<h3 id="［作業PC-HDD］-パーティションの作成"><a href="#［作業PC-HDD］-パーティションの作成" class="headerlink" title="［作業PC&#x2F;HDD］ パーティションの作成"></a>［作業PC&#x2F;HDD］ パーティションの作成</h3><p>GPrted を使って64GB のUSB メモリに3つの基本パーティションを作成します。</p>
<table>
<thead>
<tr>
<th align="left">Partition</th>
<th align="left">FS Type</th>
<th align="right">Size</th>
<th align="left">Label</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#x2F;dev&#x2F;sdb1</td>
<td align="left">fat32</td>
<td align="right">384MB</td>
<td align="left">efi</td>
</tr>
<tr>
<td align="left">&#x2F;dev&#x2F;sdb2</td>
<td align="left">ext4</td>
<td align="right">52GB</td>
<td align="left">patriot</td>
</tr>
<tr>
<td align="left">&#x2F;dev&#x2F;sdb3</td>
<td align="left">swap</td>
<td align="right">5GB</td>
<td align="left">-</td>
</tr>
</tbody></table>
<h3 id="［作業PC-HDD］-Ubuntu-のインストーラの設定"><a href="#［作業PC-HDD］-Ubuntu-のインストーラの設定" class="headerlink" title="［作業PC&#x2F;HDD］ Ubuntu のインストーラの設定"></a>［作業PC&#x2F;HDD］ Ubuntu のインストーラの設定</h3><p>ISO で配布されているUbuntu のインストーラをGRUB から起動するように設定します。<br>ubuntu-gnome-15.04-desktop-amd64.iso を第1HDDの第3パーティション(hd0,3)の&#x2F;boot&#x2F;iso&#x2F; ディレクトリに配置しておきます。</p>
<figure class="highlight text"><figcaption><span>/etc/grub.d/40_custom</span></figcaption><table><tr><td class="code"><pre><span class="line">menuentry &#x27;ISO Ubuntu GNOME 15.04&#x27; &#123;</span><br><span class="line">	isofile=ubuntu-gnome-15.04-desktop-amd64.iso</span><br><span class="line">	loopback loop (hd0,3)/boot/iso/$isofile</span><br><span class="line">	linux (loop)/casper/vmlinuz.efi boot=casper iso-scan/filename=/boot/iso/$isofile noprompt noeject</span><br><span class="line">	initrd (loop)/casper/initrd.lz</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> update-grub</span><br></pre></td></tr></table></figure>

<h3 id="［作業PC-HDD］-Ubuntu-のインストール"><a href="#［作業PC-HDD］-Ubuntu-のインストール" class="headerlink" title="［作業PC&#x2F;HDD］ Ubuntu のインストール"></a>［作業PC&#x2F;HDD］ Ubuntu のインストール</h3><p>GRUB からUbuntu のインストーラ<code>ISO Ubuntu GNOME 15.04</code>を選択して、&#x2F;dev&#x2F;sdb2 にインストールします。</p>
<ul>
<li>サードパーティのソフトウェアをインストール</li>
<li>ブートローダは&#x2F;dev&#x2F;sdb にインストール</li>
</ul>
<h3 id="［作業PC-HDD］-dev-sdb1-にEFI-ブートローダをインストール"><a href="#［作業PC-HDD］-dev-sdb1-にEFI-ブートローダをインストール" class="headerlink" title="［作業PC&#x2F;HDD］ &#x2F;dev&#x2F;sdb1 にEFI ブートローダをインストール"></a>［作業PC&#x2F;HDD］ &#x2F;dev&#x2F;sdb1 にEFI ブートローダをインストール</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install grub-efi-amd64-bin</span><br><span class="line">$ grub-mkimage -d /usr/lib/grub/x86_64-efi/ -o BOOTx64.EFI -O x86_64-efi -p <span class="string">&quot;&quot;</span> part_gpt part_msdos ntfs ntfscomp hfsplus fat ext2 normal chain boot configfile linux multiboot</span><br><span class="line">$ <span class="built_in">mkdir</span> efi</span><br><span class="line">$ <span class="built_in">sudo</span> mount /dev/sdb1 efi</span><br><span class="line">$ <span class="built_in">mkdir</span> -p efi/EFI/BOOT</span><br><span class="line">$ <span class="built_in">cp</span> BOOTx64.EFI efi/EFI/BOOT/</span><br><span class="line">$ <span class="built_in">cp</span> -r /usr/lib/grub/x86_64-efi efi/EFI/BOOT/</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><figcaption><span>efi/EFI/BOOT/grub.cfg</span></figcaption><table><tr><td class="code"><pre><span class="line">configfile (hd0,msdos2)/boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> umount efi</span><br></pre></td></tr></table></figure>

<h3 id="［作業PC-USB］-GRUB-設定の更新"><a href="#［作業PC-USB］-GRUB-設定の更新" class="headerlink" title="［作業PC&#x2F;USB］ GRUB 設定の更新"></a>［作業PC&#x2F;USB］ GRUB 設定の更新</h3><p>USB から起動してGRUB の設定を更新します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chmod</span> -x /etc/grub.d/30_os-probe</span><br><span class="line">$ <span class="built_in">sudo</span> update-grub</span><br></pre></td></tr></table></figure>

<h3 id="［作業PC-USB］-カーネルのダウングレード"><a href="#［作業PC-USB］-カーネルのダウングレード" class="headerlink" title="［作業PC&#x2F;USB］ カーネルのダウングレード"></a>［作業PC&#x2F;USB］ カーネルのダウングレード</h3><p>Ubuntu GNOME 15.04 x86_64 (カーネル3.19)をインストールしましたが、利用するタブレットのWi-Fi はカーネル3.19 環境においてフリーズを誘発します。<br><a href="https://bugs.archlinux.org/task/44269">https://bugs.archlinux.org/task/44269</a></p>
<p>そこでカーネルを3.18 にダウングレードすることにしました。<br><a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/">http://kernel.ubuntu.com/~kernel-ppa/mainline/</a></p>
<p>USB から起動して、カーネル3.18.17 のDEB パッケージをインストールします。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> kernel-3.18.17</span><br><span class="line">$ <span class="built_in">cd</span> kernel-3.18.17</span><br><span class="line">$ wget -c kernel.ubuntu.com/~kernel-ppa/mainline/v3.18.17-vivid/linux-headers-3.18.17-031817_3.18.17-031817.201506292232_all.deb</span><br><span class="line">$ wget -c kernel.ubuntu.com/~kernel-ppa/mainline/v3.18.17-vivid/linux-headers-3.18.17-031817-generic_3.18.17-031817.201506292232_amd64.deb</span><br><span class="line">$ wget -c kernel.ubuntu.com/~kernel-ppa/mainline/v3.18.17-vivid/linux-image-3.18.17-031817-generic_3.18.17-031817.201506292232_amd64.deb</span><br><span class="line">$ <span class="built_in">sudo</span> dpkg -i *.deb</span><br></pre></td></tr></table></figure>

<h3 id="［タブレット-SSD］-タブレットでセキュアブートを解除"><a href="#［タブレット-SSD］-タブレットでセキュアブートを解除" class="headerlink" title="［タブレット&#x2F;SSD］ タブレットでセキュアブートを解除"></a>［タブレット&#x2F;SSD］ タブレットでセキュアブートを解除</h3><p>セキュアブートを解除した後、USB から起動します。</p>
<h3 id="［タブレット-USB］-タブレットでUbuntu-を起動"><a href="#［タブレット-USB］-タブレットでUbuntu-を起動" class="headerlink" title="［タブレット&#x2F;USB］ タブレットでUbuntu を起動"></a>［タブレット&#x2F;USB］ タブレットでUbuntu を起動</h3><p>USB デバイスからの起動を選択すると、GRUB の画面が表示されます。<br>デフォルトでは最新カーネルが選択されます。追加オプションからカーネル3.18.17 を選択して起動します。</p>
]]></content>
  </entry>
  <entry>
    <title>Atom Text Editor</title>
    <url>/2015/07/25/atom-text-editor/</url>
    <content><![CDATA[<p><img src="/images/atom.png" alt="Atom text editor" title="Atom text editor"><br><a href="https://atom.io/">https://atom.io/</a><br>GitHub 製のテキストエディタAtom 1.0 がリリースされたので、Ubuntu GNOME 15.04, 15.10 にインストールしてみました。<br>初期に公開されたものはとても重かったですが、性能と安定性が向上しているようです。</p>
<span id="more"></span>

<h2 id="イントール"><a href="#イントール" class="headerlink" title="イントール"></a>イントール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:webupd8team/atom</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install atom</span><br></pre></td></tr></table></figure>

<h2 id="日本語フォントのインストール"><a href="#日本語フォントのインストール" class="headerlink" title="日本語フォントのインストール"></a>日本語フォントのインストール</h2><p>作業の前にRicty フォントをインストールしておきます。<br>フォントをインストールした後に、スタイル、メニューを設定します。</p>
<h2 id="スタイルの設定"><a href="#スタイルの設定" class="headerlink" title="スタイルの設定"></a>スタイルの設定</h2><p>この設定をしないと、Ubuntu GNOME 15.04,15.10 環境下でAtom を日本語化した際に文字化けしてしまいました。</p>
<figure class="highlight css"><figcaption><span>~/.atom/styles.less</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-family-p</span>: Ricty;</span><br><span class="line"><span class="keyword">@font-family-m</span>: Ricty;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tree-view</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: @font-family-p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.atom-text-editor</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: @font-family-m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.vertical</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: @font-family-p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-preview</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: @font-family-p;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: @font-family-p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pre, <span class="selector-tag">code</span>, tt &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: @font-family-m;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="編集領域の日本語化"><a href="#編集領域の日本語化" class="headerlink" title="編集領域の日本語化"></a>編集領域の日本語化</h2><ol>
<li>Edit &gt; Preferences メニューを選択</li>
<li>Settings を選択</li>
<li>Editor Settings - Font Family に<code>Ricty</code>を指定</li>
</ol>
<h2 id="メニューの日本語化"><a href="#メニューの日本語化" class="headerlink" title="メニューの日本語化"></a>メニューの日本語化</h2><ol>
<li>Edit &gt; Preferences メニューを選択</li>
<li>Install を選択</li>
<li><code>japanese-menu</code> を検索してインストール</li>
</ol>
<h2 id="markdown-preview"><a href="#markdown-preview" class="headerlink" title="markdown-preview"></a>markdown-preview</h2><p>Ctrl + Shift + M</p>
<h2 id="Install-Packages"><a href="#Install-Packages" class="headerlink" title="Install Packages"></a>Install Packages</h2><ul>
<li>atom-terminal-panel</li>
<li>git-plus</li>
<li>Minimap</li>
<li>Sublime-Style-Column-Selection<br>mainMouseNum は1 にした方が使いやすいかも。なお、日本語のバイト位置が適切に処理できていない。<figure class="highlight coffee"><figcaption><span>~/.atom/packages/Sublime-Style-Column-Selection/lib/sublime-select.coffee</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">when</span> <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">  selectKey: <span class="string">&#x27;shiftKey&#x27;</span></span><br><span class="line">  mainMouseNum: <span class="number">2</span></span><br><span class="line">  middleMouseNum: <span class="number">2</span></span><br><span class="line">  enableMiddleMouse: <span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
<li>Tool Bar</li>
</ul>
]]></content>
      <categories>
        <category>editor</category>
      </categories>
      <tags>
        <tag>atom</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVPN with Raspberry Pi</title>
    <url>/2015/08/08/OpenVPN-with-Raspberry-Pi/</url>
    <content><![CDATA[<p><img src="/images/openvpn.png" alt="OpenVPN" title="OpenVPN"><br><a href="https://openvpn.net/">https://openvpn.net/</a><br>OpenVPN を使ってインターネットから自宅のサーバネットワークにセキュアに接続してみました。</p>
<table>
<thead>
<tr>
<th align="left">機器</th>
<th align="left">構成</th>
</tr>
</thead>
<tbody><tr>
<td align="left">VPN サーバ</td>
<td align="left">- Raspberry Pi 2<br />- Ubuntu 14.04 (ARM) <br />- OpenVPN 2.3.2</td>
</tr>
<tr>
<td align="left">Linux クライアント</td>
<td align="left">- Ubutu GNOME 15.10 (x86_64) <br />- GNOME Shell 3.17.4</td>
</tr>
<tr>
<td align="left">Android クライアント</td>
<td align="left">- Android 4.4.2<br />- OpenVPN アプリ</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="VPN-サーバの設定"><a href="#VPN-サーバの設定" class="headerlink" title="VPN サーバの設定"></a>VPN サーバの設定</h2><p>はじめにRaspbery Pi はRTC(Real Time Clock)を持っていないので、ntp で時刻同期をしておきます。</p>
<figure class="highlight bash"><figcaption><span>/etc/ntp.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#server 0.ubuntu.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 1.ubuntu.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 2.ubuntu.pool.ntp.org iburst</span></span><br><span class="line"><span class="comment">#server 3.ubuntu.pool.ntp.org iburst</span></span><br><span class="line">pool ntp.nict.jp iburst</span><br></pre></td></tr></table></figure>
<p>必要なパッケージをインストールして、認証局用のディレクトリを作成します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install openvpn libssl-dev openssl easy-rsa</span><br><span class="line">$ <span class="built_in">sudo</span> su</span><br><span class="line"><span class="comment"># make-cadir /etc/openvpn/easy-rsa</span></span><br><span class="line"><span class="comment"># cd /etc/openvpn/easy-rsa</span></span><br></pre></td></tr></table></figure>
<p>設定ファイル<code>vars</code> を編集します。</p>
<figure class="highlight bash"><figcaption><span>/etc/openvpn/easy-rsa/vars</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> KEY_COUNTRY=<span class="string">&quot;JP&quot;</span></span><br><span class="line"><span class="built_in">export</span> KEY_PROVINCE=<span class="string">&quot;MyProvince&quot;</span></span><br><span class="line"><span class="built_in">export</span> KEY_CITY=<span class="string">&quot;MyCity&quot;</span></span><br><span class="line"><span class="built_in">export</span> KEY_ORG=<span class="string">&quot;MyOrg&quot;</span></span><br><span class="line"><span class="built_in">export</span> KEY_EMAIL=<span class="string">&quot;MyEmail&quot;</span></span><br><span class="line"><span class="built_in">export</span> KEY_OU=<span class="string">&quot;MyOU&quot;</span></span><br></pre></td></tr></table></figure>
<p>認証局、VPN サーバおよびクライアント用の証明書等を作成します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># source vars &amp;&amp; ./clean-all &amp;&amp; ./build-ca</span></span><br><span class="line"><span class="comment"># ./build-key-server server</span></span><br><span class="line"><span class="comment"># ./build-key client1</span></span><br><span class="line"><span class="comment"># ./build-dh</span></span><br><span class="line"><span class="comment"># cd keys</span></span><br><span class="line"><span class="comment"># openvpn --genkey --secret ta.key</span></span><br><span class="line"><span class="comment"># cp ca.crt ta.key dh2048.pem server.crt server.key /etc/openvpn/</span></span><br><span class="line"><span class="comment"># cd /etc/openvpn/</span></span><br><span class="line"><span class="comment"># cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz /etc/openvpn/</span></span><br><span class="line"><span class="comment"># gzip -d /etc/openvpn/server.conf.gz</span></span><br></pre></td></tr></table></figure>
<p>VPN サーバの設定ファイル<code>server.conf</code> を編集します。VPN サーバのローカルアドレスは192.168.0.6&#x2F;24 です。</p>
<table>
<thead>
<tr>
<th align="left">before</th>
<th align="left">after</th>
</tr>
</thead>
<tbody><tr>
<td align="left">dh dh1024.pem</td>
<td align="left">dh dh2048.pem</td>
</tr>
<tr>
<td align="left">push “route 192.168.0.0 255.255.255.0”</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">;push “redirect-gateway def1 bypass-dhcp”</td>
<td align="left">push “redirect-gateway def1 bypass-dhcp”</td>
</tr>
<tr>
<td align="left">push “dhcp-option DNS 192.168.0.1”</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">;client-to-client</td>
<td align="left">client-to-client</td>
</tr>
<tr>
<td align="left">;tls-auth ta.key 0 # This file is secret</td>
<td align="left">tls-auth ta.key 0 # This file is secret</td>
</tr>
<tr>
<td align="left">;user nobody</td>
<td align="left">user nobody</td>
</tr>
<tr>
<td align="left">;group nogroup</td>
<td align="left">group nogroup</td>
</tr>
<tr>
<td align="left">;log openvpn.log</td>
<td align="left">log &#x2F;var&#x2F;log&#x2F;openvpn.log</td>
</tr>
<tr>
<td align="left">mode server</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">tls-server</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>OpenVPN サービスを再起動します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># service openvpn restart</span></span><br></pre></td></tr></table></figure>

<h2 id="Linux-クライアントの設定"><a href="#Linux-クライアントの設定" class="headerlink" title="Linux クライアントの設定"></a>Linux クライアントの設定</h2><p>接続用のパッケージをインストールします。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install network-manager network-manager-openvpn network-manager-openvpn-gnome</span><br></pre></td></tr></table></figure>
<p>VPN サーバ上のサンプルファイル<code>/usr/share/doc/openvpn/examples/sample-config-files/client.conf</code>をコピーして、<code>client1.ovpn</code>を作成します。</p>
<table>
<thead>
<tr>
<th align="left">before</th>
<th align="left">after</th>
</tr>
</thead>
<tbody><tr>
<td align="left">remote my-server-1 1194</td>
<td align="left">remote （VPN サーバのFQDN or IP アドレス） 1194</td>
</tr>
<tr>
<td align="left">cert client.crt</td>
<td align="left">cert client1.crt</td>
</tr>
<tr>
<td align="left">key client.key</td>
<td align="left">key client1.key</td>
</tr>
<tr>
<td align="left">;tls-auth ta.key 1</td>
<td align="left">tls-auth ta.key 1</td>
</tr>
</tbody></table>
<p>VPN サーバ上の以下のファイルを安全な方法でクライアントに転送します。</p>
<ul>
<li>&#x2F;etc&#x2F;openvpn&#x2F;easy-rsa&#x2F;keys&#x2F;ca.crt</li>
<li>&#x2F;etc&#x2F;openvpn&#x2F;easy-rsa&#x2F;keys&#x2F;ta.key</li>
<li>&#x2F;etc&#x2F;openvpn&#x2F;easy-rsa&#x2F;keys&#x2F;client1.crt</li>
<li>&#x2F;etc&#x2F;openvpn&#x2F;easy-rsa&#x2F;keys&#x2F;client1.key</li>
</ul>
<p>設定ファイルをインポートします。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gnome-control-center network</span><br></pre></td></tr></table></figure>

<ol>
<li><code>+</code> を選択</li>
<li><code>VPN</code> を選択</li>
<li><code>Import from file...</code> を選択し、<code>client1.ovpn</code> を取り込みます。</li>
</ol>
<h2 id="Android-クライアントの設定"><a href="#Android-クライアントの設定" class="headerlink" title="Android クライアントの設定"></a>Android クライアントの設定</h2><p>PC と同様にclient2.ovpn を作成し、OpenVPN アプリで取り込みます。</p>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>openvpn</tag>
      </tags>
  </entry>
  <entry>
    <title>Compile Kodi for Linux</title>
    <url>/2015/08/23/Compile-Kodi-for-Linux/</url>
    <content><![CDATA[<p><a href="/images/kodi_build.png"><img src="/images/kodi_build.png" alt="kodi for Linux"></a></p>
<p><a href="http://kodi.wiki/view/HOW-TO:Compile_Kodi_for_Linux">http://kodi.wiki/view/HOW-TO:Compile_Kodi_for_Linux</a></p>
<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">gnome-control-center のlibtag1v5-vanilla とkodi のlibtag1-vanilla が競合した・・・</p>&mdash; ktkr3d (@ktkr3d) <a href="https://twitter.com/ktkr3d/status/632388795111858176">2015, 8月 15</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Ubuntu wily で<code>ppa:team-xbmc/xbmc-nightly</code> の<code>vivid</code> リポジトリからkodi をインストールして使っていたけれど、どうもライブラリが競合したようなので、Kodi の方を自前でビルドすることにしました。</p>
<span id="more"></span>

<h2 id="ソースコードの取得-一回目"><a href="#ソースコードの取得-一回目" class="headerlink" title="ソースコードの取得(一回目)"></a>ソースコードの取得(一回目)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install git-core -y</span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HOME</span></span><br><span class="line">$ git <span class="built_in">clone</span> git://github.com/xbmc/xbmc.git</span><br></pre></td></tr></table></figure>

<h2 id="ソースコードの取得-二回目以降"><a href="#ソースコードの取得-二回目以降" class="headerlink" title="ソースコードの取得(二回目以降)"></a>ソースコードの取得(二回目以降)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HOME</span>/xbmc</span><br><span class="line">$ git clean -xfd</span><br><span class="line">$ git reset --hard</span><br><span class="line">$ git pull --rebase</span><br></pre></td></tr></table></figure>

<h2 id="前提パッケージのインストール"><a href="#前提パッケージのインストール" class="headerlink" title="前提パッケージのインストール"></a>前提パッケージのインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install automake autopoint bison build-essential ccache cmake curl cvs default-jre fp-compiler gawk gdc gettext git-core gperf libasound2-dev libass-dev libavcodec-dev libavfilter-dev libavformat-dev libavutil-dev libbluetooth-dev libbluray-dev libbluray1 libboost-dev libboost-thread-dev libbz2-dev libcap-dev libcdio-dev libcec-dev libcec1 libcrystalhd-dev libcrystalhd3 libcurl3 libcurl4-gnutls-dev libcwiid-dev libcwiid1 libdbus-1-dev libenca-dev libflac-dev libfontconfig-dev libfreetype6-dev libfribidi-dev libglew-dev libiso9660-dev libjasper-dev libjpeg-dev libltdl-dev liblzo2-dev libmad0-dev libmicrohttpd-dev libmodplug-dev libmp3lame-dev libmpeg2-4-dev libmpeg3-dev libmysqlclient-dev libnfs-dev libogg-dev libpcre3-dev libplist-dev libpng-dev libpostproc-dev libpulse-dev libsamplerate-dev libsdl-dev libsdl-gfx1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libshairport-dev libsmbclient-dev libsqlite3-dev libssh-dev libssl-dev libswscale-dev libtiff-dev libtinyxml-dev libtool libudev-dev libusb-dev libva-dev libva-egl1 libva-tpi1 libvdpau-dev libvorbisenc2 libxml2-dev libxmu-dev libxrandr-dev libxrender-dev libxslt1-dev libxt-dev libyajl-dev mesa-utils nasm pmount python-dev python-imaging python-sqlite swig unzip yasm zip zlib1g-dev</span><br></pre></td></tr></table></figure>

<h2 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make -C tools/depends/target/crossguid/ PREFIX=/usr/local</span><br><span class="line">$ make -C lib/taglib</span><br><span class="line">$ <span class="built_in">sudo</span> make -C lib/taglib install</span><br><span class="line">$ ./configure</span><br><span class="line">$ make -j4</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>multimedia</category>
      </categories>
      <tags>
        <tag>kodi</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity3D on Ubuntu</title>
    <url>/2015/08/27/Unity3D-on-Ubuntu/</url>
    <content><![CDATA[<p><img src="/images/Unity3D_5.1_on_Ubuntu.png" alt="Unity3D on Ubuntu" title="Unity3D on Ubuntu"></p>
<ul>
<li><a href="http://forum.unity3d.com/threads/unity-on-linux-release-notes-and-known-issues.350256/">http://forum.unity3d.com/threads/unity-on-linux-release-notes-and-known-issues.350256/</a></li>
<li><a href="http://forum.unity3d.com/forums/linux-editor-support-feedback-experimental.93/">http://forum.unity3d.com/forums/linux-editor-support-feedback-experimental.93/</a></li>
<li><a href="https://www.assetstore.unity3d.com/jp/#!/content/32351">https://www.assetstore.unity3d.com/jp/#!/content/32351</a></li>
</ul>
<p>Unity3D がLinux に対応したので、動かしてみました。</p>
<p>環境は</p>
<ul>
<li>Ubuntu 15.10 (wily) alpha</li>
<li>GNOME Shell 3.17.90</li>
<li>Linux Kernel 4.1.0</li>
<li>Unity3D 5.1.0f3</li>
</ul>
<span id="more"></span>

<h2 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h2><p><a href="http://download.unity3d.com/download_unity/unity-editor-5.1.0f3+2015082501_amd64.deb">http://download.unity3d.com/download_unity/unity-editor-5.1.0f3+2015082501_amd64.deb</a></p>
<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><ul>
<li>unity-editor-5.1.0f3+2015082501_amd64.deb をダブルクリック</li>
<li>Software Center でインストール</li>
</ul>
<h2 id="Unity-の起動"><a href="#Unity-の起動" class="headerlink" title="Unity の起動"></a>Unity の起動</h2><ul>
<li>[アクセサリー]-[Unity] を起動</li>
<li>Unity のアカウントでサインイン</li>
<li>[New Project]を選択</li>
</ul>
<h2 id="サンプルのダウンロード"><a href="#サンプルのダウンロード" class="headerlink" title="サンプルのダウンロード"></a>サンプルのダウンロード</h2><ul>
<li>[Window]-[Asset Store]を選択</li>
<li>Asset Store でWish List(欲しいものリスト)に追加</li>
<li>ダウンロード(例えば、Viking Village)</li>
</ul>
<h2 id="サンプルのオープン"><a href="#サンプルのオープン" class="headerlink" title="サンプルのオープン"></a>サンプルのオープン</h2><ul>
<li>Asset Store からインポートするか、</li>
<li>[Assets]-[Import Package]-[Custom Package]<br>以下を選択<br>  ~&#x2F;.local&#x2F;share&#x2F;unity3d&#x2F;Asset Store-5.x&#x2F;Unity Technologies&#x2F;Unity EssentialsSample Projects&#x2F;Viking Village.unitypackage</li>
</ul>
<h2 id="Standard-Assets"><a href="#Standard-Assets" class="headerlink" title="Standard Assets"></a>Standard Assets</h2><p>Standard Assets (214.8 MB)のインストールは手動で実行します。<br><a href="https://www.assetstore.unity3d.com/jp/#!/content/32351">https://www.assetstore.unity3d.com/jp/#!/content/32351</a></p>
]]></content>
      <categories>
        <category>3d</category>
      </categories>
      <tags>
        <tag>unity3d</tag>
      </tags>
  </entry>
  <entry>
    <title>MMD for Unity on Linux</title>
    <url>/2015/08/30/MMD-for-Unity-on-Linux/</url>
    <content><![CDATA[<p><img src="/images/mmd4u_on_linux.png" alt="MMD for Unity on Linux" title="MMD for Unity on Linux"></p>
<p><a href="http://mmd-for-unity-proj.github.io/mmd-for-unity/">http://mmd-for-unity-proj.github.io/mmd-for-unity/</a></p>
<p>Unity 3D のLinux 版でMMD を取り込んでみました。</p>
<span id="more"></span>

<h2 id="MMD-for-Unity-のダウンロード"><a href="#MMD-for-Unity-のダウンロード" class="headerlink" title="MMD for Unity のダウンロード"></a>MMD for Unity のダウンロード</h2><ol>
<li><a href="http://mmd-for-unity-proj.github.io/mmd-for-unity/">http://mmd-for-unity-proj.github.io/mmd-for-unity/</a> を開きます。<br /><code>DOWNLOADS</code> ボタンのリンク先のマスターブランチは少し古いのでブランチを切り替えることにします。</li>
<li><code>View on GitHub</code> ボタンをクリックして、リポジトリでブランチを<code>2.1.1b</code> に切り替えます。</li>
<li><code>Download ZIP</code> をクリックしてダウンロードして、プロジェクトのAssets ディレクトリに展開します。</li>
<li>メニューに[MMD for Unity] が表示されます。</li>
</ol>
<h2 id="PMD-のインポート"><a href="#PMD-のインポート" class="headerlink" title="PMD のインポート"></a>PMD のインポート</h2><ol>
<li>Assets の中のPMD モデルファイルを選択します。</li>
<li>Inspector で<code>Convert to Perfab</code>を選択します。</li>
</ol>
<p>とやったような気がする。</p>
]]></content>
      <categories>
        <category>3d</category>
      </categories>
      <tags>
        <tag>mmd</tag>
        <tag>unity3d</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 3D Android Apps</title>
    <url>/2015/08/30/Unity-3D-Android-Apps/</url>
    <content><![CDATA[<p><img src="/images/unity3d_app_on_android.png" alt="Unity3D App on Android" title="Unity3D App on Android"></p>
<p><a href="https://www.assetstore.unity3d.com/jp/?gclid=CMiM1LCS0McCFcSUvQodUEYLYQ#!/content/40756">https://www.assetstore.unity3d.com/jp/?gclid=CMiM1LCS0McCFcSUvQodUEYLYQ#!/content/40756</a><br>Unity 3D のサンプルをAndroid 向けにビルドしてみました。</p>
<p>環境は</p>
<ul>
<li>Ubuntu 15.10 (wily) x86_64 Beta</li>
<li>GNOME Shell 3.17.90</li>
<li>Linux kernel 4.1.0</li>
<li>Android 4.4.2</li>
</ul>
<span id="more"></span>

<h2 id="Andorid-SDK"><a href="#Andorid-SDK" class="headerlink" title="Andorid SDK"></a>Andorid SDK</h2><p>Android SDK のLinux 版をダウンロードして展開します。</p>
<p><a href="http://developer.android.com/sdk/index.html#Other">http://developer.android.com/sdk/index.html#Other</a></p>
<h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>JDK のLinux 版をダウンロードして展開します。</p>
<p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>
<h2 id="ライブラリの追加"><a href="#ライブラリの追加" class="headerlink" title="ライブラリの追加"></a>ライブラリの追加</h2><p>ビルド中に<code>Failed to re-package resources. See the Console for details.</code> というエラーを抑止するために以下を実行しておきます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install zlib1g:i386</span><br></pre></td></tr></table></figure>

<h2 id="Android-SDK-JDK-の位置の指定"><a href="#Android-SDK-JDK-の位置の指定" class="headerlink" title="Android SDK, JDK の位置の指定"></a>Android SDK, JDK の位置の指定</h2><ol>
<li>Unity Editor で、[Edit]-[Preferences] でUnity Preferences 画面を表示</li>
<li>External Tools のAndroid SDK Location とJDK Location を設定</li>
</ol>
<h2 id="サンプルプロジェクトのインポート"><a href="#サンプルプロジェクトのインポート" class="headerlink" title="サンプルプロジェクトのインポート"></a>サンプルプロジェクトのインポート</h2><ol>
<li>[Window]-[Asset Store] を開いて、サンプルプロジェクトをダウンロード、インポート</li>
<li>Project タブ内のAssets から.unity ファイル(Scenes 下とかにあるみたい)をダブルクリック</li>
</ol>
<h2 id="Android-アプリのビルド"><a href="#Android-アプリのビルド" class="headerlink" title="Android アプリのビルド"></a>Android アプリのビルド</h2><ol>
<li>[File]-[Build Settings…]を選択</li>
<li>Platform で<code>Android</code> を選択</li>
<li>Player Settings… ボタンを押下</li>
<li>Unity 側のOther Settings タブのIdentification のBundle Identifier の値を変更</li>
<li>Build Settings 画面に戻ってBuild ボタンを押下</li>
<li>出力するファイル(.apk)を指定</li>
</ol>
]]></content>
      <categories>
        <category>3d</category>
      </categories>
      <tags>
        <tag>unity3d</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 5 Standard Assets Example Project on Linux</title>
    <url>/2015/08/30/Unity-5-Standard-Assets-Example-Project-on-Linux/</url>
    <content><![CDATA[<p><img src="/images/unity_standard_assets_on_linux.png" alt="Standard Assets Example Project on Linux" title="Standard Assets Example Project on Linux"><br><a href="http://forum.unity3d.com/threads/missing-default-assets.350369/">http://forum.unity3d.com/threads/missing-default-assets.350369/</a></p>
<p>Linux 版のUnity のインストーラでは自動でStandard Assets がインストールされないので手動でインストールしてみました。</p>
<span id="more"></span>

<h2 id="Standard-Assets-の取得"><a href="#Standard-Assets-の取得" class="headerlink" title="Standard Assets の取得"></a>Standard Assets の取得</h2><ol>
<li>[Window]-[Asset Store] を開く</li>
<li><code>Standard Assets</code> をダウンロードする<br /><a href="https://www.assetstore.unity3d.com/jp/?gclid=CMWs08L50McCFRQDvAodM6QPbg#!/content/32351">https://www.assetstore.unity3d.com/jp/?gclid=CMWs08L50McCFRQDvAodM6QPbg#!/content/32351</a></li>
</ol>
<h2 id="Standard-Assets-Example-Project-の作成"><a href="#Standard-Assets-Example-Project-の作成" class="headerlink" title="Standard Assets Example Project の作成"></a>Standard Assets Example Project の作成</h2><ol>
<li><code>New Project</code> でプロジェクトを新規作成する。</li>
<li>Project name に<code>Standard Assets Example Project</code> を指定する。</li>
<li>Asset packages ボタンを押下して、<code>Standard Assets</code> をチェックする。<br /><img src="/images/select_standard_assets.png" alt="Select Standard Assets" title="Select Standard Assets"></li>
<li>Create Project ボタンを押下する。</li>
<li>[File]-[Save Project] を選択する。</li>
</ol>
<h2 id="サンプルの実行"><a href="#サンプルの実行" class="headerlink" title="サンプルの実行"></a>サンプルの実行</h2><ol>
<li>Assets&#x2F;Sample Scenes&#x2F;Scenes&#x2F; を開く。</li>
<li>例えば、<code>Car.unity</code> をダブルクリックする。</li>
<li>[Edit]-[Play] でサンプルを実行する。</li>
</ol>
]]></content>
      <categories>
        <category>3d</category>
      </categories>
      <tags>
        <tag>unity3d</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Make 15.09</title>
    <url>/2015/09/06/Ubuntu-Make-15-09/</url>
    <content><![CDATA[<p>Ubuntu Make は各種開発環境をインストールするためのパッケージです。<br>ディストリビューションのリポジトリとは独立した最新版の開発環境を構築することができます。</p>
<p>Ubuntu wily に、Ubuntu Make 15.09 でサポートされたUnity 3D Editor をインストールしてみました。</p>
<h2 id="Ubuntu-Make-のサポートするパッケージ"><a href="#Ubuntu-Make-のサポートするパッケージ" class="headerlink" title="Ubuntu Make のサポートするパッケージ"></a>Ubuntu Make のサポートするパッケージ</h2><table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">パッケージ</th>
<th align="left">説明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">android</td>
<td align="left">android-studio</td>
<td align="left">Android Studio (default)</td>
</tr>
<tr>
<td align="left">android-ndk</td>
<td align="left">Android NDK</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">dart</td>
<td align="left">dart-sdk</td>
<td align="left">Dart SDK (default)</td>
</tr>
<tr>
<td align="left">ide</td>
<td align="left">arduino</td>
<td align="left">The Arduino Software Distribution</td>
</tr>
<tr>
<td align="left">eclipse</td>
<td align="left">Pure Eclipse Luna (4.4)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">idea</td>
<td align="left">IntelliJ IDEA Community Edition</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">idea-ultimate</td>
<td align="left">IntelliJ IDEA</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">webstorm</td>
<td align="left">WebStorm</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">pycharm</td>
<td align="left">PyCharm Community Edition</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">pycharm-educational</td>
<td align="left">PyCharm Educational Edition</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">pycharm-professional</td>
<td align="left">PyCharm Professional Edition</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">phpstorm</td>
<td align="left">PhpStorm</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">rubymine</td>
<td align="left">Ruby on Rails IDE</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">games</td>
<td align="left">unity3d</td>
<td align="left">Unity 3D Editor Linux experimental support</td>
</tr>
<tr>
<td align="left">go</td>
<td align="left">go-lang</td>
<td align="left">Google compiler (default)</td>
</tr>
<tr>
<td align="left">scala</td>
<td align="left">scala-lang</td>
<td align="left">Scala compiler and interpreter (default)</td>
</tr>
<tr>
<td align="left">web</td>
<td align="left">firefox-dev</td>
<td align="left">Firefox Developer Edition</td>
</tr>
<tr>
<td align="left">visual-studio-code</td>
<td align="left">Visual Studio focused on modern web and cloud</td>
<td align="left"></td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="Ubuntu-Make-のインストール-bash"><a href="#Ubuntu-Make-のインストール-bash" class="headerlink" title="Ubuntu Make のインストール&#96;&#96;&#96; bash"></a>Ubuntu Make のインストール&#96;&#96;&#96; bash</h2><p>$ sudo add-apt-repository ppa:ubuntu-desktop&#x2F;ubuntu-make<br>$ sudo apt-get install ubuntu-make</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## Ubuntu Make の使用法</span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line">usage: umake <span class="comment">[--help]</span> <span class="comment">[-v]</span> <span class="comment">[-r]</span> &#123;go,web,dart,ide,games,android,scala&#125; ...</span><br></pre></td></tr></table></figure>

<h2 id="Unity-3D-Editor-のインストール"><a href="#Unity-3D-Editor-のインストール" class="headerlink" title="Unity 3D Editor のインストール"></a>Unity 3D Editor のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ umake games unity3d</span><br></pre></td></tr></table></figure>

<h2 id="Unity-3D-Editor-のアンインストール"><a href="#Unity-3D-Editor-のアンインストール" class="headerlink" title="Unity 3D Editor のアンインストール"></a>Unity 3D Editor のアンインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ umake -r games unity3d</span><br></pre></td></tr></table></figure>

<h2 id="Ubuntu-Make-からインストールした時の気づき事項"><a href="#Ubuntu-Make-からインストールした時の気づき事項" class="headerlink" title="Ubuntu Make からインストールした時の気づき事項"></a>Ubuntu Make からインストールした時の気づき事項</h2><ul>
<li>インストール&#x2F;アンインストール時に対象パスの問い合わせがあります。</li>
<li>インストール&#x2F;アンインストールの際に<code>Downloading and installing requirements</code> が実行される。</li>
<li>デフォルトのインストール先は<code>~/tools/games/unity3d/</code> です。</li>
<li>メニューは[プログラミング]-[Unity3D Editor]になります。</li>
<li>.desktop ファイルは<code>~/.local/share/applications/unity3d-editor.desktop</code> に作成されました。なお、<em>アンインストールしてもメニューファイルは消えませんでした。</em></li>
<li>Ubuntu Make からインストールした場合、Cairo-Dock のランチャーからの実行が機能しないようです。</li>
<li>新しいバージョンのOS を利用しているなら、Ubuntu Make 経由でない方がシンプルかもしれません。</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>ubuntu-make</tag>
      </tags>
  </entry>
  <entry>
    <title>Proxy Authentication Settings in bash</title>
    <url>/2015/10/19/Proxy-Authentication-Settings-in-bash/</url>
    <content><![CDATA[<p>bash で認証プロキシを使うためのエイリアスを作ってみました。</p>
<p>認証プロキシサーバが<code>proxy.example.com</code> で、ポート番号が<code>8080</code> の場合、以下のように設定します。<br>なお、<code>~/.bash_aliases</code> は<code>~/.bashrc</code> から読み込まれるようになっています。</p>
<figure class="highlight bash"><figcaption><span>~/.bash_aliases</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> proxy=<span class="string">&#x27;read -p &quot;user: &quot; proxy_user &amp;&amp; read -sp &quot;pass: &quot; proxy_pass &amp;&amp; echo &amp;&amp; export &#123;http,https,ftp&#125;_proxy=&quot;http://$proxy_user:$proxy_pass@proxy.example.com:8080&quot;&#x27;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ proxy</span><br><span class="line">user: hoge</span><br><span class="line">pass:</span><br><span class="line">$ <span class="built_in">env</span> | grep proxy</span><br><span class="line">http_proxy=http://hoge:fuga@proxy.example.com:8080</span><br><span class="line">ftp_proxy=http://hoge:fuga@proxy.example.com:8080</span><br><span class="line">https_proxy=http://hoge:fuga@proxy.example.com:8080</span><br></pre></td></tr></table></figure>

<h2 id="sudo-で環境を引き継ぐ場合、-E-を指定します。"><a href="#sudo-で環境を引き継ぐ場合、-E-を指定します。" class="headerlink" title="sudo で環境を引き継ぐ場合、-E を指定します。"></a>sudo で環境を引き継ぐ場合、<code>-E</code> を指定します。</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ proxy</span><br><span class="line">user: hoge</span><br><span class="line">pass:</span><br><span class="line">$ <span class="built_in">sudo</span> -E apt-get update</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>util</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>UEFI Multiboot Windows10, Ubuntu 15.10, Android-x86 5.1</title>
    <url>/2015/11/01/UEFI-Multiboot-Windows10-Ubuntu-15-10-Android-x86-5-1/</url>
    <content><![CDATA[<p>Inspiron 11 3158 (skylake Core i3-6100U, SSD 128GB)を入手したので、マルチブート環境を構築してみました。<br><img src="/images/dell-inspiron-11-3000-modes.jpg" alt="dell-inspiron-11-3000-modes.jpg" title="dell-inspiron-11-3000-modes.jpg"></p>
<span id="more"></span>

<h2 id="Fast-Boot-を抑止"><a href="#Fast-Boot-を抑止" class="headerlink" title="Fast Boot を抑止"></a>Fast Boot を抑止</h2><ol>
<li>Windows ボタンを右クリックして、[電源オプション]押下</li>
<li>[電源ボタンの動作を選択する]押下</li>
<li>[現在利用可能ではない設定を変更します]押下</li>
<li>[高速スタートアップを有効にする(推奨)]のチェックを外し、[変更の保存]押下</li>
<li>Windows 10 をシャットダウンします。</li>
</ol>
<h2 id="Ubuntu-のインストール"><a href="#Ubuntu-のインストール" class="headerlink" title="Ubuntu のインストール"></a>Ubuntu のインストール</h2><ol>
<li><p>以下の64bit 版Ubuntu のISO をUnetbootin でUSB メモリに書き込み、USB スロットに挿入します。<br><a href="http://cdimage.ubuntu.com/ubuntu-gnome/releases/15.10/release/ubuntu-gnome-15.10-desktop-amd64.iso">http://cdimage.ubuntu.com/ubuntu-gnome/releases/15.10/release/ubuntu-gnome-15.10-desktop-amd64.iso</a></p>
</li>
<li><p>USB からUbuntu をライブモードで起動します。<br>PC のボリュームマイナスボタンを押しながら、電源ボタンを押下し、ロゴが出たタイミングでマイナスボタンを離します。</p>
</li>
<li><p>gparted でパーティションのレイアウトを変更します。<br>Ubuntu のインストール用に35GB 程度を確保するために、Windows の領域を縮小して、全体を前方に移動します。<img src="/images/partitions_before.png" alt="partitions_before.png" title="partitions_before.png"></p>
</li>
<li><p>Ubuntu のインストールでは、2つのパーティションを作成します。<br><img src="/images/partitions_after.png" alt="partitions_after.png" title="ppartitions_after.png"></p>
<ul>
<li>ルートパーティション(&#x2F;dev&#x2F;sda6, ext4, 30GB)</li>
<li>swap パーティション(&#x2F;dev&#x2F;sda7, swap, 5GB)</li>
</ul>
</li>
<li><p>ブートローダは、&#x2F;dev&#x2F;sda を指定します。<br>&#x2F;dev&#x2F;sda 配下のEFI パーティション(&#x2F;dev&#x2F;sda1)にブートローダがインストールされます。</p>
</li>
<li><p>再起動します。GRUB に以下が表示されるようになります。</p>
<ul>
<li>Ubuntu</li>
<li>Advanced options for Ubuntu</li>
<li>*Windows Boot Manager (on &#x2F;dev&#x2F;sda1)</li>
<li>System Setup</li>
</ul>
</li>
</ol>
<h2 id="Secureboot-の無効化"><a href="#Secureboot-の無効化" class="headerlink" title="Secureboot の無効化"></a>Secureboot の無効化</h2><ol>
<li>PC を起動し、GRUB 上のSystem Setup を選択します。</li>
<li>Secureboot を無効にします。</li>
</ol>
<h2 id="Android-x86-のインストール"><a href="#Android-x86-のインストール" class="headerlink" title="Android-x86 のインストール"></a>Android-x86 のインストール</h2><ol>
<li>以下の64bit 版Android-x86 のイメージをdd でUSB メモリに書き込み、スロットに挿入します。<br><a href="http://sourceforge.net/projects/android-x86/files/Release%205.1/android-x86_64-5.1-rc1.img/download">http://sourceforge.net/projects/android-x86/files/Release%205.1/android-x86_64-5.1-rc1.img/download</a></li>
<li>PC のボリュームマイナスボタンを押しながら、電源ボタンを押下し、ロゴが出たタイミングでマイナスボタンを離します。</li>
<li>Android-x86 のインストーラが起動されるので、&#x2F;dev&#x2F;sda6 にインストールします。ブートローダはインストールしません。</li>
<li>再起動します。</li>
</ol>
<h2 id="Secureboot-の有効化"><a href="#Secureboot-の有効化" class="headerlink" title="Secureboot の有効化"></a>Secureboot の有効化</h2><ol>
<li>PC を起動し、GRUB 上のSystem Setup を選択します。</li>
<li>Secureboot を有効にします。</li>
</ol>
<h2 id="Android-x86-の起動メニュー追加"><a href="#Android-x86-の起動メニュー追加" class="headerlink" title="Android-x86 の起動メニュー追加"></a>Android-x86 の起動メニュー追加</h2><ol>
<li>Ubuntu で起動し、以下のファイルを編集します。 <figure class="highlight bash"><figcaption><span>/etc/grub.d/40_custom</span></figcaption><table><tr><td class="code"><pre><span class="line">menuentry <span class="string">&quot;Android-x86 5.1&quot;</span> --class android --class os &#123;</span><br><span class="line">    insmod ext2</span><br><span class="line">    <span class="built_in">set</span> root=<span class="string">&#x27;(hd0,6)&#x27;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Loading Android-x86 5.1 ...&#x27;</span></span><br><span class="line">    linux /android-5.1-rc1/kernel quiet root=/dev/ram0 androidboot.hardware=android_x86_64 acpi_sleep=s3_bios,s3_mode SRC=/android-5.1-rc1</span><br><span class="line">    initrd /android-5.1-rc1/initrd.img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>設定を反映します。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> update-grub</span><br></pre></td></tr></table></figure></li>
<li>再起動するとGRUB に以下が表示されるようになります。<ul>
<li>Ubuntu</li>
<li>Advanced options for Ubuntu</li>
<li>*Windows Boot Manager (on &#x2F;dev&#x2F;sda1)</li>
<li>System Setup</li>
<li>Android-x86 5.1</li>
</ul>
</li>
</ol>
<h2 id="Workaround"><a href="#Workaround" class="headerlink" title="Workaround"></a>Workaround</h2><ul>
<li>Inspiron 11 3158 にUbuntu を入れたところ、タッチパッドが有効にならなかったので、以下を参考に設定しました。<br><a href="http://askubuntu.com/questions/592925/dell-inspiron-3551-unresponsive-touchpad">http://askubuntu.com/questions/592925/dell-inspiron-3551-unresponsive-touchpad</a>  <figure class="highlight text"><figcaption><span>/etc/default/grub</span></figcaption><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash i8042.nopnp&quot;</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> update-grub</span><br></pre></td></tr></table></figure>
  <figure class="highlight text"><figcaption><span>/etc/modprobe.d/blacklist-i2c_hid.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">blacklist i2c_hid</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> depmod -a</span><br><span class="line">$ <span class="built_in">sudo</span> update-initramfs -u</span><br></pre></td></tr></table></figure>
  <figure class="highlight text"><figcaption><span>/etc/modules</span></figcaption><table><tr><td class="code"><pre><span class="line">synaptics_i2c</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure></li>
<li>Windows の時刻がずれるので、Ubuntu 上で以下を実行します。  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> hwclock --hctosys --<span class="built_in">local</span></span><br></pre></td></tr></table></figure></li>
<li>カーネルをアップグレードすると(?)、Ubuntu 上でタッチパッドが動作しなくなる  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> update-initramfs -u</span><br><span class="line">$ <span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure></li>
<li>Android 上で無線LAN(RTL8723BE)が有効にならない<br>  有線LAN を使う</li>
</ul>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>inspiron</tag>
      </tags>
  </entry>
  <entry>
    <title>Atom Toolbar</title>
    <url>/2015/12/14/atom-toolbar/</url>
    <content><![CDATA[<p><img src="/images/atom-toolbar.png" alt="atom toolbar"><br><a href="https://atom.io/packages/flex-tool-bar">https://atom.io/packages/flex-tool-bar</a></p>
<p>Atom のツールバーを設定してみました。</p>
<span id="more"></span>

<h2 id="パッケージのインストール"><a href="#パッケージのインストール" class="headerlink" title="パッケージのインストール"></a>パッケージのインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apm install tool-bar flex-tool-bar</span><br></pre></td></tr></table></figure>

<h2 id="ツールバーの内容"><a href="#ツールバーの内容" class="headerlink" title="ツールバーの内容"></a>ツールバーの内容</h2><table>
<thead>
<tr>
<th align="left">コマンド</th>
<th align="left">機能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">application:new-file</td>
<td align="left">新規ファイル</td>
</tr>
<tr>
<td align="left">application:open-file</td>
<td align="left">ファイルを開く</td>
</tr>
<tr>
<td align="left">core:save</td>
<td align="left">保存</td>
</tr>
<tr>
<td align="left">window:reload</td>
<td align="left">再読み込み</td>
</tr>
<tr>
<td align="left">command-palette:toggle</td>
<td align="left">コマンドパレットの開閉</td>
</tr>
<tr>
<td align="left">ktkr3d:datetime</td>
<td align="left">日付時刻の挿入</td>
</tr>
<tr>
<td align="left">settings-view:open</td>
<td align="left">設定</td>
</tr>
<tr>
<td align="left">window:toggle-dev-tools</td>
<td align="left">デべロッパーツール</td>
</tr>
<tr>
<td align="left">pane:split-right</td>
<td align="left">横に分割</td>
</tr>
<tr>
<td align="left">pane:split-down</td>
<td align="left">縦に分割</td>
</tr>
<tr>
<td align="left">tree-view:toggle</td>
<td align="left">ツリービューの開閉</td>
</tr>
<tr>
<td align="left">minimap:toggle</td>
<td align="left">ミニマップの開閉</td>
</tr>
<tr>
<td align="left">git-control:toggle</td>
<td align="left">Git Control の開閉</td>
</tr>
<tr>
<td align="left">merge-conflicts:detect</td>
<td align="left">Merge Conflict</td>
</tr>
<tr>
<td align="left"><a href="http://github.com/">http://github.com</a></td>
<td align="left">URL を開く</td>
</tr>
<tr>
<td align="left">markdown-preview:toggle</td>
<td align="left">マークダウンのプレビュー</td>
</tr>
<tr>
<td align="left">markdown-writer:new-post</td>
<td align="left">ブログの新規ポスト</td>
</tr>
<tr>
<td align="left">markdown-writer:insert-image</td>
<td align="left">画像の挿入</td>
</tr>
<tr>
<td align="left">markdown-writer:insert-table</td>
<td align="left">表の挿入</td>
</tr>
<tr>
<td align="left">markdown-writer:open-cheat-sheet</td>
<td align="left">マークダウンのチートシート表示</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">ツールバーの編集</td>
</tr>
</tbody></table>
<h2 id="ツールバーの設定"><a href="#ツールバーの設定" class="headerlink" title="ツールバーの設定"></a>ツールバーの設定</h2><figure class="highlight cson"><figcaption><span>~/.atom/toolbar.cson</span></figcaption><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&quot;button&quot;</span></span><br><span class="line">    icon: <span class="string">&quot;document&quot;</span></span><br><span class="line">    callback: <span class="string">&quot;application:new-file&quot;</span></span><br><span class="line">    tooltip: <span class="string">&quot;New File (Ctrl+N)&quot;</span></span><br><span class="line">    iconset: <span class="string">&quot;ion&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Open File (Ctrl+O)&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;application:open-file&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;document-text&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;ion&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Save File (Ctrl+S)&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;core:save&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;archive&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;ion&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Reload Window (Alt+Ctrl+R)&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;window:reload&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;refresh&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;ion&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;spacer&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Open Command Pallet (Ctrl+Alt+P)&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;command-palette:toggle&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;terminal&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;fa&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Insert Date Time&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;ktkr3d:datetime&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;clock-o&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;fa&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Open Settings View (Ctrl+Comma)&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;settings-view:open&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;gear-a&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;ion&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Toggle Developer Tools&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;window:toggle-dev-tools&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;bug&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;spacer&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Split screen - Horizontally&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;pane:split-right&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;columns&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;fa&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Split screen - Vertically&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;pane:split-down&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;columns fa-rotate-270&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;fa&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Toggle Fullscreen (F11)&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;window:toggle-full-screen&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;arrows-alt&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;fa&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Toggle Sidebar&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;tree-view:toggle&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;sitemap&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;fa&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;spacer&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Toggle Minimap&#x27;</span></span><br><span class="line">    dependency: <span class="string">&#x27;minimap&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;minimap:toggle&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;map&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;ion&#x27;</span></span><br><span class="line">    style:</span><br><span class="line">      color: <span class="string">&quot;#FA4F28&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Git Control&#x27;</span></span><br><span class="line">    dependency: <span class="string">&#x27;git-control&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;git-control:toggle&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;bullseye&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;fa&#x27;</span></span><br><span class="line">    style:</span><br><span class="line">      color: <span class="string">&quot;#FA4F28&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Merge Conflicts&#x27;</span></span><br><span class="line">    dependency: <span class="string">&#x27;merge-conflicts&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;merge-conflicts:detect&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;code-fork&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;fa&#x27;</span></span><br><span class="line">    style:</span><br><span class="line">      color: <span class="string">&quot;#FA4F28&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&quot;spacer&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&quot;url&quot;</span></span><br><span class="line">    tooltip: <span class="string">&quot;Github Page&quot;</span></span><br><span class="line">    url: <span class="string">&quot;http://github.com&quot;</span></span><br><span class="line">    icon: <span class="string">&quot;octoface&quot;</span></span><br><span class="line">    style:</span><br><span class="line">      color: <span class="string">&quot;#289bfa&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&quot;button&quot;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Markdown Preview (Ctrl+Shift+M)&#x27;</span></span><br><span class="line">    icon: <span class="string">&quot;markdown&quot;</span></span><br><span class="line">    callback: <span class="string">&quot;markdown-preview:toggle&quot;</span></span><br><span class="line">    disable: <span class="string">&quot;!markdown&quot;</span></span><br><span class="line">    style:</span><br><span class="line">      color: <span class="string">&quot;#289bfa&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Markdown Writer: New Post&#x27;</span></span><br><span class="line">    dependency: <span class="string">&#x27;markdown-writer&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;markdown-writer:new-post&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;document&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;ion&#x27;</span></span><br><span class="line">    style:</span><br><span class="line">      color: <span class="string">&quot;#289bfa&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Markdown Writer: Insert Image&#x27;</span></span><br><span class="line">    dependency: <span class="string">&#x27;markdown-writer&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;markdown-writer:insert-image&#x27;</span></span><br><span class="line">    disable: <span class="string">&quot;!markdown&quot;</span></span><br><span class="line">    icon: <span class="string">&#x27;picture-o&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;fa&#x27;</span></span><br><span class="line">    style:</span><br><span class="line">      color: <span class="string">&quot;#289bfa&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Markdown Writer: Insert Table&#x27;</span></span><br><span class="line">    dependency: <span class="string">&#x27;markdown-writer&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;markdown-writer:insert-table&#x27;</span></span><br><span class="line">    disable: <span class="string">&quot;!markdow&quot;</span></span><br><span class="line">    icon: <span class="string">&#x27;table&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;fa&#x27;</span></span><br><span class="line">    style:</span><br><span class="line">      color: <span class="string">&quot;#289bfa&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;button&#x27;</span></span><br><span class="line">    tooltip: <span class="string">&#x27;Markdown Writer: Open Cheat Sheet&#x27;</span></span><br><span class="line">    dependency: <span class="string">&#x27;markdown-writer&#x27;</span></span><br><span class="line">    callback: <span class="string">&#x27;markdown-writer:open-cheat-sheet&#x27;</span></span><br><span class="line">    icon: <span class="string">&#x27;question&#x27;</span></span><br><span class="line">    iconset: <span class="string">&#x27;fa&#x27;</span></span><br><span class="line">    style:</span><br><span class="line">      color: <span class="string">&quot;#289bfa&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;spacer&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Connect to remote virtual machines</title>
    <url>/2015/12/31/Connect-to-remote-virtual-machines/</url>
    <content><![CDATA[<p><a href="https://virt-manager.org/">https://virt-manager.org/</a></p>
<p>KVM で仮想環境を構築して、リモートPC からアクセスしてみました。</p>
<p>ゲストOS の作成と環境設定には仮想マシンマネージャー(virt-manager)を使いました。リモートPC からアクセスしてもサウンドは有効です。</p>
<p>GNOME Boxes からもアクセスできます。</p>
<span id="more"></span>

<p><img src="/images/virt-manager.png" alt="virt-manager"></p>
<h3 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h3><!-- toc -->

<h3 id="システム構成"><a href="#システム構成" class="headerlink" title="システム構成"></a>システム構成</h3><ul>
<li>サーバPC: Ubuntu GNOME 15.10</li>
<li>リモートPC: Ubuntu GNOME 15.10</li>
</ul>
<h3 id="サーバPC-の設定"><a href="#サーバPC-の設定" class="headerlink" title="サーバPC の設定"></a>サーバPC の設定</h3><ol>
<li>パッケージのインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install openssh-server kvm libvirt-bin bridge-utils virt-manager</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="仮想環境の作成"><a href="#仮想環境の作成" class="headerlink" title="仮想環境の作成"></a>仮想環境の作成</h3><p>仮想マシンマネージャー(virt-manager)でサーバPC 上にゲストOS をインストールします。<br>リモートPC の環境が構築済みであれば、リモートPC からでも作業できます。</p>
<ol>
<li>[システムツール]-[仮想マシンマネージャー]を選択</li>
<li>[ファイル]-[新しい仮想マシン]を選択</li>
<li>画面の指示に従ってOS をインストールします。<br> <strong>[管理しているストレージか、他の既存のストレージを選択する]でイメージの格納先とイメージファイル名を指定できます。</strong></li>
<li>[表示]-[詳細]を選択し、「タイトル」を適宜変更します。なお、「名前」の方は半角空白を指定できません。</li>
</ol>
<h3 id="リモートPC-の設定"><a href="#リモートPC-の設定" class="headerlink" title="リモートPC の設定"></a>リモートPC の設定</h3><ol>
<li><p>パッケージのインストール</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install virt-manager</span><br></pre></td></tr></table></figure>
</li>
<li><p>SSH の設定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen</span><br><span class="line">$ ssh-copy-id -i ~/.ssh/id_rsa.pub username@server_hostname</span><br></pre></td></tr></table></figure>
</li>
<li><p>サーバへの接続設定</p>
</li>
<li><p>[システムツール]-[仮想マシンマネージャー]を選択</p>
</li>
<li><p>[ファイル]-[接続を追加]を選択<br>- リモートホストに接続をチェック<br>- ユーザ名を変更<br>- ホスト名にサーバPC を指定</p>
</li>
<li><p>[接続]を押下</p>
</li>
<li><p>仮想マシンの実行</p>
</li>
<li><p>仮想マシンを一覧から選択して、[編集]-[仮想マシンの詳細]を選択</p>
</li>
<li><p>[仮想マシン]の[実行]または[復元]を選択</p>
</li>
<li><p>[表示]-[画面の拡大縮小]-[仮想マシンのウィンドウを自動的にリサイズ]をチェック</p>
</li>
</ol>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><h4 id="virsh-で一覧表示"><a href="#virsh-で一覧表示" class="headerlink" title="virsh で一覧表示"></a>virsh で一覧表示</h4>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ virsh list --all</span><br><span class="line">Id    名前                         状態</span><br><span class="line">-------------------------------------------------- --</span><br><span class="line">-     antergos_2015.12.21            シャットオフ</span><br><span class="line">-     centos_7.0                     シャットオフ</span><br><span class="line">-     debian_8.2.0                   シャットオフ</span><br><span class="line">-     fedora_23                      シャットオフ</span><br><span class="line">-     haiku_r1a4                     シャットオフ</span><br><span class="line">-     kali_2.0                       シャットオフ</span><br><span class="line">-     opensuse_42                    シャットオフ</span><br><span class="line">-     pc-bsd_10.2                    シャットオフ</span><br><span class="line">-     sabayon_15.12                  シャットオフ</span><br><span class="line">-     solus_1.0                      シャットオフ</span><br><span class="line">-     steamos_2.0                    シャットオフ</span><br><span class="line">-     ubuntu_gnome_16.04             シャットオフ</span><br></pre></td></tr></table></figure>

<h4 id="GNOME-Boxes-によるローカル接続"><a href="#GNOME-Boxes-によるローカル接続" class="headerlink" title="GNOME Boxes によるローカル接続"></a>GNOME Boxes によるローカル接続</h4><p>ローカルからGNOME Boxes で仮想マシンに接続できます。 スナップショットも共有されます。<br>  <img src="/images/gnome_boxes_import.png" alt="gnome boxes import"></p>
<h4 id="GNOME-Boxes-によるリモート接続"><a href="#GNOME-Boxes-によるリモート接続" class="headerlink" title="GNOME Boxes によるリモート接続"></a>GNOME Boxes によるリモート接続</h4><p>リモートからGNOME Boxes で仮想マシンに接続するには、以下のようにポートの設定を変更します</p>
<figure class="highlight xml"><figcaption><span>/etc/libvirt/qemu/ubuntu-gnome-1604.xml(変更前)</span></figcaption><table><tr><td class="code"><pre><span class="line">87     <span class="tag">&lt;<span class="name">graphics</span> <span class="attr">type</span>=<span class="string">&#x27;spice&#x27;</span> <span class="attr">autoport</span>=<span class="string">&#x27;yes&#x27;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><figcaption><span>/etc/libvirt/qemu/ubuntu-gnome-1604.xml(変更後)</span></figcaption><table><tr><td class="code"><pre><span class="line">87     <span class="tag">&lt;<span class="name">graphics</span> <span class="attr">type</span>=<span class="string">&#x27;spice&#x27;</span> <span class="attr">port</span>=<span class="string">&#x27;15900&#x27;</span> <span class="attr">autoport</span>=<span class="string">&#x27;no&#x27;</span> <span class="attr">listen</span>=<span class="string">&#x27;0.0.0.0&#x27;</span>&gt;</span></span><br><span class="line">88       <span class="tag">&lt;<span class="name">listen</span> <span class="attr">type</span>=<span class="string">&#x27;address&#x27;</span> <span class="attr">address</span>=<span class="string">&#x27;0.0.0.0&#x27;</span>/&gt;</span></span><br><span class="line">89     <span class="tag">&lt;/<span class="name">graphics</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> virsh define /etc/libvirt/qemu/ubuntu-gnome-1604.xml</span><br></pre></td></tr></table></figure>
<p>その後、virt-manager で仮想マシンを実行状態にしておき、GNOME Boxes 上で接続URI を<code>spice://192.168.0.2:15900</code> として接続します。</p>
<h4 id="qcow2-形式イメージへ変換"><a href="#qcow2-形式イメージへ変換" class="headerlink" title="qcow2 形式イメージへ変換"></a>qcow2 形式イメージへ変換</h4><p>スナップショットを作るためには、qcow2 形式でイメージを作成します。 別の形式から変換する場合は、以下のコマンドを実行します。<br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ qemu-img convert -O qcow2 before-raw.img  after-qcow2.img</span><br></pre></td></tr></table></figure></p>
<h4 id="イメージの移動と再登録"><a href="#イメージの移動と再登録" class="headerlink" title="イメージの移動と再登録"></a>イメージの移動と再登録</h4><p>イメージを移動する場合は、ファイルの移動の他に定義の変更も必要です。<br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mv</span> ubuntu-gnome-1604.img /mnt/VMs/</span><br><span class="line">$ virsh edit ubuntu-gnome-1604</span><br></pre></td></tr></table></figure><br>  <figure class="highlight xml"><figcaption><span>/etc/libvirt/qemu/ubuntu-gnome-1604.xml</span></figcaption><table><tr><td class="code"><pre><span class="line">34     <span class="tag">&lt;<span class="name">disk</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">device</span>=<span class="string">&#x27;disk&#x27;</span>&gt;</span></span><br><span class="line">35       <span class="tag">&lt;<span class="name">driver</span> <span class="attr">name</span>=<span class="string">&#x27;qemu&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;qcow2&#x27;</span>/&gt;</span></span><br><span class="line">36       <span class="tag">&lt;<span class="name">source</span>  <span class="attr">file</span>=<span class="string">&#x27;/mnt/VMs/ubuntu-gnome-1604.img&#x27;</span>/&gt;</span></span><br><span class="line">37       <span class="tag">&lt;<span class="name">target</span> <span class="attr">dev</span>=<span class="string">&#x27;hda&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;ide&#x27;</span>/&gt;</span></span><br><span class="line">38       <span class="tag">&lt;<span class="name">address</span> <span class="attr">type</span>=<span class="string">&#x27;drive&#x27;</span> <span class="attr">controller</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">bus</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">target</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">unit</span>=<span class="string">&#x27;0&#x27;</span>/&gt;</span></span><br><span class="line">39     <span class="tag">&lt;/<span class="name">disk</span>&gt;</span></span><br></pre></td></tr></table></figure><br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> virsh define /etc/libvirt/qemu/ubuntu-gnome-1604.xml</span><br></pre></td></tr></table></figure></p>
<h4 id="Android-から接続"><a href="#Android-から接続" class="headerlink" title="Android から接続"></a>Android から接続</h4><ul>
<li>VM-King<br><a href="https://play.google.com/store/apps/details?id=com.sparrow_devs.VMKing">https://play.google.com/store/apps/details?id=com.sparrow_devs.VMKing</a></li>
<li>aSPICE: Secure SPICE Client<br><a href="https://play.google.com/store/apps/details?id=com.iiordanov.freeaSPICE&hl=ja">https://play.google.com/store/apps/details?id=com.iiordanov.freeaSPICE&amp;hl=ja</a></li>
</ul>
]]></content>
      <categories>
        <category>vm</category>
      </categories>
      <tags>
        <tag>vm</tag>
        <tag>virt-manager</tag>
      </tags>
  </entry>
  <entry>
    <title>Fedora Rawhide</title>
    <url>/2016/01/04/Fedora-rawhide/</url>
    <content><![CDATA[<p><img src="/images/fedora_rawhide.png" alt="fedora_rawhide"><br><a href="https://fedoraproject.org/wiki/Releases/Rawhide">https://fedoraproject.org/wiki/Releases/Rawhide</a><br><a href="https://fedoraproject.org/wiki/DNF_system_upgrade">https://fedoraproject.org/wiki/DNF_system_upgrade</a></p>
<p>新しいGNOME 3.20(3.19)を試すために、Fedora Rawhide の仮想環境を構築してみました。<br>私がダウンロードした日のFedora Rawhide のライブISO ではインストーラが途中で止まってしまったので、Fedora 23 の環境からアップグレードしました。</p>
<span id="more"></span>

<h2 id="Fedora-23-のインストール"><a href="#Fedora-23-のインストール" class="headerlink" title="Fedora 23 のインストール"></a>Fedora 23 のインストール</h2><p><a href="https://getfedora.org/ja/workstation/download/">https://getfedora.org/ja/workstation/download/</a></p>
<h2 id="Fedora-Rawhide-へのアップグレード"><a href="#Fedora-Rawhide-へのアップグレード" class="headerlink" title="Fedora Rawhide へのアップグレード"></a>Fedora Rawhide へのアップグレード</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> dnf update --refresh</span><br><span class="line">$ <span class="built_in">sudo</span> dnf install dnf-plugin-system-upgrade</span><br><span class="line">$ <span class="built_in">sudo</span> dnf system-upgrade download --releasever=rawhide --nogpgcheck</span><br><span class="line">$ <span class="built_in">sudo</span> dnf system-upgrade reboot --nogpgcheck</span><br></pre></td></tr></table></figure>
<h2 id="最低限の環境設定"><a href="#最低限の環境設定" class="headerlink" title="最低限の環境設定"></a>最低限の環境設定</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ LANG=C xdg-user-dirs-gtk-update</span><br><span class="line">$ gsettings <span class="built_in">set</span> org.gnome.shell disable-extension-version-validation <span class="string">&quot;true&quot;</span></span><br><span class="line">$ <span class="built_in">sudo</span> dnf install guake</span><br></pre></td></tr></table></figure>

<h2 id="GNOME-Shell-のカスタマイズ"><a href="#GNOME-Shell-のカスタマイズ" class="headerlink" title="GNOME Shell のカスタマイズ"></a>GNOME Shell のカスタマイズ</h2><ul>
<li>Activities Configurator<br><a href="https://extensions.gnome.org/extension/358/activities-configurator/">https://extensions.gnome.org/extension/358/activities-configurator/</a></li>
<li>Dash to Dock<br><a href="https://extensions.gnome.org/extension/307/dash-to-dock/">https://extensions.gnome.org/extension/307/dash-to-dock/</a></li>
</ul>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>fedora</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu GNOME 16.04 + GNOME 3.19.3</title>
    <url>/2016/01/11/Ubuntu-GNOME-16-04-GNOME-3-19-3/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_gnome_16.04_gnome_3.19.3.png" alt="ubuntu_gnome_16.04_gnome_3.19.3"><br><a href="http://cdimage.ubuntu.com/ubuntu-gnome/daily-live/">http://cdimage.ubuntu.com/ubuntu-gnome/daily-live/</a><br><a href="https://launchpad.net/~gnome3-team/+archive/ubuntu/gnome3?field.series_filter=xenial">https://launchpad.net/~gnome3-team/+archive/ubuntu/gnome3?field.series_filter=xenial</a><br><a href="https://launchpad.net/~gnome3-team/+archive/ubuntu/gnome3-staging?field.series_filter=xenial">https://launchpad.net/~gnome3-team/+archive/ubuntu/gnome3-staging?field.series_filter=xenial</a><br>Ubuntu GNOME 16.04 のデイリービルドにppa:gnome3-team&#x2F;gnome3-staging を適用してGNOME Shell 3.19.3 の環境を構築してみました。gdm3 の更新版が公開されていないので、ディスプレイマネージャをlightdm に切り替えました。</p>
<p>EDIT:<br>gdm3 はppa:ricotz&#x2F;testing で提供されていました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:ricotz/testing</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get dist-upgrade</span><br><span class="line">$ <span class="built_in">sudo</span> dpkg-reconfigure gdm3</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="Ubuntu-GNOME-16-04-Xenial-デイリービルドのインストール"><a href="#Ubuntu-GNOME-16-04-Xenial-デイリービルドのインストール" class="headerlink" title="Ubuntu GNOME 16.04 Xenial デイリービルドのインストール"></a>Ubuntu GNOME 16.04 Xenial デイリービルドのインストール</h2><p><a href="http://cdimage.ubuntu.com/ubuntu-gnome/daily-live/">http://cdimage.ubuntu.com/ubuntu-gnome/daily-live/</a></p>
<h2 id="gnome3-team-のPPA-を適用"><a href="#gnome3-team-のPPA-を適用" class="headerlink" title="gnome3-team のPPA を適用"></a>gnome3-team のPPA を適用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:gnome3-team/gnome3</span><br><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:gnome3-team/gnome3-staging</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get dist-upgrade</span><br></pre></td></tr></table></figure>

<h2 id="lightdm-の適用"><a href="#lightdm-の適用" class="headerlink" title="lightdm の適用"></a>lightdm の適用</h2><p>リリース前のUbuntu ではGDM が原因でログインできないことがよくあるので、暫定的にLightDM に切り替えます。GDM からログインできなくなってしまった場合は、Ctrl-Alt-F1 からログインしてインストールを実行します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install lightdm</span><br></pre></td></tr></table></figure>

<p>GDM とLightDM のどちらを選択するかの問い合わせではlightdm を選択します。</p>
<h2 id="再起動"><a href="#再起動" class="headerlink" title="再起動"></a>再起動</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ reboot</span><br></pre></td></tr></table></figure>

<h2 id="最低限の環境設定"><a href="#最低限の環境設定" class="headerlink" title="最低限の環境設定"></a>最低限の環境設定</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ LANG=C xdg-user-dirs-gtk-update</span><br><span class="line">$ gsettings <span class="built_in">set</span> org.gnome.shell disable-extension-version-validation <span class="string">&quot;true&quot;</span></span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install guake</span><br></pre></td></tr></table></figure>

<h2 id="GNOME-Shell-のカスタマイズ"><a href="#GNOME-Shell-のカスタマイズ" class="headerlink" title="GNOME Shell のカスタマイズ"></a>GNOME Shell のカスタマイズ</h2><ul>
<li>Activities Configurator<br><a href="https://extensions.gnome.org/extension/358/activities-configurator/">https://extensions.gnome.org/extension/358/activities-configurator/</a></li>
<li>Dash to Dock<br><a href="https://extensions.gnome.org/extension/307/dash-to-dock/">https://extensions.gnome.org/extension/307/dash-to-dock/</a></li>
</ul>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>ubuntu-gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>Antergos + GNOME 3.19</title>
    <url>/2016/01/15/Antergos-GNOME-3-19/</url>
    <content><![CDATA[<p><img src="/images/antergos_gnome_3.19.png" alt="antergos_gnome_3.19"><br><a href="http://softwareperonista.com.ar/repo/archlinux/gnome-devel/">http://softwareperonista.com.ar/repo/archlinux/gnome-devel/</a></p>
<p>Arch Linux の派生ディストリビューションAntergos Linux のGNOME を3.18 から3.19 にアップグレードしてみました。</p>
<span id="more"></span>

<h3 id="gnome-devel-リポジトリの追加"><a href="#gnome-devel-リポジトリの追加" class="headerlink" title="gnome-devel リポジトリの追加"></a>gnome-devel リポジトリの追加</h3><figure class="highlight ini"><figcaption><span>/etc/pacman.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[gnome-devel]</span></span><br><span class="line"><span class="attr">SigLevel</span> = Optional TrustAll</span><br><span class="line"><span class="attr">Server</span> = http://softwareperonista.com.ar/repo/archlinux/gnome-devel/x<span class="number">86_64</span></span><br></pre></td></tr></table></figure>
<p><code>[gnome-devel]</code>行は、既存の<code>[core]</code>行より上に追加すると優先されるようです。</p>
<h3 id="gnome-devel-キーの取り込み"><a href="#gnome-devel-キーの取り込み" class="headerlink" title="gnome-devel キーの取り込み"></a>gnome-devel キーの取り込み</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://softwareperonista.com.ar/repo/archlinux/gnome-devel/gnome-devel.key</span><br><span class="line">$ <span class="built_in">sudo</span> pacman-key --add gnome-devel.key</span><br></pre></td></tr></table></figure>

<h3 id="パッケージのアップグレード"><a href="#パッケージのアップグレード" class="headerlink" title="パッケージのアップグレード"></a>パッケージのアップグレード</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> pacman -Syy</span><br><span class="line">$ <span class="built_in">sudo</span> pacman -Syu</span><br></pre></td></tr></table></figure>

<p>すべてのパッケージをアップグレードすることによって不具合がある場合は、パッケージを選択してインストールします。</p>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>antergos</tag>
      </tags>
  </entry>
  <entry>
    <title>GNOME Software on Ubuntu GNOME 16.04</title>
    <url>/2016/01/16/GNOME-Software-on-Ubuntu-GNOME-16-04/</url>
    <content><![CDATA[<p><img src="/images/gnome-software.png" alt="gnome-software"><br><a href="https://launchpad.net/~ubuntu-desktop/+archive/ubuntu/gnome-software">https://launchpad.net/~ubuntu-desktop/+archive/ubuntu/gnome-software</a></p>
<p>Ubuntu 16.04 ではUbuntu ソフトウェアセンター(software-center)に代わってGNOME ソフトウェア(gnome-software)がデフォルトになるようですね。<br>試してみました。</p>
<span id="more"></span>

<h3 id="GNOME-ソフトウェアのインストール"><a href="#GNOME-ソフトウェアのインストール" class="headerlink" title="GNOME ソフトウェアのインストール"></a>GNOME ソフトウェアのインストール</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:ubuntu-desktop/gnome-software</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install gnome-software</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>Resize KVM Virtual Disk</title>
    <url>/2016/01/16/resize-kvm-virtual-disk/</url>
    <content><![CDATA[<p><img src="/images/resize-kvm-disk.png" alt="resize-kvm-disk"><br>KVM の仮想マシンのディスク空き容量が少なくなってきたので、ディスク容量を8GBから10GBに拡張しました。</p>
<span id="more"></span>
<h3 id="スナップショットの削除"><a href="#スナップショットの削除" class="headerlink" title="スナップショットの削除"></a>スナップショットの削除</h3><p>仮想マシンを停止した後に、仮想マシンマネージャーでスナップショットを削除します。<br>スナップショットがあるとディスク容量を拡張できないようです。</p>
<h3 id="仮想イメージファイルの拡張"><a href="#仮想イメージファイルの拡張" class="headerlink" title="仮想イメージファイルの拡張"></a>仮想イメージファイルの拡張</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> qemu-img resize ubuntu-gnome-16.04.img 10G</span><br><span class="line">Image resized.</span><br></pre></td></tr></table></figure>
<p>絶対値の場合は10GBのように指定し、相対値の場合は+2GBのように偏差を指定します。</p>
<h3 id="Live-ISO-起動に設定変更"><a href="#Live-ISO-起動に設定変更" class="headerlink" title="Live ISO 起動に設定変更"></a>Live ISO 起動に設定変更</h3><p>仮想マシンマネージャーで、gparted を含むLive ISO で起動するように設定変更します。</p>
<ul>
<li>デバイス<code>IDE CDROM 1</code>で、ソースパスにISO イメージを接続します。<br>私はUbuntu GNOME 16.04 のISO を使用しました。</li>
<li><code>Boot Options</code>で、起動デバイスを<code>IDE CDROM 1</code>にします。</li>
</ul>
<h3 id="パーティションを変更"><a href="#パーティションを変更" class="headerlink" title="パーティションを変更"></a>パーティションを変更</h3><p>仮想マシンをLive ISO で起動し、gparted でパーティションを変更して、仮想マシンをシャットダウンします。<br>私はルートパーティションを+2GB 拡張しました。</p>
<h3 id="HDD-起動に設定変更"><a href="#HDD-起動に設定変更" class="headerlink" title="HDD 起動に設定変更"></a>HDD 起動に設定変更</h3><p>仮想マシンマネージャーでHDD から起動するように設定を戻して仮想マシンを起動します。</p>
<ul>
<li><code>Boot Options</code>で、起動デバイスを<code>IDE Disk 1</code>に戻します。</li>
</ul>
]]></content>
      <categories>
        <category>vm</category>
      </categories>
      <tags>
        <tag>kvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 16.04 LTS Daily Build on Inspiron 3158</title>
    <url>/2016/01/23/Ubuntu-16-04-LTS-Daily-Build-on-Inspiron-3158/</url>
    <content><![CDATA[<p><img src="/images/ubuntu-gnome-16.04-screen-rotation-lock.png" alt="ubuntu-gnome-16.04-screen-rotation-lock"></p>
<p>Ubuntu 16.04 LTS Daily Build をDELL Inspiron 11 3158 にインストールしてみました。</p>
<p>GNOME Shell 3.20(3.19.x)では、画面回転のロックボタン(右から3番目)が付きました。<br>ロックを解除した状態でPC本体を傾けると画面が回転します。ロックを有効にした状態では、画面は回転しません。</p>
<pre><code>https://ossnews.net/s/dtuuxr/mutter_3_19_4
- Support screen rotation when supported by the driver [Carlos; #745079]
</code></pre>
<span id="more"></span>

<h3 id="Ubuntu-GNOME-16-04-のインストール"><a href="#Ubuntu-GNOME-16-04-のインストール" class="headerlink" title="Ubuntu GNOME 16.04 のインストール"></a>Ubuntu GNOME 16.04 のインストール</h3><p><a href="http://cdimage.ubuntu.com/ubuntu-gnome/daily-live/current/">http://cdimage.ubuntu.com/ubuntu-gnome/daily-live/current/</a></p>
<ul>
<li>corebird が標準リポジトリに追加されたらしい</li>
</ul>
<h3 id="GNOME-3-20-3-19-x-への更新"><a href="#GNOME-3-20-3-19-x-への更新" class="headerlink" title="GNOME 3.20(3.19.x) への更新"></a>GNOME 3.20(3.19.x) への更新</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:gnome3-team/gnome3</span><br><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:gnome3-team/gnome3-staging</span><br><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:ricotz/testing</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get dist-upgrade</span><br></pre></td></tr></table></figure>

<h3 id="その他の設定"><a href="#その他の設定" class="headerlink" title="その他の設定"></a>その他の設定</h3><p><a href="http://ktkr3d.github.io/linux/">http://ktkr3d.github.io/linux/</a></p>
]]></content>
  </entry>
  <entry>
    <title>KDE Neon</title>
    <url>/2016/02/13/KDE-Neon/</url>
    <content><![CDATA[<p><img src="/images/kde-neon.png" alt="KDE Neon"><br><a href="http://neon.kde.org.uk/">http://neon.kde.org.uk/</a></p>
<p>KDE Neon をインストールしてみました。</p>
<span id="more"></span>

<h2 id="Kubuntu-15-10-のインストール"><a href="#Kubuntu-15-10-のインストール" class="headerlink" title="Kubuntu 15.10 のインストール"></a>Kubuntu 15.10 のインストール</h2><p><a href="http://cdimage.ubuntu.com/kubuntu/releases/15.10/release/">http://cdimage.ubuntu.com/kubuntu/releases/15.10/release/</a></p>
<h2 id="KDE-Neon-リポジトリの追加"><a href="#KDE-Neon-リポジトリの追加" class="headerlink" title="KDE Neon リポジトリの追加"></a>KDE Neon リポジトリの追加</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -qO - <span class="string">&#x27;http://archive.neon.kde.org.uk/public.key&#x27;</span> | <span class="built_in">sudo</span> apt-key add -</span><br><span class="line">$ <span class="built_in">sudo</span> apt-add-repository http://archive.neon.kde.org.uk/unstable</span><br><span class="line">$ <span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure>

<h2 id="KDE-Neon-のインストール"><a href="#KDE-Neon-のインストール" class="headerlink" title="KDE Neon のインストール"></a>KDE Neon のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install neon-desktop</span><br><span class="line">$ <span class="built_in">sudo</span> apt full-upgrade</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>kde</tag>
      </tags>
  </entry>
  <entry>
    <title>LightDM theme Antergos</title>
    <url>/2016/03/12/LightDM-theme-Antergos/</url>
    <content><![CDATA[<p><img src="/images/lightdm-antergos3.png" alt="LightDM Antergos"><br><a href="http://swlx.cubava.cu/colocar-una-pantalla-de-inicio-de-sesion-con-estilo-twitter-bootstrap-en-lightdm/">http://swlx.cubava.cu/colocar-una-pantalla-de-inicio-de-sesion-con-estilo-twitter-bootstrap-en-lightdm/</a><br><a href="https://github.com/Antergos/lightdm-webkit-theme-antergos">https://github.com/Antergos/lightdm-webkit-theme-antergos</a><br>Arch Linux 系のディストリビューションであるAntergos のLightDM WebKit テーマをUbuntu GNOME 16.04 で使ってみました。</p>
<span id="more"></span>

<h2 id="パッケージのインストール"><a href="#パッケージのインストール" class="headerlink" title="パッケージのインストール"></a>パッケージのインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install lightdm lightdm-webkit-greeter</span><br></pre></td></tr></table></figure>

<h2 id="LightDM-WebKit-Greeter-の有効化"><a href="#LightDM-WebKit-Greeter-の有効化" class="headerlink" title="LightDM WebKit Greeter の有効化"></a>LightDM WebKit Greeter の有効化</h2><figure class="highlight bash"><figcaption><span>/etc/lightdm/lightdm.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">greeter-session=lightdm-webkit-greeter</span><br></pre></td></tr></table></figure>

<h2 id="テーマのインストール"><a href="#テーマのインストール" class="headerlink" title="テーマのインストール"></a>テーマのインストール</h2><p><a href="http://gutl.jovenclub.cu/wp-content/ftp/ftp-gutl/soft/Artwork/lightdm-webkit-theme-antergos-plus-wallpapers.tar.gz">http://gutl.jovenclub.cu/wp-content/ftp/ftp-gutl/soft/Artwork/lightdm-webkit-theme-antergos-plus-wallpapers.tar.gz</a></p>
<ul>
<li>&#x2F;usr&#x2F;share&#x2F;antergos&#x2F;wallpapers&#x2F;*</li>
<li>&#x2F;usr&#x2F;share&#x2F;gnome-background-properties&#x2F;antergos-backgrounds-4-3.xml</li>
<li>&#x2F;usr&#x2F;share&#x2F;lightdm-webkit&#x2F;themes&#x2F;webkit&#x2F;*</li>
</ul>
<h2 id="背景画像の選択"><a href="#背景画像の選択" class="headerlink" title="背景画像の選択"></a>背景画像の選択</h2><p><img src="/images/lightdm-antergos.png" alt="LightDM Antergos"></p>
<p><img src="/images/lightdm-antergos2.png" alt="LightDM Antergos Wallpaper"></p>
<h2 id="アイコン画像のカスタマイズ"><a href="#アイコン画像のカスタマイズ" class="headerlink" title="アイコン画像のカスタマイズ"></a>アイコン画像のカスタマイズ</h2><p>&#x2F;usr&#x2F;share&#x2F;lightdm-webkit&#x2F;themes&#x2F;webkit&#x2F;img&#x2F;antergos.png<br>&#x2F;usr&#x2F;share&#x2F;lightdm-webkit&#x2F;themes&#x2F;webkit&#x2F;img&#x2F;antergos-logo-user.png</p>
<h2 id="解像度の変更"><a href="#解像度の変更" class="headerlink" title="解像度の変更"></a>解像度の変更</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ xrandr</span><br><span class="line">Screen 0: minimum 8 x 8, current 1680 x 1050, maximum 16384 x 16384</span><br><span class="line">DVI-I-0 disconnected (normal left inverted right x axis y axis)</span><br><span class="line">VGA-0 disconnected (normal left inverted right x axis y axis)</span><br><span class="line">DVI-I-1 disconnected (normal left inverted right x axis y axis)</span><br><span class="line">HDMI-0 connected primary 1680x1050+0+0 (normal left inverted right x axis y axis) 470mm x 300mm</span><br><span class="line">   1280x1024     60.02 +  75.02  </span><br><span class="line">   1680x1050     59.95*   59.88  </span><br><span class="line">   1440x900      59.89  </span><br><span class="line">   1024x768      75.03    70.07    60.00  </span><br><span class="line">   800x600       75.00    72.19    60.32    56.25  </span><br><span class="line">   640x480       75.00    72.81    59.94  </span><br><span class="line">DVI-I-2 disconnected (normal left inverted right x axis y axis)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><figcaption><span>/etc/lightdm/lightdm.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">greeter-session=lightdm-webkit-greeter</span><br><span class="line">display-setup-script=/usr/bin/xrandr --output HDMI-0 --auto</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>antergos</tag>
        <tag>lightdm</tag>
      </tags>
  </entry>
  <entry>
    <title>GitBucket</title>
    <url>/2016/03/13/GitBucket/</url>
    <content><![CDATA[<p><img src="/images/gitbucket.png" alt="GitBucket"><br><a href="https://github.com/gitbucket/gitbucket">https://github.com/gitbucket/gitbucket</a><br>GitHub のようなインタフェースのリポジトリ管理サイト構築ツールGitBucket を使ってみました。</p>
<span id="more"></span>

<h2 id="JRE-のインストール"><a href="#JRE-のインストール" class="headerlink" title="JRE のインストール"></a>JRE のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install default-jre</span><br></pre></td></tr></table></figure>
<p>GitBucket の動作にはJava8 が必要とのことです。</p>
<h2 id="GitBucket-のダウンロード"><a href="#GitBucket-のダウンロード" class="headerlink" title="GitBucket のダウンロード"></a>GitBucket のダウンロード</h2><p><a href="https://github.com/gitbucket/gitbucket/releases">https://github.com/gitbucket/gitbucket/releases</a></p>
<h2 id="プラグインのインストール"><a href="#プラグインのインストール" class="headerlink" title="プラグインのインストール"></a>プラグインのインストール</h2><p><a href="http://gitbucket-plugins.github.io/">http://gitbucket-plugins.github.io/</a> からダウンロードして、<code>~/.gitbucket/plugins/</code> に格納する。</p>
<ul>
<li><a href="https://github.com/gitbucket/gitbucket-gist-plugin/releases">https://github.com/gitbucket/gitbucket-gist-plugin/releases</a></li>
<li><a href="https://github.com/yaroot/gitbucket-pages-plugin/releases">https://github.com/yaroot/gitbucket-pages-plugin/releases</a></li>
</ul>
<h2 id="GitBucket-の起動"><a href="#GitBucket-の起動" class="headerlink" title="GitBucket の起動"></a>GitBucket の起動</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ java -jar gitbucket.war --port=18080</span><br></pre></td></tr></table></figure>

<pre><code>--port=[NUMBER]
--prefix=[CONTEXTPATH]
--host=[HOSTNAME]
--gitbucket.home=[DATA_DIR]
</code></pre>
<h2 id="GitBucket-へアクセス"><a href="#GitBucket-へアクセス" class="headerlink" title="GitBucket へアクセス"></a>GitBucket へアクセス</h2><p><code>http://localhost:18080/</code> をブラウザで開く。</p>
<p>初回はroot&#x2F;root でログインする。</p>
<h2 id="SSH-アクセスの有効化"><a href="#SSH-アクセスの有効化" class="headerlink" title="SSH アクセスの有効化"></a>SSH アクセスの有効化</h2><p><code>System administration</code> - <code>System settings</code></p>
<table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Base URL</td>
<td align="left"><a href="http://localhost:18080/">http://localhost:18080</a></td>
</tr>
<tr>
<td align="left">Enable SSH access to git repository</td>
<td align="left">Checked</td>
</tr>
<tr>
<td align="left">SSH Host</td>
<td align="left">localhost</td>
</tr>
<tr>
<td align="left">SSH Port</td>
<td align="left">10022</td>
</tr>
</tbody></table>
<h2 id="アカウントの追加"><a href="#アカウントの追加" class="headerlink" title="アカウントの追加"></a>アカウントの追加</h2><p>右上のアイコンから<code>System administration</code>を選択する。<br>User Management で<code>New User</code>を選択する。</p>
<h2 id="git-ユーザの設定"><a href="#git-ユーザの設定" class="headerlink" title="git ユーザの設定"></a>git ユーザの設定</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;me&quot;</span></span><br><span class="line">$ git config --global user.email me@mail_domain_name</span><br></pre></td></tr></table></figure>

<h2 id="SSH-Key-の登録"><a href="#SSH-Key-の登録" class="headerlink" title="SSH Key の登録"></a>SSH Key の登録</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure>

<p>登録したユーザアカウントでログインして、<code>Account settings</code> - <code>SSH Keys</code></p>
<table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Title</td>
<td align="left">任意の名称</td>
</tr>
<tr>
<td align="left">Key</td>
<td align="left">~&#x2F;.ssh&#x2F;id_rsa.pub の中身を貼り付け</td>
</tr>
</tbody></table>
<h2 id="リポジトリの作成"><a href="#リポジトリの作成" class="headerlink" title="リポジトリの作成"></a>リポジトリの作成</h2><p><code>New repository</code> ボタンを押下する。</p>
<h2 id="リポジトリのクローン"><a href="#リポジトリのクローン" class="headerlink" title="リポジトリのクローン"></a>リポジトリのクローン</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> http://localhost:18080/git/me/my-repo.git</span><br><span class="line">Cloning into <span class="string">&#x27;my-repo&#x27;</span>...</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">&#x27;http://localhost:18080&#x27;</span>: me</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">&#x27;http://me@localhost:18080&#x27;</span>:</span><br></pre></td></tr></table></figure>

<p>または、</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> ssh://me@localhost:10022/me/my-repo.git</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gitbucket</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian noroot</title>
    <url>/2016/03/20/Debian-noroot/</url>
    <content><![CDATA[<p><img src="/images/debian-noroot-android.png" alt="Debian noroot"><br><a href="https://play.google.com/store/apps/details?id=com.cuntubuntu&hl=ja">https://play.google.com/store/apps/details?id=com.cuntubuntu&amp;hl=ja</a><br>Android 端末にDebian をインストールしてみました。chroot なのでROOT 化は不要です。</p>
<span id="more"></span>

<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p><a href="https://play.google.com/store/apps/details?id=com.cuntubuntu&hl=ja">https://play.google.com/store/apps/details?id=com.cuntubuntu&amp;hl=ja</a></p>
<h2 id="解像度とフォントサイズの指定"><a href="#解像度とフォントサイズの指定" class="headerlink" title="解像度とフォントサイズの指定"></a>解像度とフォントサイズの指定</h2><h2 id="キーボードの導入"><a href="#キーボードの導入" class="headerlink" title="キーボードの導入"></a>キーボードの導入</h2><h2 id="タスクバーの設定"><a href="#タスクバーの設定" class="headerlink" title="タスクバーの設定"></a>タスクバーの設定</h2><h2 id="ブラウザのインストール"><a href="#ブラウザのインストール" class="headerlink" title="ブラウザのインストール"></a>ブラウザのインストール</h2><h2 id="日本語化"><a href="#日本語化" class="headerlink" title="日本語化"></a>日本語化</h2>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio Code and C/C++ Extension</title>
    <url>/2016/04/08/Visual-Studio-Code-C-C-extension/</url>
    <content><![CDATA[<p><img src="/images/vscode.png" alt="Visual Studio Code"></p>
<ul>
<li><a href="https://blogs.msdn.microsoft.com/vcblog/2016/03/31/cc-extension-for-visual-studio-code/">https://blogs.msdn.microsoft.com/vcblog/2016/03/31/cc-extension-for-visual-studio-code/</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools</a></li>
</ul>
<p>Visual Studio Code とC&#x2F;C++ 拡張をUbuntu 14.04 にインストールして、C&#x2F;C++ のHelloWorld をデバッガでステップ実行してみました。</p>
<span id="more"></span>

<h2 id="Ubuntu-Make-用PPA-の追加"><a href="#Ubuntu-Make-用PPA-の追加" class="headerlink" title="Ubuntu Make 用PPA の追加"></a>Ubuntu Make 用PPA の追加</h2><p>Ubuntu 14.04 の場合はPPA を追加します。Ubuntu 16.04 の場合は不要です。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:ubuntu-desktop/ubuntu-make</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>

<h2 id="Ubuntu-Make-のインストール"><a href="#Ubuntu-Make-のインストール" class="headerlink" title="Ubuntu Make のインストール"></a>Ubuntu Make のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install ubuntu-make</span><br></pre></td></tr></table></figure>

<h2 id="Visual-Studio-Code-のインストール"><a href="#Visual-Studio-Code-のインストール" class="headerlink" title="Visual Studio Code のインストール"></a>Visual Studio Code のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ umake ide visual-studio-code</span><br></pre></td></tr></table></figure>

<p>デフォルトでは、<code>~/.local/share/umake/ide/visual-studio-code/</code> にインストールされます。</p>
<h2 id="Visual-Studio-Code-の起動"><a href="#Visual-Studio-Code-の起動" class="headerlink" title="Visual Studio Code の起動"></a>Visual Studio Code の起動</h2><p>[プログラミング]-[Visual Studio Code] メニューを選択</p>
<h2 id="C-C-拡張のインストール"><a href="#C-C-拡張のインストール" class="headerlink" title="C&#x2F;C++ 拡張のインストール"></a>C&#x2F;C++ 拡張のインストール</h2><ol>
<li>[View]-[Command Palette] を選択</li>
<li><code>ext install cpptools</code> を入力</li>
<li>ダウンロードアイコンをクリックしてインストール</li>
<li><code>Restart Now</code> ボタンを押下</li>
<li>C++ デバッガの依存パッケージが更新され完了です。</li>
</ol>
<p>拡張は<code>~/.vscode/extensions/ms-vscode.cpptools-0.4.2</code>にインストールされました。</p>
<h2 id="サンプルソースの作成"><a href="#サンプルソースの作成" class="headerlink" title="サンプルソースの作成"></a>サンプルソースの作成</h2><p>[File]-[Open Folder]メニュー選択後、ダイアログでプロジェクト用のフォルダー<code>test</code>を作成しました。<br>以下のファイルを追加します。</p>
<figure class="highlight c"><figcaption><span>~/test/test.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="インクルードパスの設定"><a href="#インクルードパスの設定" class="headerlink" title="インクルードパスの設定"></a>インクルードパスの設定</h2><p><code>#include</code> 文の下に警告マークが表示されるので、クリックすると以下のファイルが作成されます。</p>
<figure class="highlight json"><figcaption><span>~/test/.vscode/c_cpp_properties.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mac&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/usr/include&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/usr/include&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win32&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;c:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="ビルドタスクの設定"><a href="#ビルドタスクの設定" class="headerlink" title="ビルドタスクの設定"></a>ビルドタスクの設定</h2><p><a href="https://code.visualstudio.com/Docs/editor/tasks#_defining-a-problem-matcher">https://code.visualstudio.com/Docs/editor/tasks#_defining-a-problem-matcher</a></p>
<figure class="highlight json"><figcaption><span>~/test/.vscode/tasks.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;-Wall&quot;</span><span class="punctuation">,</span> <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span> <span class="string">&quot;-O0&quot;</span><span class="punctuation">,</span> <span class="string">&quot;test.c&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fileLocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;relative&quot;</span><span class="punctuation">,</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;regexp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;severity&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>F1</code>でコマンドパレットを表示し、<code>&gt;build</code>と入力すると、<code>Tasks: Run Build Task</code> という候補がでるので、実行する。</p>
<h2 id="デバッガ起動の設定"><a href="#デバッガ起動の設定" class="headerlink" title="デバッガ起動の設定"></a>デバッガ起動の設定</h2><figure class="highlight json"><figcaption><span>~/test/.vscode/launch.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C++ Launch (GDB)&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;launchOptionType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Local&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;targetArchitecture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;/a.out&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C++ Attach (GDB)&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;launchOptionType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Local&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;targetArchitecture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;/a.out&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;processId&quot;</span><span class="punctuation">:</span> <span class="number">100000</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>左のツールバーの4番めのデバッグアイコンをクリックして、▶ボタンを押すとデバッガが起動します。<br>ソースコード上で<code>F9</code>押下でブレークポイントの設定&#x2F;解除ができます。</p>
<hr>
<p>ここからはUbuntu 16.04 へのインストールの試行メモです。</p>
<h2 id="C-C-拡張のインストール-1"><a href="#C-C-拡張のインストール-1" class="headerlink" title="C&#x2F;C++ 拡張のインストール"></a>C&#x2F;C++ 拡張のインストール</h2><p>Ubuntu 14.04 以外のUbutu のバージョンの場合は手動でインストールします。<br><a href="https://github.com/dotnet/cli/#user-content-ubuntu-installers">https://github.com/dotnet/cli/#user-content-ubuntu-installers</a></p>
<ol>
<li>Gdebi のインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install gdebi</span><br></pre></td></tr></table></figure></li>
<li>dotnet の依存するlibicu52 をダウンロード <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://security.ubuntu.com/ubuntu/pool/main/i/icu/libicu52_52.1-8ubuntu0.2_amd64.deb</span><br></pre></td></tr></table></figure></li>
<li>dotnet-cli のDEB パッケージをダウンロードします。  <ul>
<li>Shared Host</li>
<li>Shared Framework</li>
<li>Sdk</li>
</ul>
</li>
<li>DEB パッケージをインストールします。   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> gdebi *.deb</span><br></pre></td></tr></table></figure></li>
<li>設定 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.vscode/extensions/ms-vscode.cpptools-0.4.2</span><br><span class="line">$ dotnet restore --configfile NuGet.Config --infer-runtimes</span><br><span class="line">$ dotnet publish -o debugAdapters</span><br><span class="line">$ <span class="built_in">touch</span> debugAdapters/coreclr.lock.0.1.0</span><br></pre></td></tr></table></figure></li>
<li>coreclr のインストール<br> <a href="https://github.com/dotnet/coreclr#user-content-build-status">https://github.com/dotnet/coreclr#user-content-build-status</a><br> <a href="https://github.com/dotnet/coreclr/blob/master/Documentation/building/linux-instructions.md">https://github.com/dotnet/coreclr/blob/master/Documentation/building/linux-instructions.md</a> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install cmake llvm-3.5 clang-3.5 lldb-3.6 lldb-3.6-dev libunwind8 libunwind8-dev gettext libicu-dev liblttng-ust-dev libcurl4-openssl-dev libssl-dev uuid-dev</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/dotnet/coreclr</span><br><span class="line">$ <span class="built_in">cd</span> coreclr</span><br><span class="line">$ ./build.sh</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="起動アイコンの作成"><a href="#起動アイコンの作成" class="headerlink" title="起動アイコンの作成"></a>起動アイコンの作成</h2><p>起動アイコンが作成されなかったら、以下のファイルを手動で作成します。</p>
<figure class="highlight ini"><figcaption><span>~/.local/share/applications/visual-studio-code.desktop</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[Desktop Entry]</span></span><br><span class="line"><span class="attr">Version</span>=<span class="number">1.0</span></span><br><span class="line"><span class="attr">Type</span>=Application</span><br><span class="line"><span class="attr">Name</span>=Visual Studio Code</span><br><span class="line"><span class="attr">Icon</span>=/home/&lt;Your Name&gt;/.local/share/umake/ide/visual-studio-code/resources/app/resources/linux/code.png</span><br><span class="line"><span class="attr">Exec</span>=/home/&lt;Your Name&gt;/.local/share/umake/ide/visual-studio-code/code</span><br><span class="line"><span class="attr">Comment</span>=Visual Studio focused <span class="literal">on</span> modern web and cloud</span><br><span class="line"><span class="attr">Categories</span>=Development<span class="comment">;IDE;</span></span><br><span class="line"><span class="attr">Terminal</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ide</category>
      </categories>
      <tags>
        <tag>visual-studio-code</tag>
      </tags>
  </entry>
  <entry>
    <title>Customize Hexo Theme Freemind</title>
    <url>/2016/04/09/Customize-Hexo-Theme-Freemind/</url>
    <content><![CDATA[<p>Hexo のテーマFreemind のナビゲーションバーの右端にページを選択するドロップダウンメニューを追加しました。</p>
<p>以下の２つのカスタマイズをします。</p>
<ul>
<li>ページの一覧データ</li>
<li>ページ一覧を生成するコード</li>
</ul>
<span id="more"></span>

<p><img src="/images/freemind-navbar-dropdown.png" alt="Freemind Navbar Dropdown"></p>
<h2 id="ページ一覧データ"><a href="#ページ一覧データ" class="headerlink" title="ページ一覧データ"></a>ページ一覧データ</h2><p><code>_config.yml</code> にページの一覧を作ります。</p>
<table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">title</td>
<td align="left">題名</td>
</tr>
<tr>
<td align="left">url</td>
<td align="left">相対URL</td>
</tr>
<tr>
<td align="left">intro</td>
<td align="left">ツールチップの説明文</td>
</tr>
<tr>
<td align="left">icon</td>
<td align="left">アイコン</td>
</tr>
</tbody></table>
<figure class="highlight ini"><figcaption><span>./themes/freemind/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">pages:</span><br><span class="line">  - title: Android</span><br><span class="line">    url:   android</span><br><span class="line">    intro: &quot;Android&quot;</span><br><span class="line">    icon:  &quot;fa fa-file&quot;</span><br><span class="line">  - title: Android-x86</span><br><span class="line">    url:   android-x86</span><br><span class="line">    intro: &quot;Android-x86&quot;</span><br><span class="line">    icon:  &quot;fa fa-file&quot;</span><br><span class="line">  - title: Atom</span><br><span class="line">    url:   atom</span><br><span class="line">    intro: &quot;Atom&quot;</span><br><span class="line">    icon:  &quot;fa fa-file&quot;</span><br><span class="line">  - title: CA</span><br><span class="line">    url:   ca</span><br><span class="line">    intro: &quot;CA&quot;</span><br><span class="line">    icon:  &quot;fa fa-file&quot;</span><br><span class="line">  - title: Game</span><br><span class="line">    url:   game</span><br><span class="line">    intro: &quot;Game&quot;</span><br><span class="line">    icon:  &quot;fa fa-file&quot;</span><br><span class="line">  - title: Irrlicht Engine</span><br><span class="line">    url:   irrlicht</span><br><span class="line">    intro: &quot;Irrlicht Engine&quot;</span><br><span class="line">    icon:  &quot;fa fa-file&quot;</span><br><span class="line">  - title: Kinect</span><br><span class="line">    url:   kinect</span><br><span class="line">    intro: &quot;Kinect&quot;</span><br><span class="line">    icon:  &quot;fa fa-file&quot;</span><br><span class="line">  - title: Linux</span><br><span class="line">    url:   linux</span><br><span class="line">    intro: &quot;Linux&quot;</span><br><span class="line">    icon:  &quot;fa fa-file&quot;</span><br><span class="line">  - title: Peercast Radio</span><br><span class="line">    url:   peercast-radio</span><br><span class="line">    intro: &quot;Peercast Radio&quot;</span><br><span class="line">    icon:  &quot;fa fa-file&quot;</span><br><span class="line">  - title: Snippets</span><br><span class="line">    url:   snippets</span><br><span class="line">    intro: &quot;Snippets&quot;</span><br><span class="line">    icon:  &quot;fa fa-file&quot;</span><br><span class="line">  - title: Virtualization</span><br><span class="line">    url:   virtualization</span><br><span class="line">    intro: &quot;Virtualization&quot;</span><br><span class="line">    icon:  &quot;fa fa-file&quot;</span><br></pre></td></tr></table></figure>

<h2 id="ページ一覧を生成するコード"><a href="#ページ一覧を生成するコード" class="headerlink" title="ページ一覧を生成するコード"></a>ページ一覧を生成するコード</h2><figure class="highlight html"><figcaption><span>./themes/freemind/layout/_partial/navigation.ejs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;main-nav&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar navbar-inverse navbar-fixed-top&quot;</span> <span class="attr">role</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-header navbar-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;.navbar-collapse&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;navbar-brand&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%- config.root %&gt;&quot;</span>&gt;</span>&lt;%= config.title %&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse nav-menu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">          &lt;% theme.menu.forEach(function(m)&#123; %&gt;</span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%- config.root %&gt;&lt;%- m.url %&gt;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&lt;%- m.intro %&gt;&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;&lt;%- m.icon %&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&lt;%- m.title %&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          &lt;% &#125;) %&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">title</span>=<span class="string">&quot;ページ&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-folder&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>ページ <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;drop1&quot;</span>&gt;</span></span><br><span class="line">              &lt;% theme.pages.forEach(function(p)&#123; %&gt;</span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">role</span>=<span class="string">&quot;menuitem&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%- config.root %&gt;&lt;%- p.url %&gt;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&lt;%- p.intro %&gt;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;&lt;%- p.icon %&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&lt;%- p.title %&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              &lt;% &#125;) %&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- container --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="アイコンのカスタマイズ"><a href="#アイコンのカスタマイズ" class="headerlink" title="アイコンのカスタマイズ"></a>アイコンのカスタマイズ</h2><figure class="highlight ini"><figcaption><span>./themes/freemind/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">pages:</span><br><span class="line">  - title: Android</span><br><span class="line">    url:   android</span><br><span class="line">    intro: &quot;Android&quot;</span><br><span class="line">    icon:  &quot;fa fa-android&quot;</span><br><span class="line">  - title: Android-x86</span><br><span class="line">    url:   android-x86</span><br><span class="line">    intro: &quot;Android-x86&quot;</span><br><span class="line">    icon:  &quot;fa fa-android&quot;</span><br><span class="line">  - title: Atom</span><br><span class="line">    url:   atom</span><br><span class="line">    intro: &quot;Atom&quot;</span><br><span class="line">    icon:  &quot;fa fa-file-text&quot;</span><br><span class="line">  - title: CA</span><br><span class="line">    url:   ca</span><br><span class="line">    intro: &quot;CA&quot;</span><br><span class="line">    icon:  &quot;fa fa-certificate&quot;</span><br><span class="line">  - title: Game</span><br><span class="line">    url:   game</span><br><span class="line">    intro: &quot;Game&quot;</span><br><span class="line">    icon:  &quot;fa fa-gamepad&quot;</span><br><span class="line">  - title: Irrlicht Engine</span><br><span class="line">    url:   irrlicht</span><br><span class="line">    intro: &quot;Irrlicht Engine&quot;</span><br><span class="line">    icon:  &quot;fa fa-cube&quot;</span><br><span class="line">  - title: Kinect</span><br><span class="line">    url:   kinect</span><br><span class="line">    intro: &quot;Kinect&quot;</span><br><span class="line">    icon:  &quot;fa fa-child&quot;</span><br><span class="line">  - title: Linux</span><br><span class="line">    url:   linux</span><br><span class="line">    intro: &quot;Linux&quot;</span><br><span class="line">    icon:  &quot;fa fa-linux&quot;</span><br><span class="line">  - title: Peercast Radio</span><br><span class="line">    url:   peercast-radio</span><br><span class="line">    intro: &quot;Peercast Radio&quot;</span><br><span class="line">    icon:  &quot;fa fa-bullhorn&quot;</span><br><span class="line">  - title: Snippets</span><br><span class="line">    url:   snippets</span><br><span class="line">    intro: &quot;Snippets&quot;</span><br><span class="line">    icon:  &quot;fa fa-code&quot;</span><br><span class="line">  - title: Virtualization</span><br><span class="line">    url:   virtualization</span><br><span class="line">    intro: &quot;Virtualization&quot;</span><br><span class="line">    icon:  &quot;fa fa-desktop&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/images/freemind-navbar-dropdown2.png" alt="Freemind Navbar Dropdown"></p>
]]></content>
      <categories>
        <category>cms</category>
      </categories>
      <tags>
        <tag>freemind</tag>
      </tags>
  </entry>
  <entry>
    <title>Blender 2.77a on Ubuntu 16.04</title>
    <url>/2016/04/17/Blender/</url>
    <content><![CDATA[<p><img src="/images/blender_as_video_editor.png" alt="Blender"></p>
<p>Blender 2.77a をUbuntu 16.04 にインストールしてビデオエディタとして使ってみました。<br>言語に日本語を選択した際に、フォントを明示的に設定しなくても日本語が化けないようになったみたいです。</p>
<span id="more"></span>

<h2 id="Blender-のインストール"><a href="#Blender-のインストール" class="headerlink" title="Blender のインストール"></a>Blender のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:thomas-schiex/blender</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install Blender</span><br></pre></td></tr></table></figure>

<h2 id="言語を日本語に設定"><a href="#言語を日本語に設定" class="headerlink" title="言語を日本語に設定"></a>言語を日本語に設定</h2><ol>
<li>[File]-[User Perferences…]</li>
<li>[System]</li>
<li></li>
<li>Language: <code>Japanese(日本語)</code></li>
<li>Translate: <code>Interface</code>, <code>Tooltips</code> <code>New Data</code> を押下</li>
<li><code>Save UserSetteings</code> または <code>ユーザ設定の保存</code> を押下</li>
<li>[ファイル]-[スタートアップファイルの保存]</li>
</ol>
<h2 id="ビデオエディタの表示設定"><a href="#ビデオエディタの表示設定" class="headerlink" title="ビデオエディタの表示設定"></a>ビデオエディタの表示設定</h2><ol>
<li>[スクリーンレイアウトを選択] <code>Video Editting</code></li>
<li>右上の<code>ビデオシーケンスエディタ</code>領域の右上隅の三角形を左にドラッグして右側に新しい領域を作成し、エディタタイプを<code>プロパティ</code>に変更</li>
<li>下の<code>タイムライン</code>領域で、[再生]で以下を選択<ul>
<li>オーディオスクライピング</li>
<li>AV 同期</li>
<li>コマ落とし</li>
</ul>
</li>
<li>[ウィンドウ]-[ウィンドウの全画面切り替え]</li>
<li>[ファイル]-[スタートアップファイルの保存]</li>
</ol>
]]></content>
      <categories>
        <category>application</category>
      </categories>
      <tags>
        <tag>blender</tag>
      </tags>
  </entry>
  <entry>
    <title>Lollypop Japanese Translation</title>
    <url>/2016/04/17/Lollypop-Japanese-Translation/</url>
    <content><![CDATA[<p><img src="/images/lollypop_japanese.png" alt="Lollypop Japanese Translation"><br><a href="https://github.com/gnumdk/lollypop">https://github.com/gnumdk/lollypop</a><br>Lollypop はモダンなインタフェースの GNOME 向け音楽プレイヤーです。気に入ったので日本語訳を追加してみました。</p>
<span id="more"></span>

<h2 id="日本語化のために追加-変更したファイル"><a href="#日本語化のために追加-変更したファイル" class="headerlink" title="日本語化のために追加&#x2F;変更したファイル"></a>日本語化のために追加&#x2F;変更したファイル</h2><p><a href="https://github.com/ktkr3d/lollypop">https://github.com/ktkr3d/lollypop</a></p>
<table>
<thead>
<tr>
<th align="left">パス</th>
<th align="left">変更内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#x2F;help&#x2F;Makefile.am</td>
<td align="left">ヘルプに ja を追加</td>
</tr>
<tr>
<td align="left">&#x2F;help&#x2F;ja&#x2F;ja.po</td>
<td align="left">ヘルプの日本語訳</td>
</tr>
<tr>
<td align="left">&#x2F;po&#x2F;LINGUAS</td>
<td align="left">UI に ja を追加</td>
</tr>
<tr>
<td align="left">&#x2F;po&#x2F;ja.po</td>
<td align="left">UI の日本語訳</td>
</tr>
</tbody></table>
<h2 id="前提パッケージのインストール"><a href="#前提パッケージのインストール" class="headerlink" title="前提パッケージのインストール"></a>前提パッケージのインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install autoconf libglib2.0-dev intltool yelp-tools libgirepository1.0-dev libgtk-3-dev python3-pip</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install gnome-common build-essential</span><br></pre></td></tr></table></figure>

<h2 id="日本語訳した-Lollypop-のインストール"><a href="#日本語訳した-Lollypop-のインストール" class="headerlink" title="日本語訳した Lollypop のインストール"></a>日本語訳した Lollypop のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ktkr3d/lollypop.git</span><br><span class="line">$ <span class="built_in">cd</span> lollypop</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ make</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>application</category>
      </categories>
      <tags>
        <tag>lollypop</tag>
      </tags>
  </entry>
  <entry>
    <title>Python GTK+ 3</title>
    <url>/2016/05/08/Python-GTK-3/</url>
    <content><![CDATA[<p><img src="/images/gnome-peercast-player-20160508-01.png" alt="GNOME Peercast Player"><br><a href="http://python-gtk-3-tutorial.readthedocs.io/en/latest/">http://python-gtk-3-tutorial.readthedocs.io/en/latest/</a><br><a href="http://git.videolan.org/?p=vlc/bindings/python.git">http://git.videolan.org/?p=vlc/bindings/python.git</a><br><a href="https://github.com/ktkr3d/gnome-peercast-player">https://github.com/ktkr3d/gnome-peercast-player</a><br>Python とGTK+ 3 でPeercast 視聴用のアプリを作りはじめました。GNOME Twitch のような感じになると思います。</p>
<span id="more"></span>
<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul>
<li>Ubuntu GNOME 16.04 x86_64 + GNOME 3.20</li>
<li>Python 3</li>
<li>vlc</li>
<li>WebKit</li>
<li>セットアップ<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install vlc gir1.2-webkit-3.0</span><br><span class="line">$ pip install python-vlc</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/ktkr3d/gnome-peercast-player.git</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="起動"><a href="#起動" class="headerlink" title="起動"></a>起動</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python gpp-main.py</span><br></pre></td></tr></table></figure>

<h2 id="機能（実装済）"><a href="#機能（実装済）" class="headerlink" title="機能（実装済）"></a>機能（実装済）</h2><ul>
<li>libvlc によるストリーミングメディア再生</li>
<li>WebKit によるWeb 表示</li>
<li>glade によるUI 定義</li>
</ul>
<h2 id="機能（これから作りこみ）"><a href="#機能（これから作りこみ）" class="headerlink" title="機能（これから作りこみ）"></a>機能（これから作りこみ）</h2><ul>
<li>チャネル一覧の生成部分の移植</li>
<li>locale</li>
<li>設定ダイアログとの連携</li>
<li>List ペイン(左)とWeb ペイン(右)のオーバーレイ化</li>
<li>GtkFlowBox を使った一覧 表示</li>
<li>単純化&#x2F;最適化</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>peercast</tag>
        <tag>python</tag>
        <tag>gtk+3</tag>
      </tags>
  </entry>
  <entry>
    <title>GNU Build System</title>
    <url>/2016/05/12/GNU-Build-System/</url>
    <content><![CDATA[<p><img src="/images/gnome-peercast-player-20160512-01.png" alt="GNOME Peercast Player"></p>
<ul>
<li><a href="http://loto.sourceforge.net/feram/Autotools-memo.ja.html">http://loto.sourceforge.net/feram/Autotools-memo.ja.html</a></li>
<li><a href="https://github.com/MicahCarrick/autotools-tutorial-python-gtk">https://github.com/MicahCarrick/autotools-tutorial-python-gtk</a></li>
<li><a href="https://github.com/ktkr3d/gnome-peercast-player">https://github.com/ktkr3d/gnome-peercast-player</a></li>
</ul>
<p>今まで当たり前のように、<code>./configure</code>, <code>make</code>, <code>sudo make install</code> でソフトウェアのインストールを実行してきましたが、今回初めてGNU ビルドシステム環境を自ら構築してみました。</p>
<span id="more"></span>
<h2 id="autotools-のインストール"><a href="#autotools-のインストール" class="headerlink" title="autotools のインストール"></a>autotools のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install autotools-dev autoconf</span><br></pre></td></tr></table></figure>

<h2 id="プロジェクトの依存パッケージのインストール"><a href="#プロジェクトの依存パッケージのインストール" class="headerlink" title="プロジェクトの依存パッケージのインストール"></a>プロジェクトの依存パッケージのインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install vlc gir1.2-webkit-3.0</span><br><span class="line">$ pip install python-vlc</span><br></pre></td></tr></table></figure>

<h2 id="GNU-ビルドシステム環境の構築"><a href="#GNU-ビルドシステム環境の構築" class="headerlink" title="GNU ビルドシステム環境の構築"></a>GNU ビルドシステム環境の構築</h2><ol>
<li>ソースコードの作成と配置  <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── data/</span><br><span class="line">│   ├── gnome-peercast-player.desktop.in</span><br><span class="line">│   ├── icons/</span><br><span class="line">│   │   ├── hicolor/</span><br><span class="line">│   │   │   ├── 48x48/</span><br><span class="line">│   │   │   │   └── apps/</span><br><span class="line">│   │   │   │       └── gnome-peercast-player.png</span><br><span class="line">│   │   │   └── scalable/</span><br><span class="line">│   │   │       └── apps/</span><br><span class="line">│   │   │           └── gnome-peercast-player.svg</span><br><span class="line">│   │   └── make_icons.py</span><br><span class="line">│   └── ui/</span><br><span class="line">│       ├── gnome-peercast-player.png</span><br><span class="line">│       └── main_window.ui</span><br><span class="line">└── src/</span><br><span class="line">    ├── gnome-peercast-player.in</span><br><span class="line">    └── gpp/</span><br><span class="line">        ├── __init__.py</span><br><span class="line">        └── application.py*</span><br></pre></td></tr></table></figure></li>
<li><code>autoscan</code></li>
<li><code>configure.scan</code> を元に<code>configure.ac</code> をカスタマイズ</li>
<li>各ディレクトリに<code>Makefile.am</code> を作成</li>
<li><code>touch AUTHORS ChangeLog NEWS README</code></li>
<li><code>autoreconf -v</code></li>
<li><code>automake --add-missing</code></li>
<li><code>autoreconf -v</code></li>
</ol>
<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<h2 id="リリース用tar-ボールの作成"><a href="#リリース用tar-ボールの作成" class="headerlink" title="リリース用tar ボールの作成"></a>リリース用tar ボールの作成</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make dist</span><br></pre></td></tr></table></figure>
<p>GitHub の場合、<code>make dist</code> しなくても、タグ付けすることにより、リリースページに.zip と.tar.gz が自動的に公開されるようです。</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>gnu</tag>
      </tags>
  </entry>
  <entry>
    <title>GtkTreeView</title>
    <url>/2016/05/17/GtkTreeView/</url>
    <content><![CDATA[<p><img src="/images/gnome-peercast-player-20160517-01.png" alt="GNOME Peercast Player"></p>
<p>チャンネル一覧にGtkTreeView を使ってみました。<br>Glade の操作に少し迷いましたが、一度覚えてしまえば、驚くほど手間を掛けずに実装ができそうです。<br>チャンネル一覧の項目をダブルクリックすることで、Peercast のストリーミング視聴を開始し、コンタクトURL を表示するようにしました。</p>
<span id="more"></span>

<h2 id="ポイント"><a href="#ポイント" class="headerlink" title="ポイント"></a>ポイント</h2><ul>
<li>スクロールバー付きリストボックスの構成<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">GtkScrolledWindow</span><br><span class="line">  GtkTreeView</span><br></pre></td></tr></table></figure></li>
<li>モデルとビューの連携<br>GtkTreeView の全般「ツリービューのモデル」にGtkListStore のオブジェクトを指定する</li>
<li>モデルとビューの項目の対応付け<ol>
<li>GtkView を右クリックして「Edit」を選択</li>
<li>全般タブで項目の追加</li>
<li>階層タブでラベルを追加</li>
<li>追加したラベルを右クリックして「子アイテムの 文字列 の追加」</li>
<li>追加した子アイテムを選択して、「ラベル」に対応するモデルの項目を選択</li>
</ol>
</li>
<li>表ヘッダの表示</li>
<li>表データの表示</li>
<li>ダブルクリックのシグナル<br><code>row-activated</code> にハンドラを割り当てる</li>
<li>ダブルクリックのハンドラ<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">on___glade_unnamed_28_row_activated</span>(<span class="params">self, liststore, treepath, treeviewcolumn</span>):</span><br><span class="line">  <span class="built_in">iter</span> = liststore.get_iter(treepath)</span><br><span class="line">  stream_url = liststore[<span class="built_in">iter</span>][<span class="number">2</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>peercast</tag>
        <tag>python</tag>
        <tag>gtk+3</tag>
      </tags>
  </entry>
  <entry>
    <title>GtkTreeModelFilter</title>
    <url>/2016/05/29/GtkTreeModelFilter/</url>
    <content><![CDATA[<p><img src="/images/gnome-peercast-player-20160529-01.png" alt="GNOME Peercast Player"></p>
<ul>
<li><a href="http://python-gtk-3-tutorial.readthedocs.io/en/latest/treeview.html#filtering">http://python-gtk-3-tutorial.readthedocs.io/en/latest/treeview.html#filtering</a></li>
<li><a href="https://developer.gnome.org/gtk3/stable/GtkTreeModelFilter.html">https://developer.gnome.org/gtk3/stable/GtkTreeModelFilter.html</a></li>
<li><a href="https://github.com/ktkr3d/gnome-peercast-player">https://github.com/ktkr3d/gnome-peercast-player</a></li>
</ul>
<p>GtkTreeModelFilter を使ってインクリメンタルサーチ的なフィルタを実装してみました。<br>Glade でGtkTreeModelFilter を定義していますが、サンプル等が見つけられなかったので、我流になっているかもしれません。</p>
<span id="more"></span>

<h2 id="Glade-での準備"><a href="#Glade-での準備" class="headerlink" title="Glade での準備"></a>Glade での準備</h2><ul>
<li>GtkTreeView のモデルにGtkTreeModelFilter を指定</li>
<li>GtkTreeModelFilter の子モデルにGtkListStore を指定</li>
<li>GtkSearchEntry の<code>changed</code>シグナルをハンドラとして登録</li>
</ul>
<h2 id="フィルタの準備"><a href="#フィルタの準備" class="headerlink" title="フィルタの準備"></a>フィルタの準備</h2><ul>
<li>GtkTreeModelFilter を取得し、フィルタ関数<code>filter_func</code>を登録します。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">liststore_filter = builder.get_object(<span class="string">&quot;liststore1_filter&quot;</span>)</span><br><span class="line">liststore_filter.set_visible_func(<span class="variable language_">self</span>.filter_func)</span><br></pre></td></tr></table></figure></li>
<li>検索文字列がモデルの0列、6列の内容に含まれる場合に表示対象とするフィルタ関数を定義します。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">filter_func</span>(<span class="params">self, model, <span class="built_in">iter</span>, keyword</span>):</span><br><span class="line">    <span class="variable language_">self</span>.keyword = <span class="variable language_">self</span>.searchentry.get_text()</span><br><span class="line">    <span class="keyword">if</span> <span class="variable language_">self</span>.keyword == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.keyword.lower() <span class="keyword">in</span> model[<span class="built_in">iter</span>][<span class="number">0</span>].lower() <span class="keyword">or</span> <span class="variable language_">self</span>.keyword.lower() <span class="keyword">in</span> model[<span class="built_in">iter</span>][<span class="number">6</span>].lower()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="シグナルハンドラの処理"><a href="#シグナルハンドラの処理" class="headerlink" title="シグナルハンドラの処理"></a>シグナルハンドラの処理</h2><ul>
<li>検索文字列が更新されたら<code>refilter()</code>を実行します。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">on_searchentry_changed</span>(<span class="params">self, liststore</span>):</span><br><span class="line">  <span class="variable language_">self</span>.<span class="built_in">filter</span>.refilter()</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>gtk+3</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajenti on Raspberry Pi 2</title>
    <url>/2016/07/09/Ajenti-on-Raspberry-Pi-2/</url>
    <content><![CDATA[<p><img src="/images/ajenti.png" alt="Ajenti on Raspberry Pi 2" title="Ajenti on Raspberry Pi 2"></p>
<p><a href="http://ajenti.org/">http://ajenti.org/</a></p>
<p>Web ベースのシステム管理ツールのAjenti をRaspberry Pi 2 のUbuntu 16.04 LTS にインストールしてみました。</p>
<span id="more"></span>

<h2 id="OS-のアップグレード"><a href="#OS-のアップグレード" class="headerlink" title="OS のアップグレード"></a>OS のアップグレード</h2><p>その前に、Ubuntu 14.04 LTS を16.04 LTS にアップグレードしておきましょう。</p>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-upgrade-to-ubuntu-16-04-lts">https://www.digitalocean.com/community/tutorials/how-to-upgrade-to-ubuntu-16-04-lts</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get upgrade</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get dist-upgrade</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get dist-upgrade -d</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install update-manager-core</span><br><span class="line">$ <span class="built_in">sudo</span> do-release-upgrade</span><br><span class="line">$ <span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>

<h2 id="Ajenti-のインストール"><a href="#Ajenti-のインストール" class="headerlink" title="Ajenti のインストール"></a>Ajenti のインストール</h2><p><a href="http://support.ajenti.org/topics/1121-installing-on-ubuntu/">http://support.ajenti.org/topics/1121-installing-on-ubuntu/</a></p>
<figure class="highlight bash"><figcaption><span>"Ubuntu の場合"</span></figcaption><table><tr><td class="code"><pre><span class="line">$ wget -O- https://raw.github.com/ajenti/ajenti/1.x/scripts/install-ubuntu.sh | <span class="built_in">sudo</span> sh</span><br></pre></td></tr></table></figure>
<p>Ubuntu 16.04 (xenial) リポジトリには<code>python-support</code> パッケージが存在しないようなので、15.10 (wily) のリポジトリからdeb パッケージをダウンロードしてインストールしてみます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://launchpadlibrarian.net/109052632/python-support_1.0.15_all.deb</span><br><span class="line">$ <span class="built_in">sudo</span> dpkg -i python-support_1.0.15_all.deb</span><br><span class="line">$ wget -O- https://raw.github.com/ajenti/ajenti/1.x/scripts/install-ubuntu.sh | <span class="built_in">sudo</span> sh</span><br></pre></td></tr></table></figure>

<h2 id="ポートのオープン"><a href="#ポートのオープン" class="headerlink" title="ポートのオープン"></a>ポートのオープン</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> ufw allow 8000</span><br></pre></td></tr></table></figure>

<h2 id="設定ファイルの修正"><a href="#設定ファイルの修正" class="headerlink" title="設定ファイルの修正"></a>設定ファイルの修正</h2><p><a href="https://github.com/ajenti/ajenti/issues/903#issuecomment-215569332">https://github.com/ajenti/ajenti/issues/903#issuecomment-215569332</a></p>
<ul>
<li>&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;socketio&#x2F;handler.py</li>
<li>&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;socketio&#x2F;transports.py</li>
</ul>
<p>上記の2つのファイルの<code>3600</code> を<code>&quot;3600&quot;</code>に書き換えます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> service ajenti restart</span><br></pre></td></tr></table></figure>

<h2 id="アクセス"><a href="#アクセス" class="headerlink" title="アクセス"></a>アクセス</h2><p><a href="https://192.168.0.6:8000/">https://192.168.0.6:8000</a></p>
<p>初期アカウントは、root &#x2F; admin です。</p>
]]></content>
      <categories>
        <category>operation</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>raspberrypi</tag>
        <tag>ajenti</tag>
      </tags>
  </entry>
  <entry>
    <title>KeePass</title>
    <url>/2016/07/16/KeePass/</url>
    <content><![CDATA[<p><img src="/images/keepass.png" alt="KeePass"></p>
<ul>
<li><a href="http://keepass.info/">http://keepass.info/</a></li>
</ul>
<p>パスワード管理ソフトKeePass 2.34 を日本語化して使ってみました。  </p>
<p>KeePassX というものあってこちらは既に日本語化されていますが、若干機能が少ないようです。データベースの形式は互換しているようです。</p>
<span id="more"></span>

<h2 id="KeePass-のインストール"><a href="#KeePass-のインストール" class="headerlink" title="KeePass のインストール"></a>KeePass のインストール</h2><p>Ubuntu 公式リポジトリにも存在しますが、最新のバージョンを利用するためにPPA 版を利用することにしました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-add-repository ppa:jtaylor/keepass</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install keepass2</span><br></pre></td></tr></table></figure>

<h2 id="日本語翻訳ファイルのダウンロード"><a href="#日本語翻訳ファイルのダウンロード" class="headerlink" title="日本語翻訳ファイルのダウンロード"></a>日本語翻訳ファイルのダウンロード</h2><p>公式に日本語翻訳パッケージがありますが、半角カタカナは好みでないので、有志の方が作成した全角カタカナバージョン(バージョン2.23)<code>Japanese-2.23-mod.lngx</code>をベースに利用することにします。<br><a href="http://halsinan.com/archives/256">http://halsinan.com/archives/256</a></p>
<h2 id="日本語翻訳ファイルの修正"><a href="#日本語翻訳ファイルの修正" class="headerlink" title="日本語翻訳ファイルの修正"></a>日本語翻訳ファイルの修正</h2><p>私がインストールしたKeePass のバージョンは2.34 ですので、未翻訳の箇所があります。ツールを使って翻訳を追加します。以下のページの一番下にあるKeePass 2.x 用のTrlUtil ツールをダウンロードします。<br><a href="http://keepass.info/translations.html">http://keepass.info/translations.html</a><br>Linux 上ではmono で動くようです。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mono TrlUtil.exe</span><br></pre></td></tr></table></figure>

<p>修正したファイルを<code>/usr/lib/keepass2/</code> 下に保存して、KeePass を起動します。</p>
<h2 id="日本語翻訳の適用"><a href="#日本語翻訳の適用" class="headerlink" title="日本語翻訳の適用"></a>日本語翻訳の適用</h2><p><code>View</code>-<code>Change Language</code>の<code>Select Language</code> から変更します。<br>また、表示用の日本語フォントも再設定しておくとよいと思います。</p>
<h2 id="KeePassX"><a href="#KeePassX" class="headerlink" title="KeePassX"></a>KeePassX</h2><p>KeePassX でもKeePass で作成したデータベースファイルを開けました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install keepassX</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>util</category>
      </categories>
      <tags>
        <tag>keepass</tag>
      </tags>
  </entry>
  <entry>
    <title>xsltproc</title>
    <url>/2016/07/30/xsltproc/</url>
    <content><![CDATA[<p>Kodi のお気に入りの棚卸しをしました。</p>
<ul>
<li>xsltproc を使ってお気に入りのファイルを一覧にします。</li>
<li>お気に入りのファイルの存在確認をします。</li>
<li>複数のPC のお気に入りをマージします。</li>
</ul>
<span id="more"></span>

<h2 id="xlstproc-のインストール"><a href="#xlstproc-のインストール" class="headerlink" title="xlstproc のインストール"></a>xlstproc のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install xsltproc</span><br></pre></td></tr></table></figure>

<h2 id="変換用XLS-の作成"><a href="#変換用XLS-の作成" class="headerlink" title="変換用XLS の作成"></a>変換用XLS の作成</h2><figure class="highlight xml"><figcaption><span>kodi-favourites.xsl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">xmlns:xsl</span>=<span class="string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:output</span> <span class="attr">method</span>=<span class="string">&quot;text&quot;</span> <span class="attr">encoding</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:apply-templates</span> <span class="attr">select</span>=<span class="string">&quot;favourites/favourite&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">&quot;favourite&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;.&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">xsl:text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:text</span>&gt;</span><span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="お気に入りファイルの一覧を生成"><a href="#お気に入りファイルの一覧を生成" class="headerlink" title="お気に入りファイルの一覧を生成"></a>お気に入りファイルの一覧を生成</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ xsltproc kodi-favourites.xsl ~/.kodi/userdata/favourites.xml | sed -e <span class="string">&quot;s/^PlayMedia(//&quot;</span> -e <span class="string">&quot;s/)$//&quot;</span> &gt; favourites.txt</span><br></pre></td></tr></table></figure>

<h2 id="ファイルの存在確認"><a href="#ファイルの存在確認" class="headerlink" title="ファイルの存在確認"></a>ファイルの存在確認</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;#!/bin/sh&quot;</span> &gt; favourites.sh</span><br><span class="line">$ sed -e <span class="string">&quot;s/^/ls /&quot;</span> favourites.txt &gt;&gt; favourites.sh</span><br><span class="line">$ <span class="built_in">chmod</span> 755 favourites.sh</span><br><span class="line">$ ./favourites.sh 2&gt; result.txt</span><br></pre></td></tr></table></figure>

<h2 id="複数のPC-のお気に入りをマージ"><a href="#複数のPC-のお気に入りをマージ" class="headerlink" title="複数のPC のお気に入りをマージ"></a>複数のPC のお気に入りをマージ</h2><p>別PC の<code>~/.kodi/userdata/favourites.xml</code> も同様にファイルの存在を確認し、<code>favouriteｓ</code> タグ下の<code>favourite</code> をマージします。<br>マージした<code>favourites.xml</code> をすべてのPC に配布します。</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>xsltproc</tag>
      </tags>
  </entry>
  <entry>
    <title>Remix OS 3</title>
    <url>/2016/07/31/Remix-OS-3/</url>
    <content><![CDATA[<p><img src="/images/remixos3.png" alt="Remix OS 3"></p>
<ul>
<li><a href="http://www.jide.com/remixos">http://www.jide.com/remixos</a></li>
</ul>
<p>Remix OS 3 をインストールしてみました。</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>remixos</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity3D 5.4.0p1</title>
    <url>/2016/08/11/Unity3D-5-4-0p1/</url>
    <content><![CDATA[<p><img src="/images/unity3d_5.4.0p1.png" alt="Unity 3D"></p>
<ul>
<li><a href="http://forum.unity3d.com/threads/unity-on-linux-release-notes-and-known-issues.350256/#post-2747477">http://forum.unity3d.com/threads/unity-on-linux-release-notes-and-known-issues.350256/#post-2747477</a></li>
</ul>
<p>Unity3D の5.4.0p1 が公開されていたので、インストールしてみました。</p>
<span id="more"></span>

<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul>
<li>Ubuntu GNOME 16.04</li>
<li>GNOME Shell 3.20.3</li>
<li>Linux Kernel 4.4.0-31</li>
<li>Unity 3D 5.4.0p1</li>
</ul>
<h2 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h2><ul>
<li>Official Installers for 64-bit Ubuntu Linux:<br>5.4.0p1: <a href="http://download.unity3d.com/download_unity/linux/unity-editor-5.4.0p1+20160810_amd64.deb">http://download.unity3d.com/download_unity/linux/unity-editor-5.4.0p1+20160810_amd64.deb</a><br>(sha1sum 1194c7ac7f075bc768b3b999ecc59b29fbc5be8a)</li>
<li>Unsupported installer for Other 64-bit Distributions:<br>5.4.0p1: <a href="http://download.unity3d.com/download_unity/linux/unity-editor-installer-5.4.0p1+20160810.sh">http://download.unity3d.com/download_unity/linux/unity-editor-installer-5.4.0p1+20160810.sh</a><br>(sha1sum b32060f4472ec949ad2321d70324b3568b587bb7)</li>
</ul>
<h2 id="Unity-のインストール"><a href="#Unity-のインストール" class="headerlink" title="Unity のインストール"></a>Unity のインストール</h2><p>gnome-software からうまく入らないようなので、コマンドラインからインストールしました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> gdebi unity-editor-5.4.0p1+20160810_amd64.deb</span><br></pre></td></tr></table></figure>

<h2 id="MonoDevelop-のインストール"><a href="#MonoDevelop-のインストール" class="headerlink" title="MonoDevelop のインストール"></a>MonoDevelop のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install monodevelop mono-complete</span><br></pre></td></tr></table></figure>

<h2 id="Standard-Assets-の登録"><a href="#Standard-Assets-の登録" class="headerlink" title="Standard Assets の登録"></a>Standard Assets の登録</h2><p><a href="http://ktkr3d.github.io/2015/08/30/Unity-5-Standard-Assets-Example-Project-on-Linux/">http://ktkr3d.github.io/2015/08/30/Unity-5-Standard-Assets-Example-Project-on-Linux/</a></p>
<h2 id="日本語化について"><a href="#日本語化について" class="headerlink" title="日本語化について"></a>日本語化について</h2><p>Unity3D の5.4 のどこかでローカライズが正式にサポートされ、[Edit]-[Preference]のダイアログに<code>Language</code>という項目が増えます。<br><a href="http://www.4gamer.net/games/210/G021014/20160404091/screenshot.html?num=029">http://www.4gamer.net/games/210/G021014/20160404091/screenshot.html?num=029</a></p>
]]></content>
      <categories>
        <category>3d</category>
      </categories>
      <tags>
        <tag>unity3d</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse + Tomcat</title>
    <url>/2016/08/12/Eclipse-Tomcat/</url>
    <content><![CDATA[<p><img src="/images/eclipse-neon.png" alt="Eclipse Neon"><br>Eclipse 4.6 + Tomcat 8 の環境を構築してみました。</p>
<span id="more"></span>

<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">OS</td>
<td align="left">Ubuntu GNOME 16.04</td>
</tr>
<tr>
<td align="left">JDK</td>
<td align="left">java-1.8.0-openjdk-amd64</td>
</tr>
<tr>
<td align="left">Eclipse</td>
<td align="left">4.6 Neon</td>
</tr>
<tr>
<td align="left">日本語化</td>
<td align="left">Pleiades</td>
</tr>
<tr>
<td align="left">Eclipse ディレクトリ</td>
<td align="left">&#x2F;mnt&#x2F;common&#x2F;tools&#x2F;eclipse&#x2F;jee-neon&#x2F;eclipse&#x2F;</td>
</tr>
<tr>
<td align="left">Eclipse ワークスペース</td>
<td align="left">&#x2F;mt&#x2F;common&#x2F;tools&#x2F;workspace&#x2F;</td>
</tr>
</tbody></table>
<h2 id="Eclipse-4-6-Neon-のインストール"><a href="#Eclipse-4-6-Neon-のインストール" class="headerlink" title="Eclipse 4.6 Neon のインストール"></a>Eclipse 4.6 Neon のインストール</h2><ul>
<li><a href="http://www.eclipse.org/downloads/">http://www.eclipse.org/downloads/</a></li>
<li>eclipse-inst-linux64.tar.gz を展開</li>
<li>インストーラの起動<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> eclipse-installer</span><br><span class="line">$ ./eclipse-inst</span><br></pre></td></tr></table></figure></li>
<li>インストールフォルダに<code>/mnt/common/tools/eclipse/jee-neon</code>を指定</li>
<li>一度起動して、ワークスペースに<code>/mnt/common/tools/eclipse/workspace</code>を指定して、終了する</li>
</ul>
<h2 id="日本語化"><a href="#日本語化" class="headerlink" title="日本語化"></a>日本語化</h2><ul>
<li><a href="http://mergedoc.sourceforge.jp/">http://mergedoc.sourceforge.jp/</a></li>
<li>「Pleiades プラグイン・ダウンロード」の<code>最新版</code>のリンクからダウンロード</li>
<li><code>features</code>, <code>plugins</code> 各ディレクトリを<code>/mnt/common/tools/eclipse/jee-neon/</code> に展開</li>
</ul>
<h2 id="eclipse-ini-の修正"><a href="#eclipse-ini-の修正" class="headerlink" title="eclipse.ini の修正"></a>eclipse.ini の修正</h2><ul>
<li>最終行の下に以下を追加<figure class="highlight ini"><figcaption><span>/mnt/common/tools/eclipse/jee-neon/eclipse/eclipse.ini</span></figcaption><table><tr><td class="code"><pre><span class="line">-Xverify:none</span><br><span class="line">-javaagent:/mnt/common/tools/eclipse/jee-neon/eclipse/plugins/jp.sourceforge.mergedoc.pleiades/pleiades.jar</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="ランチャーの作成"><a href="#ランチャーの作成" class="headerlink" title="ランチャーの作成"></a>ランチャーの作成</h2><ul>
<li>以下の内容でランチャーを作成<figure class="highlight ini"><figcaption><span>~/.local/share/applications/eclipse-jee.desktop</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[Desktop Entry]</span></span><br><span class="line"><span class="attr">Version</span>=<span class="number">1.0</span></span><br><span class="line"><span class="attr">Type</span>=Application</span><br><span class="line"><span class="attr">Name</span>=Eclipse JEE</span><br><span class="line"><span class="attr">Icon</span>=/mnt/common/tools/eclipse/jee-neon/eclipse/icon.xpm</span><br><span class="line"><span class="attr">Exec</span>=<span class="string">&quot;/mnt/common/tools/eclipse/jee-neon/eclipse/eclipse&quot;</span> %f</span><br><span class="line"><span class="attr">Comment</span>=Eclipse JEE IDE</span><br><span class="line"><span class="attr">Categories</span>=Development<span class="comment">;IDE;</span></span><br><span class="line"><span class="attr">Terminal</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Tomcat-のインストール"><a href="#Tomcat-のインストール" class="headerlink" title="Tomcat のインストール"></a>Tomcat のインストール</h2><ul>
<li>インストール <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install tomcat8</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">ln</span> -s /var/lib/tomcat8/conf /usr/share/tomcat8/conf</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">ln</span> -s /var/log/tomcat8/ /usr/share/tomcat8/log</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">ln</span> -s /etc/tomcat8/policy.d/03catalina.policy /usr/share/tomcat8/conf/catalina.policy</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chmod</span> -R a+rwx /usr/share/tomcat8/conf</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Eclipse-にTomcat-サーバを登録"><a href="#Eclipse-にTomcat-サーバを登録" class="headerlink" title="Eclipse にTomcat サーバを登録"></a>Eclipse にTomcat サーバを登録</h2><ul>
<li>[ウィンドウ]-[ビューの表示]-[サーバー]を選択</li>
<li>「使用可能なサーバーがありません。このリンクをクリックして新規サーバーを作成してください…」をクリック</li>
<li><code>tomcat</code>で検索して、「Tomcat v8.0 サーバー」を選択</li>
<li>Tomcat インストール・ディレクトリーに「&#x2F;usr&#x2F;share&#x2F;tomcat8」に指定して、完了</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>eclipse</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Firefox to Chrome ???</title>
    <url>/2016/08/12/Firefox-to-Chrome/</url>
    <content><![CDATA[<p>何度目か忘れましたが、Firefox からGoogle Chrome に移行できるか検討します。<br>まだ途中です。</p>
<table>
<thead>
<tr>
<th align="left">機能</th>
<th align="left">Firefox</th>
<th align="left">Chrome</th>
<th align="left">Check</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ブックマークツールバー</td>
<td align="left">標準</td>
<td align="left">標準</td>
<td align="left">✓</td>
</tr>
<tr>
<td align="left">広告ブロック</td>
<td align="left">Adblock Plus</td>
<td align="left">Adblock Plus</td>
<td align="left">✓</td>
</tr>
<tr>
<td align="left">2channel</td>
<td align="left">chaika</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">ダウンロード</td>
<td align="left">Download Status Bar</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">FTP</td>
<td align="left">FireFTP</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">マウスジェスチャ</td>
<td align="left">FireGestures</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">リサイズ</td>
<td align="left">Firesize</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">SSH</td>
<td align="left">FireSSH</td>
<td align="left">FireSSH</td>
<td align="left">✓</td>
</tr>
<tr>
<td align="left">Markdown</td>
<td align="left">Markdown Viewer</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">RSS</td>
<td align="left">NewsFox</td>
<td align="left">feedly</td>
<td align="left">✓</td>
</tr>
<tr>
<td align="left">ノート</td>
<td align="left">QuickFox Notes</td>
<td align="left">Google Keep</td>
<td align="left">✓</td>
</tr>
<tr>
<td align="left">タブ制御</td>
<td align="left">Tab Mix Plus</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">ダウンロード</td>
<td align="left">Video Download Helper</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Popup 翻訳</td>
<td align="left">Wikitionary and Google Translate</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">URIリンク化</td>
<td align="left">テキストリンク</td>
<td align="left">Text Link Plus</td>
<td align="left">✓</td>
</tr>
<tr>
<td align="left">Twitter</td>
<td align="left"></td>
<td align="left">Yoono</td>
<td align="left">✓</td>
</tr>
<tr>
<td align="left">同期</td>
<td align="left">Firefox Sync</td>
<td align="left">同期</td>
<td align="left">✓</td>
</tr>
<tr>
<td align="left">コミュニケーション</td>
<td align="left"></td>
<td align="left">ハングアウト</td>
<td align="left">✓</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>application</category>
      </categories>
      <tags>
        <tag>firefox</tag>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>MERN Stack</title>
    <url>/2016/08/12/MERN-Stack/</url>
    <content><![CDATA[<p><img src="/images/mern.png" alt="MERN"></p>
<ul>
<li><a href="http://mern.io/documentation.html">http://mern.io/documentation.html</a><br>MERN はMongoDB, Express, React, NodeJS を組み合わせたスタックです。<br>Ubuntu 16.04 でMERN を試してみました。</li>
</ul>
<span id="more"></span>

<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">OS</td>
<td align="left">Ubuntu GNOME 16.04</td>
</tr>
<tr>
<td align="left">node</td>
<td align="left">v6.3.1</td>
</tr>
</tbody></table>
<h2 id="サンプルの準備"><a href="#サンプルの準備" class="headerlink" title="サンプルの準備"></a>サンプルの準備</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> npm install -g mern-cli</span><br><span class="line">$ mern init your_new_app</span><br><span class="line">$ <span class="built_in">cd</span> your_new_app</span><br><span class="line">$ npm install</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure>

<h2 id="ポートが衝突した場合の対処"><a href="#ポートが衝突した場合の対処" class="headerlink" title="ポートが衝突した場合の対処"></a>ポートが衝突した場合の対処</h2><p><code>npm start</code> を実行したところ、ポート8000 のリッスンに失敗したようなエラーが発生しました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">events.js:160</span><br><span class="line">      throw er; // Unhandled <span class="string">&#x27;error&#x27;</span> event</span><br><span class="line">      ^</span><br><span class="line"></span><br><span class="line">Error: listen EADDRINUSE :::8000</span><br><span class="line">    at Object.exports._errnoException (util.js:1012:11)</span><br><span class="line">    at exports._exceptionWithHostPort (util.js:1035:20)</span><br><span class="line">    at Server._listen2 (net.js:1252:14)</span><br><span class="line">    at listen (net.js:1288:10)</span><br><span class="line">    at Server.listen (net.js:1384:5)</span><br><span class="line">    ...</span><br><span class="line">[nodemon] app crashed - waiting <span class="keyword">for</span> file changes before starting...</span><br></pre></td></tr></table></figure>
<p>確認したところ、2016-07-09 にインストールしたサーバ管理ツールAjenti が使っていました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> lsof -i:8000</span><br><span class="line">COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">ajenti-pa 4059 root    6u  IPv4  30002      0t0  TCP *:8000 (LISTEN)</span><br></pre></td></tr></table></figure>

<p>対策として、8000 ポートの代わりに8888 ポートを使うことにしました。</p>
<figure class="highlight javascript"><figcaption><span>./your_new_app/server/config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">mongoURL</span>: process.<span class="property">env</span>.<span class="property">MONGO_URL</span> || <span class="string">&#x27;mongodb://localhost:27017/mern-starter&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">8888</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config;</span><br></pre></td></tr></table></figure>

<h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>ブラウザで<code>http://localhost:8888</code> にアクセスします。</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>mern</tag>
      </tags>
  </entry>
  <entry>
    <title>Google VR SDK for Unity3D</title>
    <url>/2016/08/13/Google-VR-SDK-for-Unity3D/</url>
    <content><![CDATA[<p><img src="/images/google-vr-01.png" alt="Ｇoogle ＶＲ"><br><a href="https://developers.google.com/vr/unity/get-started-android">https://developers.google.com/vr/unity/get-started-android</a><br>Unity3D でGoogle VR を使ってみよう。</p>
<span id="more"></span>

<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">項目</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">スマートフォン</td>
<td align="left">機種</td>
<td align="left">HTC HTL22</td>
</tr>
<tr>
<td align="left">OS</td>
<td align="left">Android 4.4 (API レベル19)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">3Dメガネ</td>
<td align="left">VOX 3DVR</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">PC</td>
<td align="left">OS</td>
<td align="left">Ubuntu GNOME 16.04 x86_64 + GNOME 3.20</td>
</tr>
<tr>
<td align="left">Android SDK</td>
<td align="left">r24.4.1</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Unity3D</td>
<td align="left">5.4.0p1</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Google VR SDK</td>
<td align="left">v0.9.1</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">ポインティング デバイス</td>
<td align="left">Bruetoothマウス</td>
<td align="left">CAPCLIP M-CC1BRYL</td>
</tr>
</tbody></table>
<h2 id="必要なファイルのダウンロード"><a href="#必要なファイルのダウンロード" class="headerlink" title="必要なファイルのダウンロード"></a>必要なファイルのダウンロード</h2><h3 id="Android-SDK-コマンドライン-ツール"><a href="#Android-SDK-コマンドライン-ツール" class="headerlink" title="Android SDK コマンドライン ツール"></a>Android SDK コマンドライン ツール</h3><ul>
<li>以下のURL をChrome で開く。Firefox だとダウンロードボタンが表示されない。<br><a href="https://developer.android.com/studio/index.html#downloads">https://developer.android.com/studio/index.html#downloads</a><br>から<code>android-sdk_r24.4.1-linux.tgz</code> を選択</li>
<li><code>/tools/android-sdk-linux/</code> に展開</li>
<li>環境変数の設定<figure class="highlight bash"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line">PATH=/tools/android-sdk-linux/tools:<span class="variable">$PATH</span></span><br><span class="line">PATH=/tools/android-sdk-linux/platform-tools:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ . ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li>32 ビット用のライブラリの追加  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install lib32z1 lib32ncurses5  lib32stdc++6</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install libbz2-1.0:i386</span><br></pre></td></tr></table></figure></li>
<li>API レベルを確認<br><a href="http://source.android.com/source/build-numbers.html">http://source.android.com/source/build-numbers.html</a><br>私のスマートフォンはAndroid 4.4 Kitkat なのでAPI レベルは19 です。</li>
<li>Android SDK のアップデートとプラットフォームのインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ android update sdk</span><br></pre></td></tr></table></figure>
コンパイル時にAPI 23 のSDK Platform を要求されたので追加しました。</li>
</ul>
<table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">項目</th>
<th align="left">API</th>
<th align="left">Rev.</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Tools</td>
<td align="left">Android SDK Tools</td>
<td align="left"></td>
<td align="left">25.1.7</td>
</tr>
<tr>
<td align="left">Android SDK Platform Tools</td>
<td align="left"></td>
<td align="left">24.0.1</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Android SDK Build Tools</td>
<td align="left"></td>
<td align="left">24.0.1</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Android 6.0 (API 23)</td>
<td align="left">SDK Platform</td>
<td align="left">23</td>
<td align="left">3</td>
</tr>
<tr>
<td align="left">Android 4.4.2 (API 19)</td>
<td align="left">SDK Platform</td>
<td align="left">19</td>
<td align="left">4</td>
</tr>
</tbody></table>
<h3 id="Unity3D"><a href="#Unity3D" class="headerlink" title="Unity3D"></a>Unity3D</h3><ul>
<li><a href="http://ktkr3d.github.io/2016/08/11/Unity3D-5-4-0p1/">http://ktkr3d.github.io/2016/08/11/Unity3D-5-4-0p1/</a></li>
</ul>
<h3 id="Google-VR-SDK-for-Unity3D"><a href="#Google-VR-SDK-for-Unity3D" class="headerlink" title="Google VR SDK for Unity3D"></a>Google VR SDK for Unity3D</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/googlevr/gvr-unity-sdk.git</span><br></pre></td></tr></table></figure>

<h2 id="デモのインポート"><a href="#デモのインポート" class="headerlink" title="デモのインポート"></a>デモのインポート</h2><ol>
<li>Unity で3D プロジェクトを作成</li>
<li>[Asset]-[Import Package]-[Custom Package]メニューを選択</li>
<li><code>gvr-unity-sdk/GoogleVRForUnity.unitypackage</code> を選択</li>
<li>プロジェクトペイン内で、[Asset]-[Google VR]-[DemoScenes]-[HeadsetDemo]を選択</li>
<li><code>HeadsetDemo</code> を開く</li>
</ol>
<h2 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h2><ol>
<li>[File]-[Buld Setteings]</li>
<li><code>Android</code> を選択</li>
<li><code>Player Settings</code> を選択</li>
<li>以下を設定</li>
</ol>
<ul>
<li>Other Settings<ul>
<li>Bundle Identifier -&gt; com.github.ktkr3d.VR</li>
<li>Minimum API Level -&gt; Android 4.4 ‘Kit Kat’ (API level 19)</li>
</ul>
</li>
<li>Resolution and Presentation<ul>
<li>default orientation -&gt; Landscape Left</li>
</ul>
</li>
</ul>
<ol start="5">
<li><code>Build</code> を押下</li>
</ol>
<h2 id="デモの実行"><a href="#デモの実行" class="headerlink" title="デモの実行"></a>デモの実行</h2><p>作成したApk をインストールして実行します。<br>スマートフォンを3D メガネに装着して下を見ると、メニューが表示されています。<br><img src="/images/google-vr-02.png" alt="Ｇoogle ＶＲ"><br>中央の丸をメニューボタンに合わせて、マウスクリックで選択されます。<br>（目標をセンターに入れてスイッチ！）</p>
<h2 id="日本語化"><a href="#日本語化" class="headerlink" title="日本語化"></a>日本語化</h2><p><img src="/images/google-vr-03.png" alt="Ｇoogle ＶＲ"></p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>unity3d</tag>
        <tag>googlevr</tag>
      </tags>
  </entry>
  <entry>
    <title>Rocket.Chat on Raspberry Pi 2</title>
    <url>/2016/08/16/Rocket-Chat-on-Raspberry-Pi-2/</url>
    <content><![CDATA[<p><img src="/images/rocketchat-login.png" alt="Rocket.Chat login"></p>
<ul>
<li><a href="https://github.com/RocketChat/Rocket.Chat.RaspberryPi">https://github.com/RocketChat/Rocket.Chat.RaspberryPi</a><br>Rocket.Chat のサーバをRaspberry Pi 2 に構築してみました。</li>
</ul>
<span id="more"></span>

<h2 id="OS-のクリーンインストール"><a href="#OS-のクリーンインストール" class="headerlink" title="OS のクリーンインストール"></a>OS のクリーンインストール</h2><p>本題に入る前に。<br>Ubuntu Server 14.04 から16.04 にアップグレードしましたが、やはりクリーンインストールしておきます。</p>
<ul>
<li>ハードウェア<br>Raspberry Pi 2</li>
<li>OS (Ubuntu Server 16.04 LTS) のダウンロード<br><a href="http://cdimage.ubuntu.com/ubuntu/releases/16.04.1/release/ubuntu-16.04.1-preinstalled-server-armhf+raspi2.img.xz">http://cdimage.ubuntu.com/ubuntu/releases/16.04.1/release/ubuntu-16.04.1-preinstalled-server-armhf+raspi2.img.xz</a></li>
<li>イメージの展開<br>ディスクライタで正しくパーティションが展開されなかったので、コマンドで展開しました。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install gddrescue xz-utils</span><br><span class="line">$ unxs ubuntu-16.04.1-preinstalled-server-armhf+raspi2.img.xz</span><br><span class="line">$ <span class="built_in">sudo</span> ddrescue -d -f ubuntu-16.04.1-preinstalled-server-armhf+raspi2.img /dev/sdX</span><br></pre></td></tr></table></figure></li>
<li>gparted でルートパーティションを拡張</li>
<li>スワップの設定<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install dphys-swapfile</span><br><span class="line">$ free</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:         942140       30416       63672        5024      848052      876996</span><br><span class="line">Swap:       1904636          32     1904604</span><br></pre></td></tr></table></figure></li>
<li>Build Essential のインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install build-essential</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="node-とnpm-の取得"><a href="#node-とnpm-の取得" class="headerlink" title="node とnpm の取得"></a>node とnpm の取得</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HOME</span></span><br><span class="line">$ git <span class="built_in">clone</span> --depth 1 -b release-1.2.1-universal https://github.com/4commerce-technologies-AG/meteor.git</span><br><span class="line">$ <span class="variable">$HOME</span>/meteor/meteor -v</span><br></pre></td></tr></table></figure>
<p>かなり古いようだけどいいのだろうか・・・</p>
<h2 id="Rocket-Chat-バイナリの取得"><a href="#Rocket-Chat-バイナリの取得" class="headerlink" title="Rocket.Chat バイナリの取得"></a>Rocket.Chat バイナリの取得</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HOME</span></span><br><span class="line">$ <span class="built_in">mkdir</span> rocketchat</span><br><span class="line">$ <span class="built_in">cd</span> rocketchat</span><br><span class="line">$ curl https://cdn-download.rocket.chat/build/rocket.chat-pi-develop.tgz -o rocket.chat.tgz</span><br><span class="line">$ tar zxvf rocket.chat.tgz</span><br></pre></td></tr></table></figure>

<h2 id="MongoDB-のインストール"><a href="#MongoDB-のインストール" class="headerlink" title="MongoDB のインストール"></a>MongoDB のインストール</h2><p>紹介された手順ではDaaS を使っていましたが、私はローカルにインストールしてみました。MongoDB のバージョンは古いですが、今のところ支障は無いようです。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt install MongoDB</span><br></pre></td></tr></table></figure>

<h2 id="依存ソフトのインストールとRocket-Chat-の開始"><a href="#依存ソフトのインストールとRocket-Chat-の開始" class="headerlink" title="依存ソフトのインストールとRocket.Chat の開始"></a>依存ソフトのインストールとRocket.Chat の開始</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HOME</span>/rocketchat/bundle/programs/server</span><br><span class="line">$ <span class="variable">$HOME</span>/meteor/dev_bundle/bin/npm install</span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HOME</span>/rocketchat/bundle</span><br><span class="line">$ PORT=3000 \</span><br><span class="line">  ROOT_URL=http://localhost:3000 \</span><br><span class="line">  MONGO_URL=mongodb://localhost:27017/ \</span><br><span class="line">  <span class="variable">$HOME</span>/meteor/dev_bundle/bin/node main.js</span><br></pre></td></tr></table></figure>

<p>しばらくすると、以下のような起動メッセージが表示されます。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">Using GridFS for Avatar storage</span><br><span class="line">➔ System ➔ startup</span><br><span class="line">➔ +---------------------------------------+</span><br><span class="line">➔ |             SERVER RUNNING            |</span><br><span class="line">➔ +---------------------------------------+</span><br><span class="line">➔ |                                       |</span><br><span class="line">➔ |       Version: 0.34.0                 |</span><br><span class="line">➔ |  Process Port: 3000                   |</span><br><span class="line">➔ |      Site URL: http://localhost:3000  |</span><br><span class="line">➔ |                                       |</span><br><span class="line">➔ +---------------------------------------+</span><br></pre></td></tr></table></figure>

<h2 id="Rocket-chat-へアクセス"><a href="#Rocket-chat-へアクセス" class="headerlink" title="Rocket.chat へアクセス"></a>Rocket.chat へアクセス</h2><p><code>http://192.168.0.6:3000/</code> にアクセスします。</p>
<p><img src="/images/rocketchat-chat.png" alt="Rocket.Chat chat"></p>
<p>Android からアクセスしてみます。</p>
<p><img src="/images/rocketchat-android.png" alt="Rocket.Chat android"></p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>raspberrypi</tag>
        <tag>rocketchat</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Budgie Remix 16.10</title>
    <url>/2016/08/19/Ubuntu-Budgie-Remix-16-10/</url>
    <content><![CDATA[<p><img src="/images/ubuntu-budgie.png" alt="Ubuntu Budgie Remix"></p>
<ul>
<li><a href="https://budgie-remix.org/">https://budgie-remix.org/</a><br>Ubuntu Budgie Remix 16.10 のアルファ版をインストールしてみました。</li>
</ul>
<span id="more"></span>

<h2 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h2><ul>
<li>16.10 (yakkety)<br><a href="https://sourceforge.net/projects/budgie-remix/">https://sourceforge.net/projects/budgie-remix/</a></li>
<li>16.04.1 (xenial)<br><a href="https://budgie-remix.org/downloads/">https://budgie-remix.org/downloads/</a></li>
</ul>
<h2 id="システム情報"><a href="#システム情報" class="headerlink" title="システム情報"></a>システム情報</h2><p><img src="/images/ubuntu-budgie-profile.png" alt="Ubuntu Budgie Remix Profile"></p>
<h2 id="サイドパネル"><a href="#サイドパネル" class="headerlink" title="サイドパネル"></a>サイドパネル</h2><p><img src="/images/ubuntu-budgie-sidepanel.png" alt="Ubuntu Budgie Remix Side Panel"></p>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>budgie</tag>
      </tags>
  </entry>
  <entry>
    <title>Kimchi</title>
    <url>/2016/08/21/Kimchi/</url>
    <content><![CDATA[<p><img src="/images/kimchi.png" alt="Kimchi"></p>
<ul>
<li><a href="https://github.com/kimchi-project/kimchi">https://github.com/kimchi-project/kimchi</a><br>KVM をlibvirt 経由でWeb インタフェースから操作できるkimchi をインストールしてみました。</li>
</ul>
<span id="more"></span>

<h2 id="利用イメージ"><a href="#利用イメージ" class="headerlink" title="利用イメージ"></a>利用イメージ</h2><p>デフォルトでは8001 ポートにアクセスします。</p>
<h3 id="自ホストのUbuntu-からアクセス"><a href="#自ホストのUbuntu-からアクセス" class="headerlink" title="自ホストのUbuntu からアクセス"></a>自ホストのUbuntu からアクセス</h3><p><img src="/images/kimchi-list.png" alt="Kimchi"></p>
<h3 id="Android-からアクセス"><a href="#Android-からアクセス" class="headerlink" title="Android からアクセス"></a>Android からアクセス</h3><p><img src="/images/kimchi-android.png" alt="Kimchi android"></p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>libvirt</tag>
        <tag>kimchi</tag>
      </tags>
  </entry>
  <entry>
    <title>Nagios 4.20</title>
    <url>/2016/08/21/Nagios-4-20/</url>
    <content><![CDATA[<p><img src="/images/nagios-4.2.0.png" alt="nagios 4.2.0"></p>
<ul>
<li><a href="https://www.nagios.org/">https://www.nagios.org/</a><br>Nagios 4.2.0 がリリースされていたので、日本語化してインストールしてみました。</li>
</ul>
<span id="more"></span>

<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul>
<li>参考手順<br><a href="http://www.itzgeek.com/how-tos/linux/ubuntu-how-tos/install-nagios-4-1-1-ubuntu-16-04.html">http://www.itzgeek.com/how-tos/linux/ubuntu-how-tos/install-nagios-4-1-1-ubuntu-16-04.html</a></li>
</ul>
<h2 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h2><ul>
<li>Nagios 本体</li>
<li>Nagios プラグイン</li>
<li>Nagios 日本語化パッチ</li>
</ul>
<h2 id="展開とパッチ当て"><a href="#展開とパッチ当て" class="headerlink" title="展開とパッチ当て"></a>展開とパッチ当て</h2><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><h2 id="アクセス"><a href="#アクセス" class="headerlink" title="アクセス"></a>アクセス</h2>]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>nagios</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo update</title>
    <url>/2016/08/30/Hexo-update/</url>
    <content><![CDATA[<p>codeblock の表現を柔軟に設定するために、Hexo をアップデートしてみました。<br>以下の構文で利用できます。開発者の皆さんに感謝です。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock <span class="selector-attr">[title]</span> <span class="selector-attr">[lang:language]</span> <span class="selector-attr">[url]</span> <span class="selector-attr">[link text]</span> <span class="selector-attr">[line_number:(true|false)]</span> <span class="selector-attr">[highlight:(true|false)]</span> <span class="selector-attr">[first_line:number]</span> %&#125;</span><br><span class="line"> <span class="selector-tag">code</span> snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="Hexo-のアップデート"><a href="#Hexo-のアップデート" class="headerlink" title="Hexo のアップデート"></a>Hexo のアップデート</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> npm update hexo -g</span><br><span class="line">$ npm update</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure>

<h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><h3 id="行番号なし"><a href="#行番号なし" class="headerlink" title="行番号なし"></a>行番号なし</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>

<h3 id="行番号あり"><a href="#行番号あり" class="headerlink" title="行番号あり"></a>行番号あり</h3><figure class="highlight c"><figcaption><span>sample.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main( )</span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello, world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="行番号開始指定あり"><a href="#行番号開始指定あり" class="headerlink" title="行番号開始指定あり"></a>行番号開始指定あり</h3><figure class="highlight c"><figcaption><span>sample.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main( )</span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello, world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cms</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVPN with Raspberry Pi 2</title>
    <url>/2016/11/02/OpenVPN-with-Raspberry-Pi-2/</url>
    <content><![CDATA[<p><img src="/images/openvpn.png" alt="OpenVPN" title="OpenVPN"><br><a href="https://openvpn.net/">https://openvpn.net/</a></p>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04">https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04</a></p>
<p>Raspberry Pi 2 のOS をUbuntu 16.04 LTS にアップグレードしたので、OpenVPN も再設定しました。</p>
<span id="more"></span>

<h2 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h2><table>
<thead>
<tr>
<th align="left">機器</th>
<th align="left">構成</th>
</tr>
</thead>
<tbody><tr>
<td align="left">VPN サーバ</td>
<td align="left">- Raspberry Pi 2<br />- Ubuntu 16.04 (ARM) <br />- OpenVPN 2.3.10</td>
</tr>
<tr>
<td align="left">Linux クライアント</td>
<td align="left">- Ubutu GNOME 16.10 (x86_64) <br />- GNOME Shell 3.22.1</td>
</tr>
<tr>
<td align="left">Android クライアント</td>
<td align="left">- Android 4.4.2<br />- OpenVPN アプリ</td>
</tr>
</tbody></table>
<h2 id="OpenVPN-サーバの設定とクライアント設定ファイルの作成"><a href="#OpenVPN-サーバの設定とクライアント設定ファイルの作成" class="headerlink" title="OpenVPN サーバの設定とクライアント設定ファイルの作成"></a>OpenVPN サーバの設定とクライアント設定ファイルの作成</h2><p><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04">https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04</a></p>
<p>このとおりに実行します。<br>リクエストが通るようにルータ等を設定します。<br>今回はクライアント２つ分の設定ファイルを作成しました。</p>
<h2 id="Ubuntu-GNOME-クライアントの設定"><a href="#Ubuntu-GNOME-クライアントの設定" class="headerlink" title="Ubuntu GNOME クライアントの設定"></a>Ubuntu GNOME クライアントの設定</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install network-manager-openvpn-gnome</span><br></pre></td></tr></table></figure>

<p>ネットワークマネージャを開いて、</p>
<ol>
<li><code>+</code> を選択</li>
<li><code>ファイルからインポート・・・</code> を選択し、<code>client1.ovpn</code> を取り込みます。</li>
</ol>
<h2 id="Android-の設定"><a href="#Android-の設定" class="headerlink" title="Android の設定"></a>Android の設定</h2><p>PC と同様にclient2.ovpn を作成し、OpenVPN アプリで取り込みます。</p>
]]></content>
  </entry>
  <entry>
    <title>WebVirtCloud on Raspberry Pi</title>
    <url>/2016/11/05/WebVirtCloud-on-Raspberry-Pi/</url>
    <content><![CDATA[<p><img src="/images/webvirtcloud.png" alt="WebVirtCloud"></p>
<ul>
<li><a href="https://github.com/retspen/webvirtcloud">https://github.com/retspen/webvirtcloud</a></li>
</ul>
<p>KVM をlibvirt 経由でWeb インタフェースから操作できるWebVirtCloud をRaspberry Pi 2 にインストールしてみました。複数のKVM ホスト上の複数の仮想マシンを統合的に管理できます。Bootstrap スタイルが適用されていてAndroid からアクセスしても綺麗に表示されます。</p>
<span id="more"></span>

<h2 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h2><p>Raspberry Pi を管理サーバとしてみました。</p>
<ol>
<li>管理サーバ</li>
</ol>
<ul>
<li>Raspberry Pi 2</li>
<li>Ubuntu 16.04.1 Arm</li>
<li>WebVirtCloud</li>
</ul>
<ol start="2">
<li>KVM ホスト</li>
</ol>
<ul>
<li>普通のx86_64 マシン</li>
<li>Ubuntu GNOME 16.04.1</li>
<li>普通のlibvirt 環境</li>
</ul>
<h2 id="管理サーバの準備"><a href="#管理サーバの準備" class="headerlink" title="管理サーバの準備"></a>管理サーバの準備</h2><p><a href="https://github.com/retspen/webvirtcloud#user-content-install-webvirtcloud-panel-ubuntu">https://github.com/retspen/webvirtcloud#user-content-install-webvirtcloud-panel-ubuntu</a></p>
<ul>
<li>基本的にUbuntu 用の手順でやっていきます。</li>
<li>sudo su してやった方がいいと思います。一般ユーザでエラーになる箇所がありました。</li>
<li>既にApache2 を導入済みの場合はnginx のインストール時に競合するので、あらかじめApache２ のポートを変える&#x2F;無効化する等の事前対処が必要かもしれません。</li>
<li>ブラウザからコンソールにアクセスするためには以下を実行しておきます。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> ufw allow 6080/tcp</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="KVM-ホストの準備"><a href="#KVM-ホストの準備" class="headerlink" title="KVM ホストの準備"></a>KVM ホストの準備</h2><ul>
<li>libvirt 環境をそのまま使えます。</li>
<li>連携するためのアカウントを作ります。<br><a href="https://github.com/retspen/webvirtmgr/wiki/Setup-SSH-Authorization">https://github.com/retspen/webvirtmgr/wiki/Setup-SSH-Authorization</a></li>
</ul>
<h2 id="環境設定と操作"><a href="#環境設定と操作" class="headerlink" title="環境設定と操作"></a>環境設定と操作</h2><ul>
<li>デフォルトでは<code>http://&lt;管理サーバのIP&gt;</code>からアクセスします。</li>
<li>admin &#x2F; admin でログインします。</li>
<li>まず、Computes タブでKVM ホストへの接続方法を設定をします。<br>私はSSH コネクションを使いました。</li>
<li>接続に成功するとInstances にKVMホスト上の仮想マシンが一覧表示されます。</li>
<li>瞳アイコン(<code>Console</code>)をクリックするとコンソールウィンドウが開きます。フルスクリーンにもできます。</li>
<li>仮想マシンに対する操作メニュー<ul>
<li>Power (Power Off, Power Cycle, Force Off,Suspend）</li>
<li>Access (Console, Root Password, SSH Keys)</li>
<li>Resize (CPU, Memory)</li>
<li>Snapshots (Take Snapshot, Restore From Snapshot)</li>
<li>Settings (Media, Autostart, VNC, Clone, Migrate, XML)<br>移行元&#x2F;先が同じ構成なら、Migration できるみたい</li>
<li>Graphs (CPU, Bandwidth, Disk I&#x2F;O)      </li>
<li>Destroy (Destroy Instance)</li>
</ul>
</li>
<li>KVM ホストに対する操作メニュー<ul>
<li>Overview (Basic details, Performance(CPU, RAM))</li>
<li>Storage</li>
<li>Network</li>
<li>Interfaces</li>
<li>Secrets</li>
</ul>
</li>
<li>Users に対する操作メニュー<ul>
<li>追加&#x2F;削除</li>
</ul>
</li>
</ul>
<h2 id="Android-で表示した例"><a href="#Android-で表示した例" class="headerlink" title="Android で表示した例"></a>Android で表示した例</h2><p><img src="/images/webvirtcloud_android.png" alt="WebVirtCloud"></p>
<p>コンソールアイコンを選択すればブラウザの別タブ上で仮想マシンの画面を操作できます。音声も出力されます。</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>libvirt</tag>
        <tag>webvirtcloud</tag>
        <tag>webvitrmgr</tag>
      </tags>
  </entry>
  <entry>
    <title>Bridge with virt-manager</title>
    <url>/2016/11/08/Bridge-with-virt-manager/</url>
    <content><![CDATA[<p><img src="/images/bridge_virt-manager.png" alt="Bridge with virt-manager"><br>KVM 仮想マシンをブリッジ接続したかったので、仮想マシンマネージャでブリッジの設定をします。NetworkManager管理下で有効です。</p>
<span id="more"></span>

<h2 id="ネットワークインタフェースの追加"><a href="#ネットワークインタフェースの追加" class="headerlink" title="ネットワークインタフェースの追加"></a>ネットワークインタフェースの追加</h2><ol>
<li>仮想マシンマネージャ(virt-manager)を実行</li>
<li><code>編集</code>-<code>接続の詳細</code></li>
<li><code>ネットワークインタフェース</code></li>
<li><code>+</code></li>
<li>ステップ1&#x2F;2 で以下を指定</li>
</ol>
<ul>
<li>インターフェースの種類: <code>Bridge</code></li>
</ul>
<ol start="6">
<li>ステップ2&#x2F;2 で以下を指定</li>
</ol>
<ul>
<li>名前: <code>br1</code></li>
<li>開始モード: <code>onboot</code></li>
<li><code>今すぐ有効に</code>: チェック</li>
<li>ブリッジするインターフェースを選択: <code>eno1</code>をチェック</li>
</ul>
<ol start="7">
<li><code>完了</code></li>
</ol>
<p><img src="/images/bridge_virt-manager_network_interface.png" alt="bridge virt-manager network interface"></p>
<h2 id="VM-の設定"><a href="#VM-の設定" class="headerlink" title="VM の設定"></a>VM の設定</h2><ol>
<li>仮想マシンの情報を表示</li>
<li><code>NIC</code></li>
<li><code>ネットワークソース</code>で作成したブリッジ<code>br1</code>を指定</li>
<li><code>適用</code></li>
</ol>
<p><img src="/images/bridge_virt-manager_vm_nic.png" alt="bridge virt-manager vm nic"></p>
<h2 id="nm-connection-editor-上の表示"><a href="#nm-connection-editor-上の表示" class="headerlink" title="nm-connection-editor 上の表示"></a>nm-connection-editor 上の表示</h2><p>NetworkManager でNAT 接続のvirbr0 と同様にブリッジとして認識されます。</p>
<p><img src="/images/bridge_nm-connection-editor.png" alt="bridge nm-connection-editor"></p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>virt-manager</tag>
        <tag>bridge</tag>
        <tag>nm-connection-editor</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker + Kitematic on Ubuntu</title>
    <url>/2016/12/07/Docker-Kitematic-on-Ubuntu/</url>
    <content><![CDATA[<p><img src="/images/kitematic.png" alt="kitematic"></p>
<ul>
<li><a href="https://github.com/docker/kitematic/releases">https://github.com/docker/kitematic/releases</a></li>
</ul>
<p>Ubuntu 16.04 の環境にDocker とKitematic を入れてみました。<br>これは楽ちん！</p>
<span id="more"></span>

<h2 id="Docker-のインストール"><a href="#Docker-のインストール" class="headerlink" title="Docker のインストール"></a>Docker のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install curl</span><br><span class="line">$ curl -fsSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>

<h2 id="Kitematic-のインストール"><a href="#Kitematic-のインストール" class="headerlink" title="Kitematic のインストール"></a>Kitematic のインストール</h2><p><a href="https://github.com/docker/kitematic/releases">https://github.com/docker/kitematic/releases</a> からUbuntu 用zip (Kitematic-0.13.0-RC3-Ubuntu.zip)をダウンロードして展開</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> gdebi Kitematic_0.12.9_amd64.deb</span><br></pre></td></tr></table></figure>

<h2 id="サンプルインストール"><a href="#サンプルインストール" class="headerlink" title="サンプルインストール"></a>サンプルインストール</h2><p>例えば、<a href="https://hub.docker.com/r/takezoe/gitbucket/">takezoe&#x2F;gitbucket</a>を選択してみたところ、簡単に立ち上がりました。</p>
<p><img src="/images/kitematic-home.png" alt="kitematic-home"></p>
<p>気になるポート番号、環境変数の設定もGUI から実行できます。</p>
<p><img src="/images/kitematic-settings.png" alt="kitematic-home"></p>
<p>ブラウザから<code>http://localhost:32769</code>にアクセスするとGitBucket のページが表示されます。</p>
<h2 id="これから試してみたいDocker-イメージ"><a href="#これから試してみたいDocker-イメージ" class="headerlink" title="これから試してみたいDocker イメージ"></a>これから試してみたいDocker イメージ</h2><p><a href="https://hub.docker.com/explore/">Docker Hub</a>や<a href="https://store.docker.com/">Docker Store</a>には多くのDocker イメージが公開されています。</p>
<h3 id="Officail"><a href="#Officail" class="headerlink" title="Officail"></a>Officail</h3><ul>
<li>nginx</li>
<li>jenkins</li>
<li>ghost</li>
<li>redmine</li>
<li>rocket.chat</li>
</ul>
<h3 id="Public"><a href="#Public" class="headerlink" title="Public"></a>Public</h3><ul>
<li>chinachu</li>
<li>hexo</li>
<li>gitbucket</li>
<li>gitlab-ce</li>
<li><a href="https://hub.docker.com/r/docker/ucp/">docker&#x2F;ucp</a></li>
</ul>
<h2 id="おまけ-Docker-Universal-Control-Plane-docker-ucp"><a href="#おまけ-Docker-Universal-Control-Plane-docker-ucp" class="headerlink" title="おまけ: Docker Universal Control Plane (docker&#x2F;ucp)"></a>おまけ: Docker Universal Control Plane (docker&#x2F;ucp)</h2><p>公式のWeb UI であるUniversal Control Plane を使うためには、docker-engine 1.30 以上が要件になっている。リポジトリtesting を使用することで要件を満たすことができる。</p>
<p><img src="/images/docker-ucp.png" alt="docker-ucp"><br><img src="/images/docker-ucp-containers.png" alt="docker-ucp-containers"></p>
<figure class="highlight ini"><figcaption><span>/etc/apt/sources.list.d/docker.list</span></figcaption><table><tr><td class="code"><pre><span class="line">deb <span class="section">[arch=amd64]</span> https://apt.dockerproject.org/repo ubuntu-xenial main</span><br><span class="line">deb <span class="section">[arch=amd64]</span> https://apt.dockerproject.org/repo ubuntu-xenial testing</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update</span><br><span class="line">$ <span class="built_in">sudo</span> apt upgrade</span><br><span class="line">$ docker run \</span><br><span class="line">    --<span class="built_in">rm</span> \</span><br><span class="line">    -it \</span><br><span class="line">    --name ucp</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock docker/ucp</span><br><span class="line">    install \</span><br><span class="line">    --host-address 192.168.11.2</span><br></pre></td></tr></table></figure>
<p>ブラウザで<code>https://localhost/</code>にアクセスする。<br>ログインIDとパスワードはコンソール上の起動メッセージに表示される。<br>30日間の評価ができるみたい。サブスクリプションの購入は以下から。<br><a href="https://store.docker.com/bundles/docker-datacenter?tab=description">https://store.docker.com/bundles/docker-datacenter?tab=description</a></p>
<p>アンインストールには少しテクニックが必要です。ここを参考に。<br><a href="https://docs.docker.com/datacenter/ucp/1.1/installation/uninstall/">https://docs.docker.com/datacenter/ucp/1.1/installation/uninstall/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --<span class="built_in">rm</span> -it \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  --name ucp \</span><br><span class="line">  docker/ucp uninstall-ucp -i</span><br><span class="line">$ docker images</span><br><span class="line">$ docker rmi docker/ucp</span><br><span class="line">$ <span class="built_in">sudo</span> service docker restart</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Simple Docker UI</title>
    <url>/2016/12/08/Simple-Docker-UI/</url>
    <content><![CDATA[<p><img src="/images/simple-docker-ui.png" alt="simple-docker-ui"><br><a href="https://chrome.google.com/webstore/detail/simple-docker-ui/jfaelnolkgonnjdlkfokjadedkacbnib?hl=ja">https://chrome.google.com/webstore/detail/simple-docker-ui/jfaelnolkgonnjdlkfokjadedkacbnib?hl=ja</a></p>
<p>Docker のUI を探していたところ、Chrome App があったのでUbuntu 16.04 のDocker に接続して試してみました。<br>デスクトップ環境をインストールしていないミニマルなサーバ環境でDocker を稼働している場合に便利です。</p>
<span id="more"></span>

<h2 id="Docker-Remote-API-の設定-サーバ"><a href="#Docker-Remote-API-の設定-サーバ" class="headerlink" title="Docker Remote API の設定 (@サーバ)"></a>Docker Remote API の設定 (@サーバ)</h2><p><a href="https://github.com/felixgborrego/docker-ui-chrome-app/wiki/linux">https://github.com/felixgborrego/docker-ui-chrome-app/wiki/linux</a></p>
<figure class="highlight ini"><figcaption><span>/etc/systemd/system/docker-tcp.socket</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Docker HTTP Socket for the API</span><br><span class="line"></span><br><span class="line"><span class="section">[Socket]</span></span><br><span class="line"><span class="attr">ListenStream</span>=<span class="number">2375</span></span><br><span class="line"><span class="attr">BindIPv6Only</span>=both</span><br><span class="line"><span class="attr">Service</span>=docker.service</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=sockets.target</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker-tcp.socket</span><br><span class="line">$ <span class="built_in">sudo</span> systemctl stop docker</span><br><span class="line">$ <span class="built_in">sudo</span> systemctl start docker-tcp.socket</span><br></pre></td></tr></table></figure>

<h2 id="HTTP-プロキシが必要な環境の場合の追加設定-サーバ"><a href="#HTTP-プロキシが必要な環境の場合の追加設定-サーバ" class="headerlink" title="HTTP プロキシが必要な環境の場合の追加設定 (@サーバ)"></a>HTTP プロキシが必要な環境の場合の追加設定 (@サーバ)</h2><p><a href="https://docs.docker.com/engine/admin/systemd/#/http-proxy">https://docs.docker.com/engine/admin/systemd/#/http-proxy</a></p>
<figure class="highlight ini"><figcaption><span>/etc/systemd/system/docker.service.d/http-proxy.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;HTTP_PROXY=http://&lt;username&gt;:&lt;password&gt;@&lt;proxy-host&gt;:&lt;proxy-port&gt;&quot;</span> <span class="string">&quot;HTTPS_PROXY=http://&lt;username&gt;:&lt;password&gt;@&lt;proxy-host&gt;:&lt;proxy-port&gt;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line">$ <span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>

<h2 id="Simple-Docker-UI-の設定-クライアント"><a href="#Simple-Docker-UI-の設定-クライアント" class="headerlink" title="Simple Docker UI の設定 (@クライアント)"></a>Simple Docker UI の設定 (@クライアント)</h2><ul>
<li>Google Chrome の<code>設定</code>-<code>拡張機能</code>から<code>Docker UI</code>を検索してインストール</li>
<li><code>Settings</code> で<code>http://&lt;サーバのIP&gt;:2375</code>を指定して<code>Verify!</code>し、<code>Valid Connection</code>になればOK</li>
<li>Google Chrome のブックマークツールバーの<code>アプリ</code>で<code>Docker UI</code>アイコン右クリック、<code>ショートカットを作成</code></li>
<li>GNOME Shell ならアクティビティで<code>Docker UI</code>を検索、右クリック、<code>お気に入りに追加</code>でドックに追加</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>My Docker Hexo</title>
    <url>/2016/12/30/My-Docker-Hexo/</url>
    <content><![CDATA[<p><img src="/images/docker-hexo.png" alt="docker-hexo"></p>
<ul>
<li><a href="https://github.com/ktkr3d/docker-hexo">https://github.com/ktkr3d/docker-hexo</a></li>
</ul>
<p>Hexo をDocker Compose を使って動かしてみました。</p>
<span id="more"></span>

<h2 id="Dockerfile-の準備"><a href="#Dockerfile-の準備" class="headerlink" title="Dockerfile の準備"></a>Dockerfile の準備</h2><p>node:alpine をベースにテーマで使用するモジュール群と、Web から更新するための<code>hexo-admin</code>を追加しています。</p>
<figure class="highlight bash"><figcaption><span>./Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">FROM node:alpine</span><br><span class="line"></span><br><span class="line">MAINTAINER ktkr3d &lt;ktkr3d@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">WORKDIR /hexo</span><br><span class="line"></span><br><span class="line">RUN \</span><br><span class="line">  apk add --no-cache git openssh-client \</span><br><span class="line">  &amp;&amp; npm install hexo-cli -g \</span><br><span class="line">  &amp;&amp; hexo init . \</span><br><span class="line">  &amp;&amp; npm install \</span><br><span class="line">  &amp;&amp; npm install hexo-generator-sitemap --save \</span><br><span class="line">  &amp;&amp; npm install hexo-generator-feed --save \</span><br><span class="line">  &amp;&amp; npm install hexo-generator-searchdb --save \</span><br><span class="line">  &amp;&amp; npm install hexo-deployer-git --save \</span><br><span class="line">  &amp;&amp; npm install hexo-tag-bootstrap --save \</span><br><span class="line">  &amp;&amp; npm install hexo-generator-search --save \</span><br><span class="line">  &amp;&amp; npm install hexo-admin --save</span><br><span class="line"></span><br><span class="line">VOLUME [<span class="string">&quot;/hexo/source&quot;</span>, <span class="string">&quot;/hexo/themes&quot;</span>, <span class="string">&quot;/root/.ssh&quot;</span>]</span><br><span class="line"></span><br><span class="line">EXPOSE 4000</span><br><span class="line"></span><br><span class="line">COPY hexo-deploy.sh /hexo/hexo-deploy.sh</span><br><span class="line">COPY docker-entrypoint.sh /docker-entrypoint.sh</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;/docker-entrypoint.sh&quot;</span>]</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&#x27;/bin/bash&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="エントリポイントシェル"><a href="#エントリポイントシェル" class="headerlink" title="エントリポイントシェル"></a>エントリポイントシェル</h2><figure class="highlight sh"><figcaption><span>docker-entrypoint.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">umask</span> 0000</span><br><span class="line"></span><br><span class="line">git config --global user.name <span class="variable">$GIT_USER_NAME</span></span><br><span class="line">git config --global user.email <span class="variable">$GIT_USER_EMAIL</span></span><br><span class="line"></span><br><span class="line">/usr/bin/env hexo server</span><br></pre></td></tr></table></figure>

<h2 id="hexo-admin-モジュール用のデプロイシェル"><a href="#hexo-admin-モジュール用のデプロイシェル" class="headerlink" title="hexo-admin モジュール用のデプロイシェル"></a>hexo-admin モジュール用のデプロイシェル</h2><p><a href="https://github.com/vladpurga/hexo-admin-deploy-command">https://github.com/vladpurga/hexo-admin-deploy-command</a></p>
<figure class="highlight sh"><figcaption><span>./hexo-deploy.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<h2 id="Docker-イメージのビルド"><a href="#Docker-イメージのビルド" class="headerlink" title="Docker イメージのビルド"></a>Docker イメージのビルド</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build -t <span class="built_in">local</span>/hexo .</span><br></pre></td></tr></table></figure>

<h2 id="Docker-Compose-の準備"><a href="#Docker-Compose-の準備" class="headerlink" title="Docker Compose の準備"></a>Docker Compose の準備</h2><p><code>GIT_USER_NAME</code>と<code>GIT_USER_EMAIL</code>にdeploy するためのユーザ情報を設定します。<br>リスタート時に自動起動するように<code>restart: always</code>を指定しました。</p>
<figure class="highlight yaml"><figcaption><span>./docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">hexo-server:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">local/hexo</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hexo-server</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;4000:4000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">$HOME/.ssh:/root/.ssh</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">$PWD/source:/hexo/source</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">$PWD/themes:/hexo/themes</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">$PWD/_config.yml:/hexo/_config.yml</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">GIT_USER_NAME=ktkr3d</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">GIT_USER_EMAIL=ktkr3d@gmail.com</span></span><br></pre></td></tr></table></figure>

<h2 id="既存Hexo-環境のコピー"><a href="#既存Hexo-環境のコピー" class="headerlink" title="既存Hexo 環境のコピー"></a>既存Hexo 環境のコピー</h2><p>以下の構成になるように、<code>_config.yml</code>、<code>source/</code>、<code>themes/</code>を既存のHexo 環境からコピーします。コピーしないとHexo のデフォルトの状態になります。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── README.md</span><br><span class="line">├── _config.yml</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── docker-entrypoint.sh</span><br><span class="line">├── hexo-deploy.sh</span><br><span class="line">├── source/</span><br><span class="line">└── themes/</span><br></pre></td></tr></table></figure>

<h2 id="起動と停止"><a href="#起動と停止" class="headerlink" title="起動と停止"></a>起動と停止</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose up -d</span><br><span class="line">$ docker-compose down</span><br></pre></td></tr></table></figure>

<h2 id="Web-からのアクセス"><a href="#Web-からのアクセス" class="headerlink" title="Web からのアクセス"></a>Web からのアクセス</h2><ul>
<li>プレビュー画面<br><a href="http://localhost:4000/">http://localhost:4000/</a></li>
<li>管理画面<br><a href="http://localhost:4000/admin/">http://localhost:4000/admin/</a><br>ポストの追加、ページの追加、デプロイ等できるらしいけれどあまり使ったことない。<br>移行した環境などで、初めてGitHubにデプロイする場合は、初回一回はコマンドで対話的に実行するとよい。</li>
</ul>
<h2 id="コマンドでのアクセス"><a href="#コマンドでのアクセス" class="headerlink" title="コマンドでのアクセス"></a>コマンドでのアクセス</h2><p>普通にHexo のコマンドをDocker 経由で実行します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it hexo-server hexo new post <span class="string">&quot;Test&quot;</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it hexo-server hexo generate</span><br><span class="line">$ docker <span class="built_in">exec</span> -it hexo-server hexo deploy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cms</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Mirakurun Chinachu</title>
    <url>/2017/01/24/Docker-Mirakurun-Chinachu/</url>
    <content><![CDATA[<p><a href="https://github.com/Chinachu/docker-mirakurun-chinachu">https://github.com/Chinachu/docker-mirakurun-chinachu</a><br>Ubuntu 16.10 の環境でDocker Mirakurun Chinachu を使ってみました。</p>
<span id="more"></span>

<ol>
<li>Docker のインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install curl</span><br><span class="line">$ curl -fsSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>
  Docker Engine がインストールされない&#x2F;バージョンが古い場合は以下とすると良いかもしれない。  <figure class="highlight ini"><figcaption><span>/etc/apt/sources.list.d/docker.list</span></figcaption><table><tr><td class="code"><pre><span class="line">deb <span class="section">[arch=amd64]</span> https://apt.dockerproject.org/repo ubuntu-xenial main</span><br><span class="line">deb <span class="section">[arch=amd64]</span> https://apt.dockerproject.org/repo ubuntu-xenial testing</span><br></pre></td></tr></table></figure></li>
<li>Docker Compose のインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.9.0/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li>
<li>PT3 Driver のインストール<br>  ホストOS(Ubuntu)にPT3ドライバをインストールする。最近のUbuntu は標準PT3 ドライバが入っているので無効にしてからインストールする。 <figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">$ lsmod | grep pt3</span><br><span class="line">earth_pt3             <span class="number"> 22846 </span> 0</span><br><span class="line">dvb_core             <span class="number"> 125865 </span><span class="number"> 2 </span>tc90522,earth_pt3</span><br></pre></td></tr></table></figure>
 <figure class="highlight ini"><figcaption><span>/etc/modprobe.d/blacklist-earth_pt3.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">blacklist earth_pt3</span><br></pre></td></tr></table></figure>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/m-tsudo/pt3.git</span><br><span class="line">$ <span class="built_in">cd</span> pt3/</span><br><span class="line">$ make clean &amp;&amp; make</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="variable">$&#123;SHELL&#125;</span> ./dkms.install</span><br><span class="line">$ <span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l /dev/pt*video*</span><br><span class="line">crw-rw-rw- 1 root video 246, 0 Jun 26 16:07 /dev/pt3video0</span><br><span class="line">crw-rw-rw- 1 root video 246, 1 Jun 26 16:07 /dev/pt3video1</span><br><span class="line">crw-rw-rw- 1 root video 246, 2 Jun 26 16:07 /dev/pt3video2</span><br><span class="line">crw-rw-rw- 1 root video 246, 3 Jun 26 16:07 /dev/pt3video3</span><br></pre></td></tr></table></figure></li>
<li>pcscd の無効化<br>  pcscd はDocker コンテナ内で動作するので、ホストOS では無効にする。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> systemctl stop pcscd.socket</span><br><span class="line">$ <span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> pcscd.socket</span><br></pre></td></tr></table></figure></li>
<li>docker-mirakurun-chinachu の取得 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/h-mineta/docker-mirakurun-chinachu.git</span><br><span class="line">$ <span class="built_in">cd</span> docker-mirakurun-chinachu</span><br></pre></td></tr></table></figure></li>
<li>docker-compose.yml の設定<br>  Ubuntu ではマルチキャストDNS(5353&#x2F;tcp)が競合するので、とりあえず別のポート番号に変更する。無効にしてもよいかもしれない。  <figure class="highlight yaml"><figcaption><span>./docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">chinachu:</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;15353:5353/udp&quot;</span></span><br></pre></td></tr></table></figure>
  録画フォルダを指定  <figure class="highlight yaml"><figcaption><span>./docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">chinachu:</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/PATH/TO/RECORDED:/usr/local/chinachu/recorded</span></span><br></pre></td></tr></table></figure>
  録画フォルダのパーミッションを変更  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 /PATH/TO/RECORDED</span><br></pre></td></tr></table></figure></li>
<li>chinachu の設定  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> ./chinachu/config.sample.json ./chinachu/conf/config.json</span><br></pre></td></tr></table></figure>
  サーバをIPアドレス指定にしてみる。  <figure class="highlight json"><figcaption><span>./chinachu/conf/config.json</span></figcaption><table><tr><td class="code"><pre><span class="line"># <span class="attr">&quot;mirakurunPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://container-mirakurun:40772/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mirakurunPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://192.168.11.2:40772/&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
<li>一旦起動  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure></li>
<li><strong>mirakurun コンテナで</strong> チャンネルをスキャン<br> mirakurun コンテナ上でチャンネルをスキャンする。Kitematic 等のフロントエンドからシェルを起動してもよいです。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it mirakurun sh</span><br><span class="line"><span class="comment"># which recpt1</span></span><br><span class="line"><span class="comment"># for var in `seq 13 62` ; do recpt1 $var 5 /tmp/$var.ts;done</span></span><br><span class="line"><span class="comment"># ls /tmp/*.ts</span></span><br><span class="line"><span class="comment"># rm /tmp/*.ts</span></span><br></pre></td></tr></table></figure></li>
<li>チャンネル設定<br>スキャンした結果をmirakurun の設定に反映する。見つかったチャンネル数分繰り返す。<figure class="highlight yaml"><figcaption><span>./mirakurun/conf/channels.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CH13</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">GR</span></span><br><span class="line">  <span class="attr">channel:</span> <span class="string">&#x27;13&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>docker-mirakurun-chinachu の再起動<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose down</span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure></li>
<li>docker-mirakurun-chinachu の自動起動化<br>  安定して動作するようになったら、自動起動してもよいかもしれない。  <figure class="highlight yaml"><figcaption><span>./docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mirakurun:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">chinachu:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure></li>
<li>KODI アドオンの導入<br>  <a href="https://github.com/Harekaze/pvr.chinachu">https://github.com/Harekaze/pvr.chinachu</a></li>
</ol>
<ul>
<li>ダウンロードとビルド<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/Harekaze/pvr.chinachu.git</span><br><span class="line">$ <span class="built_in">cd</span> pvr.chinachu</span><br><span class="line">$ ./bootstrap</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ <span class="built_in">ls</span> pvr.chinachu.*.zip</span><br></pre></td></tr></table></figure></li>
<li>インストール<br>KODI を起動して、[システム]-[設定]-[アドオン]-[zipファイルからインストール]メニューでzipファイルを指定してインストール</li>
<li>設定<br>[システム]-[設定]-[アドオン]-[My Add-ons]-[PVRクライアント]-[Harekaze(Chinachu PVR Client)]-[設定]<ul>
<li>Chinachu WUI のURL<br><a href="http://192.168.11.2:10772/">http://192.168.11.2:10772/</a></li>
<li>MirakurunのURL(あれば)<br><a href="http://192.168.11.2:40772/">http://192.168.11.2:40772/</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>dtv</category>
      </categories>
      <tags>
        <tag>chinachu</tag>
        <tag>docker</tag>
        <tag>mirakurun</tag>
      </tags>
  </entry>
  <entry>
    <title>Conkie</title>
    <url>/2017/02/04/Conkie/</url>
    <content><![CDATA[<p><img src="/images/conkie-conky.png" alt="Conkie"></p>
<p><a href="https://www.npmjs.com/package/conkie">https://www.npmjs.com/package/conkie</a><br><a href="https://github.com/hash-bang/conkie">https://github.com/hash-bang/conkie</a></p>
<p>Conky のようなelectron 製のシステムモニターConkie を使ってみました。<br>画面左側がConkie（デフォルトテーマ）、中央がGNOMEシステムモニタ、右側がConky です。</p>
<span id="more"></span>

<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install bwm-ng lm-sensors iotop wmctrl</span><br><span class="line">$ <span class="built_in">sudo</span> npm install -g conkie conkie-theme-default</span><br></pre></td></tr></table></figure>

<h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conkie --background</span><br></pre></td></tr></table></figure>

<h2 id="カスタマイズの準備"><a href="#カスタマイズの準備" class="headerlink" title="カスタマイズの準備"></a>カスタマイズの準備</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/hash-bang/conkie-theme-default.git</span><br><span class="line">$ <span class="built_in">cd</span> conkie-theme-default</span><br><span class="line">$ npm install</span><br><span class="line">$ conkie --theme <span class="variable">$PWD</span>/index.html</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tree -L 2</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── app.js</span><br><span class="line">├── chem.png</span><br><span class="line">├── index.html</span><br><span class="line">├── node_modules</span><br><span class="line">│   ├── angular</span><br><span class="line">│   ├── bootstrap</span><br><span class="line">│   ├── font-awesome</span><br><span class="line">│   ├── highcharts</span><br><span class="line">│   ├── highcharts-ng</span><br><span class="line">│   ├── jquery</span><br><span class="line">│   ├── lodash</span><br><span class="line">│   └── moment</span><br><span class="line">├── package.json</span><br><span class="line">└── style.css</span><br></pre></td></tr></table></figure>
<p>見た目を変えるにはindex.html やstyle.css を調整すればよさそうです。</p>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>electron</tag>
        <tag>conkie</tag>
      </tags>
  </entry>
  <entry>
    <title> Docker Mist.io</title>
    <url>/2017/02/04/Docker-Mist-io/</url>
    <content><![CDATA[<p><img src="/images/docker-mistio.png" alt="Docker Mist.io"></p>
<p><a href="https://github.com/mistio/mist.io">https://github.com/mistio/mist.io</a><br><a href="https://hub.docker.com/r/mist/mistio/">https://hub.docker.com/r/mist/mistio/</a></p>
<p>Mist.io は様々な環境を統合的に管理できるWebアプリのようです。Docker 版があったので試してみました。</p>
<span id="more"></span>

<h2 id="Docker-環境の準備"><a href="#Docker-環境の準備" class="headerlink" title="Docker 環境の準備"></a>Docker 環境の準備</h2><p><a href="http://ktkr3d.github.io/Docker/">http://ktkr3d.github.io/Docker/</a></p>
<h2 id="Docker-Compose-設定ファイルの作成"><a href="#Docker-Compose-設定ファイルの作成" class="headerlink" title="Docker Compose 設定ファイルの作成"></a>Docker Compose 設定ファイルの作成</h2><p>扱いやすいようにDocker Compose で起動できるようにします。</p>
<figure class="highlight yaml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mistio:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mist/mistio</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mistio</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure>

<h2 id="管理対象の追加"><a href="#管理対象の追加" class="headerlink" title="管理対象の追加"></a>管理対象の追加</h2><p>Docker、KVM、Linuxサーバを追加してみました。</p>
<p><img src="/images/docker-mistio-home.png" alt="Docker Mist.io Home"></p>
<p>各方式のマシンが並列に表示されます。</p>
<p><img src="/images/docker-mistio-machines.png" alt="Docker Mist.io Machines"></p>
<h2 id="Android-からのアクセス"><a href="#Android-からのアクセス" class="headerlink" title="Android からのアクセス"></a>Android からのアクセス</h2><p><img src="/images/mistio-android.png" alt="Mist.io Android"></p>
]]></content>
      <categories>
        <category>virtualization</category>
      </categories>
      <tags>
        <tag>kvm</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu GNOME 17.04 Beta 1</title>
    <url>/2017/02/25/Ubuntu-GNOME-17-04-Beta-1/</url>
    <content><![CDATA[<p><img src="/images/ubutnu-gnome-17.04-beta1.png" alt="Ubuntu GNOME 17.04 Beta 1"></p>
<p>Ubutu GNOME 17.04 Beta 1 が公開されたので、環境を移行しました。</p>
<span id="more"></span>
]]></content>
  </entry>
  <entry>
    <title>Marp</title>
    <url>/2017/04/14/Marp/</url>
    <content><![CDATA[<p><img src="/images/marp.png" alt="Matp"></p>
<p><a href="https://yhatt.github.io/marp/">https://yhatt.github.io/marp/</a><br>Markdown でスライドが作れるMarp を使ってみました。</p>
<span id="more"></span>

<h2 id="ダウンロードと実行"><a href="#ダウンロードと実行" class="headerlink" title="ダウンロードと実行"></a>ダウンロードと実行</h2><p><a href="https://github.com/yhatt/marp/releases">https://github.com/yhatt/marp/releases</a> からアーカイブをダウンロードします。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> marp &amp;&amp; <span class="built_in">cd</span> marp</span><br><span class="line">$ tar zxvf ../0.0.10-Marp-linux-x64.tar.gz</span><br><span class="line">$ ./Marp</span><br></pre></td></tr></table></figure>

<h2 id="PDF-出力"><a href="#PDF-出力" class="headerlink" title="PDF 出力"></a>PDF 出力</h2><p>[File]-[Export Slides as PDF…]</p>
<h2 id="Hexo-でPDF-を表示"><a href="#Hexo-でPDF-を表示" class="headerlink" title="Hexo でPDF を表示"></a>Hexo でPDF を表示</h2><ul>
<li>プラグインのインストール<br><a href="https://github.com/superalsrk/hexo-pdf">https://github.com/superalsrk/hexo-pdf</a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save hexo-pdf</span><br></pre></td></tr></table></figure></li>
<li>ポストでの表記<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% pdf /images/ubuntu-gnome-17.04.pdf %&#125;</span><br></pre></td></tr></table></figure></li>
<li>表示例

	<div class="row">
    <embed src="/images/ubuntu-gnome-17.04.pdf" width="100%" height="550" type="application/pdf">
	</div>


</li>
</ul>
]]></content>
      <categories>
        <category>editor</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>marp</tag>
      </tags>
  </entry>
  <entry>
    <title>Things to do after installing Ubuntu GNOME 17.04</title>
    <url>/2017/04/15/Things-to-do-after-installing-Ubuntu-GNOME-17-04/</url>
    <content><![CDATA[

	<div class="row">
    <embed src="/images/ubuntu-gnome-17.04.pdf" width="100%" height="550" type="application/pdf">
	</div>




<p><a href="http://ktkr3d.github.io/linux/">http://ktkr3d.github.io/linux/</a><br>Ubuntu GNOME 17.04 がリリースされましたので、インストール後に実行すべきことをまとめてみました。</p>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>ubuntu-gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>Be Careful using Ext2Fsd</title>
    <url>/2017/04/18/Be-Careful-using-Ext2Fsd/</url>
    <content><![CDATA[<p><a href="https://askubuntu.com/questions/849872/how-can-i-prevent-windows-10-from-corrupting-the-ext4-superblock-every-time">https://askubuntu.com/questions/849872/how-can-i-prevent-windows-10-from-corrupting-the-ext4-superblock-every-time</a><br>Windows を再起動した後にUbuntu 16.10 やUbuntu 17.04 が起動しなくなってしまいました。Ubuntu 16.04 は問題無かったので不思議に思っていたところ原因がわかりました。</p>
<span id="more"></span>
<h2 id="事象"><a href="#事象" class="headerlink" title="事象"></a>事象</h2><p>Ext2Fsd はWindows からExt4 パーティションにアクセスできるようになるとても便利なドライバです。私はExt2Fsd をWindows10 に入れていましたが、Windows を再起動した後にext4パーティションが壊れる場合があることに気が付きました。</p>
<table>
<thead>
<tr>
<th align="left">対象</th>
<th align="left">結果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">昔作ったデータ用のext4 パーティション群</td>
<td align="left">問題なし</td>
</tr>
<tr>
<td align="left">Ubuntu 16.04 のext4 パーティション</td>
<td align="left">問題なし</td>
</tr>
<tr>
<td align="left">Ubuntu 16.10 のext4 パーティション</td>
<td align="left">壊れた</td>
</tr>
<tr>
<td align="left">Ubuntu 17.04 のext4 パーティション</td>
<td align="left">壊れた</td>
</tr>
</tbody></table>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>以下の条件からUbuntu 16.10 以降で作成したext4 パーティションのスーパーブロックが破壊されたようです。</p>
<ul>
<li>Ubuntu 16.10 以降ではext4 パーティションを作成する際のデフォルトに<code>metadata_csum</code>オプションと<code>64bit</code>オプションが追加されました。<br><code>metadata_csum</code>オプションはCRCを付けるようです。<br><code>64bit</code>オプションは16TB以上のパーティションの作成が可能になるようです。</li>
<li>Ext2Fsd は<code>metadata_csum</code>オプションと<code>64bit</code>オプションに対応していません。対象のext4パーティションを明示的にマウントしていなくても破壊してしまうようです。</li>
</ul>
<h2 id="対策"><a href="#対策" class="headerlink" title="対策"></a>対策</h2><p>以下のいずれかで暫定対策できそうです。</p>
<ul>
<li>対策方法A<br>Ext4Fsd をアンインストールします。</li>
<li>対策方法B<br>パーティションを作成する前に<code>/etc/mke2fs.conf</code>を編集し、<code>metadata_csum</code>オプションと<code>64bit</code>オプションを無効にするために、以下のファイルから<code>metadata_csum</code>と<code>64bit</code>の指定を削除します。<figure class="highlight mipsasm"><figcaption><span>/etc/mke2fs.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">[fs_types]</span><br><span class="line"><span class="keyword">ext3 </span>= &#123;</span><br><span class="line">    features = has_journal</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">ext4 </span>= &#123;</span><br><span class="line">    features = has_journal,<span class="keyword">extent,huge_file,flex_bg,metadata_csum,64bit,dir_nlink,extra_isize</span></span><br><span class="line"><span class="keyword"></span>    inode_size = <span class="number">256</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">ext4dev </span>= &#123;</span><br><span class="line">    features = has_journal,<span class="keyword">extent,huge_file,flex_bg,metadata_csum,inline_data,64bit,dir_nlink,extra_isize</span></span><br><span class="line"><span class="keyword"></span>    inode_size = <span class="number">256</span></span><br><span class="line">    options = test_fs=<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>対策方法C （試してませんが・・・）<br>パーティション作成後、<code>metadata_csum</code>オプションと<code>64bit</code>オプションを無効にする。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> tune2fs -l /dev/sda7</span><br><span class="line">$ <span class="built_in">sudo</span> tune2fs -O ^metadata_csum,^64bit /dev/sda7</span><br><span class="line">$ <span class="built_in">sudo</span> tune2fs -l /dev/sda7</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>filesystem</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>ext2fsd</tag>
      </tags>
  </entry>
  <entry>
    <title>Set Windows clock to UTC time</title>
    <url>/2017/04/29/Set-Windows-clock-to-UTC-time/</url>
    <content><![CDATA[<p>Linux はハードウェアクロックの値をUTC と解釈して動作するのがデフォルトです。<br>Windows はハードウェアクロックの値をローカルタイムと解釈するので、Windowsをブートする度に時計が9時間ずれて表示されてしまいます。<br>デュアルブート構成のLinux とWindows の時計が正しく表示されるように設定を追加しました。</p>
<span id="more"></span>

<h2 id="Windows-レジストリの追加"><a href="#Windows-レジストリの追加" class="headerlink" title="Windows レジストリの追加"></a>Windows レジストリの追加</h2><ol>
<li><p>コマンドプロンプトを管理者として実行</p>
</li>
<li><p>レジストリエントリの追加</p>
</li>
</ol>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">&gt; reg add HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d <span class="number">1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>system</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>utc</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio on Ubuntu</title>
    <url>/2017/05/04/Android-Studio-on-Ubuntu/</url>
    <content><![CDATA[<p><img src="/images/android-studio-japanese.png" alt="Android Studio Japanese"><br><a href="http://qiita.com/cypher256/items/a87179fbe8dd7f63ec4e">http://qiita.com/cypher256/items/a87179fbe8dd7f63ec4e</a><br>Ubuntu 17.10 (daily build) 上のAndroid Studio を日本語化してみました。</p>
<span id="more"></span>

<h2 id="Ubuntu-Make-のインストール"><a href="#Ubuntu-Make-のインストール" class="headerlink" title="Ubuntu Make のインストール"></a>Ubuntu Make のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:ubuntu-desktop/ubuntu-make</span><br><span class="line">$ <span class="built_in">sudo</span> software-properties-gtk</span><br></pre></td></tr></table></figure>
<p>まだ17.10 用のパッケージが存在しないので、「ディストリビューション」の値を<code>artful</code>から<code>zesty</code>に変更する。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt update</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install ubuntu-make</span></span><br></pre></td></tr></table></figure>

<h2 id="Android-Studio-のインストール"><a href="#Android-Studio-のインストール" class="headerlink" title="Android Studio のインストール"></a>Android Studio のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ umake android android-studio</span><br></pre></td></tr></table></figure>

<p>Ubuntu Make を使った場合、以下の構成になります。</p>
<table>
<thead>
<tr>
<th align="left">パッケージ</th>
<th align="left">ディレクトリ</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Android Studio</td>
<td align="left">&#x2F;home&#x2F;USERID&#x2F;.local&#x2F;share&#x2F;umake&#x2F;android&#x2F;android-studio</td>
</tr>
<tr>
<td align="left">Android SDK</td>
<td align="left">&#x2F;home&#x2F;USERID&#x2F;Android&#x2F;Sdk</td>
</tr>
<tr>
<td align="left">Android NDK</td>
<td align="left">&#x2F;home&#x2F;USERID&#x2F;Android&#x2F;Sdk&#x2F;ndk-bundle</td>
</tr>
<tr>
<td align="left">設定</td>
<td align="left">&#x2F;home&#x2F;USERID&#x2F;.android</td>
</tr>
<tr>
<td align="left">プロジェクト</td>
<td align="left">&#x2F;home&#x2F;USERID&#x2F;AndroidStudioProjects</td>
</tr>
</tbody></table>
<h2 id="Pleiades-プラグイン・ダウンロード"><a href="#Pleiades-プラグイン・ダウンロード" class="headerlink" title="Pleiades プラグイン・ダウンロード"></a>Pleiades プラグイン・ダウンロード</h2><p><a href="http://mergedoc.osdn.jp/">http://mergedoc.osdn.jp/</a> の「Pleiades プラグイン・ダウンロード」の下の「最新版ダウンロード 」をクリックする。以下のファイルがダウンロードされる。<br><a href="http://svn.osdn.jp/svnroot/mergedoc/trunk/Pleiades/build/pleiades.zip">http://svn.osdn.jp/svnroot/mergedoc/trunk/Pleiades/build/pleiades.zip</a></p>
<h2 id="Android-Studio-起動オプションの編集"><a href="#Android-Studio-起動オプションの編集" class="headerlink" title="Android Studio 起動オプションの編集"></a>Android Studio 起動オプションの編集</h2><ol>
<li>Android Studio を起動して、Help &gt; Edit Custom VM Options… を選択する。<br>  <code>/home/USERID/.AndroidStudio2.3/studio64.vmoptions</code> が表示される。</li>
<li>初期インストール時のオプション <code>/home/USERID/.local/share/umake/android/android-studio/bin/studio64.vmoptions</code> の中身を貼り付ける。</li>
<li>pleiades.zip の中の<code>./plugins/jp.sourceforge.mergedoc.pleiades</code>のみを以下の階層になるように展開する。<br>  <code>/home/USERID/.AndroidStudio2.3/jp.sourceforge.mergedoc.pleiades</code></li>
<li>以下を最終行の後に貼り付ける。  <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">-Xverify:none</span><br><span class="line">-javaagent:/home/USERID/.AndroidStudio2.3/jp.sourceforge.mergedoc.pleiades/pleiades.jar</span><br></pre></td></tr></table></figure></li>
<li>Android Studio を再起動する。</li>
</ol>
<h2 id="Android-NDK-のインストール"><a href="#Android-NDK-のインストール" class="headerlink" title="Android NDK のインストール"></a>Android NDK のインストール</h2><ol>
<li>ツール &gt; Android &gt; SDK マネージャー を選択</li>
<li><code>SDK ツール</code>タブを選択</li>
<li><code>NDK</code>にチェクを入れて、<code>OK</code>を押下</li>
</ol>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>android-studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Flatpak on Ubuntu</title>
    <url>/2017/05/04/Flatpak-on-Ubuntu/</url>
    <content><![CDATA[<p><img src="/images/gnome-builder-flatpak.png" alt="GNOME Builder Flatpak"><br>Ubuntu 上のGNOME Builder でFlatpak アプリケーションを作成してみました。<br>予備知識もなくやっているので変なところがあるかもしれません。</p>
<span id="more"></span>

<h2 id="GNOME-Builder-のインストール"><a href="#GNOME-Builder-のインストール" class="headerlink" title="GNOME Builder のインストール"></a>GNOME Builder のインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install gnome-builder</span><br></pre></td></tr></table></figure>

<h2 id="サンプルアプリケーションの作成"><a href="#サンプルアプリケーションの作成" class="headerlink" title="サンプルアプリケーションの作成"></a>サンプルアプリケーションの作成</h2><p>GNOME Builder のプロジェクトウィザードに従って、C アプリケーションのプロジェクトを作成してビルドします。</p>
<h2 id="Flatpak-パッケージのエクスポート"><a href="#Flatpak-パッケージのエクスポート" class="headerlink" title="Flatpak パッケージのエクスポート"></a>Flatpak パッケージのエクスポート</h2><ol>
<li>メニューボタン(ハンバーガーメニュー)からFlatpak &gt; Download Dependencies を選択してしばらく待つ。Transfer インジケータ(下矢印アイコン)が黒くなったら完了。</li>
<li>Flatpak &gt; Export as bundle を選択すると、以下が生成される。</li>
</ol>
<p><code>$HOME/.cache/gnome-builder/flatpak/staging/sample/flatpak:org.gnome.Platform-x86_64-3.22/org.gnome.Sample.flatpak</code></p>
<h2 id="Flatpak-ランタイムのインストール"><a href="#Flatpak-ランタイムのインストール" class="headerlink" title="Flatpak ランタイムのインストール"></a>Flatpak ランタイムのインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ flatpak remote-add --from gnome https://sdk.gnome.org/gnome.flatpakrepo</span><br><span class="line">$ flatpak install gnome org.gnome.Platform//3.22</span><br></pre></td></tr></table></figure>

<h2 id="Flatpak-アプリのインストール"><a href="#Flatpak-アプリのインストール" class="headerlink" title="Flatpak アプリのインストール"></a>Flatpak アプリのインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ flatpak install <span class="variable">$HOME</span>/.cache/gnome-builder/flatpak/staging/sample/flatpak:org.gnome.Platform-x86_64-3.22/org.gnome.Sample.flatpak</span><br></pre></td></tr></table></figure>

<h2 id="Flatpak-アプリの実行"><a href="#Flatpak-アプリの実行" class="headerlink" title="Flatpak アプリの実行"></a>Flatpak アプリの実行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ flatpak run org.gnome.Sample.flatpak</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Flatpak</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity to GNOME Shell</title>
    <url>/2017/05/06/Unity-to-GNOME-Shell/</url>
    <content><![CDATA[<p><a href="http://cdimage.ubuntu.com/ubuntu/">http://cdimage.ubuntu.com/ubuntu/</a><br><a href="http://ktkr3d.github.io/linux/">http://ktkr3d.github.io/linux/</a><br>Ubuntu 17.10 のデイリービルド版が公開されました。Ubuntu 17.10 からはデスクトップ環境がGNOME Shell に変更になる予定ですが、まだUnity の構成のようです。そこで、デスクトップ環境をUninty からGNOME Shell に変更してみました。</p>
<span id="more"></span>

<h2 id="Unity-から-GNOME-Shell-へ変更"><a href="#Unity-から-GNOME-Shell-へ変更" class="headerlink" title="Unity から GNOME Shell へ変更"></a>Unity から GNOME Shell へ変更</h2><ul>
<li>GNOME Shell のインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install gnome-shell gnome-tweak-tool gnome-shell-extensions</span><br></pre></td></tr></table></figure></li>
<li>ウィンドウのボタン位置の変更(「右寄せ、最小化-最大化-閉じる」の場合)  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gsettings <span class="built_in">set</span> org.gnome.desktop.wm.preferences button-layout <span class="string">&#x27;:minimize,maximize,close&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>Adwaita テーマのインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install gnome-themes-standard</span><br></pre></td></tr></table></figure></li>
<li>GNOME 壁紙のインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install gnome-backgrounds</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="GNOME-Shell-拡張の有効化"><a href="#GNOME-Shell-拡張の有効化" class="headerlink" title="GNOME Shell 拡張の有効化"></a>GNOME Shell 拡張の有効化</h2><p>gnome-tweak-tool の拡張機能タブでAlternate Tab を有効にします。</p>
<h2 id="GNOME-Shell-拡張の追加インストール"><a href="#GNOME-Shell-拡張の追加インストール" class="headerlink" title="GNOME Shell 拡張の追加インストール"></a>GNOME Shell 拡張の追加インストール</h2><ul>
<li><a href="https://extensions.gnome.org/extension/1160/dash-to-panel/">Dash to Panel</a></li>
<li><a href="https://extensions.gnome.org/extension/708/panel-osd/">Panel OSD</a></li>
<li><a href="https://extensions.gnome.org/extension/1031/topicons/">Topicons Plus</a></li>
<li><a href="https://extensions.gnome.org/extension/427/workspaces-to-dock/">Workspaces to Dock</a></li>
</ul>
<h2 id="ディスプレイマネージャをGDM-に変更する場合"><a href="#ディスプレイマネージャをGDM-に変更する場合" class="headerlink" title="ディスプレイマネージャをGDM に変更する場合"></a>ディスプレイマネージャをGDM に変更する場合</h2><ul>
<li>LightDM からGDM へ切り替え  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install gdm3</span><br></pre></td></tr></table></figure></li>
<li>LightDM からGDM へ切り替え(インストール後に切り替える場合)  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> dpkg-reconfigure gdm3</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>unity</tag>
        <tag>gnome-shell</tag>
      </tags>
  </entry>
  <entry>
    <title>vagrant-libvirt</title>
    <url>/2017/05/13/vagrant-libvirt/</url>
    <content><![CDATA[<p><a href="https://github.com/vagrant-libvirt/vagrant-libvirt">https://github.com/vagrant-libvirt/vagrant-libvirt</a><br>vagrant-libvirt を使ってVagrantでKVMの仮想環境を構築してみました。</p>
<span id="more"></span>

<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul>
<li>ホストOS<br>Ubuntu 17.10</li>
<li>仮想化<br>KVM(libvirt)</li>
<li>Vagrant 1.9.1</li>
<li>Vagrant プラグイン<ul>
<li>vagrant-libvirt (0.0.40)</li>
<li>vagrant-mutate (1.2.0)</li>
</ul>
</li>
</ul>
<h2 id="Vagrant-のインストール"><a href="#Vagrant-のインストール" class="headerlink" title="Vagrant のインストール"></a>Vagrant のインストール</h2><ul>
<li>標準リポジトリからvagrant をインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install vagrant</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="プラグインのインストール"><a href="#プラグインのインストール" class="headerlink" title="プラグインのインストール"></a>プラグインのインストール</h2><p><a href="https://github.com/vagrant-libvirt/vagrant-libvirt#installation">https://github.com/vagrant-libvirt/vagrant-libvirt#installation</a></p>
<ol>
<li><p>ソースコードリポジトリを有効にしておく</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> software-properties-gtk</span><br></pre></td></tr></table></figure>
<p>  [ソースコード]チェックボックスをチェックしてソースコードリポジトリを有効にした後、リポジトリキャッシュを再読み込みしておく。</p>
</li>
<li><p>依存パッケージのインストール</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt build-dep vagrant ruby-libvirt</span><br><span class="line">$ <span class="built_in">sudo</span> apt install qemu libvirt-bin ebtables dnsmasq</span><br><span class="line">$ <span class="built_in">sudo</span> apt install libxslt-dev libxml2-dev libvirt-dev zlib1g-dev ruby-dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>vagrant-libvirt、vagrant-mutateプラグインのインストール</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant plugin install vagrant-libvirt</span><br><span class="line">$ vagrant plugin install vagrant-mutate</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="仮想環境の構築"><a href="#仮想環境の構築" class="headerlink" title="仮想環境の構築"></a>仮想環境の構築</h2><p><a href="https://atlas.hashicorp.com/boxes/search?provider=libvirt">https://atlas.hashicorp.com/boxes/search?provider=libvirt</a></p>
<h3 id="centos-7-の場合"><a href="#centos-7-の場合" class="headerlink" title="centos&#x2F;7 の場合"></a>centos&#x2F;7 の場合</h3><ul>
<li>URL<br><a href="https://atlas.hashicorp.com/centos/boxes/7">https://atlas.hashicorp.com/centos/boxes/7</a></li>
<li>環境の作成と起動<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p ~/vagrant/centos_7; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">$ vagrant init centos/7; vagrant up --provider libvirt</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="fedora-25-cloud-base-の場合"><a href="#fedora-25-cloud-base-の場合" class="headerlink" title="fedora&#x2F;25-cloud-base の場合"></a>fedora&#x2F;25-cloud-base の場合</h3><ul>
<li>URL<br><a href="https://atlas.hashicorp.com/fedora/boxes/25-cloud-base">https://atlas.hashicorp.com/fedora/boxes/25-cloud-base</a></li>
<li>環境の作成と起動<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p ~/vagrant/fedora_25-cloud-base; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">$ vagrant init fedora/25-cloud-base; vagrant up --provider libvirt</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="debian-jessie64-の場合"><a href="#debian-jessie64-の場合" class="headerlink" title="debian&#x2F;jessie64 の場合"></a>debian&#x2F;jessie64 の場合</h3><ul>
<li>URL<br><a href="https://atlas.hashicorp.com/debian/boxes/jessie64">https://atlas.hashicorp.com/debian/boxes/jessie64</a></li>
<li>環境の作成と起動<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p ~/vagrant/debian_jessie64; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">$ vagrant init debian/jessie64; vagrant up --provider libvirt</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="ceph-ubuntu-xenial-の場合"><a href="#ceph-ubuntu-xenial-の場合" class="headerlink" title="ceph&#x2F;ubuntu-xenial の場合"></a>ceph&#x2F;ubuntu-xenial の場合</h3><ul>
<li>URL<br><a href="https://atlas.hashicorp.com/ceph/boxes/ubuntu-xenial">https://atlas.hashicorp.com/ceph/boxes/ubuntu-xenial</a></li>
<li>環境の作成と起動<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p ~/vagrant/ceph_ubuntu-xenial; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">$ vagrant init ceph/ubuntu-xenial; vagrant up --provider libvirt</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="bento-ubuntu-16-04-の場合"><a href="#bento-ubuntu-16-04-の場合" class="headerlink" title="bento&#x2F;ubuntu-16.04 の場合"></a>bento&#x2F;ubuntu-16.04 の場合</h3><ul>
<li>URL<br><a href="https://atlas.hashicorp.com/bento/boxes/ubuntu-16.04">https://atlas.hashicorp.com/bento/boxes/ubuntu-16.04</a></li>
<li>ボックスの変換<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vagrant box add --provider virtualbox bento/ubuntu-16.04</span><br><span class="line">$ vagrant mutate bento/ubuntu-16.04 libvirt --input-provider virtualbox --force-virtio</span><br></pre></td></tr></table></figure></li>
<li>環境の作成と起動<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p ~/vagrant/bento_ubuntu-16.04; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">$ vagrant init bento/ubuntu-16.04; vagrant up --provider libvirt</span><br></pre></td></tr></table></figure>
ただしNICが構成されていないので、virt-manager 等から直接入って設定が必要みたい。</li>
</ul>
<h3 id="ubuntu-xenial64-やubuntu-xenial-server-cloudimg-の場合"><a href="#ubuntu-xenial64-やubuntu-xenial-server-cloudimg-の場合" class="headerlink" title="ubuntu&#x2F;xenial64 やubuntu&#x2F;xenial-server-cloudimg の場合"></a>ubuntu&#x2F;xenial64 やubuntu&#x2F;xenial-server-cloudimg の場合</h3><ul>
<li>URL<br><a href="https://atlas.hashicorp.com/ubuntu/boxes/xenial64">https://atlas.hashicorp.com/ubuntu/boxes/xenial64</a></li>
<li>URL<br><a href="https://cloud-images.ubuntu.com/xenial/current/">https://cloud-images.ubuntu.com/xenial/current/</a></li>
<li>対応<br><a href="https://github.com/vagrant-libvirt/vagrant-libvirt/issues/602">https://github.com/vagrant-libvirt/vagrant-libvirt/issues/602</a><br>Ubuntu公式系Xenial のVirtualbox イメージはマルチディスク構成になっていますが、vagrant-libvirt がマルチディスク構成に対応してないので、今のところ無理みたい・・・</li>
</ul>
<h2 id="Ansible-のインストール"><a href="#Ansible-のインストール" class="headerlink" title="Ansible のインストール"></a>Ansible のインストール</h2><ul>
<li>ホストの操作<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install ansible</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>vm</tag>
        <tag>vagrant</tag>
        <tag>vagrant-libvirt</tag>
      </tags>
  </entry>
  <entry>
    <title>Argos - GNOME Shell extension</title>
    <url>/2017/05/14/Argos-GNOME-Shell-extension/</url>
    <content><![CDATA[<p><img src="/images/argos.png" alt="argos"><br><a href="https://extensions.gnome.org/extension/1176/argos/">https://extensions.gnome.org/extension/1176/argos/</a><br>GNOME Shell 拡張を好きな言語で簡単に作成できるArgos を使ってみました。<br>これは便利ですね。</p>
<span id="more"></span>

<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p><a href="https://extensions.gnome.org/extension/1176/argos/">https://extensions.gnome.org/extension/1176/argos/</a><br><a href="https://github.com/p-e-w/argos">https://github.com/p-e-w/argos</a></p>
<h2 id="カスタマイズ方法"><a href="#カスタマイズ方法" class="headerlink" title="カスタマイズ方法"></a>カスタマイズ方法</h2><ul>
<li>スクリプトファイルは<code>~/.config/argos/</code> に格納します。</li>
<li>スクリプトファイルに実行許可を与えるとパネルに表示されるようになります。</li>
<li>スクリプトファイルを更新すると自動で再読込みされます。</li>
<li>サンプルを参考によく使うコマンドを並べていきます。</li>
<li><code>---</code>を出力すると区切りになります。</li>
<li>メニューの中に一番下にスクリプトファイルへのリンクが自動で生成されるので、いつでも再編集が容易です。</li>
<li>アイコン名指定(<code>iconName=</code>)は以下を参考に。<br><a href="https://specifications.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html">https://specifications.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html</a></li>
</ul>
<h2 id="カスタマイズ例"><a href="#カスタマイズ例" class="headerlink" title="カスタマイズ例"></a>カスタマイズ例</h2><figure class="highlight bash"><figcaption><span>~/.config/argos/launcher.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">KTKR3D_ICON=$(curl -s <span class="string">&quot;http://ktkr3d.github.io/favicon.ico&quot;</span> | <span class="built_in">base64</span> -w 0)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;|image=&#x27;<span class="variable">$KTKR3D_ICON</span>&#x27; imageWidth=20 &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;---&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Process list (&lt;span color=&#x27;yellow&#x27;&gt;&lt;tt&gt;top&lt;/tt&gt;&lt;/span&gt;) | iconName=utilities-terminal-symbolic bash=top&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;NFS | iconName=&#x27;folder-remote&#x27;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;--mount | bash=&#x27;sudo -t nfs mount 192.168.11.2:/mnt/common /mnt/common&#x27;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;--umount | bash=&#x27;sudo umount /mnt/common&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;MOC | iconName=&#x27;applications-multimedia&#x27;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;--Play (&lt;span color=&#x27;yellow&#x27;&gt;&lt;tt&gt;mocp -S; mocp -p&lt;/tt&gt;&lt;/span&gt;) | iconName=&#x27;media-playback-start&#x27; bash=&#x27;mocp -S; mocp -p&#x27; terminal=&#x27;false&#x27;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;--Stop (&lt;span color=&#x27;yellow&#x27;&gt;&lt;tt&gt;mocp -s&lt;/tt&gt;&lt;/span&gt;) | iconName=&#x27;media-playback-stop&#x27; bash=&#x27;mocp -s&#x27; terminal=&#x27;false&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Update Packages | iconName=&#x27;update-notifier&#x27; bash=&#x27;sudo apt update; sudo apt dist-upgrade; sudo apt autoremove -y; exit&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Kill Kodi | iconName=&#x27;process-stop&#x27; bash=&#x27;killall kodi kodi.bin; exit&#x27;&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>argos</tag>
        <tag>gnome-shell-extensions</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab-CE Japanese Translation</title>
    <url>/2017/05/18/GitLab-CE-Japanese-Translation/</url>
    <content><![CDATA[<p><img src="/images/gitlab-ce.png" alt="GitLab-CE"><br><a href="https://github.com/ksoichiro/gitlab-i18n-patch">https://github.com/ksoichiro/gitlab-i18n-patch</a><br>GitLab-ce を日本語化してDocker-Compose で構築してみました。</p>
<span id="more"></span>

<h2 id="日本語化可能なバージョンの確認"><a href="#日本語化可能なバージョンの確認" class="headerlink" title="日本語化可能なバージョンの確認"></a>日本語化可能なバージョンの確認</h2><p><a href="https://github.com/ksoichiro/gitlab-i18n-patch/tree/master/patches">https://github.com/ksoichiro/gitlab-i18n-patch/tree/master/patches</a><br>日本語化パッチv9.1.4(&#x3D; GitLab-ce 9.1.4 版) が最新でした。</p>
<h2 id="ファイルのダウンロード"><a href="#ファイルのダウンロード" class="headerlink" title="ファイルのダウンロード"></a>ファイルのダウンロード</h2><p>Dockerfile, docker-compose.yml のテンプレートをダウンロードします。<br>日本語化パッチは<code>v9.1.4</code>版をダウンロードします。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> docker-gitlab-ce; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">$ wget https://raw.githubusercontent.com/ksoichiro/gitlab-i18n-patch/master/docker/Dockerfile.template -O Dockerfile</span><br><span class="line">$ wget https://raw.githubusercontent.com/ksoichiro/gitlab-i18n-patch/master/docker/docker-compose.template.yml -O docker-compose.yml</span><br><span class="line">$ wget https://github.com/ksoichiro/gitlab-i18n-patch/raw/master/patches/v9.1.4/app_ja.patch -O app_ja.patch</span><br></pre></td></tr></table></figure>

<h2 id="Dockerfile-の編集"><a href="#Dockerfile-の編集" class="headerlink" title="Dockerfile の編集"></a>Dockerfile の編集</h2><p>今回利用するGitLab-ce のバージョン<code>9.1.4</code>を指定します。</p>
<figure class="highlight ini"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#FROM gitlab/gitlab-ce:@VERSION@-ce.0</span></span><br><span class="line">FROM gitlab/gitlab-ce:9.1.4-ce.0</span><br><span class="line"></span><br><span class="line">RUN apt-get update &gt; /dev/null 2&gt;&amp;1 \</span><br><span class="line">    &amp;&amp; apt-get install patch &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">ADD app_ja.patch /tmp/</span><br><span class="line">RUN cd /opt/gitlab/embedded/service/gitlab-rails \</span><br><span class="line">&amp;&amp; patch -p1 &lt; /tmp/app_ja.patch &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h2 id="docker-compose-yml-の編集"><a href="#docker-compose-yml-の編集" class="headerlink" title="docker-compose.yml の編集"></a>docker-compose.yml の編集</h2><p>Docker サービス名は<code>docker-gitlab-ce</code>にしました。<br>リッスンするポート番号は固定にします。<code>10080</code> にしてみました。</p>
<figure class="highlight yaml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment">#app:</span></span><br><span class="line">  <span class="attr">docker-gitlab-ce:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="comment">#- &#x27;@HTTP_PORT@:80&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;10080:80&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./config:/etc/gitlab</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./logs:/var/log/gitlab</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./data:/var/opt/gitlab</span></span><br></pre></td></tr></table></figure>

<h2 id="GitLab-ce-の起動"><a href="#GitLab-ce-の起動" class="headerlink" title="GitLab-ce の起動"></a>GitLab-ce の起動</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>コマンド実行後、しばらくするとWeb 画面からアクセスできるようになります。</p>
<h2 id="GitLab-ce-の停止"><a href="#GitLab-ce-の停止" class="headerlink" title="GitLab-ce の停止"></a>GitLab-ce の停止</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose down</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>gitlab-ce</tag>
      </tags>
  </entry>
  <entry>
    <title>GNOME Shell 3.25.2 on Antergos</title>
    <url>/2017/05/28/GNOME-Shell-3-25-2-on-Antergos/</url>
    <content><![CDATA[<p><img src="/images/antergos-gnome-shell.png" alt="antergos gnome shell"></p>
<p>Antergos にGNOME Shell 3.25.2 をインストールしてみました。</p>
<span id="more"></span>

<h2 id="gnome-devel-リポジトリの有効化"><a href="#gnome-devel-リポジトリの有効化" class="headerlink" title="gnome-devel リポジトリの有効化"></a>gnome-devel リポジトリの有効化</h2><ul>
<li><code>[core]</code>行の前あたりに以下のコードを挿入します。<figure class="highlight ini"><figcaption><span>/etc/pacman.config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[gnome-devel]</span></span><br><span class="line"><span class="attr">SigLevel</span> = Never</span><br><span class="line"><span class="attr">Server</span> = http://softwareperonista.com.ar/repo/archlinux/gnome-devel/x<span class="number">86_64</span></span><br></pre></td></tr></table></figure></li>
<li>更新<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> pacman -Syyu</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="GNOME-Shell-Extension-の導入"><a href="#GNOME-Shell-Extension-の導入" class="headerlink" title="GNOME Shell Extension の導入"></a>GNOME Shell Extension の導入</h2><ul>
<li><p>chrome-gnome-shell-git の導入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yaourt chrome-gnome-shell-git</span><br></pre></td></tr></table></figure>
</li>
<li><p>GNOME Shell integration アドオンの導入<br>GNOME Shell Extension のページの上のリンクから</p>
</li>
<li><p>GNOME Shell Extension の導入</p>
<ul>
<li>Argos</li>
<li>Dash to Panel</li>
<li>Dynamic Panel Transparency</li>
<li>Gnome-Shutdown Button</li>
<li>TopIcons Plus</li>
<li>Workspaces to Dock</li>
</ul>
</li>
</ul>
<h2 id="日本語フォントのインストール"><a href="#日本語フォントのインストール" class="headerlink" title="日本語フォントのインストール"></a>日本語フォントのインストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> pacman -S noto-fonts-cjk</span><br></pre></td></tr></table></figure>

<h2 id="LightDM-のテーマ修正"><a href="#LightDM-のテーマ修正" class="headerlink" title="LightDM のテーマ修正"></a>LightDM のテーマ修正</h2><p>日本語表示にすると時刻がウィンドウをはみ出してしまいますので対策をします。</p>
<h3 id="フォントサイズを変更する方法"><a href="#フォントサイズを変更する方法" class="headerlink" title="フォントサイズを変更する方法"></a>フォントサイズを変更する方法</h3><p><code>font-size</code> を96px から64px に変更してみました。</p>
<p><img src="/images/lightdm-antergos-style.png" alt="lightdm antergos"></p>
<figure class="highlight css"><figcaption><span>/usr/share/lightdm-webkit/themes/antergos/css/style.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Clock Widget */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.time</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Open Sans&quot;</span>, sans-serif;</span><br><span class="line">    <span class="comment">/* font-size: 96px; */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">64px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#3D73C5</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">252</span>, <span class="number">247</span>, <span class="number">247</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> ease-out;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">11px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="表示言語を変更する方法"><a href="#表示言語を変更する方法" class="headerlink" title="表示言語を変更する方法"></a>表示言語を変更する方法</h3><p>そもそも日本語である必要はないので、表示言語を変更してしまいます。</p>
<p><img src="/images/lightdm-antergos-style-en.png" alt="lightdm antergos"></p>
<figure class="highlight ini"><figcaption><span>/etc/lightdm/lightdm-webkit2-greeter.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#time_language       = auto</span></span><br><span class="line"><span class="attr">time_language</span>       = en</span><br></pre></td></tr></table></figure>

<h3 id="GDM-に切り替える方法"><a href="#GDM-に切り替える方法" class="headerlink" title="GDM に切り替える方法"></a>GDM に切り替える方法</h3><p>そもそもLightDM はマウス操作が面倒だから、GDMに切り替えてしまいます。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> pacman -S gdm</span><br><span class="line">$ <span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> lightdm &amp;&amp; <span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> gdm</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>gnome-shell</tag>
        <tag>Antergos</tag>
      </tags>
  </entry>
  <entry>
    <title>Plotinus</title>
    <url>/2017/05/29/Plotinus/</url>
    <content><![CDATA[<p><img src="/images/plotinus-ja.png" alt="plotinus"><br><a href="https://github.com/p-e-w/plotinus">https://github.com/p-e-w/plotinus</a><br>Ubuntu 17.10 にGNOME API を利用してコマンドパレットを表示するPlotinus を使ってみました。</p>
<span id="more"></span>

<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><ul>
<li>前提ライブラリ<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install git cmake valac libgtk-3-dev</span><br></pre></td></tr></table></figure></li>
<li>Plotinus<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/p-e-w/plotinus.git</span><br><span class="line">$ <span class="built_in">cd</span> plotinus</span><br><span class="line">$ <span class="built_in">mkdir</span> build</span><br><span class="line">$ <span class="built_in">cd</span> build</span><br><span class="line">$ cmake ..</span><br><span class="line">$ make</span><br><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><ul>
<li>現在のロケールで実行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GTK3_MODULES=<span class="variable">$PWD</span>/libplotinus.so gedit</span><br></pre></td></tr></table></figure></li>
<li>LANG&#x3D;C で実行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LANG=C GTK3_MODULES=<span class="variable">$PWD</span>/libplotinus.so gedit</span><br></pre></td></tr></table></figure>
<img src="/images/plotinus.png" alt="plotinus"></li>
</ul>
<h2 id="コマンドパレットの表示"><a href="#コマンドパレットの表示" class="headerlink" title="コマンドパレットの表示"></a>コマンドパレットの表示</h2><p><code>Ctrl</code>+<code>Shift</code>+<code>P</code> を押下します。</p>
]]></content>
      <tags>
        <tag>plotinus</tag>
      </tags>
  </entry>
  <entry>
    <title>qemu 日本語キーボード用パッチ</title>
    <url>/2017/05/30/qemu-japanese-keyboard-patch/</url>
    <content><![CDATA[<p><img src="/images/qemu-patch.png" alt="qemu patch"><br><a href="https://patchwork.kernel.org/patch/9489845/">https://patchwork.kernel.org/patch/9489845/</a><br>Ubuntu 17.10 のqemu-kvm 仮想環境で日本語キーボードのバックスペースの隣の<code>\</code>,<code>|</code>キーが入力できませんでした。<br>調べてみたところ、qemu 2.8 に原因があるようでしたので、パッチを当ててみました。</p>
<span id="more"></span>

<h2 id="qemu-のソースを取得"><a href="#qemu-のソースを取得" class="headerlink" title="qemu のソースを取得"></a>qemu のソースを取得</h2>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> qemu; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">$ apt <span class="built_in">source</span> qemu</span><br><span class="line">$ <span class="built_in">sudo</span> apt build-dep qemu</span><br></pre></td></tr></table></figure>

<h2 id="パッチを当てる"><a href="#パッチを当てる" class="headerlink" title="パッチを当てる"></a>パッチを当てる</h2><p>  <a href="https://patchwork.kernel.org/patch/9489845/">https://patchwork.kernel.org/patch/9489845/</a></p>
<h2 id="パッケージの作成"><a href="#パッケージの作成" class="headerlink" title="パッケージの作成"></a>パッケージの作成</h2>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> qemu-2.8+dfsg</span><br><span class="line">$ dpkg-buildpackage -rfakeroot -uc -b</span><br></pre></td></tr></table></figure>

<p>  以下のパッケージが作成されました。</p>
<ul>
<li>qemu-block-extra_2.8+dfsg-3ubuntu4_amd64.deb</li>
<li>qemu-guest-agent_2.8+dfsg-3ubuntu4_amd64.deb</li>
<li>qemu-kvm_2.8+dfsg-3ubuntu4_amd64.deb</li>
<li>qemu-system-arm_2.8+dfsg-3ubuntu4_amd64.deb</li>
<li>qemu-system-common_2.8+dfsg-3ubuntu4_amd64.deb</li>
<li>qemu-system-mips_2.8+dfsg-3ubuntu4_amd64.deb</li>
<li>qemu-system-misc_2.8+dfsg-3ubuntu4_amd64.deb</li>
<li>qemu-system-ppc_2.8+dfsg-3ubuntu4_amd64.deb</li>
<li>qemu-system-sparc_2.8+dfsg-3ubuntu4_amd64.deb</li>
<li>qemu-system-x86_2.8+dfsg-3ubuntu4_amd64.deb</li>
<li>qemu-system_2.8+dfsg-3ubuntu4_amd64.deb</li>
<li>qemu-user-binfmt_2.8+dfsg-3ubuntu4_amd64.deb</li>
<li>qemu-user-static_2.8+dfsg-3ubuntu4_amd64.deb</li>
<li>qemu-user_2.8+dfsg-3ubuntu4_amd64.deb</li>
<li>qemu-utils_2.8+dfsg-3ubuntu4_amd64.deb</li>
<li>qemu_2.8+dfsg-3ubuntu4_amd64.deb</li>
</ul>
<h2 id="パッケージのインストール"><a href="#パッケージのインストール" class="headerlink" title="パッケージのインストール"></a>パッケージのインストール</h2>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ <span class="built_in">sudo</span> dpkg -i *.deb</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>qwmu</tag>
      </tags>
  </entry>
  <entry>
    <title>Etcher USB イメージライタ</title>
    <url>/2017/05/31/Etcher-USB-Image-Writer/</url>
    <content><![CDATA[<p><img src="/images/etcher.png" alt="etcher"><br><a href="https://etcher.io/">https://etcher.io/</a><br>Electron製のUSB イメージライタEtcher を使ってみました。<br>シンプルな画面ながら、既存データの消去と書き込みは確実な気がします。特に消去が。<br>UnetBootin の代わりに使えそうです。</p>
<span id="more"></span>

<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository <span class="string">&quot;deb https://dl.bintray.com/resin-io/debian stable etcher&quot;</span></span><br><span class="line">$ <span class="built_in">sudo</span> apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 379CE192D401AB61</span><br><span class="line">$ <span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt install etcher-electron</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>etcher</tag>
      </tags>
  </entry>
  <entry>
    <title>Antergos に乗り換えてみました</title>
    <url>/2017/06/03/Switching-from-Ubuntu-to-Antergos/</url>
    <content><![CDATA[<p><img src="https://antergos.com/wp-content/uploads/2014/09/antergos-clean.png" alt="antergos"><br><img src="/images/antergos-arc-dark-theme.png" alt="antergos arc dark theme"><br><a href="https://antergos.com/">https://antergos.com/</a><br><a href="http://ktkr3d.github.io/antergos/">http://ktkr3d.github.io/antergos/</a><br>AntergosはArch Linux系ディストリビューションです。<br>今回、普段使いのデスクトップ環境をUbuntuからAntergosに移行してみました。<br>Antergos(≒Arch Linux)は初期設定さえしてしまえばとても使い勝手のよいディストリビューションと思います。</p>
<span id="more"></span>

<h2 id="Antergos-Arch-Linux-の良いところ"><a href="#Antergos-Arch-Linux-の良いところ" class="headerlink" title="Antergos(Arch Linux)の良いところ"></a>Antergos(Arch Linux)の良いところ</h2><ul>
<li>公式リポジトリやAUR(Arch User Repository)のパッケージが充実している。<br>パッケージ個別のリポジトリを追加しなくてもほとんど揃ってしまいそう。<br>誰が管理してくれているんだろう。</li>
<li>パッケージのバージョンが新しいものが多い。<br>GNOME3の最新のパッケージを導入できる。<br>プロプライエタリな最新のディスプレイドライバも難なく導入できた。</li>
<li>ローリングリリースなので環境が一つで済む。<br>今までは複数世代の環境をパーティションを分けて維持してきました。移行も面倒でした。</li>
<li>パッケージマネージャpamac がシンプルでわかりやすくて使いやすい。<br><code>-git</code>パッケージも自動でビルドしてくれる。<br>自分でビルドしなくてよいのは少し残念な気もします。</li>
<li>ArchWikiのナレッジが豊富。<br>誰が保守してくれているんだろう。</li>
</ul>
<h2 id="移行して気づいたこと"><a href="#移行して気づいたこと" class="headerlink" title="移行して気づいたこと"></a>移行して気づいたこと</h2><ul>
<li>日本語で利用するには少し設定が必要です。<br>これは設定してしまえば解決しそうです。</li>
<li>サービス系パッケージは有効化が必要<br>Ubutu&#x2F;Debian と違ってサービス系パッケージをインストールしてもそのままでは有効にならない場合が多いので、忘れずに有効化(<code>sudo systemctl enable</code>)と開始(<code>sudo systemctl start</code>)をしてあげる。</li>
<li>ユーザアカウントはusersグループに所属しています。</li>
</ul>
<h2 id="日本語環境向けの設定"><a href="#日本語環境向けの設定" class="headerlink" title="日本語環境向けの設定"></a>日本語環境向けの設定</h2><h3 id="文字フォントの設定"><a href="#文字フォントの設定" class="headerlink" title="文字フォントの設定"></a>文字フォントの設定</h3><p>インストール直後は日本語がうまく表示されないのでフォントを追加します。</p>
<ul>
<li>noto-fonts-cjk<br>日中韓のsans-serif体&#x2F;serif体フォントが入っています。</li>
<li>otf-source-han-code-jp<br>端末やエディタで使いやすい固定幅フォントが入っています。</li>
</ul>
<h3 id="かな漢字変換の設定"><a href="#かな漢字変換の設定" class="headerlink" title="かな漢字変換の設定"></a>かな漢字変換の設定</h3><ul>
<li>fcitx-mozc</li>
<li>fcitx-configtool</li>
<li>設定<figure class="highlight bash"><figcaption><span>~/.xprofile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=@im=fcitx</span><br><span class="line"><span class="built_in">export</span> DefaultIMModule=fcitx</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="ディスプレイマネージャの設定"><a href="#ディスプレイマネージャの設定" class="headerlink" title="ディスプレイマネージャの設定"></a>ディスプレイマネージャの設定</h3><p>デフォルトのLightDMのwebkit-greeterのテーマは日本語が考慮されていないので、LightDMの言語をenに変えるか、時刻の文字のサイズを変更しないといけません。特にこだわりがなければGDMに乗り換えてしまってよいと思います。</p>
<ul>
<li>gdm</li>
<li>切り替え<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> lightdm &amp;&amp; <span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> gdm</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="ホームディレクトリ下のディレクトリの英語化"><a href="#ホームディレクトリ下のディレクトリの英語化" class="headerlink" title="ホームディレクトリ下のディレクトリの英語化"></a>ホームディレクトリ下のディレクトリの英語化</h3><p>英語名の方が端末で使いやすいので変更します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ LANG=C xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure>

<h3 id="時刻の設定"><a href="#時刻の設定" class="headerlink" title="時刻の設定"></a>時刻の設定</h3><p>日付と時刻の設定(<code>gnome-control-center datetime</code>)で自動タイムゾーン設定をオンにします。</p>
<h3 id="GTKテーマ、GNOME-Shellテーマ、アイコンの設定"><a href="#GTKテーマ、GNOME-Shellテーマ、アイコンの設定" class="headerlink" title="GTKテーマ、GNOME Shellテーマ、アイコンの設定"></a>GTKテーマ、GNOME Shellテーマ、アイコンの設定</h3><p>日本語に関してではないですが、<code>gnome-tweak-tool</code>でカスタマイズします。Numixも悪くないです。</p>
<ul>
<li>アイコン<br><a href="https://www.gnome-look.org/p/1178976/">https://www.gnome-look.org/p/1178976/</a></li>
<li>GTK3&#x2F;GTK2&#x2F;GNOME Shell テーマ<br><code>arc-gtk-theme</code>パッケージ<br><a href="https://github.com/horst3180/arc-theme">https://github.com/horst3180/arc-theme</a></li>
<li>壁紙<br><a href="http://charlie-henson.deviantart.com/art/Arc-Dark-Elemental-4K-Material-Wallpaper-039-624875950">http://charlie-henson.deviantart.com/art/Arc-Dark-Elemental-4K-Material-Wallpaper-039-624875950</a></li>
</ul>
]]></content>
      <tags>
        <tag>antergos</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 17.10 をインストールしてみました</title>
    <url>/2017/10/30/Ubuntu-17-10/</url>
    <content><![CDATA[<p>Ubuntu 17.10 がリリースされたので、DELL Inspiron 11 3158 にインストールしてみました。</p>
<span id="more"></span>

<ol>
<li>ISO イメージのダウンロード<br> <a href="https://www.ubuntu.com/desktop/1710">https://www.ubuntu.com/desktop/1710</a></li>
<li>ISO をUSB メモリに書き込み、ブートしてインストール</li>
<li>GNOME セッションのインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install gnome-session</span><br></pre></td></tr></table></figure></li>
<li>ログアウトして、デスクトップ環境に’GNOME on Xorg’を選択してログイン</li>
<li>ヘッドフォンジャックの検出に不具合がありそうなので、設定を追加<br> <a href="https://bugs.launchpad.net/ubuntu/+source/alsa-driver/+bug/1575078/comments/30">https://bugs.launchpad.net/ubuntu/+source/alsa-driver/+bug/1575078/comments/30</a><figure class="highlight ini"><figcaption><span>/etc/modprobe.d/alsa.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">options snd-hda-intel <span class="attr">single_cmd</span>=<span class="number">1</span> probe_mask=<span class="number">1</span> model=dell-headset-multi</span><br></pre></td></tr></table></figure></li>
<li>後は普通に環境設定</li>
</ol>
<p>久しぶりにUbuntu をクリーンインストールしてみましたが、個別に外部リポジトリを追加しなくても、インストールできるアプリケーションが増えている気がします。</p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>HDD List</title>
    <url>/2018/04/06/HDD-List/</url>
    <content><![CDATA[<h3 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsblk --output NAME,FSTYPE,LABEL,SIZE,HOTPLUG,MODEL</span><br><span class="line">NAME   FSTYPE LABEL       SIZE HOTPLUG MODEL</span><br><span class="line">sda                     894.3G       0 Patriot Blast   </span><br><span class="line">├─sda1 vfat                 1G       0</span><br><span class="line">├─sda2 ntfs   vol01       500G       0</span><br><span class="line">├─sda3 ext4   artful      200G       0</span><br><span class="line">└─sda4 ext4   antergos  193.3G       0</span><br><span class="line">sdb                       7.3T       0 WDC WD80EFZX-68U</span><br><span class="line">├─sdb1 ext4   media02     7.3T       0</span><br><span class="line">└─sdb2 swap                16G       0</span><br><span class="line">sdc                       2.7T       0 WDC WD30EZRX-00D</span><br><span class="line">├─sdc1 vfat                 1G       0</span><br><span class="line">├─sdc2 ext4   common      1.9T       0</span><br><span class="line">├─sdc3 ext4   yakkety     200G       0</span><br><span class="line">├─sdc4 ext4   xenial      200G       0</span><br><span class="line">├─sdc5 ntfs   windows10 299.6G       0</span><br><span class="line">├─sdc6 ntfs               459M       0</span><br><span class="line">└─sdc7 ext4   zesty       200G       0</span><br><span class="line">sdd                       3.7T       0 WDC WD40EZRX-00S</span><br><span class="line">└─sdd1 ext4   media       3.7T       0</span><br><span class="line">sde                       7.3T       1 0002-1NA17Z     </span><br><span class="line">└─sde1 ext4   media04     7.3T       1</span><br><span class="line">sdf                       5.5T       1 EZRX-00MVLB1    </span><br><span class="line">└─sdf1 ext2   media03     5.5T       1</span><br></pre></td></tr></table></figure>
<h3 id="After"><a href="#After" class="headerlink" title="After"></a>After</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsblk --output NAME,FSTYPE,LABEL,SIZE,HOTPLUG,MODEL</span><br><span class="line">NAME   FSTYPE LABEL       SIZE HOTPLUG MODEL</span><br><span class="line">sda                     894.3G       0 Patriot Blast   </span><br><span class="line">├─sda1 vfat                 1G       0</span><br><span class="line">├─sda2 ntfs   vol01       500G       0</span><br><span class="line">├─sda3 ext4   artful      200G       0</span><br><span class="line">└─sda4 ext4   antergos  193.3G       0</span><br><span class="line">sdb                       2.7T       0 WDC WD30EZRX-00D</span><br><span class="line">├─sdb1 vfat                 1G       0</span><br><span class="line">├─sdb2 ext4   common      1.9T       0</span><br><span class="line">├─sdb3 ext4   yakkety     200G       0</span><br><span class="line">├─sdb4 ext4   xenial      200G       0</span><br><span class="line">├─sdb5 ntfs   windows10 299.6G       0</span><br><span class="line">├─sdb6 ntfs               459M       0</span><br><span class="line">└─sdb7 ext4   zesty       200G       0</span><br><span class="line">sdc                       7.3T       0 TOSHIBA MD05ACA8</span><br><span class="line">├─sdc1                    128M       0</span><br><span class="line">└─sdc2 ntfs   media05     7.3T       0</span><br><span class="line">sdd                       7.3T       0 WDC WD80EFZX-68U</span><br><span class="line">├─sdd1 ext4   media02     7.3T       0</span><br><span class="line">└─sdd2 swap                16G       0</span><br><span class="line">sde                       7.3T       1 0002-1NA17Z     </span><br><span class="line">└─sde1 ext4   media04     7.3T       1</span><br><span class="line">sdf                       5.5T       1 EZRX-00MVLB1    </span><br><span class="line">└─sdf1 ext2   media03     5.5T       1</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Ubutu 18.04 bionic beta2</title>
    <url>/2018/04/13/Ubuntu-18-04-bionic/</url>
    <content><![CDATA[<p><img src="/images/ubuntu-bionic.jpg" alt="ubuntu bionic"></p>
<p>DELL Inspiron 11 にUbuntu 18.04 bionic beta2 をインストールしてみました。</p>
<p><img src="/images/ubuntu-live-patch.png" alt="ubuntu live patch"></p>
<p>Ubuntu Livepatch も設定してみました。</p>
<p><img src="/images/gnome-initial-setup.png" alt="gnome initial setup"></p>
<span id="more"></span>

<h3 id="インストールメディア"><a href="#インストールメディア" class="headerlink" title="インストールメディア"></a>インストールメディア</h3><p><a href="http://cdimage.ubuntu.com/daily-live/current/">http://cdimage.ubuntu.com/daily-live/current/</a></p>
<p>デイリービルドのライブISOをEtcher でUSBメモリに格納しました。</p>
<h3 id="GNOME-の設定"><a href="#GNOME-の設定" class="headerlink" title="GNOME の設定"></a>GNOME の設定</h3><ul>
<li>ホームディレクトリの各フォルダ名を英語名に変更<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ LANG=C xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure></li>
<li>テキストテンプレートファイルの作成<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> ~/Templates/Text</span><br></pre></td></tr></table></figure></li>
<li>alias の設定  <figure class="highlight bash"><figcaption><span>~/.bash_aliases</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> upd=<span class="string">&#x27;sudo apt update -y &amp;&amp; sudo apt dist-upgrade &amp;&amp; sudo apt autoremove -y&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> en=<span class="string">&#x27;export LC_ALL=en_US.UTF8&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ja=<span class="string">&#x27;export LC_ALL=ja_JP.UTF8&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>基本的なパッケージのインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install curl gdebi geany gnome-tweak-tool gparted guake openssh-server seahorse synaptic</span><br></pre></td></tr></table></figure></li>
<li>デスクトップ共有(Vino)の設定<br>gnome-control-center で<code>共有</code>-<code>画面共有</code>をアクティブにする。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gsettings <span class="built_in">set</span> org.gnome.desktop.remote-access require-encryption <span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
<li>gnome-tweak-tool 関連<ul>
<li>トップバー アプリケーションメニュー をオフ</li>
<li>トップバー 時計 日時 をオン</li>
<li>スタートアップアプリケーションに<code>Guake Terminal</code>を追加</li>
</ul>
</li>
</ul>
<h3 id="GNOME-Shell-の設定"><a href="#GNOME-Shell-の設定" class="headerlink" title="GNOME Shell の設定"></a>GNOME Shell の設定</h3><ul>
<li>ブラウザ拡張のインストール<br><a href="https://extensions.gnome.org/">https://extensions.gnome.org/</a><br><code>Click here to install browser extension. </code>をクリックしてインストール</li>
<li>chrome-gnome-shell パッケージのインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install chrome-gnome-shell</span><br></pre></td></tr></table></figure></li>
<li>Extension のインストール<ul>
<li>Dash to Panel</li>
<li>Argos</li>
</ul>
</li>
</ul>
<h3 id="デスクトップのテーマの変更"><a href="#デスクトップのテーマの変更" class="headerlink" title="デスクトップのテーマの変更"></a>デスクトップのテーマの変更</h3><ul>
<li>Ubuntu コミュニティテーマのインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:communitheme/ppa</span><br><span class="line">$ <span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt install ubuntu-communitheme-session</span><br></pre></td></tr></table></figure>
gnome-tweak-tool でアプリケーションに<code>Communitheme</code>を、アイコンに<code>Suru</code>を選択する。</li>
</ul>
<h3 id="アプリケーションのインストール"><a href="#アプリケーションのインストール" class="headerlink" title="アプリケーションのインストール"></a>アプリケーションのインストール</h3><ul>
<li>Google Chrome<br><a href="https://www.google.co.jp/chrome/index.html">https://www.google.co.jp/chrome/index.html</a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> gdebi google-chrome-stable_current_amd64.deb</span><br><span class="line">$ seahorse</span><br></pre></td></tr></table></figure>
<code>seahorse</code>でパスワードをクリアしておく</li>
<li>Kodi<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install kodi</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Ubuntu-Livepatch-の設定"><a href="#Ubuntu-Livepatch-の設定" class="headerlink" title="Ubuntu Livepatch の設定"></a>Ubuntu Livepatch の設定</h3><p><code>software-properties-gtk</code>のアップデートタブで、Ubuntu One にサインインし、<code>Use Canonical Livepatch to increase security between restarts</code>にチェックを入れる。<br>6年前に作ったきりのアカウントでも問題なくログインできました。</p>
<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><ul>
<li>Ubuntu インストーラの次へ進むボタンが画面外に隠れてしまう。Enterキー押下で進んだ。</li>
<li>タッチパッドの右ボタンが左ボタンと同じ動作をする。マウスの右ボタンは正常に動作する。デフォルトの設定が変更されたためのようです。gnome-tweak-tool で以下の設定で解決しました。</li>
</ul>
<p><img src="/images/tweak_rclick.png" alt="tweak rclick"></p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio Code</title>
    <url>/2018/11/04/Visual-Studio-Code/</url>
    <content><![CDATA[<p>Atom よりVisual Studio Code の方が使われているのはどうしてだろう？<br>ということで、Visual Studio Code を使ってみます。</p>
<p>あらかじめ必要な機能が含まれている点や、性能が受け入れられている理由なんでしょうかね。</p>
<span id="more"></span>

<h3 id="拡張機能"><a href="#拡張機能" class="headerlink" title="拡張機能"></a>拡張機能</h3><h4 id="Activitus-Bar"><a href="#Activitus-Bar" class="headerlink" title="Activitus Bar"></a>Activitus Bar</h4><p>  アクティビティバーのボタンをステータスバーに表示<br>    <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;workbench.activityBar.visible&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;activitusbar.views&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;explorer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file-text&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;search&quot;</span><span class="punctuation">:</span> <span class="string">&quot;search&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;repo-forked&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bug&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;package&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extension.project-manager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file-submodule&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;window.titleBarStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;custom&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;git.autofetch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="Japanese-Language-Pack"><a href="#Japanese-Language-Pack" class="headerlink" title="Japanese Language Pack"></a>Japanese Language Pack</h4><p>日本語GUI</p>
<h4 id="Project-Manager"><a href="#Project-Manager" class="headerlink" title="Project Manager"></a>Project Manager</h4><p>プロジェクト管理</p>
<h4 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h4><p>ステータスバーにショートカットを作成</p>
<h3 id="良いところ"><a href="#良いところ" class="headerlink" title="良いところ"></a>良いところ</h3><ul>
<li>軽快</li>
<li>カスタマイズしようと思っていたキーマップがデフォルトで設定されていた</li>
<li>git の基本操作がGUI から簡単にできる</li>
<li>拡張機能の管理がすばやくできる</li>
<li>Project Manager がある</li>
<li>ターミナル機能が標準</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Google Chrome への移行</title>
    <url>/2018/11/08/Google-Chrome-%E3%81%B8%E3%81%AE%E7%A7%BB%E8%A1%8C/</url>
    <content><![CDATA[<p>懲りずにGoogle Chrome への移行を検討します。<br>今回はかなり行けそうな気がします。</p>
<span id="more"></span>

<h3 id="情報収集系拡張機能"><a href="#情報収集系拡張機能" class="headerlink" title="情報収集系拡張機能"></a>情報収集系拡張機能</h3><h4 id="read-crx-2"><a href="#read-crx-2" class="headerlink" title="read crx 2"></a>read crx 2</h4><p>  <a href="https://readcrx-2.github.io/read.crx-2/">https://readcrx-2.github.io/read.crx-2/</a><br>  2チャンネルリーダ  </p>
<ul>
<li>BBSメニュー更新に失敗する場合は以下を指定<br><code>http://kyoran.php.xdomain.jp/readcrx/bbsmenu.html</code>  </li>
<li>ユーザCSSを設定<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line"><span class="attribute">border-top</span>: dotted <span class="number">1px</span> <span class="number">#000000</span> <span class="meta">!important</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#FFFFEE</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>サムネイル対象の拡張子として<code>jpg</code> を追加</li>
</ul>
<h4 id="Freebro"><a href="#Freebro" class="headerlink" title="Freebro"></a>Freebro</h4><p>  <a href="https://chrome.google.com/webstore/detail/feedbro/mefgmmbdailogpfhfblcnnjfmnpnmdfa">https://chrome.google.com/webstore/detail/feedbro/mefgmmbdailogpfhfblcnnjfmnpnmdfa</a><br>  RSSリーダ<br>  ツールバーのボタンをクリックした時に拡張機能を起動するように設定すると便利</p>
<h4 id="TweetDeck"><a href="#TweetDeck" class="headerlink" title="TweetDeck"></a>TweetDeck</h4><p>  <a href="https://chrome.google.com/webstore/detail/tweetdeck-by-twitter/hbdpomandigafcibbmofojjchbcdagbl">https://chrome.google.com/webstore/detail/tweetdeck-by-twitter/hbdpomandigafcibbmofojjchbcdagbl</a><br>  Twitter  </p>
<h4 id="Reditr"><a href="#Reditr" class="headerlink" title="Reditr"></a>Reditr</h4><p>  <a href="https://chrome.google.com/webstore/detail/reditr-web-app-the-best-r/ejmiceoebcclihjdpnmmkdcmcboekibc">https://chrome.google.com/webstore/detail/reditr-web-app-the-best-r/ejmiceoebcclihjdpnmmkdcmcboekibc</a><br>  Reddit  </p>
<h4 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h4><p>  <a href="https://chrome.google.com/webstore/detail/buffer/noojglkidnpfjbincgijbaiedldjfbhh">https://chrome.google.com/webstore/detail/buffer/noojglkidnpfjbincgijbaiedldjfbhh</a><br>  表示中のWeb ページの共有 </p>
<h3 id="ブラウザ操作系拡張機能"><a href="#ブラウザ操作系拡張機能" class="headerlink" title="ブラウザ操作系拡張機能"></a>ブラウザ操作系拡張機能</h3><h4 id="Don’t-Close-Window-With-Last-Tab"><a href="#Don’t-Close-Window-With-Last-Tab" class="headerlink" title="Don’t Close Window With Last Tab"></a>Don’t Close Window With Last Tab</h4><p>  <a href="https://chrome.google.com/webstore/detail/dont-close-window-with-la/dlnpfhfhmkiebpnlllpehlmklgdggbhn">https://chrome.google.com/webstore/detail/dont-close-window-with-la/dlnpfhfhmkiebpnlllpehlmklgdggbhn</a><br>  最後のタブを終了した時にウィンドウを閉じない</p>
<h4 id="Reopen-Tabs"><a href="#Reopen-Tabs" class="headerlink" title="Reopen Tabs"></a>Reopen Tabs</h4><p>  <a href="https://chrome.google.com/webstore/detail/reopen-tabs/pommkpmheehabknkbphiifbpmhcjpgnk">https://chrome.google.com/webstore/detail/reopen-tabs/pommkpmheehabknkbphiifbpmhcjpgnk</a><br>  ボタンクリックで最後に閉じたタブを復元</p>
<h4 id="Go-Back-With-Backspace"><a href="#Go-Back-With-Backspace" class="headerlink" title="Go Back With Backspace"></a>Go Back With Backspace</h4><p>  <a href="https://chrome.google.com/webstore/detail/go-back-with-backspace/eekailopagacbcdloonjhbiecobagjci/related">https://chrome.google.com/webstore/detail/go-back-with-backspace/eekailopagacbcdloonjhbiecobagjci/related</a><br>  Backspace ボタン押下で前のページに戻る</p>
<h3 id="ユーティリティ系拡張機能"><a href="#ユーティリティ系拡張機能" class="headerlink" title="ユーティリティ系拡張機能"></a>ユーティリティ系拡張機能</h3><h4 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad"></a>Notepad</h4><p>  <a href="https://chrome.google.com/webstore/detail/notepad/ffbhefmlcoihbjcmibbfkocmnaiacinp">https://chrome.google.com/webstore/detail/notepad/ffbhefmlcoihbjcmibbfkocmnaiacinp</a><br>  簡単なメモを作って、複数PCで同期</p>
<h4 id="翻訳マン"><a href="#翻訳マン" class="headerlink" title="翻訳マン"></a>翻訳マン</h4><p>  <a href="https://chrome.google.com/webstore/detail/translate-man/fapgabkkfcaejckbfmfcdgnfefbmlion">https://chrome.google.com/webstore/detail/translate-man/fapgabkkfcaejckbfmfcdgnfefbmlion</a><br>  Ctrlボタンでマウス位置の英文を翻訳</p>
<h4 id="世界時計"><a href="#世界時計" class="headerlink" title="世界時計"></a>世界時計</h4><p>  <a href="https://chrome.google.com/webstore/detail/world-clocks/innfmeekncjandlanpgdmmogkcimekgo">https://chrome.google.com/webstore/detail/world-clocks/innfmeekncjandlanpgdmmogkcimekgo</a><br>  異なるタイムゾーンの時刻を確認。デフォルトでサンノゼの設定が入っていて便利</p>
<h4 id="adblock-plus"><a href="#adblock-plus" class="headerlink" title="adblock plus"></a>adblock plus</h4><p>  <a href="https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb">https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb</a><br>  広告ブロック</p>
<h4 id="markdown-viewer"><a href="#markdown-viewer" class="headerlink" title="markdown viewer"></a>markdown viewer</h4><p>  <a href="https://chrome.google.com/webstore/detail/markdown-viewer/ckkdlimhmcjmikdlpkmbgfkaikojcbjk">https://chrome.google.com/webstore/detail/markdown-viewer/ckkdlimhmcjmikdlpkmbgfkaikojcbjk</a><br>  Markdown ファイルの表示</p>
]]></content>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Overlay Clock GNOME Shell Extension</title>
    <url>/2018/11/12/Overlay-Clock-GNOME-Shell-Extension/</url>
    <content><![CDATA[<p><img src="/images/overlay-clock.png" alt="overlay clock"><br><a href="https://github.com/ktkr3d/overlay-clock">https://github.com/ktkr3d/overlay-clock</a></p>
<p>GNOME Shell デスクトップ上に簡単な時計を表示する拡張機能を書いてみました。<br>トップバーが非表示な時でも時刻を確認できて便利です。</p>
<span id="more"></span>

<h3 id="経緯"><a href="#経緯" class="headerlink" title="経緯"></a>経緯</h3><p>私のノートPC は解像度が低いので、Autohidetopbar2 拡張機能を使って、普段はトップパネルを隠しています。<br>少し困るのが時計が常時表示されなくなることです。<br>時刻が気になった時はマウスを画面上部に持っていき、トップパネルを自動表示して、時計を確認していました。<br>そこで、左下隅の普段使わないデッドスペースを有効活用できないかな、と考えてみました。</p>
<h3 id="作り方"><a href="#作り方" class="headerlink" title="作り方"></a>作り方</h3><ol>
<li>GNOME Shell Extension の雛形を作ります。  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gnome-shell-extension-tool --create-extension</span><br></pre></td></tr></table></figure></li>
<li>extension.js<br>  タイマーで時刻表示を更新する処理を追加します。</li>
<li>stylesheet.css<br>  表示レイアウトを調整します。</li>
<li>metadata.json<br>  拡張機能の情報を設定します。</li>
</ol>
<h3 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h3><ol>
<li>ダウンロード<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ktkr3d/overlay-clock.git ~/.local/share/gnome-shell/extensions/overlay-clock@ktkr3d.github.io</span><br></pre></td></tr></table></figure></li>
<li>GNOME Shell の再起動</li>
</ol>
<ul>
<li>X.org の場合はAlt+F2で、”r”</li>
</ul>
<ol start="3">
<li>有効化<br>  gnome-tweak-tool などで拡張機能を有効化します。</li>
</ol>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ul>
<li>環境設定画面</li>
</ul>
]]></content>
      <tags>
        <tag>gnome-shell-extension</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Admin Plugin Customize</title>
    <url>/2018/11/19/Hexo-Admin-Plugin-Customize/</url>
    <content><![CDATA[<p><a href="https://github.com/jaredly/hexo-admin/pull/133/files">https://github.com/jaredly/hexo-admin/pull/133/files</a><br>Hexo Admin の新規記事ファイル名をカスタマイズしてみました。</p>
<span id="more"></span>

<h3 id="解決する課題"><a href="#解決する課題" class="headerlink" title="解決する課題"></a>解決する課題</h3><p>Hexo Admin プラグインで新しい記事を作成すると、<code>_config.yml</code>の<code>new_post_name</code>で指定した形式のファイル名になりません。</p>
<p>有志の方のプルリクエストを適用することにより、Publish ボタンを押下した際に<code>_post</code>ディレクトリ下に<code>new_post_name</code>で指定した形式のファイル名でマークダウンファイルを生成することができます。</p>
<h3 id="Hexo-Admin-Plugin-のインストール"><a href="#Hexo-Admin-Plugin-のインストール" class="headerlink" title="Hexo Admin Plugin のインストール"></a>Hexo Admin Plugin のインストール</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save hexo-admin</span><br></pre></td></tr></table></figure>

<h3 id="プルリクエストの適用"><a href="#プルリクエストの適用" class="headerlink" title="プルリクエストの適用"></a>プルリクエストの適用</h3><p><a href="https://github.com/jaredly/hexo-admin/pull/133/files">https://github.com/jaredly/hexo-admin/pull/133/files</a></p>
<p>上記に従い、以下のファイルを編集します。</p>
<ul>
<li>.&#x2F;node_modules&#x2F;hexo-admin&#x2F;api.js</li>
<li>.&#x2F;node_modules&#x2F;hexo-admin&#x2F;package.json</li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Upgrade to Ubuntu 18.04 on Raspberry Pi</title>
    <url>/2018/11/25/Upgrade-to-Ubuntu-18-04-on-Raspberry-Pi/</url>
    <content><![CDATA[<p><a href="https://linuxconfig.org/how-to-upgrade-to-ubuntu-18-04-lts-bionic-beaver">https://linuxconfig.org/how-to-upgrade-to-ubuntu-18-04-lts-bionic-beaver</a></p>
<p>Raspberry Pi 2 のOS をUbuntu 16.04 LTS から18.04 LTS にアップグレードします。SSH 接続で。</p>
<p>Ubuntu のLTS サポート期間が10年になるらしいですし。</p>
<span id="more"></span>

<h3 id="リモート接続"><a href="#リモート接続" class="headerlink" title="リモート接続"></a>リモート接続</h3><p>私はWindows 10 上のConEmu でRaspberry Pi にSSH 接続してます。念のため、2セッションを横並びに表示しておきました。</p>
<h3 id="16-04-LTS-のパッケージの更新"><a href="#16-04-LTS-のパッケージの更新" class="headerlink" title="16.04 LTS のパッケージの更新"></a>16.04 LTS のパッケージの更新</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update</span><br><span class="line">$ <span class="built_in">sudo</span> apt dist-upgrade</span><br><span class="line">$ <span class="built_in">sudo</span> apt autoremove</span><br></pre></td></tr></table></figure>

<h3 id="18-04-LTS-へのアップグレード"><a href="#18-04-LTS-へのアップグレード" class="headerlink" title="18.04 LTS へのアップグレード"></a>18.04 LTS へのアップグレード</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> ufw allow 1022</span><br><span class="line">$ <span class="built_in">sudo</span> apt install update-manager-core</span><br><span class="line">$ <span class="built_in">sudo</span> do-release-upgrade</span><br></pre></td></tr></table></figure>

<p>しばらく待ちます。<br>リスタート後にSSH接続で問題なければufw の設定を戻します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> ufw deny 1022</span><br></pre></td></tr></table></figure>

<h3 id="OpenVPN-の確認"><a href="#OpenVPN-の確認" class="headerlink" title="OpenVPN の確認"></a>OpenVPN の確認</h3><p>そのままでインターネットからVPN できました。</p>
<h3 id="Samba-の確認"><a href="#Samba-の確認" class="headerlink" title="Samba の確認"></a>Samba の確認</h3><p>そのままでローカルネットワーク上から接続できました。</p>
<h3 id="DDNS-の確認"><a href="#DDNS-の確認" class="headerlink" title="DDNS の確認"></a>DDNS の確認</h3><p>crontab の指定が維持されているので、DDNS の更新は大丈夫と思われる。</p>
]]></content>
      <tags>
        <tag>raspberry-pi</tag>
      </tags>
  </entry>
  <entry>
    <title>Kodi v18 Leia RC1</title>
    <url>/2018/11/26/Kodi-v18-Leia-RC1/</url>
    <content><![CDATA[<p><img src="/images/kodi_v18_leia_rc1.png" alt="kodi v18 leia rc1"><br>Kodi v18 Leia RC1 が公開されたのでインストールしてみました。</p>
<p>ビデオ再生中にお気に入り再生すると異常終了する不具合が修正されているっぽい。</p>
<span id="more"></span>

<h3 id="Kodi-v18-の変更点"><a href="#Kodi-v18-の変更点" class="headerlink" title="Kodi v18 の変更点"></a>Kodi v18 の変更点</h3><ul>
<li><a href="https://kodi.wiki/view/Kodi_v18_(Leia)_FAQ#What_are_some_of_the_noticeable_new_features.3F">https://kodi.wiki/view/Kodi_v18_(Leia)_FAQ#What_are_some_of_the_noticeable_new_features.3F</a></li>
<li><a href="https://kodi.wiki/view/Kodi_v18_(Leia)_changelog">https://kodi.wiki/view/Kodi_v18_(Leia)_changelog</a></li>
</ul>
<h3 id="Kodi-v17-の削除"><a href="#Kodi-v17-の削除" class="headerlink" title="Kodi v17 の削除"></a>Kodi v17 の削除</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt remove kodi</span><br><span class="line">$ <span class="built_in">sudo</span> apt autoremove</span><br></pre></td></tr></table></figure>

<h3 id="Kodi-v18-RC1-のインストール"><a href="#Kodi-v18-RC1-のインストール" class="headerlink" title="Kodi v18 RC1 のインストール"></a>Kodi v18 RC1 のインストール</h3><p><a href="https://kodi.wiki/view/HOW-TO:Install_Kodi_for_Linux">https://kodi.wiki/view/HOW-TO:Install_Kodi_for_Linux</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:team-xbmc/unstable</span><br><span class="line">$ <span class="built_in">sudo</span> apt update</span><br><span class="line">$ <span class="built_in">sudo</span> apt install kodi</span><br></pre></td></tr></table></figure>

<h3 id="アドオンの更新-Ubuntu-の場合"><a href="#アドオンの更新-Ubuntu-の場合" class="headerlink" title="アドオンの更新(Ubuntu の場合)"></a>アドオンの更新(Ubuntu の場合)</h3><ol>
<li>pvr.chinachu の削除</li>
<li>pvr.chinachu のビルド<br>  <a href="https://github.com/Harekaze/pvr.chinachu/tree/18.x-Leia">https://github.com/Harekaze/pvr.chinachu/tree/18.x-Leia</a>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b 18.x-Leia https://github.com/Harekaze/pvr.chinachu.git</span><br><span class="line">$ <span class="built_in">cd</span> pvr.chinachu/</span><br><span class="line">$ ./bootstrap</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ <span class="built_in">ls</span> pvr.chinachu.zip</span><br></pre></td></tr></table></figure></li>
<li>pvr.chinachu のインストール</li>
<li>pvr.chinachu の設定<br>  <code>http://192.168.11.2:20772</code></li>
<li>Kodi の再起動</li>
</ol>
<h3 id="Windows-用アドオンのビルド"><a href="#Windows-用アドオンのビルド" class="headerlink" title="Windows 用アドオンのビルド"></a>Windows 用アドオンのビルド</h3><p>Kodi v18 32bit 版を使いました。</p>
<figure class="highlight ps1"><figcaption><span>build.ps1</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#&amp; $&#123;env:ProgramFiles(x86)&#125;\MSBuild\14.0\Bin\MSBuild.exe .\VS2015\pvr.chinachu.sln /t:Clean,Build /p:Configuration=Release /p:Platform=x86</span></span><br><span class="line">&amp; <span class="variable">$</span>&#123;env:ProgramFiles(x86)&#125;<span class="string">&quot;\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\MSBuild.exe&quot;</span> .\VS2015\pvr.chinachu.sln /t:Clean,Build /p:Configuration=Release /p:Platform=x86</span><br></pre></td></tr></table></figure>

<p>管理者モードでPowerShell を実行して</p>
<figure class="highlight ps1"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">Set-ExecutionPolicy</span> Unrestricted</span><br><span class="line">&gt; ./build.ps1</span><br><span class="line">&gt; <span class="built_in">ls</span> ./pvr.chinachu.zip</span><br><span class="line">&gt; <span class="built_in">Set-ExecutionPolicy</span> RemoteSigned</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Thunderbird ReplyWithHeader Extension</title>
    <url>/2018/11/29/Thunderbird-ReplyWithHeader-Extension/</url>
    <content><![CDATA[<p>Gmail の返信&#x2F;転送時の形式をカスタマイズします。</p>
<ul>
<li>プレーンテキスト化</li>
<li>引用符の削除</li>
<li>返信&#x2F;転送ヘッダの付与</li>
</ul>
<p>さすがThunderbirdです。よくできています。</p>
<span id="more"></span>

<h3 id="Thunderbird"><a href="#Thunderbird" class="headerlink" title="Thunderbird"></a>Thunderbird</h3><ul>
<li>すでにインストールされていました。</li>
<li>できるだけプレーンテキスト形式になるように設定</li>
<li>メール一覧のソート方法を全体適用<br><a href="https://kwakita.blog/2015/01/05/message-ordering-in-thunderbird/">https://kwakita.blog/2015/01/05/message-ordering-in-thunderbird/</a></li>
</ul>
<h3 id="ReplyWithHeader-拡張の導入と設定"><a href="#ReplyWithHeader-拡張の導入と設定" class="headerlink" title="ReplyWithHeader 拡張の導入と設定"></a>ReplyWithHeader 拡張の導入と設定</h3><ul>
<li>返信、転送の際にメールヘッダ的なテキストを付加してくれる。<br>また、余分な引用符を排除してくれる。</li>
<li>基本<code>Default</code>に再設定</li>
<li>時刻は24時間制に設定</li>
<li>ただし、元メールによっては、返信メールを下書きフォルダに保存した後で再編集しようとすると、文字化けする。アドオンを無効にすると、発生しない。なんでだろう…<br>暫定対処としては、以下の手順を踏む。<ol>
<li>下書きフォルダに保存する</li>
<li>一旦、削除してゴミ箱フォルダに入れる</li>
<li>ゴミ箱フォルダ内で、<code>返信</code>を選んで編集モードにする</li>
<li>下書きフォルダに再度保存する</li>
<li><code>編集</code>モードにしても、もう文字化けしなくなる</li>
</ol>
</li>
</ul>
<h3 id="Confirm-address"><a href="#Confirm-address" class="headerlink" title="Confirm-address"></a>Confirm-address</h3><ul>
<li>送信前の宛先確認</li>
</ul>
<h3 id="Lightning"><a href="#Lightning" class="headerlink" title="Lightning"></a>Lightning</h3><ul>
<li>カレンダー機能</li>
<li>Linux 版は互換性の問題があったため、xpi をマニュアルインストール</li>
</ul>
<h3 id="Provider-for-Google-Calendar"><a href="#Provider-for-Google-Calendar" class="headerlink" title="Provider for Google Calendar"></a>Provider for Google Calendar</h3><ul>
<li>Google カレンダーとの同期してくれる</li>
<li>以前より、格段に設定が楽になっていました。</li>
</ul>
]]></content>
      <tags>
        <tag>thunderbird</tag>
      </tags>
  </entry>
  <entry>
    <title>Nextcloud on Raspberry Pi</title>
    <url>/2018/11/30/Nextcloud-on-Raspberry-Pi/</url>
    <content><![CDATA[<p>Raspberry Pi 2 にNextcloud の環境を構築してみました。<br>snap パッケージを利用したので、とても簡単でした。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">HW</td>
<td align="left">Raspberry Pi 2</td>
</tr>
<tr>
<td align="left">OS</td>
<td align="left">Ubuntu 18.04 LTS</td>
</tr>
<tr>
<td align="left">Package</td>
<td align="left">Nextcloud 13.0 Snap 版</td>
</tr>
</tbody></table>
<h3 id="構築手順"><a href="#構築手順" class="headerlink" title="構築手順"></a>構築手順</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> snap install nextcloud</span><br></pre></td></tr></table></figure>

<h3 id="Ubuntu-用クライアント"><a href="#Ubuntu-用クライアント" class="headerlink" title="Ubuntu 用クライアント"></a>Ubuntu 用クライアント</h3><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:nextcloud-devs/client</span><br><span class="line">sudo apy update</span><br><span class="line">sudo apt install nextcloud-client</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Unity Development with VS Code</title>
    <url>/2018/12/04/Unity-Development-with-VS-Code/</url>
    <content><![CDATA[<p><a href="https://code.visualstudio.com/docs/other/unity">https://code.visualstudio.com/docs/other/unity</a><br>Unity とVisual Studio Code を連携してみました。</p>
<span id="more"></span>
<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Unity Editor 2018.2.18f1 Personal</li>
<li>Visual Studio Code 1.29.1</li>
</ul>
<h3 id="Install-the-NET-SDK"><a href="#Install-the-NET-SDK" class="headerlink" title="Install the .NET SDK"></a>Install the .NET SDK</h3><p><a href="https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial">https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial</a></p>
<h3 id="Visual-Studio-Code-Extensions"><a href="#Visual-Studio-Code-Extensions" class="headerlink" title="Visual Studio Code Extensions"></a>Visual Studio Code Extensions</h3><ul>
<li>C# for Visual Studio Code (powered by OmniSharp)</li>
<li>Debugger for Unity</li>
<li>Unity Tools</li>
<li>Unity Snippets</li>
<li>eppz!</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Ghost on Docker</title>
    <url>/2018/12/05/Ghost-on-Docker/</url>
    <content><![CDATA[<p>Web ベースでDocker の管理ができるPortainer でブログシステムGhost のDocker コンテナを利用してみました。<br>GUI だけで構築するなんてお手軽ですね。しかも、Ghost は高速らしいですね。</p>
<span id="more"></span>

<h3 id="Ghost-Docker-コンテナの起動"><a href="#Ghost-Docker-コンテナの起動" class="headerlink" title="Ghost Docker コンテナの起動"></a>Ghost Docker コンテナの起動</h3><ol>
<li>Portainer 画面<code>http://192.168.11.6:9000</code></li>
<li><code>Add Template</code>メニュー</li>
<li><code>Ghost</code>をクリック</li>
<li>しばらく待つ</li>
<li>コンテナが起動したらポート番号を確認<code>32768</code></li>
</ol>
<h3 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h3><p><code>http://192.168.11.6:32768/admin</code></p>
<h3 id="記事投稿"><a href="#記事投稿" class="headerlink" title="記事投稿"></a>記事投稿</h3><p><code>http://192.168.11.6:32768/ghost</code></p>
<h3 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h3><ul>
<li>リンクのurlの補正</li>
<li>github へのデプロイ</li>
</ul>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker on WSL</title>
    <url>/2018/12/08/Docker-on-WSL/</url>
    <content><![CDATA[<p><a href="https://github.com/Microsoft/WSL/issues/2291#issuecomment-383698720">https://github.com/Microsoft/WSL/issues/2291#issuecomment-383698720</a><br>Windows 10 のWSL(Windows Subsystem for Linux) 上でDocker が動くらしいので、試してみました。</p>
<ul>
<li>Windows 10 Pro 1803</li>
<li>WSL: Ubuntu 18.04 LTS</li>
<li>Docker 18.06.1-ce</li>
</ul>
<p>WSL を管理者モードで起動することと、起動後のおまじないがポイントみたいです。</p>
<span id="more"></span>

<h3 id="WSL-のインストール"><a href="#WSL-のインストール" class="headerlink" title="WSL のインストール"></a>WSL のインストール</h3><p>Windows Store から<code>Ubuntu 18.04 LTS</code> をインストールします。</p>
<h3 id="Docker-のインストール"><a href="#Docker-のインストール" class="headerlink" title="Docker のインストール"></a>Docker のインストール</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install docker.io</span><br><span class="line">$ <span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>

<h3 id="WSL-の起動-毎回"><a href="#WSL-の起動-毎回" class="headerlink" title="WSL の起動(毎回)"></a>WSL の起動(毎回)</h3><p><code>Ubuntu 18.04 LTS</code> を管理者モードで起動します。</p>
<h3 id="Docker-の起動-毎回"><a href="#Docker-の起動-毎回" class="headerlink" title="Docker の起動(毎回)"></a>Docker の起動(毎回)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> cgroupfs-mount</span><br><span class="line">$ <span class="built_in">sudo</span> service docker start</span><br></pre></td></tr></table></figure>

<p>毎回管理者モードでWSL を起動するとか、コマンドを入力するとか面倒ですね。</p>
]]></content>
  </entry>
  <entry>
    <title>Rancher</title>
    <url>/2018/12/14/Rancher/</url>
    <content><![CDATA[<p><a href="https://rancher.com/">https://rancher.com/</a></p>
<p>コンテナ管理ソフトウェアRancher を動かしてみました。</p>
<ul>
<li>Ubuntu 18.04 x86_64 LTS</li>
<li>docker 18.06.1-ce</li>
<li>docker-compose 1.21.0</li>
<li>Rancher v1.6.25</li>
</ul>
<span id="more"></span>

<h3 id="Docker-のインストール"><a href="#Docker-のインストール" class="headerlink" title="Docker のインストール"></a>Docker のインストール</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install docker.io docker-compose</span><br><span class="line">$ <span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>

<h3 id="docker-compose-yml-の作成"><a href="#docker-compose-yml-の作成" class="headerlink" title="docker-compose.yml の作成"></a>docker-compose.yml の作成</h3><figure class="highlight yaml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rancher:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rancher/server:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data/mysql/:/var/lib/mysql</span></span><br></pre></td></tr></table></figure>

<h3 id="Rancher-コンテナの起動"><a href="#Rancher-コンテナの起動" class="headerlink" title="Rancher コンテナの起動"></a>Rancher コンテナの起動</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> ufw allow 8080</span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure>
<h3 id="Rancher-にアクセス"><a href="#Rancher-にアクセス" class="headerlink" title="Rancher にアクセス"></a>Rancher にアクセス</h3><ul>
<li><code>http://192.168.11.3:8080</code></li>
<li>右下の表示言語の選択を<code>日本語</code>に変更</li>
<li>ホストを追加<ul>
<li>対象ホストで500&#x2F;udp, 4500 のオープン</li>
<li>IP の指定</li>
<li>対象ホストでrancher&#x2F;agent コンテナの起動</li>
</ul>
</li>
<li>スタックを追加</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Tilix</title>
    <url>/2018/12/14/Tilix/</url>
    <content><![CDATA[<p><a href="https://gnunn1.github.io/tilix-web/">https://gnunn1.github.io/tilix-web/</a></p>
<p>ターミナルエミュレータTilix を使ってみました。</p>
<ul>
<li>Ubuntu 18.10 x86_64</li>
<li>Tilix 1.8.1</li>
</ul>
<p>Quake スタイルのドロップダウンターミナルとして、GNOME Shell 拡張のDropDownTerminal &#x2F; DropDownTerminalX、Guake、Terminator 等を使ってきました。それらと比べて、Tilix はターミナルのタブ化の他、画面分割が柔軟にできて、とても便利です。 </p>
<span id="more"></span>

<h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install tilix</span><br></pre></td></tr></table></figure>

<h3 id="Tilix-の起動設定"><a href="#Tilix-の起動設定" class="headerlink" title="Tilix の起動設定"></a>Tilix の起動設定</h3><p>設定(gnome-control-center)の デバイス - キーボード - キーボードショートカット で、<code>tilix --quake</code> を<code>F12</code> に割り当てます。</p>
<h3 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h3><ol>
<li>Tilix のタイトルバーのアイコンをクリックし、設定メニューを選択</li>
<li>外観 - Window Style -&gt; <code>Disable CSD</code></li>
<li>外観 - Theme variant -&gt; <code>暗い</code></li>
<li>Quake - <code>Hide the tool bar of the window</code> -&gt; チェック</li>
<li>ショートカット - アプリケーション - 設定を開く -&gt; Alt+Return</li>
<li>プロファイル - デフォルト - color - color schema -&gt; <code>Monokai Dark</code></li>
<li>プロファイル - デフォルト - color - オプション - Transparancy -&gt; 10% くらいに</li>
</ol>
<h3 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h3><ul>
<li>Tilix の表示&#x2F;非表示の切り替えは<code>F12</code></li>
<li>新規タブは右クリックのアイコン</li>
<li>タブの最大化&#x2F;リストアは右上のアイコン</li>
<li>タブ間の切り替えは<code>Ctrl+Tab</code></li>
<li>設定画面は<code>Alt+Enter</code></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>TypeScript</title>
    <url>/2018/12/15/TypeScript/</url>
    <content><![CDATA[<p><img src="/images/typescript.png" alt="typescript"></p>
<p><a href="https://code.visualstudio.com/docs/languages/typescript">https://code.visualstudio.com/docs/languages/typescript</a></p>
<p>Visual Studio Code でTypeScript を実行してみました。</p>
<ul>
<li>Ubuntu 18.10 x86_64</li>
<li>nodejs v11.4.0</li>
<li>TypeScript 3.2.2</li>
<li>Visual Studio Code 1.30.0</li>
</ul>
<span id="more"></span>

<h3 id="nodejs-11-のインストール"><a href="#nodejs-11-のインストール" class="headerlink" title="nodejs 11 のインストール"></a>nodejs 11 のインストール</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -sL https://deb.nodesource.com/setup_11.x | <span class="built_in">sudo</span> -E bash -</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install -y nodejs</span><br></pre></td></tr></table></figure>

<h3 id="TypeScript-のインストール"><a href="#TypeScript-のインストール" class="headerlink" title="TypeScript のインストール"></a>TypeScript のインストール</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> npm install -g typescript</span><br></pre></td></tr></table></figure>

<h3 id="プロジェクトフォルダの作成とvscode-の起動"><a href="#プロジェクトフォルダの作成とvscode-の起動" class="headerlink" title="プロジェクトフォルダの作成とvscode の起動"></a>プロジェクトフォルダの作成とvscode の起動</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> hello-ts</span><br><span class="line">$ code hello-ts</span><br></pre></td></tr></table></figure>

<h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;compilerOptions&quot;: &#123;</span><br><span class="line">        &quot;target&quot;: &quot;es5&quot;,</span><br><span class="line">        &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class="line">        &quot;sourceMap&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HelloWorld-ts"><a href="#HelloWorld-ts" class="headerlink" title="HelloWorld.ts"></a>HelloWorld.ts</h3><figure class="highlight ts"><figcaption><span>HelloWorld.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Startup</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">main</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Startup</span>.<span class="title function_">main</span>();</span><br></pre></td></tr></table></figure>

<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><p>vscode の[デバッグ]-[デバッグの開始]</p>
]]></content>
  </entry>
  <entry>
    <title>Vue.js</title>
    <url>/2018/12/17/Vue-js/</url>
    <content><![CDATA[<p><img src="/images/vue-ui.png" alt="vue ui"><br>Vue.js を試してみました。</p>
<ul>
<li>Ubuntu 18.10 x86_64</li>
<li>nodejs 11.4.0<ul>
<li>vue cli 3.2.1</li>
</ul>
</li>
<li>Visual Studio Code 1.30.0<ul>
<li>Vue 2 Snippets</li>
<li>Vue VS Code Extension Pack</li>
</ul>
</li>
<li>Google Chrome 71.0.3578.80<ul>
<li>Vue.js devtools</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h3 id="vue-cli-のインストール"><a href="#vue-cli-のインストール" class="headerlink" title="vue cli のインストール"></a>vue cli のインストール</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<h3 id="サンプルVue-js-アプリケーションの作成"><a href="#サンプルVue-js-アプリケーションの作成" class="headerlink" title="サンプルVue.js アプリケーションの作成"></a>サンプルVue.js アプリケーションの作成</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue ui</span><br></pre></td></tr></table></figure>

<p>ブラウザ内のGUI で設定していきます。<br>手動設定を選択して、以下を指定してみました。</p>
<ul>
<li>TypeScript 対応</li>
<li>TSLint</li>
</ul>
<p><img src="/images/vue-ui.png" alt="vue ui"></p>
<p><code>build</code>, <code>lint</code> 等を画面から実行できます。</p>
<h3 id="サンプルVue-js-アプリケーションの実行"><a href="#サンプルVue-js-アプリケーションの実行" class="headerlink" title="サンプルVue.js アプリケーションの実行"></a>サンプルVue.js アプリケーションの実行</h3><p><code>serve</code> 画面で、<code>アプリを開く</code>を選択すると、作成したサンプルアプリが新しいタブに表示されます。<br><code>F12</code>キー押下して、デベロッパーツールから<code>Vue</code>を選択すると、Vue.js devtools でデバッグできます。</p>
<p><img src="/images/vuejs-devtools.png" alt="vue.js devtools"></p>
<h3 id="コードの編集"><a href="#コードの編集" class="headerlink" title="コードの編集"></a>コードの編集</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ code .</span><br></pre></td></tr></table></figure>

<p><img src="/images/vue-vscode.png" alt="vue vscode"></p>
<h3 id="生成されたもの"><a href="#生成されたもの" class="headerlink" title="生成されたもの"></a>生成されたもの</h3><figure class="highlight ts"><figcaption><span>./src/main.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><figcaption><span>./src/App.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;Welcome to Your Vue.js + TypeScript App&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Vue</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">@<span class="title class_">Component</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">HelloWorld</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vue</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-family</span>: <span class="string">&#x27;Avenir&#x27;</span>, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span><br><span class="line"><span class="language-css">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><figcaption><span>./src/components/HelloWorld.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      For a guide and recipes on how to configure / customize this project,<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      check out the</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://cli.vuejs.org&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>vue-cli documentation<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Installed CLI Plugins<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>babel<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-typescript&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>typescript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Essential Links<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://vuejs.org&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>Core Docs<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://forum.vuejs.org&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>Forum<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://chat.vuejs.org&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>Community Chat<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://twitter.com/vuejs&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://news.vuejs.org&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Ecosystem<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://router.vuejs.org&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>vue-router<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://vuex.vuejs.org&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>vuex<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/vuejs/vue-devtools#vue-devtools&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>vue-devtools<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://vue-loader.vuejs.org&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>vue-loader<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/vuejs/awesome-vue&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>awesome-vue<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Prop</span>, <span class="title class_">Vue</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">@<span class="title class_">Component</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vue</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  @<span class="title class_">Prop</span>() private msg!: string;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">40px</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">list-style-type</span>: none;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#42b983</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Nuxt.js</title>
    <url>/2018/12/26/Nuxt-js/</url>
    <content><![CDATA[<p><img src="/images/nuxt-vuetify.png" alt="nuxt vuetify"><br><a href="https://ja.nuxtjs.org/guide/installation/">https://ja.nuxtjs.org/guide/installation/</a><br>Nuxt.js はVue.js アプリケーションを作成するためのフレームワークです。<br>Nuxt.js を試してみました。</p>
<ul>
<li>Ubuntu 18.10</li>
<li>Node.js 11.5.0</li>
<li>Nuxt.js 2.3.4</li>
</ul>
<span id="more"></span>
<h3 id="Nuxt-js-アプリの作成"><a href="#Nuxt-js-アプリの作成" class="headerlink" title="Nuxt.js アプリの作成"></a>Nuxt.js アプリの作成</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx create-nuxt-app MyNuxtApp</span><br></pre></td></tr></table></figure>

<h3 id="作成オプション"><a href="#作成オプション" class="headerlink" title="作成オプション"></a>作成オプション</h3><table>
<thead>
<tr>
<th align="left">オプション項目</th>
<th align="left">選択肢</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Server framework</td>
<td align="left">none</td>
</tr>
<tr>
<td align="left">express</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">koa</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">adonis</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">hapi</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">feathers</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">micro</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">UI framework</td>
<td align="left">none</td>
</tr>
<tr>
<td align="left">bootstrap</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">vuetify</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">bulma</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">tailwind</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">element-ui</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">buefy</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Rendering mode</td>
<td align="left">Universal</td>
</tr>
<tr>
<td align="left">Single Page App</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Package manager</td>
<td align="left">npm</td>
</tr>
<tr>
<td align="left">yarn</td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="オプションの選択例"><a href="#オプションの選択例" class="headerlink" title="オプションの選択例"></a>オプションの選択例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? Project name MyNuxtApp</span><br><span class="line">? Project description My neat Nuxt.js project</span><br><span class="line">? Use a custom server framework express</span><br><span class="line">? Use a custom UI framework vuetify</span><br><span class="line">? Choose rendering mode Universal</span><br><span class="line">? Use axios module <span class="built_in">yes</span></span><br><span class="line">? Use eslint no</span><br><span class="line">? Use prettier no</span><br><span class="line">? Author name ktkr3d</span><br><span class="line">? Choose a package manager npm</span><br></pre></td></tr></table></figure>
<p>よく見ると自動生成されるProject description が微妙に変化する。</p>
<h3 id="npm-でコマンドライン起動する場合"><a href="#npm-でコマンドライン起動する場合" class="headerlink" title="npm でコマンドライン起動する場合"></a>npm でコマンドライン起動する場合</h3><h3 id="リモートからアクセスするための設定"><a href="#リモートからアクセスするための設定" class="headerlink" title="リモートからアクセスするための設定"></a>リモートからアクセスするための設定</h3><figure class="highlight js"><figcaption><span>./MyNuxtApp/server/index.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//const host = process.env.HOST || &#x27;127.0.0.1&#x27;</span></span><br><span class="line"><span class="keyword">const</span> host = process.<span class="property">env</span>.<span class="property">HOST</span> || <span class="string">&#x27;0.0.0.0&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> ufw allow 3000</span><br></pre></td></tr></table></figure>

<h4 id="開発モードで起動"><a href="#開発モードで起動" class="headerlink" title="開発モードで起動"></a>開発モードで起動</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> MyNuxtApp</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure>

<h4 id="プロダクションモードで起動"><a href="#プロダクションモードで起動" class="headerlink" title="プロダクションモードで起動"></a>プロダクションモードで起動</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> MyNuxtApp</span><br><span class="line">$ npm run build</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure>

<h4 id="Nuxt-js-アプリへのアクセス"><a href="#Nuxt-js-アプリへのアクセス" class="headerlink" title="Nuxt.js アプリへのアクセス"></a>Nuxt.js アプリへのアクセス</h4><p>http:&#x2F;&#x2F;&lt;ホスト&gt;:3000&#x2F;</p>
<h3 id="vue-ui-でGUI-から起動する場合"><a href="#vue-ui-でGUI-から起動する場合" class="headerlink" title="vue ui でGUI から起動する場合"></a>vue ui でGUI から起動する場合</h3><h4 id="vue-ui-の起動"><a href="#vue-ui-の起動" class="headerlink" title="vue ui の起動"></a>vue ui の起動</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> ufw allow 3000</span><br><span class="line">$ <span class="built_in">sudo</span> ufw allow 8000</span><br><span class="line">$ <span class="built_in">cd</span> MyNuxtApp</span><br><span class="line">$ vue ui --host 0.0.0.0</span><br></pre></td></tr></table></figure>
<h4 id="vue-ui-へのアクセス"><a href="#vue-ui-へのアクセス" class="headerlink" title="vue ui へのアクセス"></a>vue ui へのアクセス</h4><p>http:&#x2F;&#x2F;&lt;ホスト&gt;:8000&#x2F;</p>
<p><img src="/images/vue-ui-nuxt.png" alt="vue ui nuxt"></p>
<ul>
<li>タスク<ul>
<li>dev<br>開発サーバーを localhost:3000 で起動します。このサーバーはホットリローディングします</li>
<li>build<br>アプリケーションを Webpack でビルドし、JS と CSS をプロダクション向けにミニファイします</li>
<li>start<br>プロダクションモードでサーバーを起動します（build またはgenerate 後に実行）</li>
<li>generate<br>アプリケーションをビルドして、ルートごとに HTML ファイルを生成します（静的ファイルのホスティングに用います）</li>
</ul>
</li>
<li>リンクをクリックすると、新しいタブでNuxt.js アプリを表示</li>
</ul>
<h3 id="生成されたテンプレート画面例"><a href="#生成されたテンプレート画面例" class="headerlink" title="生成されたテンプレート画面例"></a>生成されたテンプレート画面例</h3><h2 id="Vuetify"><a href="#Vuetify" class="headerlink" title="Vuetify"></a>Vuetify</h2><p><img src="/images/nuxt-vuetify.png" alt="nuxt"></p>
<ul>
<li>左のハンバーガーメニューは左側のサイドメニューの表示&#x2F;非表示切り替え</li>
<li><code>&lt;</code>, <code>&gt;</code> ボタンは左側サイドメニューのメニュー文字列の表示&#x2F;非表示切り替え</li>
<li>レイアウトアイコンはトップバーを最大幅へ切り替え</li>
<li>右のハンバーガーメニューは右側のサイドペインの表示&#x2F;非表示切り替え<br>このペインは左側に移動も可能</li>
</ul>
<h2 id="Buefy"><a href="#Buefy" class="headerlink" title="Buefy"></a>Buefy</h2><p><img src="/images/nuxt-buefy.png" alt="nuxt"></p>
<ul>
<li>シンプルで視認性がよくてわかりやすい</li>
</ul>
<h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><p><img src="/images/nuxt-bootstrap.png" alt="nuxt"></p>
<ul>
<li>無装飾</li>
<li>bulma, tailwind, element-ui, none(無し) はbootstrap とほぼ同じ画面になりました。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>MOC SJIS encoding patch</title>
    <url>/2019/01/02/Moc-sjis-encoding-patch/</url>
    <content><![CDATA[<p><a href="https://moc.daper.net/">https://moc.daper.net/</a><br>MOC はCUI の音楽プレイヤーです。</p>
<p>MOC の設定ファイル(~&#x2F;.moc&#x2F;config)には<code>ID3v1TagsEncoding</code>, <code>UseRCC</code>, <code>EnforceTagsEncoding</code>等のID3 タグの文字エンコーディング指定用の設定項目がありますが、ストリーミングの曲名の文字エンコーディングについては無効なようで、文字化けしてしまうようです。そのため、暫定パッチを作成しました。</p>
<p>MOC の簡単な使い方は以下。<br><a href="http://ktkr3d.github.io/2012/05/31/moc-music-on-console/">http://ktkr3d.github.io/2012/05/31/moc-music-on-console/</a></p>
<span id="more"></span>

<h3 id="パッチ作成の経緯"><a href="#パッチ作成の経緯" class="headerlink" title="パッチ作成の経緯"></a>パッチ作成の経緯</h3><p><a href="https://moc.daper.net/node/682">https://moc.daper.net/node/682</a><br>過去に別の方が汎用パッチを作成されていたようなのですが、パッチファイルが見つからなかったのでSJIS 専用の修正をしました。</p>
<h3 id="コードの修正"><a href="#コードの修正" class="headerlink" title="コードの修正"></a>コードの修正</h3><ul>
<li>ソースを取得します。以下が選択肢と思います。<ul>
<li><a href="http://moc.daper.net/download">http://moc.daper.net/download</a></li>
<li>apt-src</li>
<li>github</li>
</ul>
</li>
<li>io.c が修正対象です。</li>
<li>vscode でコード修正して、ステージ、コミットします。</li>
</ul>
<h3 id="パッチの作成"><a href="#パッチの作成" class="headerlink" title="パッチの作成"></a>パッチの作成</h3><ul>
<li>今回はgitg でパッチファイルを生成しました。</li>
</ul>
<h3 id="作成したパッチ"><a href="#作成したパッチ" class="headerlink" title="作成したパッチ"></a>作成したパッチ</h3><figure class="highlight c"><figcaption><span>0001-convert-tag-encoding-sjis-to-utf8.patch</span></figcaption><table><tr><td class="code"><pre><span class="line">diff --git a/io.c b/io.c</span><br><span class="line">index c9762e6..<span class="number">8</span>c17264 <span class="number">100644</span></span><br><span class="line">--- a/io.c</span><br><span class="line">+++ b/io.c</span><br><span class="line">@@ <span class="number">-44</span>,<span class="number">6</span> +<span class="number">44</span>,<span class="number">10</span> @@</span><br><span class="line"> <span class="meta"># <span class="keyword">include</span> <span class="string">&quot;io_curl.h&quot;</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">+<span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">+<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;utf8.h&quot;</span></span></span><br><span class="line">+<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">+</span><br><span class="line"> <span class="meta">#<span class="keyword">ifdef</span> HAVE_CURL</span></span><br><span class="line"> <span class="meta"># <span class="keyword">define</span> CURL_ONLY</span></span><br><span class="line"> <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">@@ <span class="number">-836</span>,<span class="number">7</span> +<span class="number">840</span>,<span class="number">12</span> @@ <span class="type">void</span> <span class="title function_">io_set_metadata_title</span> <span class="params">(<span class="keyword">struct</span> io_stream *s, <span class="type">const</span> <span class="type">char</span> *title)</span></span><br><span class="line"> 	<span class="title function_">LOCK</span> <span class="params">(s-&gt;metadata.mtx)</span>;</span><br><span class="line"> 	<span class="keyword">if</span> (s-&gt;metadata.title)</span><br><span class="line"> 		<span class="built_in">free</span> (s-&gt;metadata.title);</span><br><span class="line">+<span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">+	<span class="type">iconv_t</span> cd_sjis_to_utf8 = iconv_open (<span class="string">&quot;utf8&quot;</span>, <span class="string">&quot;sjis&quot;</span>);</span><br><span class="line">+	s-&gt;metadata.title = iconv_str (cd_sjis_to_utf8, title);</span><br><span class="line">+<span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"> 	s-&gt;metadata.title = xstrdup (title);</span><br><span class="line">+<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> 	UNLOCK (s-&gt;metadata.mtx);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">--</span><br></pre></td></tr></table></figure>

<h3 id="前提環境設定、ビルド、インストール"><a href="#前提環境設定、ビルド、インストール" class="headerlink" title="前提環境設定、ビルド、インストール"></a>前提環境設定、ビルド、インストール</h3><ul>
<li>手順<br><a href="https://github.com/jonsafari/mocp">https://github.com/jonsafari/mocp</a></li>
<li>インストール先<br><code>/usr/local/bin/mocp</code></li>
</ul>
<h3 id="完全なタイトルの確認"><a href="#完全なタイトルの確認" class="headerlink" title="完全なタイトルの確認"></a>完全なタイトルの確認</h3><p>MOC ではタイトルの表示が途中で切り詰められます。完全なタイトルを取得するには、以下で、</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ watch -n 5 <span class="string">&quot;mocp -Q %title&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>IPv6 IPoE + IPv4 PPPoE + OpenVPN</title>
    <url>/2019/05/21/IPv6-IPoE-IPv4-PPPoE-OpenVPN/</url>
    <content><![CDATA[<p><img src="/images/ipv6_openvpn.png" alt="openvpn"><br>自宅のIPv6 の環境を整備して、インターネット側からOpenVPN で接続してみました。</p>
<span id="more"></span>

<h3 id="ネットワーク構成"><a href="#ネットワーク構成" class="headerlink" title="ネットワーク構成"></a>ネットワーク構成</h3><p>自宅の回線速度が夜中に遅くなってきたのでv6プラス(無料)に申し込んでみました。<br>確かに回線速度が安定しましたが、今まで使えていたグローバルIP に対するOpenVPN 接続が使えなくなってしまうようです。</p>
<p>そこで、以下のサイトの記事を参考に自宅のネットワーク構成を変更してみました。</p>
<ul>
<li>v6プラスとIPv4(PPPoE)を併用する（その1）<br>[応用編]ネットワークを混ぜてみる<br><a href="http://dotsukareta.blogspot.com/2017/04/v6ipv4pppoe.html">http://dotsukareta.blogspot.com/2017/04/v6ipv4pppoe.html</a></li>
</ul>
<p>私の構成は一般的なルータの方にOpenVPN サーバを接続しました。OpenVPN サーバはRaspberry Pi 2 でUbuntu Server 18.04 とOpenVPN をインストールしています。</p>
<p>この構成はとても便利ですね。<br>自宅内ではデスクトップPCやノートPCをv6プラス対応ルータの方に接続しています。<br>外出先からは以下のような経路で接続できます。</p>
<h3 id="スマートフォンからのOpenVPN-接続経路"><a href="#スマートフォンからのOpenVPN-接続経路" class="headerlink" title="スマートフォンからのOpenVPN 接続経路"></a>スマートフォンからのOpenVPN 接続経路</h3><table>
<thead>
<tr>
<th align="left">No.</th>
<th align="left">経路</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">Androidスマホ (OpenVPN: client1 証明書)</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">インターネット</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">ONU</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">v6プラス対応ルータ</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">一般的なルータ</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">OpenVPN サーバ (OpenVPN: server 証明書)</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">LAN 内PC</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">LAN 内PC上の仮想サーバ</td>
</tr>
</tbody></table>
<h3 id="外出先ノートPC-からOpenVPN-接続経路"><a href="#外出先ノートPC-からOpenVPN-接続経路" class="headerlink" title="外出先ノートPC からOpenVPN 接続経路"></a>外出先ノートPC からOpenVPN 接続経路</h3><table>
<thead>
<tr>
<th align="left">No.</th>
<th align="left">経路</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">ノートPC (OpenVPN: client2 証明書)</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">Androidスマホ (テザリング)</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">インターネット</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">ONU</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">v6プラス対応ルータ</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">一般的なルータ</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">OpenVPN サーバ (OpenVPN: server 証明書)</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">LAN 内PC</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">LAN 内PC上の仮想サーバ</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>HexoでMermaidダイアグラム</title>
    <url>/2019/05/25/Hexo-filter-mermaid-diagrams/</url>
    <content><![CDATA[<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
    graph LR;
    linkStyle default interpolate basis
    A(ONU)-- IPv6 --&gt;B(v6対応ルータ);
    B--&gt;C[物理PC];
    C--&gt;D[仮想サーバ];
    B--&gt;E[ノートPC]
    B--&gt;F(一般ルータ);
    F--&gt;B;
    F--&gt;G[OpenVPNサーバ];
  </pre></div>

<ul>
<li><a href="https://mermaidjs.github.io/">https://mermaidjs.github.io/</a></li>
<li><a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">https://github.com/webappdevelp/hexo-filter-mermaid-diagrams</a></li>
<li><a href="https://wangxiaoyu-go.github.io/2018/11/23/hexo-filter-mermaid-diagrams/">https://wangxiaoyu-go.github.io/2018/11/23/hexo-filter-mermaid-diagrams/</a></li>
</ul>
<p>Hexo でMermaid ダイアグラムを書いてみました。</p>
<h4 id="2025-03-22-追記"><a href="#2025-03-22-追記" class="headerlink" title="2025-03-22 追記"></a>2025-03-22 追記</h4><ul>
<li>テーマ変更に伴い、今後hexo-theme-butterflyのタグプラグインに書き換えが必要</li>
<li>一旦ダークテーマにして戻すと正しく表示されるが初回から正常に表示されるように調整が必要</li>
</ul>
<hr>
<span id="more"></span>

<p>markdown のコードブロックと同様に、以下のコードを「&grave;&grave;&grave;mermaid」と「&grave;&grave;&grave;」で囲います。 </p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    linkStyle default interpolate basis</span><br><span class="line">    A(ONU)-- IPv6 --&gt;B(v6対応ルータ);</span><br><span class="line">    B--&gt;C[物理PC];</span><br><span class="line">    C--&gt;D[仮想サーバ];</span><br><span class="line">    B--&gt;E[ノートPC]</span><br><span class="line">    B--&gt;F(一般ルータ);</span><br><span class="line">    F--&gt;B;</span><br><span class="line">    F--&gt;G[OpenVPNサーバ];</span><br></pre></td></tr></table></figure>

<h3 id="インストールと設定"><a href="#インストールと設定" class="headerlink" title="インストールと設定"></a>インストールと設定</h3><p>私の環境は以下です。</p>
<ul>
<li>Hexo</li>
<li>freemind テーマ</li>
</ul>
<h4 id="パッケージのインストール"><a href="#パッケージのインストール" class="headerlink" title="パッケージのインストール"></a>パッケージのインストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure>
<h4 id="Hexo-でmermaid-を有効化"><a href="#Hexo-でmermaid-を有効化" class="headerlink" title="Hexo でmermaid を有効化"></a>Hexo でmermaid を有効化</h4><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># mermaid chart</span></span><br><span class="line"><span class="attr">mermaid:</span> <span class="comment">## mermaid url https://github.com/knsv/mermaid</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># default true</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&quot;7.1.2&quot;</span> <span class="comment"># default v7.1.2</span></span><br><span class="line">  <span class="attr">options:</span>  <span class="comment"># find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</span></span><br><span class="line">    <span class="comment">#startOnload: true  // default true</span></span><br></pre></td></tr></table></figure>
<h4 id="テーマの修正-freemind-の場合"><a href="#テーマの修正-freemind-の場合" class="headerlink" title="テーマの修正(freemind の場合)"></a>テーマの修正(freemind の場合)</h4><figure class="highlight js"><figcaption><span>themes/freemind/layout/_partials/footer.ejs</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.<span class="property">mermaid</span>.<span class="property">enable</span>) &#123; %&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://unpkg.com/mermaid@&lt;%= theme.mermaid.version %&gt;/dist/mermaid.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">mermaid</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      mermaid.<span class="title function_">initialize</span>(&#123;<span class="attr">theme</span>: <span class="string">&#x27;forest&#x27;</span>&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>
<h4 id="背景透明化の設定"><a href="#背景透明化の設定" class="headerlink" title="背景透明化の設定"></a>背景透明化の設定</h4><figure class="highlight css"><figcaption><span>themes/freemind/source/css/style.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mermaid</span> &#123;                           </span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>; </span><br><span class="line">  <span class="attribute">border</span>: none <span class="meta">!important</span>;            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用例"><a href="#使用例" class="headerlink" title="使用例"></a>使用例</h3><h4 id="フローチャート"><a href="#フローチャート" class="headerlink" title="フローチャート"></a>フローチャート</h4><p><a href="https://mermaidjs.github.io/flowchart.html">https://mermaidjs.github.io/flowchart.html</a></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    linkStyle default interpolate basis</span><br><span class="line">    A[四角]--&gt;B(角丸四角);</span><br><span class="line">    A--&gt;C((丸));</span><br><span class="line">    B--&gt;D&#123;ひし形&#125;;</span><br><span class="line">    C--&gt;D;</span><br><span class="line">    D--&gt;F&gt;変な形]</span><br></pre></td></tr></table></figure>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
    graph TD;
    linkStyle default interpolate basis
    A[四角]--&gt;B(角丸四角);
    A--&gt;C((丸));
    B--&gt;D{ひし形};
    C--&gt;D;
    D--&gt;F&gt;変な形]
  </pre></div>

<h3 id="その他の使用例"><a href="#その他の使用例" class="headerlink" title="その他の使用例"></a>その他の使用例</h3><p><a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams#user-content-flowchart">https://github.com/webappdevelp/hexo-filter-mermaid-diagrams#user-content-flowchart</a></p>
<h4 id="Sequence-diagram"><a href="#Sequence-diagram" class="headerlink" title="Sequence diagram"></a>Sequence diagram</h4><p><a href="https://mermaidjs.github.io/sequenceDiagram.html">https://mermaidjs.github.io/sequenceDiagram.html</a></p>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
    sequenceDiagram
    participant Alice
    participant Bob
    Alice-&gt;&gt;John: Hello John, how are you?
    loop Healthcheck
        John-&gt;&gt;John: Fight against hypochondria
    end
    Note right of John: Rational thoughts &lt;br&#x2F;&gt;prevail...
    John--&gt;&gt;Alice: Great!
    John-&gt;&gt;Bob: How about you?
    Bob--&gt;&gt;John: Jolly good!
  </pre></div>

<h4 id="Gantt-diagram"><a href="#Gantt-diagram" class="headerlink" title="Gantt diagram"></a>Gantt diagram</h4><p><a href="https://mermaidjs.github.io/gantt.html">https://mermaidjs.github.io/gantt.html</a></p>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
    gantt
dateFormat  YYYY-MM-DD
title Adding GANTT diagram to mermaid

section A section
Completed task            :done,    des1, 2014-01-06,2014-01-08
Active task               :active,  des2, 2014-01-09, 3d
Future task               :         des3, after des2, 5d
Future task2               :         des4, after des3, 5d
  </pre></div>

<h4 id="Class-diagram-実験的"><a href="#Class-diagram-実験的" class="headerlink" title="Class diagram (実験的)"></a>Class diagram (実験的)</h4><div class="mermaid-wrap"><pre class="mermaid-src" hidden>
    classDiagram
Class01 &lt;|-- AveryLongClass : Cool
Class03 *-- Class04
Class05 o-- Class06
Class07 .. Class08
Class09 --&gt; C2 : Where am i?
Class09 --* C3
Class09 --|&gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
Class08 &lt;--&gt; C2: Cool label
  </pre></div>

<h4 id="Git-graph-実験的"><a href="#Git-graph-実験的" class="headerlink" title="Git graph (実験的)"></a>Git graph (実験的)</h4><div class="mermaid-wrap"><pre class="mermaid-src" hidden>
    gitGraph:
options
{
    &quot;nodeSpacing&quot;: 150,
    &quot;nodeRadius&quot;: 10
}
end
commit
branch newbranch
checkout newbranch
commit
commit
checkout master
commit
commit
merge newbranch
  </pre></div>

<h3 id="追記"><a href="#追記" class="headerlink" title="追記"></a>追記</h3><h4 id="font-awesome-対応-2019-07-05"><a href="#font-awesome-対応-2019-07-05" class="headerlink" title="font awesome 対応 (2019&#x2F;07&#x2F;05)"></a>font awesome 対応 (2019&#x2F;07&#x2F;05)</h4><p><code>fab</code> とかを使う場合はmermaid の新しめのバージョンを利用します。</p>
<ul>
<li>mermaid のバージョン指定<br>以下で新しめのリリースを調べて指定します。<br><a href="https://github.com/knsv/mermaid/releases">https://github.com/knsv/mermaid/releases</a><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># mermaid chart</span></span><br><span class="line"><span class="attr">mermaid:</span> <span class="comment">## mermaid url https://github.com/knsv/mermaid</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># default true</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&quot;8.1.0&quot;</span> <span class="comment"># default v7.1.2</span></span><br><span class="line">  <span class="attr">options:</span>  <span class="comment"># find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</span></span><br><span class="line">  <span class="comment">#startOnload: true  // default true</span></span><br></pre></td></tr></table></figure></li>
<li>font awesome のリンク指定<br>以下でlatest のバージョンを調べて指定します。<br><a href="https://fontawesome.com/changelog/latest">https://fontawesome.com/changelog/latest</a><figure class="highlight html"><figcaption><span>./themes/freemind/layout/_partial/head.ejs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://use.fontawesome.com/releases/v5.9.0/css/all.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="bootstrap-の影響補正-2019-07-05"><a href="#bootstrap-の影響補正-2019-07-05" class="headerlink" title="bootstrap の影響補正 (2019&#x2F;07&#x2F;05)"></a>bootstrap の影響補正 (2019&#x2F;07&#x2F;05)</h4><p>文字のサイズや垂直位置がbootstrap のスタイルによってずれているので少し補正します。</p>
<ul>
<li>style.css の修正<figure class="highlight css"><figcaption><span>./themes/freemind/source/css/style.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mermaid</span> <span class="selector-class">.label</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">120%</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">3</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>mermaid</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL でChinachu</title>
    <url>/2019/06/04/Chinachu-on-WSL/</url>
    <content><![CDATA[<p><a href="https://github.com/Chinachu/Chinachu/wiki/Gamma-Installation-V2">https://github.com/Chinachu/Chinachu/wiki/Gamma-Installation-V2</a></p>
<p>Chinachu がWSL (Ubuntu 18.04)で普通に動きました。</p>
<span id="more"></span>

<h3 id="現在の環境"><a href="#現在の環境" class="headerlink" title="現在の環境"></a>現在の環境</h3><ul>
<li>Windows 10</li>
<li>Windows 10 でMirakurun を導入済</li>
<li>WSL (Ubuntu 18.04 が導入済でデフォルト)を導入済</li>
<li>WSL でnode.js を導入済</li>
</ul>
<h3 id="WSL-でChinachu-のインストール"><a href="#WSL-でChinachu-のインストール" class="headerlink" title="WSL でChinachu のインストール"></a>WSL でChinachu のインストール</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install build-essential curl git-core vainfo</span><br><span class="line">$ <span class="built_in">sudo</span> npm install pm2 -g</span><br><span class="line">$ <span class="built_in">sudo</span> pm2 startup</span><br><span class="line">$ git <span class="built_in">clone</span> git://github.com/kanreisa/Chinachu.git ~/chinachu</span><br><span class="line">$ <span class="built_in">cd</span> ~/chinachu/</span><br><span class="line">$ ./chinachu installer</span><br><span class="line">$ <span class="built_in">cp</span> config.sample.json config.json</span><br></pre></td></tr></table></figure>

<h3 id="chinachu-config-json-の設定"><a href="#chinachu-config-json-の設定" class="headerlink" title="~&#x2F;chinachu&#x2F;config.json の設定"></a>~&#x2F;chinachu&#x2F;config.json の設定</h3><ul>
<li>uid<br>自分の$USER を設定</li>
<li>mirakurunPath<br>“<a href="http://192.168.11.2:40772/">http://192.168.11.2:40772/</a>“</li>
<li>recordedDir<br>録画ファイルを格納しているパスを指定 (例えば &#x2F;mnt&#x2F;d&#x2F; の下位のパス)</li>
<li>wuiUsers<br>空にする</li>
</ul>
<h3 id="録画フォルダおよび録画履歴ファイルの移行"><a href="#録画フォルダおよび録画履歴ファイルの移行" class="headerlink" title="録画フォルダおよび録画履歴ファイルの移行"></a>録画フォルダおよび録画履歴ファイルの移行</h3><ul>
<li>config.json 内のrecordedDir 下の動画ファイルを移行後のrecordedDir フォルダに移動<br>私は同じフォルダなので特に移動しませんでした。</li>
<li>.&#x2F;chinachu&#x2F;data&#x2F;recorded.json の中の動画ファイルのパスを一括置換</li>
</ul>
<h3 id="起動"><a href="#起動" class="headerlink" title="起動"></a>起動</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> [] &gt; rules.json</span><br><span class="line">$ ./chinachu service wui execute</span><br><span class="line"><span class="comment"># 問題なく起動できたらCtrl+\で終了</span></span><br><span class="line">$ ./chinachu update</span><br><span class="line"><span class="comment"># EPG取得テスト（エラーが出た場合は恐らく Mirakurun に接続できていません）</span></span><br><span class="line">$ <span class="built_in">sudo</span> pm2 start processes.json</span><br><span class="line">$ <span class="built_in">sudo</span> pm2 save</span><br></pre></td></tr></table></figure>

<h3 id="起動シェルの作成"><a href="#起動シェルの作成" class="headerlink" title="起動シェルの作成"></a>起動シェルの作成</h3><figure class="highlight bash"><figcaption><span>~/bin/startup.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/hoge/chinachu</span><br><span class="line"><span class="built_in">sudo</span> /usr/bin/pm2 restart processes.json</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> 755 ~/bin/startup.sh</span><br></pre></td></tr></table></figure>

<h3 id="visudo-の設定"><a href="#visudo-の設定" class="headerlink" title="visudo の設定"></a>visudo の設定</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> visudo</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><figcaption><span>visudoの追加行</span></figcaption><table><tr><td class="code"><pre><span class="line">%<span class="built_in">sudo</span> ALL=NOPASSWD: /usr/bin/pm2</span><br></pre></td></tr></table></figure>

<h3 id="Windows-起動時に自動実行する設定"><a href="#Windows-起動時に自動実行する設定" class="headerlink" title="Windows 起動時に自動実行する設定"></a>Windows 起動時に自動実行する設定</h3><ol>
<li>ファイル名を指定して実行<br> <code>taskschd.msc</code></li>
<li>基本タスクの作成</li>
<li>名前を指定</li>
<li>ログオン時</li>
<li>プログラムの開始</li>
<li>プログラム&#x2F;スクリプト<br> <code>wsl</code></li>
<li>引数の追加<br> <code>/home/hoge/bin/startup.sh</code></li>
</ol>
]]></content>
      <tags>
        <tag>chinachu</tag>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL 2</title>
    <url>/2019/06/14/WSL2/</url>
    <content><![CDATA[<p>Windows Insider Program でWSL 2 が利用できるようになりましたので試してみました。</p>
<p>既存のWSL 環境をWSL 2 に変換しました。<br>WSL 2 ではHyper-V を利用するようになったようですね。</p>
<span id="more"></span>

<h3 id="1-Windows-Insider-Program-へ登録"><a href="#1-Windows-Insider-Program-へ登録" class="headerlink" title="1. Windows Insider Program へ登録"></a>1. Windows Insider Program へ登録</h3><p><a href="https://insider.windows.com/ja-jp/">https://insider.windows.com/ja-jp/</a><br>上記のURL からWindows Insider Program に参加登録します。</p>
<h3 id="2-Windows-Update-を実行"><a href="#2-Windows-Update-を実行" class="headerlink" title="2. Windows Update を実行"></a>2. Windows Update を実行</h3><p>Windows Update を実行すると以下の状態になりました。</p>
<p>エディション: Windows 10 Pro Insider Preview<br>バージョン: 1903<br>OSビルド: 18917.1000</p>
<h3 id="3-VirtualMachinePlatform-の有効化"><a href="#3-VirtualMachinePlatform-の有効化" class="headerlink" title="3. VirtualMachinePlatform の有効化"></a>3. VirtualMachinePlatform の有効化</h3><p>Windows PowerShell(管理者)モードから設定します。</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\WINDOWS\system32&gt; <span class="built_in">Enable-WindowsOptionalFeature</span> <span class="literal">-Online</span> <span class="literal">-FeatureName</span> VirtualMachinePlatform</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Path          :</span><br><span class="line">Online        : True</span><br><span class="line">RestartNeeded : False</span><br></pre></td></tr></table></figure>
<p>リスタート要否が表示されます。</p>
<h3 id="4-既存のWSL-1-をWSL-2-に変換"><a href="#4-既存のWSL-1-をWSL-2-に変換" class="headerlink" title="4. 既存のWSL 1 をWSL 2 に変換"></a>4. 既存のWSL 1 をWSL 2 に変換</h3><p>Windows PowerShell (管理者)モードで以下を実行します。</p>
<h4 id="4-1-変換対象を確認"><a href="#4-1-変換対象を確認" class="headerlink" title="4.1 変換対象を確認"></a>4.1 変換対象を確認</h4><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\WINDOWS\system32&gt; wsl <span class="literal">--list</span> <span class="literal">--quiet</span></span><br><span class="line">Ubuntu<span class="literal">-18</span>.<span class="number">04</span></span><br></pre></td></tr></table></figure>
<h4 id="4-2-WSL-1-から-WSL-2-へ変換"><a href="#4-2-WSL-1-から-WSL-2-へ変換" class="headerlink" title="4.2 WSL 1 から WSL 2 へ変換"></a>4.2 WSL 1 から WSL 2 へ変換</h4><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\WINDOWS\system32&gt; wsl <span class="literal">--set-version</span> Ubuntu<span class="literal">-18</span>.<span class="number">04</span> <span class="number">2</span></span><br><span class="line">変換中です。この処理には数分かかることがあります...</span><br><span class="line">WSL <span class="number">2</span> との主な違いについては、https://aka.ms/wsl2 を参照してください</span><br><span class="line">変換が完了しました。</span><br></pre></td></tr></table></figure>

<h4 id="4-3-変換後の状態を確認"><a href="#4-3-変換後の状態を確認" class="headerlink" title="4.3 変換後の状態を確認"></a>4.3 変換後の状態を確認</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">PS C:\WINDOWS\system32&gt; wsl -l -v</span><br><span class="line">  <span class="type">NAME</span>            STATE           <span class="keyword">VERSION</span></span><br><span class="line">* Ubuntu<span class="number">-18.04</span>    Running         <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="5-WSL-2-のIP-アドレスを確認"><a href="#5-WSL-2-のIP-アドレスを確認" class="headerlink" title="5. WSL 2 のIP アドレスを確認"></a>5. WSL 2 のIP アドレスを確認</h3><p>WSL 2 上で<code>ifconfig</code>や<code>ip a</code> 等でIP アドレスを確認します。<br>私はConEmu のドロップダウンターミナルからWSL を利用しています。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.151.26</span><br></pre></td></tr></table></figure>

<h3 id="6-既存のアクセス用URL-の設定を更新"><a href="#6-既存のアクセス用URL-の設定を更新" class="headerlink" title="6. 既存のアクセス用URL の設定を更新"></a>6. 既存のアクセス用URL の設定を更新</h3><ul>
<li>Chinachu<br><a href="http://192.168.151.26:20772/">http://192.168.151.26:20772/</a><br>ブラウザのショートカットやKodi アドオンの設定を更新します。</li>
<li>Hexo<br>Hexo のコマンドを実行するためにWSL へアクセスしますが、<br>アクセス方法はそのままでした。<br><code>hexo s</code>のプレビューURLは以下になりました。<br><a href="http://192.168.151.26:4000/">http://192.168.151.26:4000/</a></li>
</ul>
<h3 id="7-ポートフォワードの設定"><a href="#7-ポートフォワードの設定" class="headerlink" title="7. ポートフォワードの設定"></a>7. ポートフォワードの設定</h3><p>Hyper-V 下になったので別マシンからアクセスする場合にポートフォーワードが必要になったようです。</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\WINDOWS\system32&gt; netsh interface portproxy add v4tov4 listenport=<span class="number">20772</span> listenaddr=<span class="number">0.0</span>.<span class="number">0.0</span> connectport=<span class="number">20772</span> connectaddress=<span class="number">192.168</span>.<span class="number">151.26</span></span><br></pre></td></tr></table></figure>

<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\WINDOWS\system32&gt; netsh interface portproxy show all</span><br><span class="line"></span><br><span class="line">ipv4 をリッスンする:         ipv4 に接続する:</span><br><span class="line"></span><br><span class="line">Address         Port        Address         Port</span><br><span class="line"><span class="literal">---------------</span> <span class="literal">----------</span>  <span class="literal">---------------</span> <span class="literal">----------</span></span><br><span class="line"><span class="number">0.0</span>.<span class="number">0.0</span>         <span class="number">20772</span>       <span class="number">192.168</span>.<span class="number">151.26</span>  <span class="number">20772</span></span><br></pre></td></tr></table></figure>

<h3 id="8-気づき事項"><a href="#8-気づき事項" class="headerlink" title="8. 気づき事項"></a>8. 気づき事項</h3><ul>
<li>WSL2 のIP アドレスは変動する<br>以下のスクリプトで暫定対処できました。<br><a href="https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723">https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723</a></li>
<li>WSL2 のUbuntu 18.04 はinit ？</li>
</ul>
]]></content>
      <tags>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>Puppeteer</title>
    <url>/2019/06/21/Puppeteer/</url>
    <content><![CDATA[<p><a href="https://github.com/GoogleChrome/puppeteer">https://github.com/GoogleChrome/puppeteer</a></p>
<p>Puppeteer はGoogle Chrome を自動で操作するツールです。<br>WSL2(Ubuntu 18.04)でPuppeteer をヘッドレスで動かしてみました。<br>これは便利かもしれない！</p>
<span id="more"></span>

<h3 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h3><h4 id="利用環境"><a href="#利用環境" class="headerlink" title="利用環境"></a>利用環境</h4><ul>
<li>Windows 10 Pro Insider Preview (1903, 18917.1000)</li>
<li>WSL2 (Ubuntu 18.04)</li>
<li>node v10.16.0</li>
</ul>
<h4 id="Puppeteer-のインストール"><a href="#Puppeteer-のインストール" class="headerlink" title="Puppeteer のインストール"></a>Puppeteer のインストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i puppeteer</span><br></pre></td></tr></table></figure>

<h4 id="実行時依存ライブラリのインストール-Ubuntu-18-04-の場合"><a href="#実行時依存ライブラリのインストール-Ubuntu-18-04-の場合" class="headerlink" title="実行時依存ライブラリのインストール(Ubuntu 18.04 の場合)"></a>実行時依存ライブラリのインストール(Ubuntu 18.04 の場合)</h4><p><a href="https://github.com/GoogleChrome/puppeteer/issues/290#issuecomment-451471338">https://github.com/GoogleChrome/puppeteer/issues/290#issuecomment-451471338</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install -y libx11-xcb1 libxrandr2 libasound2 libpangocairo-1.0-0 libatk1.0-0 libatk-bridge2.0-0 libgtk-3-0 libnss3 libxss1</span><br></pre></td></tr></table></figure>

<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><h4 id="テストスクリプト"><a href="#テストスクリプト" class="headerlink" title="テストスクリプト"></a>テストスクリプト</h4><p><a href="http://www.google.com/">www.google.com</a> のスクリーンショットを採取するスクリプトです。</p>
<figure class="highlight javascript"><figcaption><span>test.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>);</span><br><span class="line"></span><br><span class="line">puppeteer.<span class="title function_">launch</span>(&#123;</span><br><span class="line">  <span class="attr">headless</span>: <span class="literal">true</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">async</span> browser =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">setViewport</span>(&#123; <span class="attr">width</span>: <span class="number">1200</span>, <span class="attr">height</span>: <span class="number">800</span> &#125;);</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://www.google.co.jp/&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">screenshot</span>(&#123;<span class="attr">path</span>: <span class="string">&#x27;puppeteer_example.png&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">  browser.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="実行-1"><a href="#実行-1" class="headerlink" title="実行"></a>実行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node test.js</span><br></pre></td></tr></table></figure>

<h4 id="実行結果"><a href="#実行結果" class="headerlink" title="実行結果"></a>実行結果</h4><p><img src="/images/puppeteer_example.png" alt="puppeteer"></p>
<h3 id="よく使う操作"><a href="#よく使う操作" class="headerlink" title="よく使う操作"></a>よく使う操作</h3><h4 id="セレクタ"><a href="#セレクタ" class="headerlink" title="セレクタ"></a>セレクタ</h4><p>Chrome のデベロッパーツールでセレクタをコピーすると概ね正しい。</p>
<h4 id="プロキシ認証"><a href="#プロキシ認証" class="headerlink" title="プロキシ認証"></a>プロキシ認証</h4><h4 id="フォーム認証"><a href="#フォーム認証" class="headerlink" title="フォーム認証"></a>フォーム認証</h4><p>page.type()<br>page.type()<br>page.type()</p>
<h4 id="ページ遷移"><a href="#ページ遷移" class="headerlink" title="ページ遷移"></a>ページ遷移</h4><h4 id="フォームサブミット"><a href="#フォームサブミット" class="headerlink" title="フォームサブミット"></a>フォームサブミット</h4>]]></content>
      <tags>
        <tag>wsl</tag>
        <tag>puppeteer</tag>
      </tags>
  </entry>
  <entry>
    <title>Compile Kodi for Ubuntu</title>
    <url>/2019/06/22/Compile-Kodi-for-Ubuntu/</url>
    <content><![CDATA[<p><a href="https://github.com/Harekaze/pvr.chinachu/issues/30">https://github.com/Harekaze/pvr.chinachu/issues/30</a></p>
<p>Kodi 18.2 にバージョンアップしたらpvr.chinchu がうまく動かなくなってしまいました。<br>Kodi のcurl 処理に変更があったようです。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -I 172.17.69.68:20772</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Last-Modified: Mon, 03 Jun 2019 14:41:30 GMT</span><br><span class="line">Content-Length: 2311</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Server: Chinachu (Node)</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">X-Frame-Options: SAMEORIGIN</span><br><span class="line">X-UA-Compatible: IE=Edge,chrome=1</span><br><span class="line">X-XSS-Protection: 1; mode=block</span><br><span class="line">Date: Sat, 22 Jun 2019 08:48:09 GMT</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -I --http2 172.17.69.68:20772</span><br><span class="line">curl: (52) Empty reply from server</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/xbmc/xbmc/blob/master/docs/README.Ubuntu.md">https://github.com/xbmc/xbmc/blob/master/docs/README.Ubuntu.md</a></p>
<p>バージョン18.1 を再インストールしようと思いましが、残念なことにUbuntu のdeb パッケージは見つかりませんでした。仕方が無いのでリポジトリの18.3 のソースコードにパッチを当ててビルドすることにしました。</p>
<span id="more"></span>

<h3 id="ソースの準備"><a href="#ソースの準備" class="headerlink" title="ソースの準備"></a>ソースの準備</h3><h4 id="バージョン18-Leia-のソース取得"><a href="#バージョン18-Leia-のソース取得" class="headerlink" title="バージョン18(Leia) のソース取得"></a>バージョン18(Leia) のソース取得</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HOME</span></span><br><span class="line">$ git <span class="built_in">clone</span> -b Leia git://github.com/xbmc/xbmc.git kodi</span><br></pre></td></tr></table></figure>

<h4 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h4><p><a href="https://github.com/xbmc/xbmc/commit/8839957437f2c1557c5810aff2af820e50826370">xbmc&#x2F;xbmc@8839957</a></p>
<figure class="highlight cpp"><figcaption><span>xbmc/filesystem/CurlFile.cpp</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// enable HTTP2 support. default: CURL_HTTP_VERSION_1_1. Curl &gt;= 7.62.0 defaults to CURL_HTTP_VERSION_2TLS</span></span><br><span class="line"><span class="comment">// g_curlInterface.easy_setopt(h, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_2_0);</span></span><br></pre></td></tr></table></figure>

<h3 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h3><h4 id="依存ライブラリのインストール-1"><a href="#依存ライブラリのインストール-1" class="headerlink" title="依存ライブラリのインストール (1)"></a>依存ライブラリのインストール (1)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:team-xbmc/ppa</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><figcaption><span>/etc/apt/sources.list.d/team-xbmc-ubuntu-ppa-bionic.list</span></figcaption><table><tr><td class="code"><pre><span class="line">deb http://ppa.launchpad.net/team-xbmc/ppa/ubuntu bionic main</span><br><span class="line">deb-src http://ppa.launchpad.net/team-xbmc/ppa/ubuntu bionic main</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update</span><br><span class="line">$ <span class="built_in">sudo</span> apt build-dep kodi</span><br></pre></td></tr></table></figure>

<h4 id="依存ライブラリのインストール-2"><a href="#依存ライブラリのインストール-2" class="headerlink" title="依存ライブラリのインストール (2)"></a>依存ライブラリのインストール (2)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install ccache</span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HOME</span>/kodi</span><br><span class="line">$ <span class="built_in">sudo</span> make -C tools/depends/target/crossguid PREFIX=/usr/local</span><br><span class="line">$ <span class="built_in">sudo</span> make -C tools/depends/target/flatbuffers PREFIX=/usr/local</span><br><span class="line">$ <span class="built_in">sudo</span> make -C tools/depends/target/libfmt PREFIX=/usr/local</span><br></pre></td></tr></table></figure>

<h4 id="依存ライブラリのインストール-3"><a href="#依存ライブラリのインストール-3" class="headerlink" title="依存ライブラリのインストール (3)"></a>依存ライブラリのインストール (3)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install libcap-dev libsndio-dev</span><br></pre></td></tr></table></figure>

<h3 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h3><h4 id="コンフィグ"><a href="#コンフィグ" class="headerlink" title="コンフィグ"></a>コンフィグ</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> <span class="variable">$HOME</span>/kodi-build</span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HOME</span>/kodi-build</span><br><span class="line">$ cmake ../kodi -DCMAKE_INSTALL_PREFIX=/usr/local</span><br></pre></td></tr></table></figure>
<h4 id="ビルド-1"><a href="#ビルド-1" class="headerlink" title="ビルド"></a>ビルド</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cmake --build . -- VERBOSE=1 -j$(getconf _NPROCESSORS_ONLN)</span><br></pre></td></tr></table></figure>

<h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>kodi</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal</title>
    <url>/2019/06/23/Windows-Terminal/</url>
    <content><![CDATA[<p><a href="https://github.com/microsoft/terminal">https://github.com/microsoft/terminal</a><br><a href="https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701">https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701</a></p>
<p>Windows Terminal のプレビュー版がリリースされたので使ってみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Pro Insider Preview</li>
<li>Windows Terminal (Preview) 0.2.1715.0</li>
</ul>
<h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><h4 id="Microsoft-Store"><a href="#Microsoft-Store" class="headerlink" title="Microsoft Store"></a>Microsoft Store</h4><p><a href="https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701">https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701</a></p>
<h3 id="設定の変更"><a href="#設定の変更" class="headerlink" title="設定の変更"></a>設定の変更</h3><ul>
<li>デフォルトのプロファイルを”Ubuntu-18.04” に変更</li>
</ul>
<figure class="highlight json"><figcaption><span>profile.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;globals&quot;</span> <span class="punctuation">:</span> </span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="attr">&quot;defaultProfile&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&#123;c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span> <span class="punctuation">:</span> </span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;acrylicOpacity&quot;</span> <span class="punctuation">:</span> <span class="number">0.5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;closeOnExit&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;colorScheme&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Campbell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;commandline&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;wsl.exe -d Ubuntu-18.04&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cursorShape&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bar&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fontFace&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Consolas&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fontSize&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;guid&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&#123;c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;historySize&quot;</span> <span class="punctuation">:</span> <span class="number">9001</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;icon&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ms-appx:///ProfileIcons/&#123;9acb9455-ca41-5af7-950f-6bca1bc9722f&#125;.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Ubuntu-18.04&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;padding&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;0, 0, 0, 0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;snapOnInput&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;useAcrylic&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="主なショートカット"><a href="#主なショートカット" class="headerlink" title="主なショートカット"></a>主なショートカット</h3><p>Ctrl + T : タブを開く(デフォルトプロファイル)<br>Ctrl + Shift + &lt;プロファイル番号&gt; : プロファイル番号のタブを開く<br>Ctrl + W : タブを閉じる<br>Ctrl + , : 設定ファイルを開く(profile.json)<br>Ctrl + TAB : 次のタブへ移動</p>
<h3 id="気づき事項"><a href="#気づき事項" class="headerlink" title="気づき事項"></a>気づき事項</h3><ul>
<li>ウィンドウ移動のために掴めるタイトルバーの領域が狭い。<br>タイトルバーのタブ名の領域はタブ移動用らしく、ウィンドウはドラッグできない。</li>
<li>起動中にプロファイルに無茶な変更をすると落ちる</li>
</ul>
]]></content>
      <tags>
        <tag>windows-terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Tag Google Charts</title>
    <url>/2019/06/26/Hexo-Tag-Google-Charts/</url>
    <content><![CDATA[<p><a href="https://github.com/juampi92/hexo-tag-googlecharts">https://github.com/juampi92/hexo-tag-googlecharts</a><br><a href="https://developers.google.com/chart/interactive/docs/gallery">https://developers.google.com/chart/interactive/docs/gallery</a><br>hexo-tag-googlecharts を使ってチャートを表示してみました。</p>
<p>Google Charts を直接Javascript から使うよりも簡単に利用できて便利です。<br>カスタマイズに少しコツが必要なのでよく使う構成をテンプレートとして作っておくとよさそうです。</p>
<div id="googleChart3103"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.LineChart(document.getElementById("googleChart3103"))).draw(google.visualization.arrayToDataTable([['Date', 'Druid', 'Death Knight', 'Monk', 'Demon Hunter', 'Mage', 'Warlock', 'Shaman'],[new Date('2019/03/21'), 376, 378, 371, 373, 376, 377, 372],[new Date('2019/03/25'), 377, 378, 374, 374, 376, 378, 374],[new Date('2019/03/31'), 377, 380, 376, 375, 376, 378, 375],[new Date('2019/04/05'), 378, 382, 378, 376, 377, 380, 376],[new Date('2019/04/07'), 380, 383, 379, 376, 378, 381, 378],[new Date('2019/04/20'), 382, 384, 382, 377, 379, 383, 379],[new Date('2019/04/27'), 383, 385, 383, 379, 379, 384, 380],[new Date('2019/04/28'), 384, 385, 383, 379, 379, 387, 381],[new Date('2019/04/29'), 385, 385, 383, 380, 380, 388, 381],[new Date('2019/05/06'), 388, 388, 387, 383, 383, 389, 386],[new Date('2019/05/13'), 392, 391, 388, 386, 386, 391, 390],[new Date('2019/05/19'), 394, 392, 390, 388, 387, 392, 391],[new Date('2019/06/09'), 398, 394, 392, 391, 389, 395, 393],[new Date('2019/06/22'), 399, 397, 395, 394, 394, 398, 396]]),{"hAxis":{"title":"Date","format":"M/d"},"vAxis":{"title":"iLevel","format":"#"},"pointSize":"10","series":[{"color":"#FF7D0A"},{"color":"#C41F3B"},{"color":"#00FF96"},{"color":"#A330C9"},{"color":"#40C7EB"},{"color":"#8787ED"},{"color":"#0070DE"}],"title":" ","width":"100%","height":"600"});
      });
    })();
  }
</script>

<span id="more"></span>

<h3 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h3><h4 id="利用環境"><a href="#利用環境" class="headerlink" title="利用環境"></a>利用環境</h4><ul>
<li>hexo 3.8.0</li>
<li>hexo-tag-googlecharts 1.0.2</li>
</ul>
<h4 id="Google-JS-API-の取り込み"><a href="#Google-JS-API-の取り込み" class="headerlink" title="Google JS API の取り込み"></a>Google JS API の取り込み</h4><p>私はfreemind テーマを使っていますので以下のファイルに追記しました。</p>
<figure class="highlight html"><figcaption><span>themes/freemind/layout/_partial/head.ejs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//www.google.com/jsapi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="hexo-tag-googlecharts-のインストール"><a href="#hexo-tag-googlecharts-のインストール" class="headerlink" title="hexo-tag-googlecharts のインストール"></a>hexo-tag-googlecharts のインストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-tag-googlecharts --save</span><br></pre></td></tr></table></figure>
<h3 id="Hexo-Tag-Google-Charts-の使い方"><a href="#Hexo-Tag-Google-Charts-の使い方" class="headerlink" title="Hexo Tag Google Charts の使い方"></a>Hexo Tag Google Charts の使い方</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% googlecharts ChartType [width [height]] %&#125;</span><br><span class="line">Title for the Graph</span><br><span class="line">&#123; &quot;customOptions&quot;: true &#125;</span><br><span class="line">&#x27;Column1&#x27;, &#x27;Column2&#x27;, &#x27;Column3&#x27;</span><br><span class="line">1000, 28, 5</span><br><span class="line">5000, 71, 19</span><br><span class="line">10000, 143, 37</span><br><span class="line">20000, 282, 68</span><br><span class="line">&#123;% endgooglecharts %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-開始行"><a href="#1-開始行" class="headerlink" title="1. 開始行"></a>1. 開始行</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% googlecharts ChartType [width [height]] %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>ChartType: デフォルトは<code>Table</code></li>
<li>ChartType の一覧<br><a href="https://developers.google.com/chart/interactive/docs/gallery">https://developers.google.com/chart/interactive/docs/gallery</a></li>
<li>Google Charts のJavascript コードが以下の場合、hexo-tag-googlecharts のChartType は<code>LineChart</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chart = <span class="keyword">new</span> google.<span class="property">visualization</span>.<span class="title class_">LineChart</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;curve_chart&#x27;</span>));</span><br></pre></td></tr></table></figure></li>
<li>width: デフォルトは<code>800</code></li>
<li>height: デフォルトは<code>600</code></li>
<li>width, height には<code>auto</code>、<code>100%</code>のような表現も指定できそう</li>
</ul>
<h4 id="2-タイトル行"><a href="#2-タイトル行" class="headerlink" title="2. タイトル行"></a>2. タイトル行</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Title for the Graph</span><br></pre></td></tr></table></figure>
<ul>
<li>題名を指定</li>
<li>Table の場合、表示されない場合もあるかも</li>
<li>必須。<code> </code>(スペース)でもよい。</li>
</ul>
<h4 id="3-オプション行"><a href="#3-オプション行" class="headerlink" title="3. オプション行"></a>3. オプション行</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123; &quot;customOptions&quot;: true &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>ChartType 毎に指定できるオプションがある</li>
<li>長くなっても1行で指定</li>
<li>オプション指定無しの場合は<code>&#123;&#125;</code></li>
<li>キー名は<code>&quot;</code> で囲う必要があるので注意</li>
<li>データ文字列にHTML を許可するには<code>AllowHtml</code>オプションをtrue </li>
<li>日付の書式<br><a href="https://developers.google.com/chart/interactive/docs/datesandtimes">https://developers.google.com/chart/interactive/docs/datesandtimes</a></li>
<li>軸オプション<br><a href="https://developers.google.com/chart/interactive/docs/customizing_axes">https://developers.google.com/chart/interactive/docs/customizing_axes</a></li>
</ul>
<h4 id="4-データ行"><a href="#4-データ行" class="headerlink" title="4. データ行"></a>4. データ行</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#x27;Column1&#x27;, &#x27;Column2&#x27;, &#x27;Column3&#x27;</span><br><span class="line">1000, 28, 5</span><br><span class="line">5000, 71, 19</span><br><span class="line">10000, 143, 37</span><br><span class="line">20000, 282, 68</span><br></pre></td></tr></table></figure>
<ul>
<li>日付指定は<code>new Date(&#39;2019/06/26&#39;)</code>等で。</li>
</ul>
<h4 id="5-終了行"><a href="#5-終了行" class="headerlink" title="5. 終了行"></a>5. 終了行</h4><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% endgooglecharts %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Hexo-Tag-Google-Charts-の利用例"><a href="#Hexo-Tag-Google-Charts-の利用例" class="headerlink" title="Hexo Tag Google Charts の利用例"></a>Hexo Tag Google Charts の利用例</h3><p><a href="https://developers.google.com/chart/interactive/docs/gallery">https://developers.google.com/chart/interactive/docs/gallery</a><br>Chart Gallery の中でよく使いそうな例を移植してみました。</p>
<h4 id="表-Table"><a href="#表-Table" class="headerlink" title="表(Table)"></a>表(Table)</h4><p><a href="https://developers.google.com/chart/interactive/docs/gallery/table">https://developers.google.com/chart/interactive/docs/gallery/table</a></p>
<div id="googleChart7848"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.Table(document.getElementById("googleChart7848"))).draw(google.visualization.arrayToDataTable([['Name', 'Salary', 'Full Time Employee'],['Mike',  {v: 10000, f: '$10,000'}, true],['Jim',   {v:8000,   f: '$8,000'},  false],['Alice', {v: 12500, f: '$12,500'}, true],['Bob',   {v: 7000,  f: '$7,000'},  true]]),{"showRowNumber":true,"title":" ","width":"100%","height":"100%"});
      });
    })();
  }
</script>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% googlecharts Table 100% 100% %&#125;</span><br><span class="line"> </span><br><span class="line">&#123;&quot;showRowNumber&quot;: true&#125;</span><br><span class="line">&#x27;Name&#x27;, &#x27;Salary&#x27;, &#x27;Full Time Employee&#x27;</span><br><span class="line">&#x27;Mike&#x27;,  &#123;v: 10000, f: &#x27;$10,000&#x27;&#125;, true</span><br><span class="line">&#x27;Jim&#x27;,   &#123;v:8000,   f: &#x27;$8,000&#x27;&#125;,  false</span><br><span class="line">&#x27;Alice&#x27;, &#123;v: 12500, f: &#x27;$12,500&#x27;&#125;, true</span><br><span class="line">&#x27;Bob&#x27;,   &#123;v: 7000,  f: &#x27;$7,000&#x27;&#125;,  true</span><br><span class="line">&#123;% endgooglecharts %&#125;</span><br></pre></td></tr></table></figure>
<h4 id="複合グラフ-ComboChart"><a href="#複合グラフ-ComboChart" class="headerlink" title="複合グラフ(ComboChart)"></a>複合グラフ(ComboChart)</h4><p><a href="https://developers.google.com/chart/interactive/docs/gallery/combochart">https://developers.google.com/chart/interactive/docs/gallery/combochart</a></p>
<div id="googleChart7001"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.ComboChart(document.getElementById("googleChart7001"))).draw(google.visualization.arrayToDataTable([['Month', 'Bolivia', 'Ecuador', 'Madagascar', 'Papua New Guinea', 'Rwanda', 'Average'],['2004/05',  165,      938,         522,             998,           450,      614.6],['2005/06',  135,      1120,        599,             1268,          288,      682],['2006/07',  157,      1167,        587,             807,           397,      623],['2007/08',  139,      1110,        615,             968,           215,      609.4],['2008/09',  136,      691,         629,             1026,          366,      569.6]]),{"vAxis":{"title":"Cups"},"hAxis":{"title":"Month"},"seriesType":"bars","series":[{},{},{},{},{"type":"line"}],"title":"Monthly Coffee Production by Country","width":"900","height":"500"});
      });
    })();
  }
</script>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% googlecharts ComboChart 900 500 %&#125;</span><br><span class="line">Monthly Coffee Production by Country</span><br><span class="line">&#123;&quot;vAxis&quot;: &#123;&quot;title&quot;: &quot;Cups&quot;&#125;, &quot;hAxis&quot;: &#123;&quot;title&quot;: &quot;Month&quot;&#125;, &quot;seriesType&quot;: &quot;bars&quot;, &quot;series&quot;: [&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&quot;type&quot;: &quot;line&quot;&#125;]&#125;</span><br><span class="line">&#x27;Month&#x27;, &#x27;Bolivia&#x27;, &#x27;Ecuador&#x27;, &#x27;Madagascar&#x27;, &#x27;Papua New Guinea&#x27;, &#x27;Rwanda&#x27;, &#x27;Average&#x27;</span><br><span class="line">&#x27;2004/05&#x27;,  165,      938,         522,             998,           450,      614.6</span><br><span class="line">&#x27;2005/06&#x27;,  135,      1120,        599,             1268,          288,      682</span><br><span class="line">&#x27;2006/07&#x27;,  157,      1167,        587,             807,           397,      623</span><br><span class="line">&#x27;2007/08&#x27;,  139,      1110,        615,             968,           215,      609.4</span><br><span class="line">&#x27;2008/09&#x27;,  136,      691,         629,             1026,          366,      569.6</span><br><span class="line">&#123;% endgooglecharts %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="円グラフ-PieChart"><a href="#円グラフ-PieChart" class="headerlink" title="円グラフ(PieChart)"></a>円グラフ(PieChart)</h4><p><a href="https://developers.google.com/chart/interactive/docs/gallery/piechart">https://developers.google.com/chart/interactive/docs/gallery/piechart</a></p>
<div id="googleChart5598"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.PieChart(document.getElementById("googleChart5598"))).draw(google.visualization.arrayToDataTable([['Task', 'Hours per Day'],['Work',     11],['Eat',      2],['Commute',  2],['Watch TV', 2],['Sleep',    7]]),{"is3D":true,"title":"My Daily Activities","width":"100%","height":400});
      });
    })();
  }
</script>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% googlecharts PieChart 100% %&#125;</span><br><span class="line">My Daily Activities</span><br><span class="line">&#123;&quot;is3D&quot;: true&#125;</span><br><span class="line">&#x27;Task&#x27;, &#x27;Hours per Day&#x27;</span><br><span class="line">&#x27;Work&#x27;,     11</span><br><span class="line">&#x27;Eat&#x27;,      2</span><br><span class="line">&#x27;Commute&#x27;,  2</span><br><span class="line">&#x27;Watch TV&#x27;, 2</span><br><span class="line">&#x27;Sleep&#x27;,    7</span><br><span class="line">&#123;% endgooglecharts %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="地図-GeoChart"><a href="#地図-GeoChart" class="headerlink" title="地図(GeoChart)"></a>地図(GeoChart)</h4><p><a href="https://developers.google.com/chart/interactive/docs/gallery/geochart">https://developers.google.com/chart/interactive/docs/gallery/geochart</a></p>
<div id="googleChart1434"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.GeoChart(document.getElementById("googleChart1434"))).draw(google.visualization.arrayToDataTable([['Country', 'Popularity'],['Germany', 200],['United States', 300],['Brazil', 400],['Canada', 500],['France', 600],['RU', 700]]),{"title":" ","width":"900","height":"500"});
      });
    })();
  }
</script>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% googlecharts GeoChart 900 500 %&#125;</span><br><span class="line"> </span><br><span class="line">&#123;&#125;</span><br><span class="line">&#x27;Country&#x27;, &#x27;Popularity&#x27;</span><br><span class="line">&#x27;Germany&#x27;, 200</span><br><span class="line">&#x27;United States&#x27;, 300</span><br><span class="line">&#x27;Brazil&#x27;, 400</span><br><span class="line">&#x27;Canada&#x27;, 500</span><br><span class="line">&#x27;France&#x27;, 600</span><br><span class="line">&#x27;RU&#x27;, 700</span><br><span class="line">&#123;% endgooglecharts %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="気づき事項"><a href="#気づき事項" class="headerlink" title="気づき事項"></a>気づき事項</h3><ul>
<li>Javascript を書かなくてよいので楽ちん</li>
<li>折れ線グラフの0から始まらない軸の補助線のカスタマイズは難しい</li>
<li>系統毎のオプションを指定する<code>series</code> オプションは、インデックスを指定しての設定ではなく、配列に展開して設定した方がよいかもしれない</li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Raspberry Pi 4</title>
    <url>/2019/07/01/Raspberry-Pi-4/</url>
    <content><![CDATA[<p>Raspberry Pi 4 が発売されたので移行を検討してみます。</p>
<p>Raspberry Pi 2 Model B (2015&#x2F;2&#x2F;1 発売)からRaspberry Pi 4 Model B (2019&#x2F;6&#x2F;24 発売)への移行になりますので、4年間の大きな機能向上、性能向上が期待できそうです。反面、消費電力が大きくなってそうですが、Wi-Fi やBluetooth をオフにしておけば抑えることができるのかな。</p>
<p>ともかく、やっと32bit から抜け出せそうです！</p>
<span id="more"></span>

<h3 id="スペック比較"><a href="#スペック比較" class="headerlink" title="スペック比較"></a>スペック比較</h3><table>
<thead>
<tr>
<th align="left">Model</th>
<th align="left">Raspberry Pi 2 Model B</th>
<th align="left">Raspberry Pi 4 Model B</th>
</tr>
</thead>
<tbody><tr>
<td align="left">発売日</td>
<td align="left">2015年2月1日</td>
<td align="left">2019年6月24日</td>
</tr>
<tr>
<td align="left">SoC</td>
<td align="left">Broadcom BCM2836</td>
<td align="left">Broadcom BCM2711</td>
</tr>
<tr>
<td align="left">CPU</td>
<td align="left">ARM Cortex-A7</td>
<td align="left">ARM Cortex-A72</td>
</tr>
<tr>
<td align="left">900 MHz</td>
<td align="left">1.5GHz</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">ARMv7(32bit)</td>
<td align="left">ARMv8(64bit)</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">メモリ</td>
<td align="left">1GB</td>
<td align="left">4GB</td>
</tr>
<tr>
<td align="left">USB</td>
<td align="left">USB 2 x4</td>
<td align="left">USB 2 x2, USB 3 x2</td>
</tr>
<tr>
<td align="left">映像出力</td>
<td align="left">HDMI x1</td>
<td align="left">micro-HDMI x2</td>
</tr>
<tr>
<td align="left">音声出力</td>
<td align="left">3.5mm stereo</td>
<td align="left">3.5mm stereo</td>
</tr>
<tr>
<td align="left">LAN</td>
<td align="left">10&#x2F;100 Mbps</td>
<td align="left">Gigabit</td>
</tr>
<tr>
<td align="left">Wi-Fi</td>
<td align="left">-</td>
<td align="left">2.4GHz and 5GHz IEEE 802.11.b&#x2F;g&#x2F;n&#x2F;ac</td>
</tr>
<tr>
<td align="left">Bluetooth</td>
<td align="left">-</td>
<td align="left">5.0</td>
</tr>
<tr>
<td align="left">消費電力</td>
<td align="left">350mA(1.75 W)</td>
<td align="left">？</td>
</tr>
<tr>
<td align="left">電源</td>
<td align="left">1.8A(9.0 W)</td>
<td align="left">3A(15W)</td>
</tr>
<tr>
<td align="left">電源ソース</td>
<td align="left">USB micro-B</td>
<td align="left">USB Type-C</td>
</tr>
</tbody></table>
<h3 id="気になること"><a href="#気になること" class="headerlink" title="気になること"></a>気になること</h3><ul>
<li>Ubuntu Server 18.04 LTS 64bit ARM イメージの公開時期<br><a href="https://wiki.ubuntu.com/ARM/RaspberryPi">https://wiki.ubuntu.com/ARM/RaspberryPi</a></li>
<li>日本における技術基準適合証明の時期<br>raspbian は国を指定するまでWi-Fiは有効にならないみたいですね</li>
<li>消費電力<br>どこまで低消費電力に設定できるかな</li>
<li>積層ケース<br>2F をRPi2に、4F をRPi4 に</li>
</ul>
<h3 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h3><pre class="mermaid">graph LR;
    linkStyle default interpolate basis
    B(fas:fa-network-wired v6対応ルータ)-->C[fas:fa-server PC];
    C-->D[fas:fa-tv ディスプレイ];
    C-->K[fas:fa-keyboard キーボード];
    C-->L[fas:fa-mouse-pointer マウス];
    B-->E[fas:fa-laptop ノートPC];
    B-->H[fab:fa-raspberry-pi RPi4];
    H-->M[fas:fa-tv ディスプレイ];
    H-->J[fas:fa-hdd 電源付 USB HDD];
    B-->F(fas:fa-network-wired 一般ルータ);
    F-->B;
    F-->G[fab:fa-raspberry-pi RPi2];
    H-. 給電 .-I{fas:fa-plug 電源付 USB HUB};
    G-. 給電 .-I;
    C-. USBデータリンク .-H;
    style H fill:#f9f,stroke:#333,stroke-width:4px</pre>
]]></content>
      <tags>
        <tag>raspberry-pi</tag>
      </tags>
  </entry>
  <entry>
    <title>Raspberry Pi 4B + Ubuntu 18.04.2 64bit</title>
    <url>/2019/07/13/Raspberry-Pi-4B-Ubuntu-18-04-2-64bit/</url>
    <content><![CDATA[<p><img src="/images/rpi4_docker_portainer.png" alt="rpi4 docker portainer"><br><a href="https://blog.cloudkernels.net/posts/rpi4-64bit-virt/">https://blog.cloudkernels.net/posts/rpi4-64bit-virt/</a><br><a href="https://news.ycombinator.com/item?id=20410169">https://news.ycombinator.com/item?id=20410169</a><br>Raspberry Pi 4B 用のUbuntu Server 18.04.2 64bit のイメージが公開されていたので試してみました。<br>Docker 環境も構築されています。</p>
<h4 id="UPDATE-2019-7-14-軽量なイメージが公開されました。"><a href="#UPDATE-2019-7-14-軽量なイメージが公開されました。" class="headerlink" title="UPDATE: 2019&#x2F;7&#x2F;14 軽量なイメージが公開されました。"></a><strong>UPDATE:</strong> 2019&#x2F;7&#x2F;14 軽量なイメージが公開されました。</h4>  <div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/CloudKernels/status/1150447087391318018"></a></blockquote></div><script async defer src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>  <a href="https://cloudkernels.net/ubuntu-18.04.2-preinstalled-server-arm64+raspi4+kvm.img.xz">https://cloudkernels.net/ubuntu-18.04.2-preinstalled-server-arm64+raspi4+kvm.img.xz</a></p>
<span id="more"></span>

<h3 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h3><h4 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h4><ul>
<li>Raspberry Pi 4B</li>
<li>SDカード 32GB</li>
<li><a href="https://cloudkernels.net/rpi4-64-bit-kvm-docker.img.xz">https://cloudkernels.net/rpi4-64-bit-kvm-docker.img.xz</a></li>
<li>etcher で書き込み(2.5GB が8.07GB に展開される)</li>
<li>初回ブートに時間がかかる or reboot しないといけないかも</li>
<li>root のパスワードは無し</li>
<li>pi, ubuntu アカウントが存在する</li>
<li>port 80 nginx</li>
</ul>
<h4 id="設定-オプション"><a href="#設定-オプション" class="headerlink" title="設定(オプション)"></a>設定(オプション)</h4><ul>
<li>&#x2F;etc&#x2F;hosts にpi4 を追加<figure class="highlight text"><figcaption><span>/etc/hosts</span></figcaption><table><tr><td class="code"><pre><span class="line">127.0.0.1 localhost pi4</span><br></pre></td></tr></table></figure></li>
<li>sshd のポリシー設定変更<br><code>/etc/ssh/sshd_config</code></li>
<li>ユーザの追加<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> adduser hoge</span><br><span class="line">$ <span class="built_in">sudo</span> gpasswd -a hoge docker</span><br><span class="line">$ <span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line">$ <span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure></li>
<li>nginx 無効化<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> systemctl stop nginx</span><br><span class="line">$ <span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> nginx</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="実行結果"><a href="#実行結果" class="headerlink" title="実行結果"></a>実行結果</h3><h4 id="OS-情報"><a href="#OS-情報" class="headerlink" title="OS 情報"></a>OS 情報</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -a</span><br><span class="line">Linux pi4 4.19.57-v8+ <span class="comment">#2 SMP PREEMPT Tue Jul 9 20:31:37 UTC 2019 aarch64 aarch64 aarch64 GNU/Linux</span></span><br><span class="line">$ <span class="built_in">cat</span> /etc/lsb-release</span><br><span class="line">DISTRIB_ID=Ubuntu</span><br><span class="line">DISTRIB_RELEASE=18.04</span><br><span class="line">DISTRIB_CODENAME=bionic</span><br><span class="line">DISTRIB_DESCRIPTION=<span class="string">&quot;Ubuntu 18.04.2 LTS&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="CPU-情報"><a href="#CPU-情報" class="headerlink" title="CPU 情報"></a>CPU 情報</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lscpu</span><br><span class="line">Architecture:        aarch64</span><br><span class="line">Byte Order:          Little Endian</span><br><span class="line">CPU(s):              4</span><br><span class="line">On-line CPU(s) list: 0-3</span><br><span class="line">Thread(s) per core:  1</span><br><span class="line">Core(s) per socket:  4</span><br><span class="line">Socket(s):           1</span><br><span class="line">Vendor ID:           ARM</span><br><span class="line">Model:               3</span><br><span class="line">Model name:          Cortex-A72</span><br><span class="line">Stepping:            r0p3</span><br><span class="line">CPU max MHz:         1500.0000</span><br><span class="line">CPU min MHz:         600.0000</span><br><span class="line">BogoMIPS:            108.00</span><br><span class="line">Flags:               fp asimd evtstrm crc32 cpuid</span><br></pre></td></tr></table></figure>
<h4 id="メモリ情報"><a href="#メモリ情報" class="headerlink" title="メモリ情報"></a>メモリ情報</h4><p>現時点ではメモリを1GBに制限しています。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ free -m -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           917M        204M        203M         12M        509M        687M</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure>
<h4 id="ストレージ情報"><a href="#ストレージ情報" class="headerlink" title="ストレージ情報"></a>ストレージ情報</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">df</span> -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/root       7.1G  3.7G  3.1G  54% /</span><br><span class="line">devtmpfs        331M     0  331M   0% /dev</span><br><span class="line">tmpfs           459M     0  459M   0% /dev/shm</span><br><span class="line">tmpfs           459M   13M  447M   3% /run</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs           459M     0  459M   0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0       79M   79M     0 100% /snap/core/7172</span><br><span class="line">/dev/loop1       83M   83M     0 100% /snap/go/4095</span><br><span class="line">/dev/loop2       79M   79M     0 100% /snap/core/7275</span><br><span class="line">/dev/loop3       83M   83M     0 100% /snap/go/3956</span><br><span class="line">/dev/mmcblk0p1  253M  112M  141M  45% /boot</span><br><span class="line">tmpfs            92M     0   92M   0% /run/user/0</span><br><span class="line">tmpfs            92M     0   92M   0% /run/user/1001</span><br></pre></td></tr></table></figure>
<h4 id="Docker-バージョン"><a href="#Docker-バージョン" class="headerlink" title="Docker バージョン"></a>Docker バージョン</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker --version</span><br><span class="line">Docker version 18.09.7, build 2d0083d</span><br><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.17.1, build unknown</span><br></pre></td></tr></table></figure>
<h4 id="Docker-システム情報"><a href="#Docker-システム情報" class="headerlink" title="Docker システム情報"></a>Docker システム情報</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker system info                                                             </span><br><span class="line">Containers: 29</span><br><span class="line"> Running: 0</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 29</span><br><span class="line">Images: 6</span><br><span class="line">Server Version: 18.09.7</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line"> Backing Filesystem: extfs</span><br><span class="line"> Supports d_type: <span class="literal">true</span></span><br><span class="line"> Native Overlay Diff: <span class="literal">true</span></span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Cgroup Driver: cgroupfs</span><br><span class="line">Plugins:</span><br><span class="line"> Volume: <span class="built_in">local</span></span><br><span class="line"> Network: bridge host macvlan null overlay</span><br><span class="line"> Log: awslogs fluentd gcplogs gelf journald json-file <span class="built_in">local</span> logentries splunk syslog</span><br><span class="line">Swarm: inactive</span><br><span class="line">Runtimes: runc runnc</span><br><span class="line">Default Runtime: runc</span><br><span class="line">Init Binary: docker-init</span><br><span class="line">containerd version: 894b81a4b802e4eb2a91d1ce216b8817763c29fb</span><br><span class="line">runc version: 425e105d5a03fabd737a126ad93d62a9eeede87f</span><br><span class="line">init version: fec3683</span><br><span class="line">Security Options:</span><br><span class="line"> seccomp</span><br><span class="line">  Profile: default</span><br><span class="line">Kernel Version: 4.19.57-v8+</span><br><span class="line">Operating System: Ubuntu 18.04.2 LTS</span><br><span class="line">OSType: linux</span><br><span class="line">Architecture: aarch64</span><br><span class="line">CPUs: 4</span><br><span class="line">Total Memory: 917MiB</span><br><span class="line">Name: pi4</span><br><span class="line">ID: 63DU:AQ23:GYZI:IPZ7:M7XX:JJTI:O33H:IND4:HH46:7YPL:RISU:LYZF</span><br><span class="line">Docker Root Dir: /var/lib/docker</span><br><span class="line">Debug Mode (client): <span class="literal">false</span></span><br><span class="line">Debug Mode (server): <span class="literal">false</span></span><br><span class="line">Registry: https://index.docker.io/v1/</span><br><span class="line">Labels:</span><br><span class="line">Experimental: <span class="literal">false</span></span><br><span class="line">Insecure Registries:</span><br><span class="line"> 127.0.0.0/8</span><br><span class="line">Live Restore Enabled: <span class="literal">false</span></span><br><span class="line">Product License: Community Engine</span><br><span class="line"></span><br><span class="line">WARNING: No swap <span class="built_in">limit</span> support</span><br><span class="line">WARNING: No cpu cfs quota support</span><br><span class="line">WARNING: No cpu cfs period support</span><br></pre></td></tr></table></figure>

<h4 id="Docker-イメージ情報"><a href="#Docker-イメージ情報" class="headerlink" title="Docker イメージ情報"></a>Docker イメージ情報</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image <span class="built_in">ls</span></span><br><span class="line">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis                        latest              a05cff133c70        3 days ago          90.1MB</span><br><span class="line">cloudkernels/memcached-hvt   aarch64             416c7328ae41        3 months ago        25.7MB</span><br><span class="line">cloudkernels/nginx-nabla     aarch64             c9d5acb805d4        3 months ago        39.7MB</span><br><span class="line">cloudkernels/nginx-hvt       aarch64             53ebcae8baa6        3 months ago        39.8MB</span><br><span class="line">cloudkernels/redis-hvt       aarch64             5d5dbb5439f6        3 months ago        27MB</span><br><span class="line">cloudkernels/redis-nabla     aarch64             e05a0c30fa58        3 months ago        26.9MB</span><br></pre></td></tr></table></figure>

<h3 id="Docker-コンテナの追加"><a href="#Docker-コンテナの追加" class="headerlink" title="Docker コンテナの追加"></a>Docker コンテナの追加</h3><h4 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h4><ul>
<li>docker-compose.yml<figure class="highlight yaml"><figcaption><span>docker-portainer/docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">portainer:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">portainer/portainer</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">portainer</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br></pre></td></tr></table></figure></li>
<li>起動<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> docker-portainer</span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure></li>
<li>アクセス<br><a href="http://192.168.11.14:9000/">http://192.168.11.14:9000/</a><br>admin に8文字以上のパスワードを設定</li>
</ul>
]]></content>
      <tags>
        <tag>raspberry-pi</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio Code Remote Development でRaspberry Pi に接続</title>
    <url>/2019/07/15/Visual-Studio-Code-Remote-Development-over-SSH-to-a-Raspberry-Pi/</url>
    <content><![CDATA[<p><img src="/images/vscode-remote-development.png" alt="Visual Studio Code Remote Development"><br><a href="https://code.visualstudio.com/docs/remote/remote-overview">https://code.visualstudio.com/docs/remote/remote-overview</a><br>Visual Studio Code Remote Development でRaspberry Pi 2 と接続してみました。<br>接続迄に少し時間がかかるような気がしますが、環境としてはすっきりしています。</p>
<span id="more"></span>

<h3 id="利用環境"><a href="#利用環境" class="headerlink" title="利用環境"></a>利用環境</h3><h4 id="クライアント"><a href="#クライアント" class="headerlink" title="クライアント"></a>クライアント</h4><ul>
<li>Windows 10 Pro Insider Preview 1903</li>
<li>WSL 2 (Ubuntu 18.04.2 x86_64)</li>
<li>Visual Studio Code - Insiders 1.37.0-insider<br><a href="https://code.visualstudio.com/insiders/">https://code.visualstudio.com/insiders/</a><br>アイコンが緑</li>
</ul>
<h4 id="サーバ"><a href="#サーバ" class="headerlink" title="サーバ"></a>サーバ</h4><ul>
<li>Raspberry Pi 2</li>
<li>Ubuntu 18.04.2 armv7l</li>
</ul>
<h3 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h3><h4 id="クライアントVSCode-拡張機能の設定"><a href="#クライアントVSCode-拡張機能の設定" class="headerlink" title="クライアントVSCode 拡張機能の設定"></a>クライアントVSCode 拡張機能の設定</h4><ul>
<li>Remote Development をインストール</li>
<li>Remote SSH を削除</li>
<li>Remote SSH (Nightly) をインストール</li>
</ul>
<h4 id="SSH-接続の設定"><a href="#SSH-接続の設定" class="headerlink" title="SSH 接続の設定"></a>SSH 接続の設定</h4><ul>
<li>WSL2 から鍵登録<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-copy-id -i /mnt/c/Users/hoge/.ssh/id_rsa.pub ubuntu@192.168.11.106</span><br></pre></td></tr></table></figure></li>
<li>接続情報<figure class="highlight text"><figcaption><span>C:\Users\hoge\.ssh\ssh_config</span></figcaption><table><tr><td class="code"><pre><span class="line"># Read more about SSH config files: https://linux.die.net/man/5/ssh_config</span><br><span class="line">Host pi2</span><br><span class="line">    HostName 192.168.11.106</span><br><span class="line">    User ubuntu</span><br><span class="line">    IdentityFile C:\Users\hoge\.ssh\id_rsa</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><h4 id="接続"><a href="#接続" class="headerlink" title="接続"></a>接続</h4><ul>
<li>左下の「<code>&gt;&lt;</code>」アイコンをクリック</li>
<li><code>Remote-SSH: Connect to Host...</code> を選択</li>
<li>pi2 を選択</li>
<li>別ウィンドウが開いてサーバ側にVSCode Server が導入される<br>左下のアイコンは「<code>&gt;&lt;</code>SSH:pi2」</li>
</ul>
<h4 id="サーバVSCode-拡張機能の導入-オプション"><a href="#サーバVSCode-拡張機能の導入-オプション" class="headerlink" title="サーバVSCode 拡張機能の導入(オプション)"></a>サーバVSCode 拡張機能の導入(オプション)</h4><ul>
<li>Activitus Bar</li>
<li>Project Manager</li>
<li>Shortcuts</li>
</ul>
<h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><ul>
<li>aarch64 対応<br>接続しようとすると以下のメッセージが表示されます。<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Unsupported architecture</span><br><span class="line">The remote server architecture is not supported</span><br></pre></td></tr></table></figure>
<a href="https://github.com/microsoft/vscode-remote-release/issues/60">https://github.com/microsoft/vscode-remote-release/issues/60</a><br>vscode-server でaarch64 がサポートされるといいですね。</li>
<li>別の手段<ul>
<li>sshfs で接続</li>
<li>vscode のSSH FS 拡張</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Raspbian Buster 64bit</title>
    <url>/2019/07/31/Raspbian-Buster-64bit/</url>
    <content><![CDATA[<p><img src="/images/raspbian_buster_64bit.png" alt="Raspbian Buster 64bit"><br><a href="https://www.raspberrypi.org/forums/viewtopic.php?t=246766">https://www.raspberrypi.org/forums/viewtopic.php?t=246766</a></p>
<ul>
<li>aarch64 カーネル</li>
<li>メモリ1GB まで利用可能</li>
</ul>
<span id="more"></span>

<h3 id="起動"><a href="#起動" class="headerlink" title="起動"></a>起動</h3><ul>
<li>マウス、キーボードを接続していると起動しないみたいなので、起動してから接続する</li>
</ul>
]]></content>
      <tags>
        <tag>raspberry-pi</tag>
      </tags>
  </entry>
  <entry>
    <title>WoW Armory to PDF</title>
    <url>/2019/07/31/WoW-Armory-to-PDF/</url>
    <content><![CDATA[

	<div class="row">
    <embed src="/images/404.pdf" width="100%" height="550" type="application/pdf">
	</div>



<p>Puppeteer を使ってWoW Armory の情報をPDF 形式で保存してみました。<br>実行した日付、レルム、キャラクター名をファイル名にしてPDF 化します。<br>履歴をとるのに便利ですね。</p>
<p>上記はキャラクターが見つからなかった場合のPDF の例です。<br>“Something’s Not Quite Right”<br>ゲーム内で聞いたことがあるセリフですね。</p>
<span id="more"></span>

<h3 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i puppeteer date-utils</span><br></pre></td></tr></table></figure>

<h3 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h3><figure class="highlight javascript"><figcaption><span>wowarmory.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;date-utils&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chars = [</span><br><span class="line">  [<span class="string">&#x27;en-us&#x27;</span>, <span class="string">&#x27;us&#x27;</span>, <span class="string">&#x27;barthilas&#x27;</span>, <span class="string">&#x27;name01&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;en-us&#x27;</span>, <span class="string">&#x27;us&#x27;</span>, <span class="string">&#x27;barthilas&#x27;</span>, <span class="string">&#x27;name02&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;en-us&#x27;</span>, <span class="string">&#x27;us&#x27;</span>, <span class="string">&#x27;barthilas&#x27;</span>, <span class="string">&#x27;name03&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;en-us&#x27;</span>, <span class="string">&#x27;us&#x27;</span>, <span class="string">&#x27;barthilas&#x27;</span>, <span class="string">&#x27;name04&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;en-us&#x27;</span>, <span class="string">&#x27;us&#x27;</span>, <span class="string">&#x27;barthilas&#x27;</span>, <span class="string">&#x27;name05&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;en-us&#x27;</span>, <span class="string">&#x27;us&#x27;</span>, <span class="string">&#x27;barthilas&#x27;</span>, <span class="string">&#x27;name06&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;en-us&#x27;</span>, <span class="string">&#x27;us&#x27;</span>, <span class="string">&#x27;barthilas&#x27;</span>, <span class="string">&#x27;name07&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;en-us&#x27;</span>, <span class="string">&#x27;us&#x27;</span>, <span class="string">&#x27;barthilas&#x27;</span>, <span class="string">&#x27;name08&#x27;</span>]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toFormat</span>(<span class="string">&quot;YYYYMMDD&quot;</span>);</span><br><span class="line"></span><br><span class="line">(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> c <span class="keyword">of</span> chars) &#123;</span><br><span class="line">    url = <span class="string">&#x27;https://worldofwarcraft.com/&#x27;</span> + </span><br><span class="line">          c[<span class="number">0</span>] + <span class="string">&#x27;/character/&#x27;</span> + </span><br><span class="line">          c[<span class="number">1</span>] + <span class="string">&#x27;/&#x27;</span> + </span><br><span class="line">          c[<span class="number">2</span>] + <span class="string">&#x27;/&#x27;</span> + </span><br><span class="line">          c[<span class="number">3</span>];</span><br><span class="line">    pdf = today + <span class="string">&#x27;_&#x27;</span> +</span><br><span class="line">          c[<span class="number">2</span>] + <span class="string">&#x27;_&#x27;</span> + </span><br><span class="line">          c[<span class="number">3</span>] + <span class="string">&#x27;.pdf&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>();</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(url, &#123;<span class="attr">waitUntil</span>: <span class="string">&#x27;networkidle2&#x27;</span>&#125;);</span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">pdf</span>(&#123;<span class="attr">path</span>: pdf, <span class="attr">printBackground</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(pdf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">await</span> browser.<span class="title function_">close</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node wowarmory.js</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>puppeteer</tag>
        <tag>wow</tag>
      </tags>
  </entry>
  <entry>
    <title>Manjaro 64bit - RPi4</title>
    <url>/2019/08/01/Manjaro-64bit-RPi4/</url>
    <content><![CDATA[<p><img src="/images/manjaro_64bit_rpi4.png" alt="Manjaro 64bit RPi4"><br><a href="https://forum.manjaro.org/t/manjaro-arm-preview2-for-raspberry-pi-4/96694">https://forum.manjaro.org/t/manjaro-arm-preview2-for-raspberry-pi-4/96694</a></p>
<ul>
<li>aarch64 カーネル</li>
<li>メモリ3GB 弱まで利用可能</li>
<li>4K 表示可能</li>
</ul>
<span id="more"></span>

<h3 id="起動"><a href="#起動" class="headerlink" title="起動"></a>起動</h3><ul>
<li>マウスを接続していると起動しない&#x2F;画面表示しないかも？</li>
<li>Alt - F2 からターミナルを起動</li>
<li>ウィンドウ操作はAlt - Space 等で</li>
</ul>
<h3 id="日本語フォント"><a href="#日本語フォント" class="headerlink" title="日本語フォント"></a>日本語フォント</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> pacman -S otf-ipafont</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>raspberry-pi</tag>
        <tag>manjaro</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker RPi4 ImageBuilder</title>
    <url>/2019/08/04/Docker-RPi4-ImageBuilder/</url>
    <content><![CDATA[<p><img src="/images/rpi4-aarch64.png" alt="rpi4 aarch64"><br><a href="https://github.com/satmandu/docker-rpi4-imagebuilder">https://github.com/satmandu/docker-rpi4-imagebuilder</a></p>
<p>RPi4 64bit 用のUbuntu Server イメージを作成する環境を構築してみました。</p>
<h4 id="Update-2019-08-05-aarch64-でメモリ4GB-起動しました！"><a href="#Update-2019-08-05-aarch64-でメモリ4GB-起動しました！" class="headerlink" title="Update: 2019-08-05 aarch64 でメモリ4GB 起動しました！"></a><strong>Update:</strong> 2019-08-05 aarch64 でメモリ4GB 起動しました！</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ <span class="built_in">uname</span> -a</span><br><span class="line">Linux ubuntu 4.19.63-v8-gdee436110 <span class="comment">#1 SMP PREEMPT Sun Aug 4 05:51:39 UTC 2019 aarch64 aarch64 aarch64 GNU/Linux</span></span><br><span class="line">ubuntu@ubuntu:~$ <span class="built_in">cat</span> /etc/lsb-release </span><br><span class="line">DISTRIB_ID=Ubuntu</span><br><span class="line">DISTRIB_RELEASE=19.10</span><br><span class="line">DISTRIB_CODENAME=eoan</span><br><span class="line">DISTRIB_DESCRIPTION=<span class="string">&quot;Ubuntu Eoan Ermine (development branch)&quot;</span></span><br><span class="line">ubuntu@ubuntu:~$ free -m -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          3.7Gi       112Mi       3.4Gi       2.0Mi       204Mi       3.6Gi</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure>

<h4 id="Update-2019-08-15-aarch64-でメモリ4GB-とUSB-動作しました！"><a href="#Update-2019-08-15-aarch64-でメモリ4GB-とUSB-動作しました！" class="headerlink" title="Update: 2019-08-15 aarch64 でメモリ4GB とUSB 動作しました！"></a><strong>Update:</strong> 2019-08-15 aarch64 でメモリ4GB とUSB 動作しました！</h4><span id="more"></span>

<h3 id="環境の準備"><a href="#環境の準備" class="headerlink" title="環境の準備"></a>環境の準備</h3><h4 id="ビルド環境の構成"><a href="#ビルド環境の構成" class="headerlink" title="ビルド環境の構成"></a>ビルド環境の構成</h4><ul>
<li>ホストOS: Windows 10 Pro Insider Preview 1903</li>
<li>ゲストOS: Ubuntu Server 19.10 x86_64<br><a href="http://cdimage.ubuntu.com/ubuntu-server/daily-live/current/eoan-live-server-amd64.iso">http://cdimage.ubuntu.com/ubuntu-server/daily-live/current/eoan-live-server-amd64.iso</a></li>
</ul>
<h4 id="ゲストOS-にDocker-をインストール"><a href="#ゲストOS-にDocker-をインストール" class="headerlink" title="ゲストOS にDocker をインストール"></a>ゲストOS にDocker をインストール</h4><ul>
<li>Docker をインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><figcaption><span>/etc/apt/sources.list.d/docker.list</span></figcaption><table><tr><td class="code"><pre><span class="line">deb [arch=amd64] https://download.docker.com/linux/ubuntu disco stable</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update</span><br><span class="line">$ <span class="built_in">sudo</span> apt install docker-ce qemu-user-static</span><br><span class="line">$ docker --version</span><br><span class="line">Docker version 19.03.1, build 74b1e89</span><br><span class="line">$ <span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">$ <span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="起動用SD-カードの作成"><a href="#起動用SD-カードの作成" class="headerlink" title="起動用SD カードの作成"></a>起動用SD カードの作成</h3><h4 id="イメージの作成"><a href="#イメージの作成" class="headerlink" title="イメージの作成"></a>イメージの作成</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> ~/rpi4-build</span><br><span class="line">$ <span class="built_in">cd</span> ~/rpi4-build</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/satmandu/docker-rpi4-imagebuilder</span><br><span class="line">$ <span class="built_in">cd</span> docker-rpi4-imagebuilder</span><br><span class="line">$ docker build -t docker-rpi4-imagebuilder:19.10 -f Dockerfile-ubuntu-19.10 .</span><br><span class="line">$ <span class="built_in">mkdir</span> output</span><br><span class="line">$ git pull ; NOXZ=1 <span class="keyword">time</span> ./build-image -i docker-rpi4-imagebuilder:19.10 -o output .</span><br><span class="line">$ <span class="built_in">ls</span> -og output/</span><br><span class="line">total 2351720</span><br><span class="line">-rw-r--r-- 1        788 Aug  4 05:42 andrei_gherzan_uboot_fork.git.log</span><br><span class="line">-rw-r--r-- 1        788 Aug  4 05:42 armstub8-gic.git.log</span><br><span class="line">-rw-r--r-- 1      24335 Aug  4 06:49 build-log-08_04_2019_0544UTC.<span class="built_in">log</span></span><br><span class="line">-rw-r--r-- 1      23572 Aug  4 08:16 build-log-08_04_2019_0811UTC.<span class="built_in">log</span></span><br><span class="line">-rw-r--r-- 1  952065544 Aug  4 06:49 eoan-preinstalled-server-arm64+raspi4-08_04_2019_0544UTC.img.lz4</span><br><span class="line">-rw-r--r-- 1 1426237866 Aug  4 08:16 eoan-preinstalled-server-arm64+raspi4-08_04_2019_0811UTC.img.lz4</span><br><span class="line">-rw-r--r-- 1        788 Aug  4 05:42 kernelbuild_setup.git.log</span><br><span class="line">-rw-r--r-- 1   10759680 Aug  4 08:13 linux-headers-4.19.63-v8-gdee436110_4.19.63-v8-gdee436110-1_arm64.deb</span><br><span class="line">-rw-r--r-- 1   19012932 Aug  4 08:13 linux-image-4.19.63-v8-gdee436110_4.19.63-v8-gdee436110-1_arm64.deb</span><br><span class="line">-rw-r--r-- 1        788 Aug  4 05:42 non-free_firmware.git.log</span><br><span class="line">-rw-r--r-- 1        788 Aug  4 05:42 rpi_firmware.git.log</span><br><span class="line">-rw-r--r-- 1        788 Aug  4 05:42 rpi_userland.git.log</span><br></pre></td></tr></table></figure>

<p>.xz にしたい場合は<code>NOXZ=1</code>の指定を外す。<br>イメージは小さくなるが、圧縮に時間がかかるらしい。</p>
<h4 id="ログの確認とリビルド"><a href="#ログの確認とリビルド" class="headerlink" title="ログの確認とリビルド"></a>ログの確認とリビルド</h4><p><code>./output/build-log-*.log</code> でエラーが出力されていたらリビルド</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull ; NOXZ=1 <span class="keyword">time</span> ./build-image -i docker-rpi4-imagebuilder:19.10 -o output .</span><br></pre></td></tr></table></figure>

<h4 id="SD-カードへ書き込み"><a href="#SD-カードへ書き込み" class="headerlink" title="SD カードへ書き込み"></a>SD カードへ書き込み</h4><p><code>sdX</code> をSD カードのデバイスに置換して実行します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install lz4</span><br><span class="line">$ lz4cat eoan-preinstalled-server-arm64+raspi4-MM-DD-YYYY_hhmmUTC.img.lz4 | <span class="built_in">sudo</span> <span class="built_in">dd</span> of=/dev/sdX bs=32M</span><br></pre></td></tr></table></figure>

<h3 id="カーネルのカスタマイズ"><a href="#カーネルのカスタマイズ" class="headerlink" title="カーネルのカスタマイズ"></a>カーネルのカスタマイズ</h3><p>3種類のカスタマイズ方法が用意されてします。</p>
<ul>
<li><p>RAM: 1GB, USB: Works</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cp</span> /boot/firmware/uboot.bin /boot/firmware/kernel8.img ; <span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>
</li>
<li><p>RAM: 4GB, USB: No</p>
<figure class="highlight text"><figcaption><span>/boot/firmware/config.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">#total_mem=3072</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cp</span> /boot/firmware/kernel8.img.nouboot /boot/firmware/kernel8.img ; <span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>
</li>
<li><p>RAM: 3GB, USB: Works [現在のデフォルト]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cp</span> /boot/firmware/kernel8.img.nouboot /boot/firmware/kernel8.img ; [ `grep -cs <span class="string">&quot;total_mem=&quot;</span> /boot/firmware/config.txt` -gt 0 ] &amp;&amp; <span class="built_in">sudo</span> sed <span class="string">&#x27;s/total_mem=*$/total_mem=3072/&#x27;</span> /boot/firmware/config.txt || <span class="built_in">echo</span> <span class="string">&quot;total_mem=3072&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> -a /boot/firmware/config.txt</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>raspberry-pi</tag>
      </tags>
  </entry>
  <entry>
    <title>RPi4 - Ubuntu Server 19.10 64bit</title>
    <url>/2019/08/07/Raspberry-Pi-4B-Ubuntu-Server-19-10-64bit/</url>
    <content><![CDATA[<p><img src="/images/ubuntu-portainer-rpi4.png" alt="ubuntu portainer rpi4"><br>Raspberry Pi 4B でUbuntu Server 64bit が起動するようになったので環境設定をします。</p>
<span id="more"></span>

<h3 id="起動モードの切り替え方法"><a href="#起動モードの切り替え方法" class="headerlink" title="起動モードの切り替え方法"></a>起動モードの切り替え方法</h3><ul>
<li>メモリ4GB 起動(USB 不可)の場合<figure class="highlight text"><figcaption><span>/boot/firmware/config.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">#total_mem=3072</span><br></pre></td></tr></table></figure></li>
<li>メモリ3GB 起動(USB 可能)の場合<figure class="highlight text"><figcaption><span>/boot/firmware/config.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">total_mem=3072</span><br></pre></td></tr></table></figure>
Update: 2019&#x2F;8&#x2F;15 版で3GB の制限はなくなりました。</li>
</ul>
<h3 id="ホストネームの設定"><a href="#ホストネームの設定" class="headerlink" title="ホストネームの設定"></a>ホストネームの設定</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> hostnamectl set-hostname pi4</span><br></pre></td></tr></table></figure>

<h3 id="Alias-等の設定"><a href="#Alias-等の設定" class="headerlink" title="Alias 等の設定"></a>Alias 等の設定</h3><ul>
<li>Alias<figure class="highlight bash"><figcaption><span>~/.bash_aliases</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Update installed packages</span></span><br><span class="line"><span class="built_in">alias</span> upd=<span class="string">&#x27;sudo apt update -y &amp;&amp; sudo apt dist-upgrade &amp;&amp; sudo apt autoremove -y&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change locale</span></span><br><span class="line"><span class="built_in">alias</span> en=<span class="string">&#x27;export LC_ALL=en_US.UTF8&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ja=<span class="string">&#x27;export LC_ALL=ja_JP.UTF8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh to remote host in local network</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">sshu</span></span>() &#123;</span><br><span class="line">  <span class="built_in">command</span> ssh ubuntu@192.168.11.<span class="variable">$1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ . ~/.bash_aliases</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="パッケージ更新とカーネルの戻し"><a href="#パッケージ更新とカーネルの戻し" class="headerlink" title="パッケージ更新とカーネルの戻し"></a>パッケージ更新とカーネルの戻し</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ upd</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cp</span> /boot/firmware/kernel8.img.nouboot /boot/firmware/kernel8.img</span><br></pre></td></tr></table></figure>
<p>Update: 2019&#x2F;8&#x2F;15 版でカーネル戻しは不要になりました。</p>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><h4 id="Docker-CE"><a href="#Docker-CE" class="headerlink" title="Docker-CE"></a>Docker-CE</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><figcaption><span>/etc/apt/sources.list.d/docker.list</span></figcaption><table><tr><td class="code"><pre><span class="line">deb [arch=amd64] https://download.docker.com/linux/ubuntu disco stable</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update</span><br><span class="line">$ <span class="built_in">sudo</span> apt install docker-ce</span><br><span class="line">$ <span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">$ docker --version</span><br><span class="line">Docker version 19.03.1, build 74b1e89</span><br><span class="line">$ <span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>

<h4 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt isntall docker-compose</span><br><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.21.0, build unknown</span><br></pre></td></tr></table></figure>

<h4 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h4><ul>
<li>docker-compose.yml<figure class="highlight yaml"><figcaption><span>./docker-portainer/docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line">  <span class="attr">services:</span></span><br><span class="line">    <span class="attr">portainer:</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">portainer/portainer</span></span><br><span class="line">      <span class="attr">container_name:</span> <span class="string">portainer</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./data:/data</span></span><br></pre></td></tr></table></figure></li>
<li>起動<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> docker-portainer</span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure></li>
<li>アクセス<br><a href="http://192.168.11.14:9000/">http://192.168.11.14:9000/</a><br>admin に8文字以上のパスワードを設定</li>
</ul>
<h3 id="Samba"><a href="#Samba" class="headerlink" title="Samba"></a>Samba</h3><p>メモリ3GB で起動した設定の場合はUSB が使えるので外付けHDD をSamba で共有します。</p>
<ul>
<li>ディスクの確認<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsblk -f</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><figcaption><span>/etc/fstab</span></figcaption><table><tr><td class="code"><pre><span class="line">LABEL=media03 /mnt/media03 ext2 defaults 0 0</span><br><span class="line">LABEL=media04 /mnt/media04 ext4 defaults 0 0</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> mount -a</span><br></pre></td></tr></table></figure></li>
<li>Samba の設定<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install samba</span><br></pre></td></tr></table></figure>
<figure class="highlight ini"><figcaption><span>/etc/samba/smb.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line">unix <span class="attr">charset</span> = UTF-<span class="number">8</span></span><br><span class="line">dos <span class="attr">charset</span> = CP932</span><br><span class="line"></span><br><span class="line"><span class="attr">interfaces</span> = <span class="number">127.0</span>.<span class="number">0.0</span>/<span class="number">8</span> <span class="number">192.168</span>.<span class="number">11.0</span>/<span class="number">24</span></span><br><span class="line"></span><br><span class="line">bind interfaces <span class="attr">only</span> = <span class="literal">yes</span></span><br><span class="line">map to <span class="attr">guest</span> = Bad User</span><br><span class="line"></span><br><span class="line"><span class="section">[media03]</span></span><br><span class="line"><span class="attr">path</span> = /mnt/media03</span><br><span class="line"><span class="attr">writable</span> = <span class="literal">yes</span></span><br><span class="line">guest <span class="attr">ok</span> = <span class="literal">yes</span></span><br><span class="line">guest <span class="attr">only</span> = <span class="literal">yes</span></span><br><span class="line">create <span class="attr">mode</span> = <span class="number">0777</span></span><br><span class="line">directory <span class="attr">mode</span> = <span class="number">0777</span></span><br><span class="line"></span><br><span class="line"><span class="section">[media04]</span></span><br><span class="line"><span class="attr">path</span> = /mnt/media04</span><br><span class="line"><span class="attr">writable</span> = <span class="literal">yes</span></span><br><span class="line">guest <span class="attr">ok</span> = <span class="literal">yes</span></span><br><span class="line">guest <span class="attr">only</span> = <span class="literal">yes</span></span><br><span class="line">create <span class="attr">mode</span> = <span class="number">0777</span></span><br><span class="line">directory <span class="attr">mode</span> = <span class="number">0777</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>raspberry-pi</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo App Template</title>
    <url>/2019/08/14/Hexo-App-Template-on-RPi4-64bit/</url>
    <content><![CDATA[<p><img src="/images/app-template-hexo.png" alt="app template hexo"><br>Portainer には41 個のApp Template が登録されていますが、独自に追加することもできるようになっています。App Template にHexo を追加してみました。</p>
<p>Portainer のApp Template には3種類あります。</p>
<ul>
<li>Container (DockerHub)</li>
<li>Swarm stack (Swarm)</li>
<li>Compose stack (Compose)</li>
</ul>
<p>Container 型でDockerHub のHexo をデプロイしようとしましたが、aarch64 の環境では失敗してしまいました。そのため、ローカルビルドするようなCompose 型スクリプトで登録することにしました。<br>Raspberry Pi 4B 環境でデプロイが完了する迄に5分くらいかかりました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Raspberry Pi 4B</li>
<li>Ubuntu Server 19.10 aarch64</li>
<li>Docker 19.03.1, build 74b1e89</li>
<li>Docker Compose 1.21.0</li>
<li>Portainer 1.22.0</li>
</ul>
<h3 id="Portainer-の操作"><a href="#Portainer-の操作" class="headerlink" title="Portainer の操作"></a>Portainer の操作</h3><h4 id="App-Template-の追加"><a href="#App-Template-の追加" class="headerlink" title="App Template の追加"></a>App Template の追加</h4><ol>
<li><code>App Templates</code> &gt;&gt; <code>Add Template</code></li>
<li>Input</li>
</ol>
<ul>
<li>Title<br>Hexo</li>
<li>Description<br>A fast, simple &amp; powerful blog framework</li>
<li>Select <code>Compose Stack</code></li>
<li>Logo URL<br><a href="https://seeklogo.com/images/H/hexo-logo-6C514C7053-seeklogo.com.png">https://seeklogo.com/images/H/hexo-logo-6C514C7053-seeklogo.com.png</a></li>
<li>Platform<br>Linux</li>
<li>Categories<br>blog</li>
<li>Repository URL<br><a href="https://github.com/ktkr3d/docker-hexo">https://github.com/ktkr3d/docker-hexo</a></li>
</ul>
<ol start="3">
<li><code>Add Environment</code></li>
</ol>
<ul>
<li>GIT_USER_NAME<br>hoge</li>
</ul>
<ol start="4">
<li><code>Add Environment</code></li>
</ol>
<ul>
<li>GIT_USER_EMAIL<br><a href="mailto:&#104;&#111;&#103;&#101;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#104;&#111;&#103;&#101;&#x40;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a></li>
</ul>
<ol start="5">
<li><code>Create the template</code></li>
</ol>
<h4 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h4><ol>
<li><code>App Templates</code></li>
<li>App テンプレートから <code>Hexo</code> を選択</li>
<li>Name に <code>My Blog</code> を入力</li>
<li><code>Deploy the Stack</code></li>
</ol>
<h4 id="コンテナに入るには"><a href="#コンテナに入るには" class="headerlink" title="コンテナに入るには"></a>コンテナに入るには</h4><ol>
<li><code>Containers</code> &gt;&gt; <code>hexo</code> の<code>&gt;_</code> をクリック</li>
<li>Command <code>/bin/sh</code></li>
<li>User <code>root</code></li>
<li><code>Connect</code></li>
<li>コンテナ内は以下のような感じです。  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/hexo <span class="comment"># set</span></span><br><span class="line">GIT_USER_EMAIL=<span class="string">&#x27;hoge@gmail.com&#x27;</span></span><br><span class="line">GIT_USER_NAME=<span class="string">&#x27;hoge&#x27;</span></span><br><span class="line">HISTFILE=<span class="string">&#x27;/root/.ash_history&#x27;</span></span><br><span class="line">HOME=<span class="string">&#x27;/root&#x27;</span></span><br><span class="line">HOSTNAME=<span class="string">&#x27;77f43f92a735&#x27;</span></span><br><span class="line">IFS=<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line">LINENO=<span class="string">&#x27;&#x27;</span></span><br><span class="line">NODE_VERSION=<span class="string">&#x27;12.8.0&#x27;</span></span><br><span class="line">OPTIND=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">PATH=<span class="string">&#x27;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#x27;</span></span><br><span class="line">PPID=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">PS1=<span class="string">&#x27;\w \$ &#x27;</span></span><br><span class="line">PS2=<span class="string">&#x27;&gt; &#x27;</span></span><br><span class="line">PS4=<span class="string">&#x27;+ &#x27;</span></span><br><span class="line">PWD=<span class="string">&#x27;/hexo&#x27;</span></span><br><span class="line">SHLVL=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">TERM=<span class="string">&#x27;xterm&#x27;</span></span><br><span class="line">YARN_VERSION=<span class="string">&#x27;1.17.3&#x27;</span></span><br><span class="line">/hexo <span class="comment">#</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="PC-からアクセス"><a href="#PC-からアクセス" class="headerlink" title="PC からアクセス"></a>PC からアクセス</h3><h4 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h4><p><a href="http://192.168.11.16:4000/">http://192.168.11.16:4000</a></p>
<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p><a href="http://192.168.11.16:4000/admin">http://192.168.11.16:4000/admin</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>raspberry-pi</tag>
        <tag>portainer</tag>
      </tags>
  </entry>
  <entry>
    <title>RPi4 - Ubuntu Server 19.10 64bit 更新</title>
    <url>/2019/08/15/RPi4-Ubuntu-Server-19-10-64bit-%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p><img src="/images/rpi4-aarch64-4gbmem.png" alt="rpi4 aarch64 4gb memory"><br><a href="https://github.com/satmandu/docker-rpi4-imagebuilder/">https://github.com/satmandu/docker-rpi4-imagebuilder/</a><br><a href="https://github.com/raspberrypi/linux/pull/3144">https://github.com/raspberrypi/linux/pull/3144</a></p>
<p>とうとうRaspberry Pi 4B のUbuntu Server 19.10 64bit (aarch64) で4GBメモリとUSBが動作するようになりました。USB を動作させるためにメモリを3GB に制限する必要が無くなりました。</p>
<span id="more"></span>

<h3 id="イメージ作成手順"><a href="#イメージ作成手順" class="headerlink" title="イメージ作成手順"></a>イメージ作成手順</h3><p><a href="https://github.com/satmandu/docker-rpi4-imagebuilder/">https://github.com/satmandu/docker-rpi4-imagebuilder/</a></p>
<h3 id="Docker-のインストール"><a href="#Docker-のインストール" class="headerlink" title="Docker のインストール"></a>Docker のインストール</h3><p>docker-ce をインストールしたらkernel が5 にあがってしまい、うまく再起動できませんでした。<br>とりあえず、Ubuntu のリポジトリの古いDocker を使うことにします。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install docker docker-compose</span><br><span class="line">$ <span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">$ docker --version</span><br><span class="line">Docker version 18.09.8, build 0dd43dd87f</span><br><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.21.0, build unknown</span><br><span class="line">$ <span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>

<h3 id="Portainer-のインストール"><a href="#Portainer-のインストール" class="headerlink" title="Portainer のインストール"></a>Portainer のインストール</h3><figure class="highlight yaml"><figcaption><span>~/repos/docker-portainer/docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">portainer:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">portainer/portainer</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">portainer</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="ポータブルSSD-をUSB-接続"><a href="#ポータブルSSD-をUSB-接続" class="headerlink" title="ポータブルSSD をUSB 接続"></a>ポータブルSSD をUSB 接続</h3><p><code>SimpleTech CMB25U36G</code> を接続してみました。<br>RPi4 でもUSB バスパワーで動作するんですね。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsusb</span><br><span class="line">Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">Bus 002 Device 002: ID 4971:8017 SimpleTech CMB25U36G</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 002: ID 2109:3431 VIA Labs, Inc. Hub</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">$ lsblk -f</span><br><span class="line">NAME        FSTYPE   LABEL       UUID                                 FSAVAIL FSUSE% MOUNTPOINT</span><br><span class="line">loop0       squashfs                                                        0   100% /snap/core/7399</span><br><span class="line">loop1       squashfs                                                        0   100% /snap/lxd/11634</span><br><span class="line">loop2       squashfs                                                        0   100% /snap/lxd/11646</span><br><span class="line">sda         ntfs     vol02       3652DDEE4C98EBE9</span><br><span class="line">└─sda1      ntfs     ボリューム  44D6B85FD6B85342</span><br><span class="line">mmcblk0</span><br><span class="line">├─mmcblk0p1 vfat     system-boot 4543-668F                             155.7M    38% /boot/firmware</span><br><span class="line">└─mmcblk0p2 ext4     writable    4a312c10-d0ff-484c-994c-1c4a9cc8a07e   24.3G     9% /</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mkdir</span> /mnt/ssd01</span><br><span class="line">$ <span class="built_in">sudo</span> mount /dev/sda1 /mnt/ssd01</span><br><span class="line">$ <span class="built_in">df</span> -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            1.9G     0  1.9G   0% /dev</span><br><span class="line">tmpfs           381M  2.8M  379M   1% /run</span><br><span class="line">/dev/mmcblk0p2   29G  2.7G   25G  10% /</span><br><span class="line">tmpfs           1.9G     0  1.9G   0% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs           1.9G     0  1.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0       79M   79M     0 100% /snap/core/7399</span><br><span class="line">/dev/loop1       49M   49M     0 100% /snap/lxd/11634</span><br><span class="line">/dev/mmcblk0p1  253M   97M  156M  39% /boot/firmware</span><br><span class="line">/dev/loop2       49M   49M     0 100% /snap/lxd/11646</span><br><span class="line">tmpfs           381M     0  381M   0% /run/user/1000</span><br><span class="line">/dev/sda1       466G  361G  106G  78% /mnt/ssd01</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>raspberry-pi</tag>
      </tags>
  </entry>
  <entry>
    <title>RPi4 - Pritunl</title>
    <url>/2019/08/17/Pritunl/</url>
    <content><![CDATA[<p><img src="/images/pritunl.png" alt="pritunl"><br><a href="https://pritunl.com/">https://pritunl.com/</a><br><a href="https://opensource.com/article/19/1/pritunl-vpn-raspberry-pi">https://opensource.com/article/19/1/pritunl-vpn-raspberry-pi</a><br>pritunl はVPN サーバの構築と管理をしてくれるOSSで、OpenVPN を使っています。<br>Raspberry Pi 4 に環境を構築して、OpenVPN クライアントから接続してみました。<br>操作が簡単で便利ですね。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Raspberry Pi 4B</li>
<li>Ubuntu Server 19.10 aarch64</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><p>以下の手順に従って構築します。いくつかカスタマイズしています。<br><a href="https://opensource.com/article/19/1/pritunl-vpn-raspberry-pi">https://opensource.com/article/19/1/pritunl-vpn-raspberry-pi</a></p>
<h4 id="前提パッケージ"><a href="#前提パッケージ" class="headerlink" title="前提パッケージ"></a>前提パッケージ</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get -y install build-essential git bzr python python-dev python-pip net-tools openvpn bridge-utils psmisc golang-go libffi-dev mongodb libssl-dev</span><br></pre></td></tr></table></figure>
<p>openssl のヘッダ参照でエラーになったので<code>libssl-dev</code> を追加しています。</p>
<h4 id="pritunl-の最新バージョンの確認"><a href="#pritunl-の最新バージョンの確認" class="headerlink" title="pritunl の最新バージョンの確認"></a>pritunl の最新バージョンの確認</h4><p><a href="https://github.com/pritunl/pritunl/releases">https://github.com/pritunl/pritunl/releases</a></p>
<p><code>1.29.2145.25</code> が最新でした。</p>
<h4 id="pritunl-のインストール"><a href="#pritunl-のインストール" class="headerlink" title="pritunl のインストール"></a>pritunl のインストール</h4><p>環境変数<code>VERSION</code> に<code>1.29.2145.25</code> を指定します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> su -</span><br><span class="line"><span class="comment"># cd /opt</span></span><br><span class="line"><span class="comment"># export VERSION=1.29.2145.25</span></span><br><span class="line"><span class="comment"># tee -a ~/.bashrc &lt;&lt; EOF</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=\<span class="variable">$HOME</span>/go</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/go/bin:\<span class="variable">$PATH</span></span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># source ~/.bashrc</span></span><br><span class="line"><span class="comment"># mkdir pritunl &amp;&amp; cd pritunl</span></span><br><span class="line"><span class="comment"># go get -u github.com/pritunl/pritunl-dns</span></span><br><span class="line"><span class="comment"># go get -u github.com/pritunl/pritunl-web</span></span><br><span class="line"><span class="comment"># sudo ln -s ~/go/bin/pritunl-dns /usr/bin/pritunl-dns</span></span><br><span class="line"><span class="comment"># sudo ln -s ~/go/bin/pritunl-web /usr/bin/pritunl-web</span></span><br><span class="line"><span class="comment"># wget https://github.com/pritunl/pritunl/archive/$VERSION.tar.gz</span></span><br><span class="line"><span class="comment"># tar -xf $VERSION.tar.gz</span></span><br><span class="line"><span class="comment"># cd pritunl-$VERSION</span></span><br><span class="line"><span class="comment"># python2 setup.py build</span></span><br><span class="line"><span class="comment"># pip install -r requirements.txt</span></span><br><span class="line"><span class="comment"># python2 setup.py install --prefix=/usr/local</span></span><br></pre></td></tr></table></figure>
<h4 id="起動"><a href="#起動" class="headerlink" title="起動"></a>起動</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl start mongodb pritunl</span></span><br><span class="line"><span class="comment"># systemctl enable mongodb pritunl</span></span><br></pre></td></tr></table></figure>

<h3 id="運用"><a href="#運用" class="headerlink" title="運用"></a>運用</h3><h4 id="サーバの設定"><a href="#サーバの設定" class="headerlink" title="サーバの設定"></a>サーバの設定</h4><p><a href="http://192.168.11.19/">http://192.168.11.19</a><br>画面の指示に従ってログインした後、サーバを設定します。</p>
<ol>
<li><code>Users</code> &gt;&gt; <code>Add Organization</code></li>
<li><code>Users</code> &gt;&gt; <code>Add User</code></li>
<li><code>Servers</code> &gt;&gt; <code>Add Server</code></li>
<li><code>Servers</code> &gt;&gt; <code>Attach Organization</code></li>
<li><code>Servers</code> &gt;&gt; <code>Start Server</code></li>
</ol>
<h4 id="ルータ、ファイアウォールの設定"><a href="#ルータ、ファイアウォールの設定" class="headerlink" title="ルータ、ファイアウォールの設定"></a>ルータ、ファイアウォールの設定</h4><p>指定されたUDP ポートを通過させます。<br><code>Servers</code> の各サーバのPort 表示でもポート番号を確認できます。</p>
<h4 id="クライアント設定ファイル"><a href="#クライアント設定ファイル" class="headerlink" title="クライアント設定ファイル"></a>クライアント設定ファイル</h4><ol>
<li><code>Users</code> &gt;&gt; <code>Click to download profile</code></li>
<li><code>username.tar</code> から.ovpn ファイルを抽出</li>
</ol>
<h4 id="クライアント設定と接続"><a href="#クライアント設定と接続" class="headerlink" title="クライアント設定と接続"></a>クライアント設定と接続</h4><ol>
<li>各デバイスのOpenVPN アプリで.ovpn ファイルを取り込み</li>
<li>接続</li>
</ol>
<p>接続するとダッシュボート画面のUsers のカウントが増えます。</p>
]]></content>
      <tags>
        <tag>openvpn</tag>
        <tag>pritunl</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>RPi4 - Docker Redmine</title>
    <url>/2019/08/21/RPi4-Redmine/</url>
    <content><![CDATA[<p><img src="/images/rpi4-docker-redmine.png" alt="rpi4 docker redmine"><br>RPi4 のDocker 上にRedmine の環境を構築しました。<br>Portainer のApp Templates を利用しました。</p>
<span id="more"></span>

<h3 id="Redmine-コンテナの構築"><a href="#Redmine-コンテナの構築" class="headerlink" title="Redmine コンテナの構築"></a>Redmine コンテナの構築</h3><h4 id="Portainer-でRedmine-コンテナを作成"><a href="#Portainer-でRedmine-コンテナを作成" class="headerlink" title="Portainer でRedmine コンテナを作成"></a>Portainer でRedmine コンテナを作成</h4><ol>
<li>Portainer を開く<br>  <a href="http://192.168.11.19:9000/">http://192.168.11.19:9000</a></li>
<li>App Templates からRedmine を選択</li>
<li>Name <code>redmine</code> を指定</li>
<li><code>+ show advanced options</code> ボタンを押下</li>
<li>Port mapping <code>10080</code> を指定</li>
<li><code>Deploy the container</code> ボタンを押下</li>
</ol>
<h4 id="コンテナへのログイン方法"><a href="#コンテナへのログイン方法" class="headerlink" title="コンテナへのログイン方法"></a>コンテナへのログイン方法</h4><ol>
<li>Containers</li>
<li><code>redmine</code> コンテナの<code>&gt;_</code>(exec console)</li>
<li>Command <code>/bin/bash</code></li>
<li>User <code>redmine</code></li>
<li><code>Connect</code></li>
</ol>
<h4 id="コンテナの再起動方法"><a href="#コンテナの再起動方法" class="headerlink" title="コンテナの再起動方法"></a>コンテナの再起動方法</h4><ol>
<li>Containers</li>
<li><code>redmine</code> コンテナをチェック</li>
<li><code>Restart</code></li>
</ol>
<h3 id="Redmine-の環境設定"><a href="#Redmine-の環境設定" class="headerlink" title="Redmine の環境設定"></a>Redmine の環境設定</h3><h4 id="Redmine-へのログイン"><a href="#Redmine-へのログイン" class="headerlink" title="Redmine へのログイン"></a>Redmine へのログイン</h4><ol>
<li>Redmine を開く<br><a href="http://192.168.11.19:10080/">http://192.168.11.19:10080</a></li>
<li><code>admin</code> &#x2F; <code>admin</code> でログイン</li>
<li>パスワード、言語選択、タイムゾーン等を変更</li>
</ol>
<h4 id="Redmine-のバージョン確認"><a href="#Redmine-のバージョン確認" class="headerlink" title="Redmine のバージョン確認"></a>Redmine のバージョン確認</h4><ul>
<li>管理 &gt;&gt; 情報<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Environment:</span><br><span class="line">  Redmine version                4.0.4.stable</span><br><span class="line">  Ruby version                   2.6.3-p62 (2019-04-16) [aarch64-linux]</span><br><span class="line">  Rails version                  5.2.3</span><br><span class="line">  Environment                    production</span><br><span class="line">  Database adapter               SQLite</span><br><span class="line">  Mailer queue                   ActiveJob::QueueAdapters::AsyncAdapter</span><br><span class="line">  Mailer delivery                smtp</span><br><span class="line">SCM:</span><br><span class="line">  Subversion                     1.10.4</span><br><span class="line">  Mercurial                      4.8.2</span><br><span class="line">  Bazaar                         2.8.0</span><br><span class="line">  Git                            2.20.1</span><br><span class="line">  Filesystem                     </span><br><span class="line">Redmine plugins:</span><br><span class="line">  no plugin installed</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="初期設定"><a href="#初期設定" class="headerlink" title="初期設定"></a>初期設定</h4><p>プロジェクトを作成する際に<code>デフォルト設定のロード</code> を実行します。<br>後で実行する場合は以下の手順を実行します。</p>
<ol>
<li>Redmineを使い始めるための初期設定<br> <a href="http://redmine.jp/tech_note/first-step/admin/">http://redmine.jp/tech_note/first-step/admin/</a></li>
<li>チケットの優先度<br> 管理 &gt;&gt; 選択肢の値 &gt;&gt; チケットの優先度 で<code>高</code>、<code>中</code>、<code>低</code> を追加</li>
</ol>
<h4 id="テーマの設定"><a href="#テーマの設定" class="headerlink" title="テーマの設定"></a>テーマの設定</h4><ul>
<li>install circle<br>unzip .zip<br>tar cvzf -&gt; .tgz<br>scp<br>tar xvzf</li>
<li>apply theme</li>
</ul>
<h3 id="Redmine-プラグインの追加"><a href="#Redmine-プラグインの追加" class="headerlink" title="Redmine プラグインの追加"></a>Redmine プラグインの追加</h3><h4 id="Redmine-Absolute-Dates-plugin"><a href="#Redmine-Absolute-Dates-plugin" class="headerlink" title="Redmine Absolute Dates plugin"></a>Redmine Absolute Dates plugin</h4><ol>
<li>コンテナへのログイン</li>
<li>プラグインのインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/src/redmine/plugins</span><br><span class="line">$ git <span class="built_in">clone</span> git://github.com/suer/redmine_absolute_dates.git</span><br></pre></td></tr></table></figure></li>
<li>コンテナの再起動</li>
</ol>
<h4 id="Redmine-Enter-Cancel-plugin"><a href="#Redmine-Enter-Cancel-plugin" class="headerlink" title="Redmine Enter Cancel plugin"></a>Redmine Enter Cancel plugin</h4><ol>
<li>コンテナへのログイン</li>
<li>プラグインのインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/src/redmine/plugins</span><br><span class="line">$ git <span class="built_in">clone</span> git://github.com/suer/redmine_enter_cancel.git</span><br></pre></td></tr></table></figure></li>
<li>コンテナの再起動</li>
</ol>
<h4 id="Hide-Sidebar"><a href="#Hide-Sidebar" class="headerlink" title="Hide Sidebar"></a>Hide Sidebar</h4><ol>
<li>コンテナへのログイン</li>
<li>プラグインのインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/src/redmine/plugins</span><br><span class="line">$ wget https://github.com/bizyman/sidebar_hide/archive/0.0.8-dev1.tar.gz</span><br><span class="line">$ tar zxvf 0.0.8-dev1.tar.gz</span><br><span class="line">$ <span class="built_in">rm</span> -rf 0.0.8-dev1.tar.gz</span><br></pre></td></tr></table></figure></li>
<li>コンテナの再起動</li>
</ol>
<h4 id="easy-gantt"><a href="#easy-gantt" class="headerlink" title="easy_gantt"></a>easy_gantt</h4><ul>
<li>easy_gantt（Easy Gantt）<br><a href="https://www.easyredmine.com/redmine-gantt-plugin">https://www.easyredmine.com/redmine-gantt-plugin</a><br>unzip .zip<br>tar cvzf<br>scp<br>tar xvzf</li>
<li>restart container</li>
<li>enable REST API</li>
<li>apply</li>
</ul>
<h4 id="これから試すプラグイン"><a href="#これから試すプラグイン" class="headerlink" title="これから試すプラグイン"></a>これから試すプラグイン</h4><ul>
<li>redmine_backlogs（Backlogs）<br><a href="https://github.com/ayapapa/redmine_backlogs/tree/redmine4">https://github.com/ayapapa/redmine_backlogs/tree/redmine4</a></li>
<li>redmine_checklists（Issues Checklist）<br><a href="https://www.redminecrm.com/projects/checklist/pages/1">https://www.redminecrm.com/projects/checklist/pages/1</a></li>
<li>redmine_issue_templates（Issue Template）<br><a href="https://github.com/akiko-pusu/redmine_issue_templates">https://github.com/akiko-pusu/redmine_issue_templates</a></li>
<li>redmine_work_time（Work Time）<br><a href="https://bitbucket.org/tkusukawa/redmine_work_time">https://bitbucket.org/tkusukawa/redmine_work_time</a></li>
<li>Redmine Code Review plugin<br><a href="http://www.redmine.org/plugins/redmine_code_review">http://www.redmine.org/plugins/redmine_code_review</a></li>
<li>redmine_banner（Banner）<br><a href="https://github.com/akiko-pusu/redmine_banner">https://github.com/akiko-pusu/redmine_banner</a></li>
</ul>
]]></content>
      <tags>
        <tag>redmine</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>RPi4 - Docker OpenProject CE</title>
    <url>/2019/08/27/RPi4-Docker-Open-Project-CE/</url>
    <content><![CDATA[<p><img src="/images/rpi4-docker-openproject-ce.png" alt="rpi4 docker openproject-ce"><br><a href="https://github.com/opf/openproject-ce">https://github.com/opf/openproject-ce</a></p>
<p>Raspberry Pi 4B 上のDocker でOpenProject CE の環境を構築してみました。</p>
<p>arm64 でビルドするためにスクリプトの一部を修正しました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Raspberry Pi 4B</li>
<li>Ubuntu Server 19.10 aarch64</li>
<li>Docker 18.09.8, build 0dd43dd87f</li>
<li>Docker Compose 1.21.0</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>docker-compose.yml  <figure class="highlight yaml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">openproject-ce</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">memcached</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;30080:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pg-data:/var/lib/postgresql/data</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/db/openproject</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">DATABASE_URL:</span> <span class="string">&quot;postgres://opuser:oppassword@postgres:5432/openproject?pool=10&amp;encoding=unicode&amp;timeout=5000&amp;reconnect=true&quot;</span></span><br><span class="line">      <span class="attr">SECRET_KEY_BASE:</span> <span class="string">openproject_secret_key</span></span><br><span class="line">      <span class="attr">CACHE_MEMCACHE_SERVER:</span> <span class="string">memcached</span></span><br><span class="line">      <span class="attr">CACHE_NAMESPACE:</span> <span class="string">openproject</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:9.6-alpine</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pg-data:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">openproject</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">opuser</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">oppassword</span></span><br><span class="line">  <span class="attr">memcached:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">memcached:1.5.7-alpine</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">pg-data:</span></span><br></pre></td></tr></table></figure></li>
<li>clone openproject-ce  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/opf/openproject-ce.git</span><br></pre></td></tr></table></figure></li>
<li>.&#x2F;openproject-ce&#x2F;Dockerfile の修正</li>
</ol>
<ul>
<li>追加<figure class="highlight text"><figcaption><span>./openproject-ce/Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">ENV NODE_ARCH &quot;linux-arm64&quot;</span><br></pre></td></tr></table></figure></li>
<li>修正<figure class="highlight text"><figcaption><span>./openproject-ce/docker/Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line">RUN curl https://nodejs.org/dist/v$&#123;NODE_VERSION&#125;/node-v$&#123;NODE_VERSION&#125;-$&#123;NODE_ARCH&#125;.tar.gz | tar xzf - -C /usr/local --strip-components=1</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">time</span> docker-compose up -d</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Creating docker-openproject-ce_memcached_1 ... <span class="keyword">done</span></span><br><span class="line">Creating docker-openproject-ce_postgres_1  ... <span class="keyword">done</span></span><br><span class="line">Creating docker-openproject-ce_web_1       ... <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">real    36m42.568s</span><br><span class="line">user    0m8.337s</span><br><span class="line">sys     0m1.600s</span><br></pre></td></tr></table></figure>

<h3 id="アクセス"><a href="#アクセス" class="headerlink" title="アクセス"></a>アクセス</h3><p><a href="http://192.168.11.19:30080/">http://192.168.11.19:30080/</a></p>
<ul>
<li>初回は admin &#x2F; admin で入ります。</li>
<li><code>Administration</code> - <code>System settings</code> - <code>Display</code>  で選択可能言語に<code>日本語</code>を追加しておきます。その後、各アカウントの表示言語として<code>日本語</code>を選択します。</li>
</ul>
]]></content>
      <tags>
        <tag>raspberry-pi</tag>
        <tag>docker</tag>
        <tag>openproject-ce</tag>
      </tags>
  </entry>
  <entry>
    <title>RPi4 - Ubuntu Server 18.04.3 64bit</title>
    <url>/2019/09/16/RPi4-Ubuntu-Server-18-04-3-64bit/</url>
    <content><![CDATA[<p><img src="/images/xubuntu_rpi4_aarch64.png" alt="xubuntu rpi4 aarch64"><br><a href="https://github.com/TheRemote/Ubuntu-Server-raspi4-unofficial">https://github.com/TheRemote/Ubuntu-Server-raspi4-unofficial</a><br>Raspberry Pi 4B にUbuntu Server 18.04.3 LTS aarch64 環境を構築しました。<br>Xfce デスクトップ環境もインストールしてみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Raspberry Pi 4B</li>
<li>Ubuntu Server 18.04.3 aarch64</li>
<li>Xfce 4.12</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="Hostname"><a href="#Hostname" class="headerlink" title="Hostname"></a>Hostname</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> hostnamectl set-hostname pi4</span><br></pre></td></tr></table></figure>
<h4 id="Aliases"><a href="#Aliases" class="headerlink" title="Aliases"></a>Aliases</h4><figure class="highlight bash"><figcaption><span>$HOME/.bash_aliases</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> upd=<span class="string">&#x27;sudo apt update &amp;&amp; sudo apt dist-upgrade &amp;&amp; sudo apt autoremove -y&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> en=<span class="string">&#x27;export LC_ALL=en_US.UTF8&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ja=<span class="string">&#x27;export LC_ALL=ja_JP.UTF8&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">sshu</span></span>() &#123;</span><br><span class="line">  <span class="built_in">command</span> ssh ubuntu@192.168.11.<span class="variable">$1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Update-packages"><a href="#Update-packages" class="headerlink" title="Update packages"></a>Update packages</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ . ~/.bash_aliases</span><br><span class="line">$ upd</span><br></pre></td></tr></table></figure>
<h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -fsSL https://get.docker.com/ | sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> reboot</span></span><br></pre></td></tr></table></figure>
<h4 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install docker-compose</span><br></pre></td></tr></table></figure>
<h4 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h4><figure class="highlight yaml"><figcaption><span>$HOME/repos/docker-portainer/docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">portainer:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">portainer/portainer</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">portainer</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure>
<h4 id="neofetch"><a href="#neofetch" class="headerlink" title="neofetch"></a>neofetch</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install neofetch</span><br></pre></td></tr></table></figure>
<h4 id="Xfce"><a href="#Xfce" class="headerlink" title="Xfce"></a>Xfce</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install xubuntu-desktop</span><br><span class="line">$ <span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install vnc4server</span><br><span class="line">$ vncpasswd</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><figcaption><span>$HOME/.vnc/xstartup</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">startxfce4 &amp;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> +x ~/.vnc/xstartup</span><br><span class="line">$ vncserver</span><br></pre></td></tr></table></figure>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><h4 id="OS-情報"><a href="#OS-情報" class="headerlink" title="OS 情報"></a>OS 情報</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -a</span><br><span class="line">Linux pi4 4.19.71-v8+ <span class="comment">#1 SMP PREEMPT Sun Sep 8 13:27:03 MDT 2019 aarch64 aarch64</span></span><br><span class="line"> aarch64 GNU/Linux</span><br><span class="line">$ <span class="built_in">cat</span> /etc/lsb-release</span><br><span class="line">DISTRIB_ID=Ubuntu</span><br><span class="line">DISTRIB_RELEASE=18.04</span><br><span class="line">DISTRIB_CODENAME=bionic</span><br><span class="line">DISTRIB_DESCRIPTION=<span class="string">&quot;Ubuntu 18.04.3 LTS&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="CPU-情報"><a href="#CPU-情報" class="headerlink" title="CPU 情報"></a>CPU 情報</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lscpu</span><br><span class="line">Architecture:        aarch64</span><br><span class="line">Byte Order:          Little Endian</span><br><span class="line">CPU(s):              4</span><br><span class="line">On-line CPU(s) list: 0-3</span><br><span class="line">Thread(s) per core:  1</span><br><span class="line">Core(s) per socket:  4</span><br><span class="line">Socket(s):           1</span><br><span class="line">Vendor ID:           ARM</span><br><span class="line">Model:               3</span><br><span class="line">Model name:          Cortex-A72</span><br><span class="line">Stepping:            r0p3</span><br><span class="line">CPU max MHz:         1500.0000</span><br><span class="line">CPU min MHz:         600.0000</span><br><span class="line">BogoMIPS:            108.00</span><br><span class="line">Flags:               fp asimd evtstrm crc32 cpuid</span><br></pre></td></tr></table></figure>
<h4 id="メモリ情報"><a href="#メモリ情報" class="headerlink" title="メモリ情報"></a>メモリ情報</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ free -m -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           3.7G        211M        3.1G        2.5M        371M        3.5G</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure>
<h4 id="ストレージ情報"><a href="#ストレージ情報" class="headerlink" title="ストレージ情報"></a>ストレージ情報</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">df</span> -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/root        14G  1.9G   12G  14% /</span><br><span class="line">devtmpfs        1.9G     0  1.9G   0% /dev</span><br><span class="line">tmpfs           1.9G     0  1.9G   0% /dev/shm</span><br><span class="line">tmpfs           1.9G  2.5M  1.9G   1% /run</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs           1.9G     0  1.9G   0% /sys/fs/cgroup</span><br><span class="line">/dev/mmcblk0p1  253M   29M  224M  12% /boot/firmware</span><br><span class="line">tmpfs           381M     0  381M   0% /run/user/1000</span><br></pre></td></tr></table></figure>
<h4 id="Docker-バージョン"><a href="#Docker-バージョン" class="headerlink" title="Docker バージョン"></a>Docker バージョン</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker --version</span><br><span class="line">Docker version 19.03.2, build 6a30dfc</span><br><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.17.1, build unknown</span><br></pre></td></tr></table></figure>
<h4 id="Docker-システム情報"><a href="#Docker-システム情報" class="headerlink" title="Docker システム情報"></a>Docker システム情報</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker system info</span><br><span class="line">Client:</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 1</span><br><span class="line">  Running: 1</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 0</span><br><span class="line"> Images: 1</span><br><span class="line"> Server Version: 19.03.2</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: extfs</span><br><span class="line">  Supports d_type: <span class="literal">true</span></span><br><span class="line">  Native Overlay Diff: <span class="literal">true</span></span><br><span class="line"> Logging Driver: json-file</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: <span class="built_in">local</span></span><br><span class="line">  Network: bridge host ipvlan macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file <span class="built_in">local</span> logentries splunk syslog</span><br><span class="line"> Swarm: inactive</span><br><span class="line"> Runtimes: runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> Init Binary: docker-init</span><br><span class="line"> containerd version: 894b81a4b802e4eb2a91d1ce216b8817763c29fb</span><br><span class="line"> runc version: 425e105d5a03fabd737a126ad93d62a9eeede87f</span><br><span class="line"> init version: fec3683</span><br><span class="line"> Security Options:</span><br><span class="line">  seccomp</span><br><span class="line">   Profile: default</span><br><span class="line"> Kernel Version: 4.19.71-v8+</span><br><span class="line"> Operating System: Ubuntu 18.04.3 LTS</span><br><span class="line"> OSType: linux</span><br><span class="line"> Architecture: aarch64</span><br><span class="line"> CPUs: 4</span><br><span class="line"> Total Memory: 3.719GiB</span><br><span class="line"> Name: pi4</span><br><span class="line"> ID: MTVZ:RWU4:VK3S:U5ZW:MKRX:XRKU:IF3J:POSZ:BNUY:PGHR:HUXK:YBJU</span><br><span class="line"> Docker Root Dir: /var/lib/docker</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Registry: https://index.docker.io/v1/</span><br><span class="line"> Labels:</span><br><span class="line"> Experimental: <span class="literal">false</span></span><br><span class="line"> Insecure Registries:</span><br><span class="line">  127.0.0.0/8</span><br><span class="line"> Live Restore Enabled: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">WARNING: No swap <span class="built_in">limit</span> support</span><br><span class="line">WARNING: No cpu cfs quota support</span><br><span class="line">WARNING: No cpu cfs period support</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>raspberry-pi</tag>
      </tags>
  </entry>
  <entry>
    <title>Raspberry Pi 4 IoT Edge Gateway</title>
    <url>/2019/12/01/Raspberry-Pi-4-IoT-Edge-Gateway/</url>
    <content><![CDATA[<p><img src="/images/rpi4_edgex.png" alt="rpi4 edgex"><br><a href="https://news.softpedia.com/news/you-can-now-turn-a-raspberry-pi-4-sbc-into-an-edge-gateway-with-ubuntu-19-10-528326.shtml">https://news.softpedia.com/news/you-can-now-turn-a-raspberry-pi-4-sbc-into-an-edge-gateway-with-ubuntu-19-10-528326.shtml</a></p>
<p>Raspbery Pi 4 をエッジゲートウェイにしてみました。<br>どうやって使うんだろう。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Raspberry Pi 4B</li>
<li>Ubuntu Server 19.10 aarch64</li>
<li>192.168.11.24</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>Ubuntu Server 19.10 イメージのダウンロード<br><a href="https://ubuntu.com/download/raspberry-pi">https://ubuntu.com/download/raspberry-pi</a><br><code>64-bit for Raspberry Pi 3 and 4</code></li>
<li>SD カードに書き込み</li>
<li>Raspberry Pi 4 起動</li>
<li>接続とパスワード更新<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh ubuntu@192.168.11.24</span><br></pre></td></tr></table></figure></li>
<li>再接続とパッケージの更新<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh ubuntu@192.168.11.24</span><br><span class="line">pi4$ <span class="built_in">sudo</span> apt update</span><br><span class="line">pi4$ <span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure></li>
<li>Edge Gateway のインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi4$ <span class="built_in">sudo</span> snap install edgexfoundry</span><br></pre></td></tr></table></figure></li>
<li>Edge Gateway の Web UI のインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi4$ <span class="built_in">sudo</span> snap install edgex-ui-go --channel=latest/beta</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ol start="8">
<li>Edge Gateway へリモート接続<br><a href="http://192.168.11.24:4000/">http://192.168.11.24:4000</a><br>admin &#x2F; admin</li>
<li>Gateway の作成</li>
</ol>
]]></content>
      <tags>
        <tag>raspberry-pi</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio Code Remote - SSH / aarch64</title>
    <url>/2019/12/21/Visual-Studio-Code-Remote-SSH-aarch64/</url>
    <content><![CDATA[<p><img src="/images/vscode_remote_ssh_aarch64.png" alt="vscode remote ssh aarch64"><br><a href="https://code.visualstudio.com/docs/remote/ssh">https://code.visualstudio.com/docs/remote/ssh</a><br>Visual Studio Code のRemote SSH でaarch64 がサポートされていたので、Rasperry Pi 4 のUbuntu focal aarch64 に接続してみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><h4 id="クライアント"><a href="#クライアント" class="headerlink" title="クライアント"></a>クライアント</h4><ul>
<li>Windows 10 Pro Insider Preview</li>
<li>WSL 2 (Ubuntu 18.04.3 x86_64)</li>
<li>Visual Studio Code 1.41.1</li>
<li>Remote Development 0.19.0</li>
<li>Remote SSH 0.48.0</li>
</ul>
<h4 id="サーバ"><a href="#サーバ" class="headerlink" title="サーバ"></a>サーバ</h4><ul>
<li>Raspberry Pi 4B</li>
<li>Ubuntu Focal(20.04) aarch64</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="SSH-接続の設定"><a href="#SSH-接続の設定" class="headerlink" title="SSH 接続の設定"></a>SSH 接続の設定</h4><ul>
<li><p>WSL2 から鍵登録</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-copy-id -i /mnt/c/Users/hoge/.ssh/id_rsa.pub ubuntu@192.168.11.26</span><br></pre></td></tr></table></figure>
</li>
<li><p>接続情報</p>
<figure class="highlight ini"><figcaption><span>C:\Users\hoge\.ssh\ssh_config</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Read more about SSH config files: https://linux.die.net/man/5/ssh_config</span></span><br><span class="line">Host pi2</span><br><span class="line">    HostName 192.168.11.106</span><br><span class="line">    User ubuntu</span><br><span class="line">    IdentityFile C:\Users\hoge\.ssh\id_rsa</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul>
<li>前回の記事はこちら<br><a href="https://ktkr3d.github.io/2019/07/15/Visual-Studio-Code-Remote-Development-over-SSH-to-a-Raspberry-Pi/">https://ktkr3d.github.io/2019/07/15/Visual-Studio-Code-Remote-Development-over-SSH-to-a-Raspberry-Pi/</a></li>
<li>Remote SSH はNightly でないものでOK</li>
</ul>
]]></content>
      <tags>
        <tag>raspberry-pi</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 4.2.0</title>
    <url>/2020/01/17/Hexo-4-2-0/</url>
    <content><![CDATA[<ul>
<li><a href="https://hexo.io/news/2019/12/22/hexo-4.2_hexo-util-1-8_eslint-config-hexo-released/">https://hexo.io/news/2019/12/22/hexo-4.2_hexo-util-1-8_eslint-config-hexo-released/</a></li>
<li><a href="https://hexo.io/news/2019/12/24/how-we-make-hexo-30-percent-faster/">https://hexo.io/news/2019/12/24/how-we-make-hexo-30-percent-faster/</a></li>
</ul>
<p>Hexo 4.2 が速いらしいのでWSL1&#x2F;WSL2 上に環境を構築してみました。<br>確かに速い気がします。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>WSL1(Ubuntu 18.04) on Windows 10</li>
<li>WSL2(Ubuntu 18.04) on Windows 10</li>
<li>node v13.6.0</li>
<li>npm 6.13.4</li>
<li>git 2.17.1</li>
<li>hexo 4.2.0</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade</span><br><span class="line">$ <span class="built_in">sudo</span> apt install nodejs npm</span><br><span class="line">$ <span class="built_in">sudo</span> npm clean all</span><br><span class="line">$ <span class="built_in">sudo</span> npm install n</span><br><span class="line">$ <span class="built_in">sudo</span> n latest</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">ln</span> -sf /usr/local/bin/node /usr/bin/node</span><br><span class="line">$ <span class="built_in">sudo</span> apt purge nodejs npm</span><br><span class="line">$ <span class="built_in">sudo</span> apt clean all</span><br><span class="line">$ <span class="built_in">sudo</span> apt autoremove</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node --version</span><br><span class="line">v13.6.0</span><br><span class="line">$ npm --version</span><br><span class="line">6.13.4</span><br><span class="line">$ n --version</span><br><span class="line">6.1.3</span><br></pre></td></tr></table></figure>
<h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><p><a href="https://hexo.io/docs/">https://hexo.io/docs/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile</span><br><span class="line">. ~/.profile</span><br></pre></td></tr></table></figure>

<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo --version</span><br><span class="line">hexo: 4.2.0</span><br><span class="line">hexo-cli: 3.1.0</span><br><span class="line">os: Linux 4.4.0-19541-Microsoft linux x64</span><br><span class="line">node: 13.6.0</span><br><span class="line">v8: 7.9.317.25-node.26</span><br><span class="line">uv: 1.34.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.15.0</span><br><span class="line">modules: 79</span><br><span class="line">nghttp2: 1.40.0</span><br><span class="line">napi: 5</span><br><span class="line">llhttp: 2.0.1</span><br><span class="line">openssl: 1.1.1d</span><br><span class="line">cldr: 36.0</span><br><span class="line">icu: 65.1</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 12.1</span><br></pre></td></tr></table></figure>

<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="記事の作成"><a href="#記事の作成" class="headerlink" title="記事の作成"></a>記事の作成</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo n post <span class="string">&quot;artice title&quot;</span></span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<p><a href="http://localhost:4000/">http://localhost:4000/</a></p>
<h4 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h4><ul>
<li>Remote Development を導入していれば、WSL 上で以下コマンドを実行するとRemote WSL で接続した状態でvscode が起動する<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ code .</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Windows-エクスプローラ"><a href="#Windows-エクスプローラ" class="headerlink" title="Windows エクスプローラ"></a>Windows エクスプローラ</h4><ul>
<li>以下のパスをクイックアクセスにピン留めしておく<br>WSL1&#x2F;WSL2 ともにエクスプローラからアクセスできる<br><code>\\wsl$\Ubuntu-18.04\home\&lt;user_name&gt;\blog</code></li>
</ul>
<h3 id="移行"><a href="#移行" class="headerlink" title="移行"></a>移行</h3><h4 id="データの移行"><a href="#データの移行" class="headerlink" title="データの移行"></a>データの移行</h4><ul>
<li><code>~/blog/source/</code><br>ただし、<code>~/blog/source/node_modules</code> は除く</li>
<li><code>~/blog/themes/</code></li>
<li><code>~/blog/scaffolds/</code></li>
</ul>
<h4 id="プラグイン"><a href="#プラグイン" class="headerlink" title="プラグイン"></a>プラグイン</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i -S hexo-tag-googlecharts</span><br><span class="line">$ npm i -S hexo-tag-twitter</span><br><span class="line">$ npm i -S hexo-pdf</span><br><span class="line">$ npm i -S hexo-deployer-git</span><br></pre></td></tr></table></figure>

<h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><ul>
<li>~&#x2F;blog&#x2F;_config.yml</li>
</ul>
<h4 id="生成とデプロイ"><a href="#生成とデプロイ" class="headerlink" title="生成とデプロイ"></a>生成とデプロイ</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Puppeteer on WSL</title>
    <url>/2020/01/27/Puppeteer-on-WSL/</url>
    <content><![CDATA[<p><a href="https://github.com/puppeteer/puppeteer/issues/1837">https://github.com/puppeteer/puppeteer/issues/1837</a></p>
<p>WSL のPuppeteer からWindows にインストールされたChrome(chrome.exe) を起動します。<br>WSL 側にインストールするパッケージが少なくてすみそうです。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>WSL1(Ubuntu 18.04) on Windows 10</li>
<li>node v13.6.0</li>
<li>npm 6.13.4</li>
<li>puppeteer</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="node-のインストール"><a href="#node-のインストール" class="headerlink" title="node のインストール"></a>node のインストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade</span><br><span class="line">$ <span class="built_in">sudo</span> apt install nodejs npm</span><br><span class="line">$ <span class="built_in">sudo</span> npm clean all</span><br><span class="line">$ <span class="built_in">sudo</span> npm install n</span><br><span class="line">$ <span class="built_in">sudo</span> n latest</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">ln</span> -sf /usr/local/bin/node /usr/bin/node</span><br><span class="line">$ <span class="built_in">sudo</span> apt purge nodejs npm</span><br><span class="line">$ <span class="built_in">sudo</span> apt clean all</span><br><span class="line">$ <span class="built_in">sudo</span> apt autoremove</span><br></pre></td></tr></table></figure>

<h4 id="puppeteer-のインストール"><a href="#puppeteer-のインストール" class="headerlink" title="puppeteer のインストール"></a>puppeteer のインストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i -S puppeteer</span><br></pre></td></tr></table></figure>

<h4 id="PATH-の追加"><a href="#PATH-の追加" class="headerlink" title="PATH の追加"></a>PATH の追加</h4><figure class="highlight bash"><figcaption><span>$HOME/.profile</span></figcaption><table><tr><td class="code"><pre><span class="line">PATH=/mnt/c/Program\ Files\ \(x86\)/Google/Chrome/Application:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<h4 id="スクリプト"><a href="#スクリプト" class="headerlink" title="スクリプト"></a>スクリプト</h4><figure class="highlight js"><figcaption><span>$HOME/crawl.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> rimraf = <span class="built_in">require</span>(<span class="string">&#x27;rimraf&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">USER_DATA_DIR</span> = <span class="string">&#x27;C:\\temp\\puppeteer_user_data&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">USER_DATA_DIR_WSL</span> = <span class="string">&#x27;/mnt/c/temp/puppeteer_user_data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PROXY_URL</span> = <span class="string">&#x27;http://192.168.0.100:8000&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PROXY_USER</span> = <span class="string">&#x27;proxy-user-string&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PROXY_PASSWORD</span> = <span class="string">&#x27;proxy-password-string&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>(&#123;</span><br><span class="line">        <span class="attr">executablePath</span>: <span class="string">&#x27;chrome.exe&#x27;</span>,</span><br><span class="line">        <span class="attr">userDataDir</span>: <span class="variable constant_">USER_DATA_DIR</span>,</span><br><span class="line">        <span class="attr">headless</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">args</span>: [</span><br><span class="line">            <span class="string">&#x27;--no-sandbox&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;--disable-setuid-sandbox&#x27;</span>,</span><br><span class="line">            <span class="string">`--proxy-server=<span class="subst">$&#123;PROXY_URL&#125;</span>`</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// proxy auth</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">authenticate</span>(&#123;<span class="variable constant_">PROXY_USER</span>, <span class="variable constant_">PROXY_PASSWORD</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// locate</span></span><br><span class="line">    <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://www.example.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> browser.<span class="title function_">close</span>();</span><br><span class="line">&#125;)().<span class="title function_">finally</span>(<span class="function">() =&gt;</span> <span class="title function_">rimraf</span>(<span class="variable constant_">USER_DATA_DIR_WSL</span>));</span><br></pre></td></tr></table></figure>

<p>多分、こんな感じで動いた。</p>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node crawl.js</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>wsl</tag>
        <tag>puppeteer</tag>
      </tags>
  </entry>
  <entry>
    <title>WireGuard</title>
    <url>/2020/02/01/WireGuard/</url>
    <content><![CDATA[<p>WireGuard でRasberry Pi 4B にVPN の環境を構築してみました。<br>OpenVPN よりもシンプルらしいです。<br>今後、管理用のGUIツールが充実していくと良いですね。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><h4 id="VPN-サーバ"><a href="#VPN-サーバ" class="headerlink" title="VPN サーバ"></a>VPN サーバ</h4><ul>
<li>Raspberry Pi 4B</li>
<li>Ubuntu Server Focal 20.04 aarch64</li>
<li>wireguard 1.0.20200121</li>
<li>qrencode 4.0.2-2</li>
</ul>
<h4 id="ネットワーク"><a href="#ネットワーク" class="headerlink" title="ネットワーク"></a>ネットワーク</h4><table>
<thead>
<tr>
<th align="left">ホスト</th>
<th align="left">WireGuard</th>
<th align="left">LAN</th>
</tr>
</thead>
<tbody><tr>
<td align="left">VPN サーバ</td>
<td align="left">10.0.0.1&#x2F;24</td>
<td align="left">192.168.11.107&#x2F;24</td>
</tr>
<tr>
<td align="left">VPN クライアント1</td>
<td align="left">10.0.0.2&#x2F;24</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">VPN クライアント2</td>
<td align="left">10.0.0.3&#x2F;24</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">LAN ホスト</td>
<td align="left"></td>
<td align="left">192.128.11.2&#x2F;24</td>
</tr>
<tr>
<td align="left">LAN ホスト</td>
<td align="left"></td>
<td align="left">192.128.11.106&#x2F;24</td>
</tr>
</tbody></table>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="パッケージのインストール"><a href="#パッケージのインストール" class="headerlink" title="パッケージのインストール"></a>パッケージのインストール</h4>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install wireguard qrencode</span><br></pre></td></tr></table></figure>
<h4 id="秘密鍵と公開鍵の生成"><a href="#秘密鍵と公開鍵の生成" class="headerlink" title="秘密鍵と公開鍵の生成"></a>秘密鍵と公開鍵の生成</h4><ol>
<li>VPN サーバ用<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> wgkeys; <span class="built_in">cd</span> wgkeys</span><br><span class="line">$ wg genkey | <span class="built_in">tee</span> server_privatekey | wg pubkey &gt; server_publickey</span><br></pre></td></tr></table></figure></li>
<li>VPN クライアント1用<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wg genkey | <span class="built_in">tee</span> client1_privatekey | wg pubkey &gt; client1_publickey</span><br></pre></td></tr></table></figure></li>
<li>VPN クライアント2用 (オプション)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wg genkey | <span class="built_in">tee</span> client2_privatekey | wg pubkey &gt; client2_publickey</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="設定ファイル"><a href="#設定ファイル" class="headerlink" title="設定ファイル"></a>設定ファイル</h4><ol>
<li>VPN サーバ設定ファイル<figure class="highlight ini"><figcaption><span>/etc/wireguard/wg0.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[Interface]</span></span><br><span class="line"><span class="attr">Address</span> = <span class="number">10.0</span>.<span class="number">0.1</span>/<span class="number">24</span></span><br><span class="line"><span class="attr">SaveConfig</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">ListenPort</span> = <span class="number">51820</span></span><br><span class="line"><span class="attr">PrivateKey</span> = &lt;サーバの秘密鍵&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">PostUp</span> = iptables -A FORWARD -o %i -j ACCEPT<span class="comment">; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -o %i -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span></span><br><span class="line"><span class="attr">PostDown</span> = iptables -D FORWARD -o %i -j ACCEPT<span class="comment">; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -o %i -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Peer]</span></span><br><span class="line"><span class="attr">PublicKey</span> = &lt;クライアント<span class="number">1</span>の公開鍵&gt;</span><br><span class="line"><span class="attr">AllowedIPs</span> = <span class="number">10.0</span>.<span class="number">0.2</span>/<span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Peer]</span></span><br><span class="line"><span class="attr">PublicKey</span> = &lt;クライアント<span class="number">2</span>の公開鍵&gt;</span><br><span class="line"><span class="attr">AllowedIPs</span> = <span class="number">10.0</span>.<span class="number">0.3</span>/<span class="number">32</span></span><br></pre></td></tr></table></figure></li>
<li>VPN Client1 の設定ファイル<figure class="highlight ini"><figcaption><span>wg0_client1.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[Interface]</span></span><br><span class="line"><span class="attr">Address</span> = <span class="number">10.0</span>.<span class="number">0.2</span>/<span class="number">24</span></span><br><span class="line"><span class="attr">PrivateKey</span> = &lt;クライアント<span class="number">1</span>の秘密鍵&gt;</span><br><span class="line"><span class="attr">DNS</span> = <span class="number">10.0</span>.<span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Peer]</span></span><br><span class="line"><span class="attr">PublicKey</span> = &lt;サーバの公開鍵&gt;</span><br><span class="line"><span class="attr">AllowedIPs</span> = <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span></span><br><span class="line"><span class="attr">Endpoint</span> = &lt;サーバのFQDNまたはIPアドレス&gt;:<span class="number">51820</span></span><br></pre></td></tr></table></figure></li>
<li>VPN Client2 の設定ファイル (オプション)<figure class="highlight ini"><figcaption><span>wg0_client2.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[Interface]</span></span><br><span class="line"><span class="attr">Address</span> = <span class="number">10.0</span>.<span class="number">0.3</span>/<span class="number">24</span></span><br><span class="line"><span class="attr">PrivateKey</span> = &lt;クライアント<span class="number">2</span>の秘密鍵&gt;</span><br><span class="line"><span class="attr">DNS</span> = <span class="number">10.0</span>.<span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Peer]</span></span><br><span class="line"><span class="attr">PublicKey</span> = &lt;サーバの公開鍵&gt;</span><br><span class="line"><span class="attr">AllowedIPs</span> = <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span></span><br><span class="line"><span class="attr">Endpoint</span> = &lt;サーバのFQDNまたはIPアドレス&gt;:<span class="number">51820</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="IPv4-ポートフォワーディングの設定"><a href="#IPv4-ポートフォワーディングの設定" class="headerlink" title="IPv4 ポートフォワーディングの設定"></a>IPv4 ポートフォワーディングの設定</h4>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> sysctl net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure>

<h4 id="ファイアウォールの設定"><a href="#ファイアウォールの設定" class="headerlink" title="ファイアウォールの設定"></a>ファイアウォールの設定</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> ufw allow 51820/udp</span><br></pre></td></tr></table></figure>

<h4 id="ルータの設定"><a href="#ルータの設定" class="headerlink" title="ルータの設定"></a>ルータの設定</h4><ul>
<li>インターネットからサーバへの通信 51820&#x2F;udp をサーバへ通過させます</li>
</ul>
<h4 id="VPN-クライアント設定ファイルをクライアントへ転送"><a href="#VPN-クライアント設定ファイルをクライアントへ転送" class="headerlink" title="VPN クライアント設定ファイルをクライアントへ転送"></a>VPN クライアント設定ファイルをクライアントへ転送</h4><p>以下のどちらかで転送します。</p>
<ul>
<li>ファイルを転送する方法</li>
<li>QRコードをカメラから撮影する方法<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ qrencode -t ansiutf8 &lt; wg0_client1.conf</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><ul>
<li><p>起動</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> wg-quick up wg0</span><br></pre></td></tr></table></figure>
</li>
<li><p>状態の確認</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> wg</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> wg-quick down wg0</span><br></pre></td></tr></table></figure>
</li>
<li><p>自動起動</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> wg-quick@wg0</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul>
<li>アンドロイドからの利用<br>wireguard アプリで接続する。</li>
<li>接続状態の表示<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> wg</span><br><span class="line">interface: wg0</span><br><span class="line">  public key: &lt;サーバの公開鍵&gt;</span><br><span class="line">  private key: (hidden)</span><br><span class="line">  listening port: 51820</span><br><span class="line"></span><br><span class="line">peer: &lt;クライアント1の公開鍵&gt;</span><br><span class="line">  endpoint: &lt;接続元IP:ポート番号&gt;</span><br><span class="line">  allowed ips: 10.0.0.2/32</span><br><span class="line">  latest handshake: 24 seconds ago</span><br><span class="line">  transfer: 2.50 KiB received, 2.84 KiB sent</span><br><span class="line"></span><br><span class="line">peer: &lt;クライアント2の公開鍵&gt;</span><br><span class="line">  allowed ips: 10.0.0.3/32</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>vpn</tag>
        <tag>wireguard</tag>
      </tags>
  </entry>
  <entry>
    <title>URL エンコード / デコード</title>
    <url>/2020/02/19/urlencode-urldecode/</url>
    <content><![CDATA[<p>URL エンコードされた文字列をデコードして使いたい時がありますよね。<br>bash のfunction で書いてみました。<br>csh ならalias で書けそうです。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>WSL (Ubuntu 18.04)</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li><p>nkf パッケージのインストール</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install nkf</span><br></pre></td></tr></table></figure>
</li>
<li><p>function(関数)の定義</p>
<figure class="highlight text"><figcaption><span>~/.bash_aliases</span></figcaption><table><tr><td class="code"><pre><span class="line"># URL Encode / Decode</span><br><span class="line">function urlencode &#123;</span><br><span class="line">  echo $1 | nkf -WwMQ | tr = % | sed &#x27;:a;N;$!ba;s/%\n//g&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function urldecode &#123;</span><br><span class="line">  echo $1 | nkf -w --url-input</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><ul>
<li>再ログインする</li>
<li>即時反映したい場合<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ . ~/.bash_aliases</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul>
<li>URL エンコード (対象のURL文字列をダブルクォートで囲います)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ urlencode <span class="string">&quot;https://ktkr3d.github.io/こんな URL/そんな階層/&quot;</span></span><br><span class="line">https%3A%2F%2Fktkr3d%2Egithub%2Eio%2F%E3%81%93%E3%82%93%E3%81%AA%20URL%2F%E3%81%9D%E3%82%93%E3%81%AA%E9%9A%8E%E5%B1%A4%2F</span><br></pre></td></tr></table></figure></li>
<li>URL デコード (対象のURL文字列をダブルクォートで囲います)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ urldecode <span class="string">&quot;https%3A%2F%2Fktkr3d%2Egithub%2Eio%2F%E3%81%93%E3%82%93%E3%81%AA%20URL%2F%E3%81%9D%E3%82%93%E3%81%AA%E9%9A%8E%E5%B1%A4%2F&quot;</span></span><br><span class="line">https://ktkr3d.github.io/こんな URL/そんな階層/</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-related-popular-posts プラグイン</title>
    <url>/2020/02/27/hexo-related-popular-posts/</url>
    <content><![CDATA[<p><a href="https://github.com/tea3/hexo-related-popular-posts">https://github.com/tea3/hexo-related-popular-posts</a><br>hexo-related-popular-posts プラグインは関連記事や人気の記事一覧を生成するHexo のプラグインです。<br>freemind テーマで関連記事を表示してみました。<br>Google Analytics API で収集した情報で人気の記事も表示してみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>WSL</li>
<li>nodejs v13.9.0</li>
<li>npm 6.13.7</li>
<li>hexo 4.2.0</li>
<li><a href="https://github.com/wzpan/hexo-theme-freemind/">hexo-theme-freemind</a></li>
</ul>
<h3 id="構築-関連記事"><a href="#構築-関連記事" class="headerlink" title="構築 - 関連記事"></a>構築 - 関連記事</h3><h4 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h4><ul>
<li>hexo-related-popular-posts パッケージ<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="ga-analytics-の修正"><a href="#ga-analytics-の修正" class="headerlink" title="ga-analytics の修正"></a>ga-analytics の修正</h4><ul>
<li>コールバック関数関連のエラーを修正<figure class="highlight javascript"><figcaption><span>./node_modules/ga-analytics/module.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//fs.writeFile(sessionFile, JSON.stringify(result));</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(sessionFile, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(result), <span class="keyword">function</span>(<span class="params">err</span>) &#123;&#125;);</span><br></pre></td></tr></table></figure></li>
<li>res がundefined だったらスキップ<figure class="highlight javascript"><figcaption><span>./node_modules/ga-analytics/bin/ga-analytics</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//if(program.json) &#123;</span></span><br><span class="line"><span class="keyword">if</span>(res === <span class="literal">undefined</span>) &#123;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(program.<span class="property">json</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="freemind-テーマの設定"><a href="#freemind-テーマの設定" class="headerlink" title="freemind テーマの設定"></a>freemind テーマの設定</h4><ul>
<li>関連記事の一覧を表示<figure class="highlight html"><figcaption><span>./themes/freemind/layout/_partial/article.ejs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- related posts --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;related_posts&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&lt;%= __(&#x27;related_posts&#x27;) %&gt;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">&lt;%- popular_posts( &#123;&#125; , item ) %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>関連記事の日本語タイトルを設定<figure class="highlight yaml"><figcaption><span>./themes/freemind/languages/ja_JP.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">related_posts:</span> <span class="string">&quot;関連記事&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>スタイルの設定<figure class="highlight css"><figcaption><span>./themes/freemind/source/css/style.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.popular-posts</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.popular-posts</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#337ab7</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.0em</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.popular-posts</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\f016&quot;</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: FontAwesome;</span><br><span class="line">  <span class="attribute">padding-right</span>:<span class="number">0.3em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Hexo-の設定"><a href="#Hexo-の設定" class="headerlink" title="Hexo の設定"></a>Hexo の設定</h4><ul>
<li>「形態素解析」で関連記事を表示する場合<figure class="highlight yaml"><figcaption><span>./_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Popular Posts</span></span><br><span class="line"><span class="attr">popularPosts:</span></span><br><span class="line">  <span class="attr">morphologicalAnalysis:</span> </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="構築-人気の記事"><a href="#構築-人気の記事" class="headerlink" title="構築 - 人気の記事"></a>構築 - 人気の記事</h3><h4 id="hexo-related-popular-posts-の修正"><a href="#hexo-related-popular-posts-の修正" class="headerlink" title="hexo-related-popular-posts の修正"></a>hexo-related-popular-posts の修正</h4><ul>
<li><p>エラーが出たので修正</p>
<figure class="highlight javascript"><figcaption><span>./node_modules/hexo-related-popular-posts/lib/list-json.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="title class_">Number</span>(inOptions.<span class="property">PPMixingRate</span>) != <span class="number">1.0</span> ) &#123;</span><br><span class="line">    <span class="comment">// -------------------------------------------</span></span><br><span class="line">    <span class="comment">// Related posts (tag)</span></span><br><span class="line">    <span class="comment">// -------------------------------------------</span></span><br><span class="line">    <span class="keyword">if</span> (postData) &#123;</span><br><span class="line">        <span class="comment">//if (postData.tags &amp;&amp; postData.tags.length &gt; 0) &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (postData.<span class="property">tags</span> &amp;&amp; postData.<span class="property">tags</span>.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; postData.<span class="property">tags</span>.<span class="property">each</span>) &#123;</span><br><span class="line">            postData.<span class="property">tags</span>.<span class="title function_">each</span>(<span class="function">(<span class="params">tag</span>) =&gt;</span> &#123;</span><br></pre></td></tr></table></figure></li>
<li><p>エラーが出たので修正 (2022-04-14)</p>
<figure class="highlight javascript"><figcaption><span>./node_modules/hexo-related-popular-posts/lib/list-json.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// filtering items category</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; config.<span class="property">popularPosts</span>.<span class="property">tmp</span>.<span class="property">gaData</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//if (config.popularPosts.tmp.gaData[i].date != &#x27;&#x27;) &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (config.<span class="property">popularPosts</span>.<span class="property">tmp</span>.<span class="property">gaData</span>[i] != &amp;&amp; </span><br><span class="line">            config.<span class="property">popularPosts</span>.<span class="property">tmp</span>.<span class="property">gaData</span>[i].<span class="property">date</span> != &amp;&amp; </span><br><span class="line">            config.<span class="property">popularPosts</span>.<span class="property">tmp</span>.<span class="property">gaData</span>[i].<span class="property">date</span> != <span class="literal">undefined</span> &amp;&amp; </span><br><span class="line">            config.<span class="property">popularPosts</span>.<span class="property">tmp</span>.<span class="property">gaData</span>[i].<span class="property">date</span> != <span class="string">&#x27;&#x27;</span>) &#123;</span><br></pre></td></tr></table></figure>
</li>
<li><p>PV データを必ず取得</p>
<figure class="highlight javascript"><figcaption><span>./node_modules/hexo-related-popular-posts/lib/googleAnalytics.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">getPVfromGA</span> = (<span class="params">inHexo</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> gaData</span><br><span class="line"></span><br><span class="line">        <span class="comment">// load google analytics data</span></span><br><span class="line">        <span class="comment">//if (inHexo.config.popularPosts.tmp.isGaUpdate) &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="freemind-テーマの設定-1"><a href="#freemind-テーマの設定-1" class="headerlink" title="freemind テーマの設定"></a>freemind テーマの設定</h4><ul>
<li>人気の記事のウィジェットを追加<figure class="highlight html"><figcaption><span>./themes/freemind/layout/_widget/popular_posts.ejs</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;% if (site.posts.length)&#123; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;widget&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&lt;%= __(&#x27;popular_posts&#x27;) %&gt;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  &lt;%-</span><br><span class="line">  popular_posts(&#123;maxCount: 10 , ulClass: &#x27;popular-posts&#x27; , PPMixingRate: 1.0 , isExcerpt: false&#125;)</span><br><span class="line">  %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li>
<li>人気の記事の日本語タイトルを設定<figure class="highlight yaml"><figcaption><span>./themes/freemind/languages/ja_JP.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">popular_posts:</span> <span class="string">&quot;人気の記事&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>人気の記事のウィジェットを有効化<figure class="highlight yaml"><figcaption><span>./themes/freemind/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">widgets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">search</span></span><br><span class="line"><span class="comment">#- recent_comments</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">recent_posts</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">popular_posts</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">links</span></span><br><span class="line"><span class="comment">#- category</span></span><br><span class="line"><span class="comment">#- tagcloud</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Hexo-の設定-1"><a href="#Hexo-の設定-1" class="headerlink" title="Hexo の設定"></a>Hexo の設定</h4><ul>
<li>Google Analytics API の設定<figure class="highlight yaml"><figcaption><span>./_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">popularPosts:</span></span><br><span class="line">  <span class="attr">morphologicalAnalysis:</span> </span><br><span class="line">  <span class="attr">googleAnalyticsAPI:</span></span><br><span class="line">    <span class="attr">clientId:</span> <span class="string">******.apps.googleusercontent.com</span></span><br><span class="line">    <span class="attr">serviceEmail:</span> <span class="string">*****@developer.gserviceaccount.com</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">/hexo-project-root/path/to/google-services.pem</span></span><br><span class="line">    <span class="attr">viewId:</span> <span class="number">12345678</span></span><br><span class="line">    <span class="attr">dateRange:</span> <span class="number">30</span></span><br><span class="line">    <span class="attr">expiresDate:</span> <span class="number">10</span>  </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>記事にタグをつけます。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>freemind</tag>
      </tags>
  </entry>
  <entry>
    <title>Feedbro RSS Japanese language</title>
    <url>/2020/04/21/Feedbro-RSS-Japanese-language/</url>
    <content><![CDATA[<p><img src="/images/feedbro_japanese_locale.png" alt="feedbro japanese locale"><br><a href="https://github.com/ktkr3d/feedbro-locale">https://github.com/ktkr3d/feedbro-locale</a></p>
<p>Google Chrome のフィードリーダ拡張機能Feedbro の日本語翻訳ファイル Ver. 0.1 を作ってみました。<br>原文は丁寧な表現ですが、できる限り短い表現にしました。<br>まだ全部を翻訳できていません。<br>引き続き仕様を確認しながら翻訳を進めたいと思います。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Google Chrome 81</li>
<li>Feedbro 4.1.3</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>Chrome でFeedbro アイコンから<code>Options</code>メニューを選択</li>
<li>Settings の<code>Import Locale</code> ボタンをクリック</li>
<li>以下のURLを入力して<code>OK</code><br>  <code>https://raw.githubusercontent.com/ktkr3d/feedbro-locale/master/feedbro-locale-ja_JP.json</code></li>
<li>最新版の翻訳を反映するには<code>言語を更新</code>ボタンをクリック</li>
</ol>
]]></content>
      <tags>
        <tag>feedbro</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 20.04 LTS Focal Fossa</title>
    <url>/2020/04/22/Ubuntu-20-04-LTS-Focal-Fossa/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_focal.png" alt="ubuntu 20.04 lts focal fossa"><br><a href="https://wiki.ubuntu.com/FocalFossa/ReleaseNotes#New_Features_in_20.04">https://wiki.ubuntu.com/FocalFossa/ReleaseNotes#New_Features_in_20.04</a></p>
<p>Ubuntu 20.04 LTS Focal Fossa をインストールしてみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Ubuntu 20.04 LTS Focal Fossa 64bit</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>以下からダウンロード<br><a href="http://cdimage.ubuntu.com/ubuntu/daily-live/current/">http://cdimage.ubuntu.com/ubuntu/daily-live/current/</a></li>
</ol>
<p>明日リリース予定なのでもう変更はないでしょう。</p>
<h3 id="Ubuntu-の設定"><a href="#Ubuntu-の設定" class="headerlink" title="Ubuntu の設定"></a>Ubuntu の設定</h3><p><a href="https://ktkr3d.github.io/ubuntu/">https://ktkr3d.github.io/ubuntu/</a></p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>UbuntuDDE Remix 20.04 Beta</title>
    <url>/2020/05/02/UbuntuDDE/</url>
    <content><![CDATA[<p><img src="/images/ubuntudde.png" alt="ubuntudde"><br><a href="https://ubuntudde.com/">https://ubuntudde.com/</a><br><a href="https://ubuntudde.com/blog/ubuntudde-beta-200410-release-note/">https://ubuntudde.com/blog/ubuntudde-beta-200410-release-note/</a></p>
<p>UbuntuDDE Remix 20.04 Beta を試してみました。<br>デザインが綺麗なディストリビューションです。</p>
<p>Windows 10 ホストのVirtualBox 上のVM として構築しました。<br>WSL2 とVirtualBox は共存するようになったんですね。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Insider Preview Build 19613<ul>
<li>VirtualBox 6.1.6<ul>
<li>UbuntuDDE Remix 20.04 Beta<ul>
<li>CPU x2</li>
<li>Memory 4GB</li>
<li>Disk 25GB</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h4><ol>
<li>コントロールパネル」-「プログラムと機能」-「Windows の機能の有効化または無効化」で「仮想マシン プラットフォーム」を有効にする。<br>  <img src="/images/virtual_machine_platform.png" alt="virtual_machine_platform"></li>
<li>VirtualBox で新規VM を作成し、UbuntuDDE のISO イメージから起動する。</li>
</ol>
<ul>
<li>Memory 4GB</li>
<li>Disk 25GB</li>
<li>EFI を有効化<br><img src="/images/enabling_vbox_efi.png" alt="enabling_vbox_efi"></li>
</ul>
<ol start="3">
<li>モードを選択する。</li>
</ol>
<ul>
<li>Effect Mode</li>
<li>Normal Mode<br>  <img src="/images/friendly_reminder.png" alt="friendly_reminder"></li>
</ul>
<ol start="4">
<li>インストーラを実行する。<br>  <img src="/images/ubuntudde_installer.png" alt="ubuntudde_installer"></li>
</ol>
<h3 id="コメント"><a href="#コメント" class="headerlink" title="コメント"></a>コメント</h3><ul>
<li>デザインが綺麗</li>
<li>外観の設定<br><img src="/images/ubuntudde_select_theme.png" alt="ubuntudde_select_theme"></li>
<li>ターミナルのQuake モード(タブ付)が標準で実装されている!!</li>
</ul>
]]></content>
      <tags>
        <tag>ubuntudde</tag>
        <tag>deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Accessing VMs with RDP</title>
    <url>/2020/05/04/Accessing-VMs-with-RDP/</url>
    <content><![CDATA[<p><img src="/images/boxes_remote_connect.png" alt="boxes_remote_connect"><br>VirtualBox のRDP 接続を提供する機能を使ってリモートからアクセスしてみました。<br>Linux VMに直接RDP サーバ機能を導入するよりも安定しているように感じました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><h4 id="ソフトウェア"><a href="#ソフトウェア" class="headerlink" title="ソフトウェア"></a>ソフトウェア</h4><ul>
<li>Windows 10 Insider Preview Build 19619<ul>
<li>VirtualBox 6.1.6</li>
<li>VirtualBox 6.1.6 Oracle VM VirtualBox Extension Pack</li>
</ul>
</li>
</ul>
<h4 id="ネットワーク"><a href="#ネットワーク" class="headerlink" title="ネットワーク"></a>ネットワーク</h4><div id="googleChart5932"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.OrgChart(document.getElementById("googleChart5932"))).draw(google.visualization.arrayToDataTable([['Name', 'Manager', 'ToolTip'],['Router#1', '', ''],['<b  style="white-space: nowrap"><i class="fas fa-tv"></i>Client</b>', 'Router#1', ''],['<u style="white-space: nowrap">Windows 10</u>', 'Router#1', ''],['VirtualBox', '<u style="white-space: nowrap">Windows 10</u>', ''],['<u>UbuntuDDE</u>', 'VirtualBox', ''],['<u>Deepin</u>', 'VirtualBox', ''],['<u>WSL2</u>', '<u style="white-space: nowrap">Windows 10</u>', ''],['Router#2', 'Router#1', ''],['<u style="white-space: nowrap">Raspberry Pi 2</u>', 'Router#2', ''],['<u style="white-space: nowrap">Raspberry Pi 4</u>', 'Router#2', '']]),{"allowHtml":true,"title":" ","width":400,"height":400});
      });
    })();
  }
</script>

<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>Windows 10 にVirtualbox Extension pack をインストール<br>  <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></li>
<li>VM の[設定]-[ディスプレイ]-[リモートディスプレイ]で</li>
</ol>
<ul>
<li>[サーバを有効化]をチェック</li>
<li>[サーバのポート番号]を指定<br>13389, 23389 とかで</li>
</ul>
<ol start="3">
<li>Windows Defender ファイアウォールで対象ポート番号を受信ルールで許可</li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="Windows-クライアントから接続する場合"><a href="#Windows-クライアントから接続する場合" class="headerlink" title="Windows クライアントから接続する場合"></a>Windows クライアントから接続する場合</h4><ul>
<li>リモートデスクトップ接続(mstsc.exe)で接続</li>
<li>mRemoteNG で接続<br><a href="https://mremoteng.org/">https://mremoteng.org/</a><br><img src="/images/mremoteng_remote_connect.png" alt="mremoteng_remote_connect"></li>
</ul>
<h4 id="Linux-クライアントから接続する場合"><a href="#Linux-クライアントから接続する場合" class="headerlink" title="Linux クライアントから接続する場合"></a>Linux クライアントから接続する場合</h4><ul>
<li>Remmina で接続<br><img src="/images/remmina_remote_connect.png" alt="remmina_remote_connect"></li>
<li>GNOME Boxes で接続<br><img src="/images/boxes_remote_connect.png" alt="boxes_remote_connect"><ul>
<li>rdp:&#x2F;&#x2F;<code>&lt;IP Address&gt;</code>:<code>&lt;Port&gt;</code></li>
<li>ssh:&#x2F;&#x2F;<code>&lt;user&gt;</code>:<code>&lt;password&gt;</code>@<code>&lt;IP Address&gt;</code></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>vm</tag>
      </tags>
  </entry>
  <entry>
    <title>APT Hash Sum mismatch error</title>
    <url>/2020/05/07/APT-Hash-sum-mismatch-error/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ <span class="built_in">sudo</span> apt update</span><br><span class="line">...</span><br><span class="line">Get:4 http://jp.archive.ubuntu.com/ubuntu focal/main i386 Packages [718 kB]    </span><br><span class="line">Err:4 http://jp.archive.ubuntu.com/ubuntu focal/main i386 Packages</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - Filesize:4216000 [weak]</span><br><span class="line">   - SHA256:5f5fa48d499be259adcdd1d6dea4e6588a3473e0290460ead99ea945b141815d</span><br><span class="line">   - SHA1:8f477673f5aa0ca860273e9a0ffc53515baa1032 [weak]</span><br><span class="line">   - MD5Sum:021fb704764554808a9ec3b18e16599e [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:4f406937d7384fd444d236fbf9bc6efd3689c56a27adce332cf302a7b10b3467</span><br><span class="line">   - SHA1:4b0bf940193a7714309c27f1326cdd2b6b87e3f1 [weak]</span><br><span class="line">   - MD5Sum:021fb704764554808a9ec3b18e16599e [weak]</span><br><span class="line">   - Filesize:4216000 [weak]</span><br><span class="line">  Last modification reported: Thu, 23 Apr 2020 16:40:26 +0000</span><br><span class="line">  Release file created at: Thu, 23 Apr 2020 17:33:17 +0000</span><br></pre></td></tr></table></figure>

<p>VirtualBox 上のVM で<code>sudo apt update</code>や<code>sudo apt upgrade</code> をした際にHash Sum mismatch エラーが出力されました。MD5 は一致していますが、SHA256、SHA-1 が一致しない場合があるようです。<br>簡単に起こるとは考えにくいですが再現性があります。これは何に起因した事象なのでしょう。<br>手動でダウンロードしたファイルのハッシュ値は期待していたものでした。</p>
<h4 id="2020-05-10-追記"><a href="#2020-05-10-追記" class="headerlink" title="2020-05-10 追記"></a>2020-05-10 追記</h4><p><img src="/images/virtualbox_ubuntu_boot_with_wsl.png" alt="virtualbox_ubuntu_boot_with_wsl"><br>以下を有効にしていると、そもそも起動用ISO のチェック時にエラーが発生していました。</p>
<ul>
<li>Linux 用 Windows サブシステム (Windows Subsystem for Linux)</li>
<li>仮想マシンプラットフォーム (Virtual Machine Platform)</li>
</ul>
<p>上記を無効にするとエラーは無くなり、Hash Sum mismatch も解決しました。<br>VM 初期構築時に上記を一時的に無効にすることがワークアラウンドのようです。</p>
<h4 id="2020-05-28-追記"><a href="#2020-05-28-追記" class="headerlink" title="2020-05-28 追記"></a>2020-05-28 追記</h4><p><a href="https://github.com/ktkr3d/ktkr3d.github.io/issues/1">https://github.com/ktkr3d/ktkr3d.github.io/issues/1</a><br>解決策を教えていただきました。ありがとうございます！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> bash</span><br><span class="line"><span class="comment"># mkdir /etc/gcrypt</span></span><br><span class="line"><span class="comment"># echo all &gt; /etc/gcrypt/hwf.deny</span></span><br></pre></td></tr></table></figure>
<p><code>apt update</code>も<code>apt upgrade</code>も正常に実行できました。<br>この事象はgcrypt20 モジュールに起因していたようです。</p>
<span id="more"></span>

<h3 id="環境と発生状況"><a href="#環境と発生状況" class="headerlink" title="環境と発生状況"></a>環境と発生状況</h3><h4 id="ソフトウェアバージョン"><a href="#ソフトウェアバージョン" class="headerlink" title="ソフトウェアバージョン"></a>ソフトウェアバージョン</h4><ul>
<li>Windows 10 Insider Preview 19619.1000</li>
<li>VirtualBox 6.1.6<ul>
<li>VirtualBox 6.1.6 Oracle VM VirtualBox Extension Pack</li>
</ul>
</li>
<li>Hyper-V 10.0.19619.1000</li>
<li>WSL2 (Ubuntu 18.04) 導入済</li>
</ul>
<h4 id="発生状況"><a href="#発生状況" class="headerlink" title="発生状況"></a>発生状況</h4><table>
<thead>
<tr>
<th align="left">環境</th>
<th align="left">Distro</th>
<th align="left">apt ver.</th>
<th align="left">OK&#x2F;NG</th>
</tr>
</thead>
<tbody><tr>
<td align="left">VirtualBox on Windows 10</td>
<td align="left">Ubuntu 20.04</td>
<td align="left">apt 2.0.2</td>
<td align="left">NG</td>
</tr>
<tr>
<td align="left">UbuntuDDE 20.04 Beta</td>
<td align="left">apt 2.0.2</td>
<td align="left">NG</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Deepin 20 Beta</td>
<td align="left">apt 1.8.2</td>
<td align="left">NG</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">Hyper-V on Windows 10</td>
<td align="left">Ubuntu 20.04</td>
<td align="left">apt 2.0.2</td>
<td align="left">OK <i class="fas fa-check"></i></td>
</tr>
<tr>
<td align="left">UbuntuDDE 20.04 Beta</td>
<td align="left">apt 2.0.2</td>
<td align="left">OK <i class="fas fa-check"></i></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">物理環境</td>
<td align="left">Ubuntu 20.04</td>
<td align="left">apt 2.0.2</td>
<td align="left">OK <i class="fas fa-check"></i></td>
</tr>
</tbody></table>
<h3 id="調査"><a href="#調査" class="headerlink" title="調査"></a>調査</h3><h4 id="関連スレッド"><a href="#関連スレッド" class="headerlink" title="関連スレッド"></a>関連スレッド</h4><ul>
<li>“Hash sum mismatch” error due to identical SHA1 and MD5 but different SHA256<br><a href="https://askubuntu.com/questions/1235914/hash-sum-mismatch-error-due-to-identical-sha1-and-md5-but-different-sha256">https://askubuntu.com/questions/1235914/hash-sum-mismatch-error-due-to-identical-sha1-and-md5-but-different-sha256</a></li>
<li>Unable to apt update<br><a href="https://www.linuxliteos.com/forums/other/unable-to-apt-update/">https://www.linuxliteos.com/forums/other/unable-to-apt-update/</a></li>
</ul>
<h4 id="気づき事項"><a href="#気づき事項" class="headerlink" title="気づき事項"></a>気づき事項</h4><ul>
<li>発生環境について<ul>
<li>VirtualBox のVM で発生した</li>
<li>Hyper-V のVM や物理環境では発生しなかった</li>
<li>apt のバージョンに依存しないようです</li>
</ul>
</li>
<li>不一致箇所について<ul>
<li>SHA256 だけ異なる場合があります(MD5 とSHA-1 は一致)</li>
<li>SHA256 とSHA-1 が異なる場合があります(MD5 は一致)</li>
<li>ファイルサイズは一致</li>
<li><code>sudo apt -d install &lt;package name&gt;</code>で不一致になるのに、<code>wget http/***/***.deb</code> のファイルは期待されるハッシュ値になる</li>
</ul>
</li>
<li>ワークアラウンド<ul>
<li>sudo apt clean しても改善せず</li>
<li>sudo rm -rf &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;* しても改善せず</li>
<li>deb ファイルをwget でダウンロードしたものは期待したハッシュ値になる</li>
<li>deb ファイルを&#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F; に格納すると正常にアップグレードできる場合がある<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt upgrade 2&gt;&amp;1 | <span class="built_in">tee</span> upgrade.txt</span><br><span class="line">$ grep Failed upgrade.txt</span><br><span class="line">$ wget http://****/***.deb</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cp</span> *.deb /var/cache/apt/archives/</span><br><span class="line">$ <span class="built_in">sudo</span> apt upgade</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="資料"><a href="#資料" class="headerlink" title="資料"></a>資料</h3><h4 id="apt-update-の結果"><a href="#apt-update-の結果" class="headerlink" title="apt update の結果"></a>apt update の結果</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ <span class="built_in">export</span> LC_ALL=en_US.UTF8</span><br><span class="line">ubuntu@ubuntu:~$ <span class="built_in">sudo</span> apt update</span><br><span class="line">[<span class="built_in">sudo</span>] password <span class="keyword">for</span> ubuntu:</span><br><span class="line">Hit:1 http://jp.archive.ubuntu.com/ubuntu focal-updates InRelease</span><br><span class="line">Hit:2 http://jp.archive.ubuntu.com/ubuntu focal-backports InRelease</span><br><span class="line">Get:3 http://jp.archive.ubuntu.com/ubuntu focal InRelease [265 kB]          </span><br><span class="line">Get:4 http://jp.archive.ubuntu.com/ubuntu focal/main i386 Packages [718 kB]    </span><br><span class="line">Get:5 http://jp.archive.ubuntu.com/ubuntu focal/main amd64 Packages [970 kB]</span><br><span class="line">Get:5 http://jp.archive.ubuntu.com/ubuntu focal/main amd64 Packages [970 kB]</span><br><span class="line">Get:5 http://jp.archive.ubuntu.com/ubuntu focal/main amd64 Packages [970 kB]</span><br><span class="line">Get:5 http://jp.archive.ubuntu.com/ubuntu focal/main amd64 Packages [970 kB]</span><br><span class="line">Get:5 http://jp.archive.ubuntu.com/ubuntu focal/main amd64 Packages [970 kB]</span><br><span class="line">Get:5 http://jp.archive.ubuntu.com/ubuntu focal/main amd64 Packages [970 kB]</span><br><span class="line">Get:5 http://jp.archive.ubuntu.com/ubuntu focal/main amd64 Packages [970 kB]</span><br><span class="line">Hit:13 http://security.ubuntu.com/ubuntu focal-security InRelease</span><br><span class="line">Err:4 http://jp.archive.ubuntu.com/ubuntu focal/main i386 Packages</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - Filesize:4216000 [weak]</span><br><span class="line">   - SHA256:5f5fa48d499be259adcdd1d6dea4e6588a3473e0290460ead99ea945b141815d</span><br><span class="line">   - SHA1:8f477673f5aa0ca860273e9a0ffc53515baa1032 [weak]</span><br><span class="line">   - MD5Sum:021fb704764554808a9ec3b18e16599e [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:4f406937d7384fd444d236fbf9bc6efd3689c56a27adce332cf302a7b10b3467</span><br><span class="line">   - SHA1:4b0bf940193a7714309c27f1326cdd2b6b87e3f1 [weak]</span><br><span class="line">   - MD5Sum:021fb704764554808a9ec3b18e16599e [weak]</span><br><span class="line">   - Filesize:4216000 [weak]</span><br><span class="line">  Last modification reported: Thu, 23 Apr 2020 16:40:26 +0000</span><br><span class="line">  Release file created at: Thu, 23 Apr 2020 17:33:17 +0000</span><br><span class="line">Get:5 http://jp.archive.ubuntu.com/ubuntu focal/main amd64 Packages [970 kB]</span><br><span class="line">Get:5 http://jp.archive.ubuntu.com/ubuntu focal/main amd64 Packages [970 kB]</span><br><span class="line">Get:5 http://jp.archive.ubuntu.com/ubuntu focal/main amd64 Packages [970 kB]</span><br><span class="line">Get:5 http://jp.archive.ubuntu.com/ubuntu focal/main amd64 Packages [970 kB]</span><br><span class="line">Get:5 http://jp.archive.ubuntu.com/ubuntu focal/main amd64 Packages [970 kB]</span><br><span class="line">Get:5 http://jp.archive.ubuntu.com/ubuntu focal/main amd64 Packages [970 kB]</span><br><span class="line">Err:5 http://jp.archive.ubuntu.com/ubuntu focal/main amd64 Packages</span><br><span class="line"> </span><br><span class="line">Get:19 http://jp.archive.ubuntu.com/ubuntu focal/universe amd64 Packages [8,628 kB]</span><br><span class="line">Err:19 http://jp.archive.ubuntu.com/ubuntu focal/universe amd64 Packages</span><br><span class="line"> </span><br><span class="line">Get:20 http://jp.archive.ubuntu.com/ubuntu focal/universe i386 Packages [4,642 kB]</span><br><span class="line">Err:20 http://jp.archive.ubuntu.com/ubuntu focal/universe i386 Packages</span><br><span class="line"> </span><br><span class="line">Get:21 http://jp.archive.ubuntu.com/ubuntu focal/universe Translation-en [5,124 kB]</span><br><span class="line">Err:21 http://jp.archive.ubuntu.com/ubuntu focal/universe Translation-en</span><br><span class="line"> </span><br><span class="line">Get:22 http://jp.archive.ubuntu.com/ubuntu focal/universe amd64 DEP-11 Metadata [3,603 kB]</span><br><span class="line">Fetched 23.2 MB <span class="keyword">in</span> 2s (10.6 MB/s)        </span><br><span class="line">Reading package lists... Done</span><br><span class="line">E: Failed to fetch store:/var/lib/apt/lists/partial/jp.archive.ubuntu.com_ubuntu_dists_focal_main_binary-i386_Packages.xz  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - Filesize:4216000 [weak]</span><br><span class="line">    - SHA256:5f5fa48d499be259adcdd1d6dea4e6588a3473e0290460ead99ea945b141815d</span><br><span class="line">    - SHA1:8f477673f5aa0ca860273e9a0ffc53515baa1032 [weak]</span><br><span class="line">    - MD5Sum:021fb704764554808a9ec3b18e16599e [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:4f406937d7384fd444d236fbf9bc6efd3689c56a27adce332cf302a7b10b3467</span><br><span class="line">    - SHA1:4b0bf940193a7714309c27f1326cdd2b6b87e3f1 [weak]</span><br><span class="line">    - MD5Sum:021fb704764554808a9ec3b18e16599e [weak]</span><br><span class="line">    - Filesize:4216000 [weak]</span><br><span class="line">   Last modification reported: Thu, 23 Apr 2020 16:40:26 +0000</span><br><span class="line">   Release file created at: Thu, 23 Apr 2020 17:33:17 +0000</span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/dists/focal/main/binary-amd64/by-hash/SHA256/7757921ff8feed9c3934a0c9936d441ba4a238bee3ea6c8c1df5cbcd43fc9861  </span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/dists/focal/universe/binary-amd64/by-hash/SHA256/46a746dac789bd9537aca54db1680b9dff51c248153111350382199d7d96b9d1  </span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/dists/focal/universe/binary-i386/by-hash/SHA256/a00e79d71544f34be89543e090ccafce943577e1a1b997780c07bb75766750b3  </span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/dists/focal/universe/i18n/by-hash/SHA256/a9c6ca6ce2913776bf753ae5132c7814139880784e98672525b4059c61f209dd  </span><br><span class="line">E: Some index files failed to download. They have been ignored, or old ones used instead.</span><br><span class="line">ubuntu@ubuntu:~$</span><br></pre></td></tr></table></figure>

<h4 id="apt-uprade-の結果"><a href="#apt-uprade-の結果" class="headerlink" title="apt uprade の結果"></a>apt uprade の結果</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ <span class="built_in">export</span> LC_ALL=en_US.UTF8</span><br><span class="line">ubuntu@ubuntu:~$ <span class="built_in">sudo</span> apt upgrade</span><br><span class="line">[<span class="built_in">sudo</span>] password <span class="keyword">for</span> ubuntu:</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree      </span><br><span class="line">Reading state information... Done</span><br><span class="line">Calculating upgrade... Done</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  linux-headers-5.4.0-29 linux-headers-5.4.0-29-generic</span><br><span class="line">  linux-image-5.4.0-29-generic linux-modules-5.4.0-29-generic</span><br><span class="line">  linux-modules-extra-5.4.0-29-generic</span><br><span class="line">The following packages will be upgraded:</span><br><span class="line">  firefox firefox-locale-en fonts-opensymbol libjavascriptcoregtk-4.0-18</span><br><span class="line">  libjuh-java libjurt-java libldap-2.4-2 libldap-common libmysqlclient21</span><br><span class="line">  libpython3.8 libpython3.8-minimal libpython3.8-stdlib libreoffice-base-core</span><br><span class="line">  libreoffice-calc libreoffice-common libreoffice-core libreoffice-draw</span><br><span class="line">  libreoffice-gnome libreoffice-gtk3 libreoffice-help-common</span><br><span class="line">  libreoffice-help-en-us libreoffice-impress libreoffice-math</span><br><span class="line">  libreoffice-ogltrans libreoffice-pdfimport libreoffice-style-breeze</span><br><span class="line">  libreoffice-style-colibre libreoffice-style-elementary</span><br><span class="line">  libreoffice-style-tango libreoffice-writer libridl-java libsmbclient</span><br><span class="line">  libuno-cppu3 libuno-cppuhelpergcc3-3 libuno-purpenvhelpergcc3-3 libuno-sal3</span><br><span class="line">  libuno-salhelpergcc3-3 libunoloader-java libwbclient0 libwebkit2gtk-4.0-37</span><br><span class="line">  linux-generic-hwe-20.04 linux-headers-generic-hwe-20.04</span><br><span class="line">  linux-image-generic-hwe-20.04 python3-uno python3.8 python3.8-minimal</span><br><span class="line">  samba-libs uno-libs-private ure</span><br><span class="line">49 upgraded, 5 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Need to get 230 MB/253 MB of archives.</span><br><span class="line">After this operation, 360 MB of additional disk space will be used.</span><br><span class="line">Do you want to <span class="built_in">continue</span>? [Y/n]</span><br><span class="line">Get:1 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 samba-libs amd64 2:4.11.6+dfsg-0ubuntu1.1 [5,261 kB]</span><br><span class="line">Err:1 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 samba-libs amd64 2:4.11.6+dfsg-0ubuntu1.1</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - SHA256:7bed91ce3edf3740430198d7ec45ed5b2959a9a942f044c9be4898ac201626a4</span><br><span class="line">   - SHA1:94267b35634ebffcc955c7d72eb9c7de77c068f8 [weak]</span><br><span class="line">   - MD5Sum:9432b5164cec773a47fb5bf1d1f0b370 [weak]</span><br><span class="line">   - Filesize:5260888 [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:695fb0e54c2b784a59c055ac6ff0858606a2e0de1075eab646551d654cb66338</span><br><span class="line">   - SHA1:0173b20ebbd9fcfd2a0c1471788a613f380ccd3f [weak]</span><br><span class="line">   - MD5Sum:9432b5164cec773a47fb5bf1d1f0b370 [weak]</span><br><span class="line">   - Filesize:5260888 [weak]</span><br><span class="line">  Last modification reported: Tue, 28 Apr 2020 17:40:59 +0000</span><br><span class="line">Get:2 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 firefox amd64 76.0+build2-0ubuntu0.20.04.1 [52.2 MB]</span><br><span class="line">Err:2 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 firefox amd64 76.0+build2-0ubuntu0.20.04.1</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - SHA256:f098ba8a832d87683ff01703219ff0b0357ae299c2d499b2340566d6b53967f7</span><br><span class="line">   - SHA1:2741b84930733d17cae5d793b95d849dd7b0328c [weak]</span><br><span class="line">   - MD5Sum:9ec591c3e087c60f9e7320b5b49b0202 [weak]</span><br><span class="line">   - Filesize:52175432 [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:b8ae1ae2faf2e474ef6a57885bacdb871d87eb4adecbf3396c31d5c2595779d5</span><br><span class="line">   - SHA1:fec3bd3dcc93a0c4a14604ab92ccf75dadd6159c [weak]</span><br><span class="line">   - MD5Sum:9ec591c3e087c60f9e7320b5b49b0202 [weak]</span><br><span class="line">   - Filesize:52175432 [weak]</span><br><span class="line">  Last modification reported: Wed, 06 May 2020 13:29:04 +0000</span><br><span class="line">Get:3 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libwebkit2gtk-4.0-37 amd64 2.28.2-0ubuntu0.20.04.1 [12.8 MB]</span><br><span class="line">Err:3 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libwebkit2gtk-4.0-37 amd64 2.28.2-0ubuntu0.20.04.1</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - SHA256:2a8af32c629854413d07987911137c279da81c5f06d565d64ef25444759da062</span><br><span class="line">   - SHA1:561c9e9ecb4bfeec7b855bb60b0701d93f8f2499 [weak]</span><br><span class="line">   - MD5Sum:50656dc088dd044a0e383d092b5e8667 [weak]</span><br><span class="line">   - Filesize:12756060 [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:4ee92a27d1605952a9f5aee83b415246d024c257676b621b97c85ae1ea8acb89</span><br><span class="line">   - SHA1:1f38f830845f780a74bf81967e67a4458b7bcb66 [weak]</span><br><span class="line">   - MD5Sum:50656dc088dd044a0e383d092b5e8667 [weak]</span><br><span class="line">   - Filesize:12756060 [weak]</span><br><span class="line">  Last modification reported: Wed, 29 Apr 2020 14:23:43 +0000</span><br><span class="line">Get:4 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libjavascriptcoregtk-4.0-18 amd64 2.28.2-0ubuntu0.20.04.1 [5,534 kB]</span><br><span class="line">Err:4 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libjavascriptcoregtk-4.0-18 amd64 2.28.2-0ubuntu0.20.04.1</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - SHA256:d187b2c30d78358e730ef62d5f2680dffe7e3afcae227e9312bb480787c9de29</span><br><span class="line">   - SHA1:315c8b4d03e56a2685b96d908b02a4cac48370f9 [weak]</span><br><span class="line">   - MD5Sum:a4b1ad218199230a10a62a14435acea2 [weak]</span><br><span class="line">   - Filesize:5533640 [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:cae5f2c387c44f779f53d51874840037eb806965ee851b8683ef8bc84002b59e</span><br><span class="line">   - SHA1:d685f742577227ecf70e5ea3050a3c67a843092a [weak]</span><br><span class="line">   - MD5Sum:a4b1ad218199230a10a62a14435acea2 [weak]</span><br><span class="line">   - Filesize:5533640 [weak]</span><br><span class="line">  Last modification reported: Wed, 29 Apr 2020 14:23:44 +0000</span><br><span class="line">Get:5 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 ure amd64 1:6.4.3-0ubuntu0.20.04.1 [1,222 kB]</span><br><span class="line">Err:5 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 ure amd64 1:6.4.3-0ubuntu0.20.04.1</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - SHA256:8ee05bef46026c857b48dcc5f256a4cd31d18a58227775c7b14778eaf4088726</span><br><span class="line">   - SHA1:3319c7b3f5242d70964f0280a248b835d3ff7f46 [weak]</span><br><span class="line">   - MD5Sum:13d3e584bd687e615293b060b164ada9 [weak]</span><br><span class="line">   - Filesize:1221992 [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:e9963a2c39b69378a22330b6fa588f4ba6a4dea151e2e8bfceb7c642f4dfb5f8</span><br><span class="line">   - SHA1:687b56efc11fdadbad35f6a46089009abdacab82 [weak]</span><br><span class="line">   - MD5Sum:13d3e584bd687e615293b060b164ada9 [weak]</span><br><span class="line">   - Filesize:1221992 [weak]</span><br><span class="line">  Last modification reported: Wed, 29 Apr 2020 01:58:52 +0000</span><br><span class="line">Get:6 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libreoffice-calc amd64 1:6.4.3-0ubuntu0.20.04.1 [7,187 kB]</span><br><span class="line">Err:6 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libreoffice-calc amd64 1:6.4.3-0ubuntu0.20.04.1</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - SHA256:02edab80e340e154d5ce38f645e90d5c8387e3ce959c21ba98d0cf6686e02f6c</span><br><span class="line">   - SHA1:7fd0eccded7023860b61addbf90748dec63c5169 [weak]</span><br><span class="line">   - MD5Sum:35fe7bc79a91217b90988710925dc98d [weak]</span><br><span class="line">   - Filesize:7187136 [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:103b563cf37eea895af08a538a3a8bcba14b48beba1891ed185f557cd21250b8</span><br><span class="line">   - SHA1:209dc6d63a0212029770a8176a6ccab72265beef [weak]</span><br><span class="line">   - MD5Sum:35fe7bc79a91217b90988710925dc98d [weak]</span><br><span class="line">   - Filesize:7187136 [weak]</span><br><span class="line">  Last modification reported: Wed, 29 Apr 2020 01:59:14 +0000</span><br><span class="line">Get:7 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libreoffice-writer amd64 1:6.4.3-0ubuntu0.20.04.1 [8,592 kB]</span><br><span class="line">Err:7 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libreoffice-writer amd64 1:6.4.3-0ubuntu0.20.04.1</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - SHA256:0b1e1358b4d46d874db8c3acf7bb7b44fc6ab40cc946fb2e92c182b7e384e28f</span><br><span class="line">   - SHA1:5f65366aefedd7eca5a5614cbd7848ff14c15c0e [weak]</span><br><span class="line">   - MD5Sum:4161d6cec292a321dfc03f8e2694e0ae [weak]</span><br><span class="line">   - Filesize:8591980 [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:3b5cb4249ac383cce62e1fa1290f1742beb991511f45be2f95a9bd8f9b0e3bc7</span><br><span class="line">   - SHA1:5f65366aefedd7eca5a5614cbd7848ff14c15c0e [weak]</span><br><span class="line">   - MD5Sum:4161d6cec292a321dfc03f8e2694e0ae [weak]</span><br><span class="line">   - Filesize:8591980 [weak]</span><br><span class="line">  Last modification reported: Wed, 29 Apr 2020 01:59:03 +0000</span><br><span class="line">Get:8 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libreoffice-help-common all 1:6.4.3-0ubuntu0.20.04.1 [2,344 kB]</span><br><span class="line">Err:8 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libreoffice-help-common all 1:6.4.3-0ubuntu0.20.04.1</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - SHA256:55b38c6380d434aed28cc17c1328a668d8383a013e8d3aec589b9d60a9560743</span><br><span class="line">   - SHA1:5fc49be8d6b320993ac972d54a1a7dc7c67cf85a [weak]</span><br><span class="line">   - MD5Sum:7df4e0f5f53b52149afb6aa40da0de6d [weak]</span><br><span class="line">   - Filesize:2344500 [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:4594830fa7a7d41d6e18d837798e4af2d299df45fd732296c41f48af19d742bc</span><br><span class="line">   - SHA1:98aadec42b41cbf28c246ada3949375456cedb38 [weak]</span><br><span class="line">   - MD5Sum:7df4e0f5f53b52149afb6aa40da0de6d [weak]</span><br><span class="line">   - Filesize:2344500 [weak]</span><br><span class="line">  Last modification reported: Wed, 29 Apr 2020 01:58:56 +0000</span><br><span class="line">Get:9 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libreoffice-common all 1:6.4.3-0ubuntu0.20.04.1 [23.5 MB]</span><br><span class="line">Err:9 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libreoffice-common all 1:6.4.3-0ubuntu0.20.04.1</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - SHA256:1345003b8aa16ff648cbfe5a95ad483a61d6fc496ecea80a8322424006eeeb1d</span><br><span class="line">   - SHA1:5685830ca49384f1d576bd2e8a666196cb855f5b [weak]</span><br><span class="line">   - MD5Sum:b6de9f912f6cb73655d1b8b391aaaa66 [weak]</span><br><span class="line">   - Filesize:23530824 [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:cb2320259b24ad2285a101adadbce86730860d23c297bf0ef88457b8a3ec9096</span><br><span class="line">   - SHA1:76cab841ea9320f6bc035152d0e0ce77d0351d2f [weak]</span><br><span class="line">   - MD5Sum:b6de9f912f6cb73655d1b8b391aaaa66 [weak]</span><br><span class="line">   - Filesize:23530824 [weak]</span><br><span class="line">  Last modification reported: Wed, 29 Apr 2020 01:58:32 +0000</span><br><span class="line">Get:10 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libreoffice-core amd64 1:6.4.3-0ubuntu0.20.04.1 [31.5 MB]</span><br><span class="line">Err:10 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libreoffice-core amd64 1:6.4.3-0ubuntu0.20.04.1</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - SHA256:50dfe70884838dcc4ea33a291e1c13f22245ecd4fbb82e51abc07715338b2753</span><br><span class="line">   - SHA1:8786ac37e8f911a82da5e4a4e4627e75b88e98b8 [weak]</span><br><span class="line">   - MD5Sum:02a2c3ca6e2c8401e73d1a2dd59616aa [weak]</span><br><span class="line">   - Filesize:31494924 [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:9f779e0854a83935538e9eaa9908233b26e38f5e40461939e38f313549a684c9</span><br><span class="line">   - SHA1:a8835b41063cf0423fd945dc2f9c91e39218a19c [weak]</span><br><span class="line">   - MD5Sum:02a2c3ca6e2c8401e73d1a2dd59616aa [weak]</span><br><span class="line">   - Filesize:31494924 [weak]</span><br><span class="line">  Last modification reported: Wed, 29 Apr 2020 01:59:04 +0000</span><br><span class="line">Get:11 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libreoffice-style-elementary all 1:6.4.3-0ubuntu0.20.04.1 [7,088 kB]</span><br><span class="line">Err:11 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 libreoffice-style-elementary all 1:6.4.3-0ubuntu0.20.04.1</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - SHA256:905c1b8799d6e7e48b0bdb86d0eec8f87bd29f3099923802b3eb1916693b6c24</span><br><span class="line">   - SHA1:9746b83278db8a25fa1d879d9b089cef7b87639a [weak]</span><br><span class="line">   - MD5Sum:178edca173240b630b26e29b592a488a [weak]</span><br><span class="line">   - Filesize:7087888 [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:ce739f37cc58d6af15f3b6dcc4a5ebf7c8f21bd2b810b27c5ae1e20f61bd2e79</span><br><span class="line">   - SHA1:3272522ac5d7d97961945b89aefdab98be7f250a [weak]</span><br><span class="line">   - MD5Sum:178edca173240b630b26e29b592a488a [weak]</span><br><span class="line">   - Filesize:7087888 [weak]</span><br><span class="line">  Last modification reported: Wed, 29 Apr 2020 01:59:10 +0000</span><br><span class="line">Get:12 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 linux-modules-5.4.0-29-generic amd64 5.4.0-29.33 [14.3 MB]</span><br><span class="line">Err:12 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 linux-modules-5.4.0-29-generic amd64 5.4.0-29.33</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - SHA256:e0d345e5579b494515ba3cb9ad19a7f87f3bc25103abd0a87aaeab501b096fd4</span><br><span class="line">   - SHA1:0ce9892fe4b326e750bf495fc823df9c8ae96279 [weak]</span><br><span class="line">   - MD5Sum:ffc87ed1422980993b82424d0817cc31 [weak]</span><br><span class="line">   - Filesize:14278064 [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:3dcf94d68fd3b3fdd9e19e7e75c2289347cb2fc79dbe4ce36bfdf78b06d48942</span><br><span class="line">   - SHA1:470a68e4b45628e91a709156070e2fba864d583f [weak]</span><br><span class="line">   - MD5Sum:ffc87ed1422980993b82424d0817cc31 [weak]</span><br><span class="line">   - Filesize:14278064 [weak]</span><br><span class="line">  Last modification reported: Thu, 30 Apr 2020 08:23:38 +0000</span><br><span class="line">Get:13 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 linux-image-5.4.0-29-generic amd64 5.4.0-29.33 [8,871 kB]</span><br><span class="line">Err:13 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 linux-image-5.4.0-29-generic amd64 5.4.0-29.33</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - SHA256:eb420ae6d31dd3cbf341de32035976271e568b868416e8bd00b644dcb39cde1a</span><br><span class="line">   - SHA1:389bd3f05310f2adc7c1110890afc1ef4a2acc19 [weak]</span><br><span class="line">   - MD5Sum:5af753b944eb16b8f248e236edb6ce54 [weak]</span><br><span class="line">   - Filesize:8870728 [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:1941ee3062a81cf74ef04b82a1e5f8802084e729c7f695df8d0231e53094264d</span><br><span class="line">   - SHA1:05c066148d3ae7268a39b9a31d40a41e83880a0e [weak]</span><br><span class="line">   - MD5Sum:5af753b944eb16b8f248e236edb6ce54 [weak]</span><br><span class="line">   - Filesize:8870728 [weak]</span><br><span class="line">  Last modification reported: Thu, 30 Apr 2020 17:18:29 +0000</span><br><span class="line">Get:14 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 linux-modules-extra-5.4.0-29-generic amd64 5.4.0-29.33 [38.6 MB]</span><br><span class="line">Err:14 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 linux-modules-extra-5.4.0-29-generic amd64 5.4.0-29.33</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - SHA256:ad077c729e81adae7f3daf481f7a3ffa418d2ef36201f3cb784846c554bf772e</span><br><span class="line">   - SHA1:18155a5d5870cf36e9f584af4f6460c7cd0dc42d [weak]</span><br><span class="line">   - MD5Sum:7d966a61e974671d117f98e607ef6088 [weak]</span><br><span class="line">   - Filesize:38616816 [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:60dfd033c6ae750219ab16d4f558f4d22dcc6e11db3de4ce0d935b96254dc416</span><br><span class="line">   - SHA1:26c2b19db142da011c17f39e2cfae9be16fb9a31 [weak]</span><br><span class="line">   - MD5Sum:7d966a61e974671d117f98e607ef6088 [weak]</span><br><span class="line">   - Filesize:38616816 [weak]</span><br><span class="line">  Last modification reported: Thu, 30 Apr 2020 08:23:59 +0000</span><br><span class="line">Get:15 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 linux-headers-5.4.0-29 all 5.4.0-29.33 [10.9 MB]</span><br><span class="line">Err:15 http://jp.archive.ubuntu.com/ubuntu focal-updates/main amd64 linux-headers-5.4.0-29 all 5.4.0-29.33</span><br><span class="line">  Hash Sum mismatch</span><br><span class="line">  Hashes of expected file:</span><br><span class="line">   - SHA256:edde13dcd52c51e2404d37731948d491e6e215b22f599239326809754f8d5633</span><br><span class="line">   - SHA1:3e46354d6aaa92f82d5392a80f6b72c3fcc78a91 [weak]</span><br><span class="line">   - MD5Sum:4ccf38c666c836f29fc3602314de47b9 [weak]</span><br><span class="line">   - Filesize:10936232 [weak]</span><br><span class="line">  Hashes of received file:</span><br><span class="line">   - SHA256:b29b2b9527ad30ddb98bc568a68a02577fb129db3352503b36bce9a32229ff29</span><br><span class="line">   - SHA1:84c5c0d99ec86177c3f1f39a8998f42d43221ddb [weak]</span><br><span class="line">   - MD5Sum:4ccf38c666c836f29fc3602314de47b9 [weak]</span><br><span class="line">   - Filesize:10936232 [weak]</span><br><span class="line">  Last modification reported: Thu, 30 Apr 2020 08:23:38 +0000</span><br><span class="line">Fetched 230 MB <span class="keyword">in</span> 24s (9,497 kB/s)                                            </span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/pool/main/s/samba/samba-libs_4.11.6+dfsg-0ubuntu1.1_amd64.deb  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - SHA256:7bed91ce3edf3740430198d7ec45ed5b2959a9a942f044c9be4898ac201626a4</span><br><span class="line">    - SHA1:94267b35634ebffcc955c7d72eb9c7de77c068f8 [weak]</span><br><span class="line">    - MD5Sum:9432b5164cec773a47fb5bf1d1f0b370 [weak]</span><br><span class="line">    - Filesize:5260888 [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:695fb0e54c2b784a59c055ac6ff0858606a2e0de1075eab646551d654cb66338</span><br><span class="line">    - SHA1:0173b20ebbd9fcfd2a0c1471788a613f380ccd3f [weak]</span><br><span class="line">    - MD5Sum:9432b5164cec773a47fb5bf1d1f0b370 [weak]</span><br><span class="line">    - Filesize:5260888 [weak]</span><br><span class="line">   Last modification reported: Tue, 28 Apr 2020 17:40:59 +0000</span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/pool/main/f/firefox/firefox_76.0+build2-0ubuntu0.20.04.1_amd64.deb  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - SHA256:f098ba8a832d87683ff01703219ff0b0357ae299c2d499b2340566d6b53967f7</span><br><span class="line">    - SHA1:2741b84930733d17cae5d793b95d849dd7b0328c [weak]</span><br><span class="line">    - MD5Sum:9ec591c3e087c60f9e7320b5b49b0202 [weak]</span><br><span class="line">    - Filesize:52175432 [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:b8ae1ae2faf2e474ef6a57885bacdb871d87eb4adecbf3396c31d5c2595779d5</span><br><span class="line">    - SHA1:fec3bd3dcc93a0c4a14604ab92ccf75dadd6159c [weak]</span><br><span class="line">    - MD5Sum:9ec591c3e087c60f9e7320b5b49b0202 [weak]</span><br><span class="line">    - Filesize:52175432 [weak]</span><br><span class="line">   Last modification reported: Wed, 06 May 2020 13:29:04 +0000</span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/pool/main/w/webkit2gtk/libwebkit2gtk-4.0-37_2.28.2-0ubuntu0.20.04.1_amd64.deb  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - SHA256:2a8af32c629854413d07987911137c279da81c5f06d565d64ef25444759da062</span><br><span class="line">    - SHA1:561c9e9ecb4bfeec7b855bb60b0701d93f8f2499 [weak]</span><br><span class="line">    - MD5Sum:50656dc088dd044a0e383d092b5e8667 [weak]</span><br><span class="line">    - Filesize:12756060 [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:4ee92a27d1605952a9f5aee83b415246d024c257676b621b97c85ae1ea8acb89</span><br><span class="line">    - SHA1:1f38f830845f780a74bf81967e67a4458b7bcb66 [weak]</span><br><span class="line">    - MD5Sum:50656dc088dd044a0e383d092b5e8667 [weak]</span><br><span class="line">    - Filesize:12756060 [weak]</span><br><span class="line">   Last modification reported: Wed, 29 Apr 2020 14:23:43 +0000</span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/pool/main/w/webkit2gtk/libjavascriptcoregtk-4.0-18_2.28.2-0ubuntu0.20.04.1_amd64.deb  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - SHA256:d187b2c30d78358e730ef62d5f2680dffe7e3afcae227e9312bb480787c9de29</span><br><span class="line">    - SHA1:315c8b4d03e56a2685b96d908b02a4cac48370f9 [weak]</span><br><span class="line">    - MD5Sum:a4b1ad218199230a10a62a14435acea2 [weak]</span><br><span class="line">    - Filesize:5533640 [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:cae5f2c387c44f779f53d51874840037eb806965ee851b8683ef8bc84002b59e</span><br><span class="line">    - SHA1:d685f742577227ecf70e5ea3050a3c67a843092a [weak]</span><br><span class="line">    - MD5Sum:a4b1ad218199230a10a62a14435acea2 [weak]</span><br><span class="line">    - Filesize:5533640 [weak]</span><br><span class="line">   Last modification reported: Wed, 29 Apr 2020 14:23:44 +0000</span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/pool/main/libr/libreoffice/ure_6.4.3-0ubuntu0.20.04.1_amd64.deb  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - SHA256:8ee05bef46026c857b48dcc5f256a4cd31d18a58227775c7b14778eaf4088726</span><br><span class="line">    - SHA1:3319c7b3f5242d70964f0280a248b835d3ff7f46 [weak]</span><br><span class="line">    - MD5Sum:13d3e584bd687e615293b060b164ada9 [weak]</span><br><span class="line">    - Filesize:1221992 [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:e9963a2c39b69378a22330b6fa588f4ba6a4dea151e2e8bfceb7c642f4dfb5f8</span><br><span class="line">    - SHA1:687b56efc11fdadbad35f6a46089009abdacab82 [weak]</span><br><span class="line">    - MD5Sum:13d3e584bd687e615293b060b164ada9 [weak]</span><br><span class="line">    - Filesize:1221992 [weak]</span><br><span class="line">   Last modification reported: Wed, 29 Apr 2020 01:58:52 +0000</span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/pool/main/libr/libreoffice/libreoffice-calc_6.4.3-0ubuntu0.20.04.1_amd64.deb  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - SHA256:02edab80e340e154d5ce38f645e90d5c8387e3ce959c21ba98d0cf6686e02f6c</span><br><span class="line">    - SHA1:7fd0eccded7023860b61addbf90748dec63c5169 [weak]</span><br><span class="line">    - MD5Sum:35fe7bc79a91217b90988710925dc98d [weak]</span><br><span class="line">    - Filesize:7187136 [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:103b563cf37eea895af08a538a3a8bcba14b48beba1891ed185f557cd21250b8</span><br><span class="line">    - SHA1:209dc6d63a0212029770a8176a6ccab72265beef [weak]</span><br><span class="line">    - MD5Sum:35fe7bc79a91217b90988710925dc98d [weak]</span><br><span class="line">    - Filesize:7187136 [weak]</span><br><span class="line">   Last modification reported: Wed, 29 Apr 2020 01:59:14 +0000</span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/pool/main/libr/libreoffice/libreoffice-writer_6.4.3-0ubuntu0.20.04.1_amd64.deb  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - SHA256:0b1e1358b4d46d874db8c3acf7bb7b44fc6ab40cc946fb2e92c182b7e384e28f</span><br><span class="line">    - SHA1:5f65366aefedd7eca5a5614cbd7848ff14c15c0e [weak]</span><br><span class="line">    - MD5Sum:4161d6cec292a321dfc03f8e2694e0ae [weak]</span><br><span class="line">    - Filesize:8591980 [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:3b5cb4249ac383cce62e1fa1290f1742beb991511f45be2f95a9bd8f9b0e3bc7</span><br><span class="line">    - SHA1:5f65366aefedd7eca5a5614cbd7848ff14c15c0e [weak]</span><br><span class="line">    - MD5Sum:4161d6cec292a321dfc03f8e2694e0ae [weak]</span><br><span class="line">    - Filesize:8591980 [weak]</span><br><span class="line">   Last modification reported: Wed, 29 Apr 2020 01:59:03 +0000</span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/pool/main/libr/libreoffice/libreoffice-help-common_6.4.3-0ubuntu0.20.04.1_all.deb  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - SHA256:55b38c6380d434aed28cc17c1328a668d8383a013e8d3aec589b9d60a9560743</span><br><span class="line">    - SHA1:5fc49be8d6b320993ac972d54a1a7dc7c67cf85a [weak]</span><br><span class="line">    - MD5Sum:7df4e0f5f53b52149afb6aa40da0de6d [weak]</span><br><span class="line">    - Filesize:2344500 [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:4594830fa7a7d41d6e18d837798e4af2d299df45fd732296c41f48af19d742bc</span><br><span class="line">    - SHA1:98aadec42b41cbf28c246ada3949375456cedb38 [weak]</span><br><span class="line">    - MD5Sum:7df4e0f5f53b52149afb6aa40da0de6d [weak]</span><br><span class="line">    - Filesize:2344500 [weak]</span><br><span class="line">   Last modification reported: Wed, 29 Apr 2020 01:58:56 +0000</span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/pool/main/libr/libreoffice/libreoffice-common_6.4.3-0ubuntu0.20.04.1_all.deb  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - SHA256:1345003b8aa16ff648cbfe5a95ad483a61d6fc496ecea80a8322424006eeeb1d</span><br><span class="line">    - SHA1:5685830ca49384f1d576bd2e8a666196cb855f5b [weak]</span><br><span class="line">    - MD5Sum:b6de9f912f6cb73655d1b8b391aaaa66 [weak]</span><br><span class="line">    - Filesize:23530824 [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:cb2320259b24ad2285a101adadbce86730860d23c297bf0ef88457b8a3ec9096</span><br><span class="line">    - SHA1:76cab841ea9320f6bc035152d0e0ce77d0351d2f [weak]</span><br><span class="line">    - MD5Sum:b6de9f912f6cb73655d1b8b391aaaa66 [weak]</span><br><span class="line">    - Filesize:23530824 [weak]</span><br><span class="line">   Last modification reported: Wed, 29 Apr 2020 01:58:32 +0000</span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/pool/main/libr/libreoffice/libreoffice-core_6.4.3-0ubuntu0.20.04.1_amd64.deb  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - SHA256:50dfe70884838dcc4ea33a291e1c13f22245ecd4fbb82e51abc07715338b2753</span><br><span class="line">    - SHA1:8786ac37e8f911a82da5e4a4e4627e75b88e98b8 [weak]</span><br><span class="line">    - MD5Sum:02a2c3ca6e2c8401e73d1a2dd59616aa [weak]</span><br><span class="line">    - Filesize:31494924 [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:9f779e0854a83935538e9eaa9908233b26e38f5e40461939e38f313549a684c9</span><br><span class="line">    - SHA1:a8835b41063cf0423fd945dc2f9c91e39218a19c [weak]</span><br><span class="line">    - MD5Sum:02a2c3ca6e2c8401e73d1a2dd59616aa [weak]</span><br><span class="line">    - Filesize:31494924 [weak]</span><br><span class="line">   Last modification reported: Wed, 29 Apr 2020 01:59:04 +0000</span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/pool/main/libr/libreoffice/libreoffice-style-elementary_6.4.3-0ubuntu0.20.04.1_all.deb  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - SHA256:905c1b8799d6e7e48b0bdb86d0eec8f87bd29f3099923802b3eb1916693b6c24</span><br><span class="line">    - SHA1:9746b83278db8a25fa1d879d9b089cef7b87639a [weak]</span><br><span class="line">    - MD5Sum:178edca173240b630b26e29b592a488a [weak]</span><br><span class="line">    - Filesize:7087888 [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:ce739f37cc58d6af15f3b6dcc4a5ebf7c8f21bd2b810b27c5ae1e20f61bd2e79</span><br><span class="line">    - SHA1:3272522ac5d7d97961945b89aefdab98be7f250a [weak]</span><br><span class="line">    - MD5Sum:178edca173240b630b26e29b592a488a [weak]</span><br><span class="line">    - Filesize:7087888 [weak]</span><br><span class="line">   Last modification reported: Wed, 29 Apr 2020 01:59:10 +0000</span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/pool/main/l/linux/linux-modules-5.4.0-29-generic_5.4.0-29.33_amd64.deb  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - SHA256:e0d345e5579b494515ba3cb9ad19a7f87f3bc25103abd0a87aaeab501b096fd4</span><br><span class="line">    - SHA1:0ce9892fe4b326e750bf495fc823df9c8ae96279 [weak]</span><br><span class="line">    - MD5Sum:ffc87ed1422980993b82424d0817cc31 [weak]</span><br><span class="line">    - Filesize:14278064 [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:3dcf94d68fd3b3fdd9e19e7e75c2289347cb2fc79dbe4ce36bfdf78b06d48942</span><br><span class="line">    - SHA1:470a68e4b45628e91a709156070e2fba864d583f [weak]</span><br><span class="line">    - MD5Sum:ffc87ed1422980993b82424d0817cc31 [weak]</span><br><span class="line">    - Filesize:14278064 [weak]</span><br><span class="line">   Last modification reported: Thu, 30 Apr 2020 08:23:38 +0000</span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/pool/main/l/linux-signed/linux-image-5.4.0-29-generic_5.4.0-29.33_amd64.deb  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - SHA256:eb420ae6d31dd3cbf341de32035976271e568b868416e8bd00b644dcb39cde1a</span><br><span class="line">    - SHA1:389bd3f05310f2adc7c1110890afc1ef4a2acc19 [weak]</span><br><span class="line">    - MD5Sum:5af753b944eb16b8f248e236edb6ce54 [weak]</span><br><span class="line">    - Filesize:8870728 [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:1941ee3062a81cf74ef04b82a1e5f8802084e729c7f695df8d0231e53094264d</span><br><span class="line">    - SHA1:05c066148d3ae7268a39b9a31d40a41e83880a0e [weak]</span><br><span class="line">    - MD5Sum:5af753b944eb16b8f248e236edb6ce54 [weak]</span><br><span class="line">    - Filesize:8870728 [weak]</span><br><span class="line">   Last modification reported: Thu, 30 Apr 2020 17:18:29 +0000</span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/pool/main/l/linux/linux-modules-extra-5.4.0-29-generic_5.4.0-29.33_amd64.deb  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - SHA256:ad077c729e81adae7f3daf481f7a3ffa418d2ef36201f3cb784846c554bf772e</span><br><span class="line">    - SHA1:18155a5d5870cf36e9f584af4f6460c7cd0dc42d [weak]</span><br><span class="line">    - MD5Sum:7d966a61e974671d117f98e607ef6088 [weak]</span><br><span class="line">    - Filesize:38616816 [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:60dfd033c6ae750219ab16d4f558f4d22dcc6e11db3de4ce0d935b96254dc416</span><br><span class="line">    - SHA1:26c2b19db142da011c17f39e2cfae9be16fb9a31 [weak]</span><br><span class="line">    - MD5Sum:7d966a61e974671d117f98e607ef6088 [weak]</span><br><span class="line">    - Filesize:38616816 [weak]</span><br><span class="line">   Last modification reported: Thu, 30 Apr 2020 08:23:59 +0000</span><br><span class="line">E: Failed to fetch http://jp.archive.ubuntu.com/ubuntu/pool/main/l/linux/linux-headers-5.4.0-29_5.4.0-29.33_all.deb  Hash Sum mismatch</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - SHA256:edde13dcd52c51e2404d37731948d491e6e215b22f599239326809754f8d5633</span><br><span class="line">    - SHA1:3e46354d6aaa92f82d5392a80f6b72c3fcc78a91 [weak]</span><br><span class="line">    - MD5Sum:4ccf38c666c836f29fc3602314de47b9 [weak]</span><br><span class="line">    - Filesize:10936232 [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:b29b2b9527ad30ddb98bc568a68a02577fb129db3352503b36bce9a32229ff29</span><br><span class="line">    - SHA1:84c5c0d99ec86177c3f1f39a8998f42d43221ddb [weak]</span><br><span class="line">    - MD5Sum:4ccf38c666c836f29fc3602314de47b9 [weak]</span><br><span class="line">    - Filesize:10936232 [weak]</span><br><span class="line">   Last modification reported: Thu, 30 Apr 2020 08:23:38 +0000</span><br><span class="line">E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?</span><br><span class="line">ubuntu@ubuntu:~$</span><br></pre></td></tr></table></figure>

<h4 id="wget-した-deb-ファイルのハッシュ値"><a href="#wget-した-deb-ファイルのハッシュ値" class="headerlink" title="wget した.deb ファイルのハッシュ値"></a>wget した.deb ファイルのハッシュ値</h4><p>wget した.deb ファイルのハッシュ値は<code>Hashes of expected file:</code> のハッシュ値と一致します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ wget http://jp.archive.ubuntu.com/ubuntu/pool/main/l/linux/linux-headers-5.4.0-29_5.4.0-29.33_all.deb</span><br><span class="line">--2020-05-07 02:59:22--  http://jp.archive.ubuntu.com/ubuntu/pool/main/l/linux/linux-headers-5.4.0-29_5.4.0-29.33_all.deb</span><br><span class="line">Resolving jp.archive.ubuntu.com (jp.archive.ubuntu.com)... 160.26.2.187</span><br><span class="line">Connecting to jp.archive.ubuntu.com (jp.archive.ubuntu.com)|160.26.2.187|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 10936232 (10M) [application/x-debian-package]</span><br><span class="line">Saving to: ‘linux-headers-5.4.0-29_5.4.0-29.33_all.deb’</span><br><span class="line"></span><br><span class="line">linux-headers-5.4.0 100%[===================&gt;]  10.43M  8.68MB/s    <span class="keyword">in</span> 1.2s    </span><br><span class="line"></span><br><span class="line">2020-05-07 02:59:23 (8.68 MB/s) - ‘linux-headers-5.4.0-29_5.4.0-29.33_all.deb’ saved [10936232/10936232]</span><br><span class="line"></span><br><span class="line">ubuntu@ubuntu:~$ <span class="built_in">ls</span> -l *.deb</span><br><span class="line">-rw-rw-r-- 1 ubuntu ubuntu 10936232 Apr 30 17:23 linux-headers-5.4.0-29_5.4.0-29.33_all.deb</span><br><span class="line">ubuntu@ubuntu:~$ <span class="built_in">which</span> <span class="built_in">sha256sum</span> <span class="built_in">sha1sum</span> <span class="built_in">md5sum</span></span><br><span class="line">/usr/bin/sha256sum</span><br><span class="line">/usr/bin/sha1sum</span><br><span class="line">/usr/bin/md5sum</span><br><span class="line">ubuntu@ubuntu:~$ <span class="built_in">sha256sum</span> *.deb</span><br><span class="line">edde13dcd52c51e2404d37731948d491e6e215b22f599239326809754f8d5633  linux-headers-5.4.0-29_5.4.0-29.33_all.deb</span><br><span class="line">ubuntu@ubuntu:~$ <span class="built_in">sha1sum</span> *.deb</span><br><span class="line">3e46354d6aaa92f82d5392a80f6b72c3fcc78a91  linux-headers-5.4.0-29_5.4.0-29.33_all.deb</span><br><span class="line">ubuntu@ubuntu:~$ <span class="built_in">md5sum</span> *.deb</span><br><span class="line">4ccf38c666c836f29fc3602314de47b9  linux-headers-5.4.0-29_5.4.0-29.33_all.deb</span><br><span class="line">ubuntu@ubuntu:~$</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>apt</tag>
      </tags>
  </entry>
  <entry>
    <title>Sharing Folders for VMs</title>
    <url>/2020/05/08/Sharing-Folders-for-VMs/</url>
    <content><![CDATA[<p>ホストOS(Windows 10) のフォルダをゲストOS(Linux)と共有してみました。</p>
<div id="googleChart958"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.Table(document.getElementById("googleChart958"))).draw(google.visualization.arrayToDataTable([['Host / Guest', 'Hypervisor', 'OS', 'Type', 'Path'],['Host', '-', 'Windows 10', 'ntfs', 'D:\\share'],['Guest', 'VirtualBox', 'Ubuntu 20.04', 'vboxsf', '/mnt/share'],['Guest', 'Hyper-V', 'Ubuntu 20.04', 'cifs', '/mnt/share']]),{"title":" ","width":"100%","height":"100%"});
      });
    })();
  }
</script>

<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><h4 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h4><ul>
<li>Windows 10 [hoge&#x2F;fuga][@192.168.11.2]<ul>
<li>VirualBox<ul>
<li>Ubuntu 20.04 [ubuntu&#x2F;********]</li>
</ul>
</li>
<li>Hyper-V<ul>
<li>Ubuntu 20.04</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="各OS-から見える共有フォルダのパス"><a href="#各OS-から見える共有フォルダのパス" class="headerlink" title="各OS から見える共有フォルダのパス"></a>各OS から見える共有フォルダのパス</h4><table>
<thead>
<tr>
<th align="left">OS</th>
<th align="left">Folder</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Windows 10</td>
<td align="left">D:\share</td>
</tr>
<tr>
<td align="left">Ubuntu 20.04 on VirtualBox</td>
<td align="left">&#x2F;mnt&#x2F;share</td>
</tr>
<tr>
<td align="left">Ubuntu 20.04 on Hyper-V</td>
<td align="left">&#x2F;mnt&#x2F;share</td>
</tr>
</tbody></table>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h4><ol>
<li>共有用のフォルダを作成</li>
</ol>
<ul>
<li><code>D:\share</code></li>
</ul>
<ol start="2">
<li>共有フォルダのアクセス権の設定</li>
</ol>
<ul>
<li>フルコントロール: オン</li>
<li>変更: オン</li>
<li>読み取り: オン</li>
</ul>
<h4 id="VirtualBox-の設定"><a href="#VirtualBox-の設定" class="headerlink" title="VirtualBox の設定"></a>VirtualBox の設定</h4><ol>
<li>共有フォルダを登録</li>
</ol>
<ul>
<li>フォルダのパス:  <code>D:\share</code></li>
<li>フォルダ名: <code>share</code></li>
<li>読み込み専用: オフ</li>
<li>自動マウント: オフ</li>
</ul>
<h4 id="VirtualBox-のVM-の設定"><a href="#VirtualBox-のVM-の設定" class="headerlink" title="VirtualBox のVM の設定"></a>VirtualBox のVM の設定</h4><ol>
<li>GuestAddition.iso をマウントしてインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> ./VBoxLinuxAdditions.run</span><br></pre></td></tr></table></figure></li>
<li>マウント  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> gpasswd --add ubuntu vboxsf</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mkdir</span> /mnt/share</span><br><span class="line">$ <span class="built_in">sudo</span> mount -t vboxsf share /mnt/share</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Hyper-V-の設定"><a href="#Hyper-V-の設定" class="headerlink" title="Hyper-V の設定"></a>Hyper-V の設定</h4><ul>
<li>ゲストがLinux の場合は特にないかも</li>
</ul>
<h4 id="Hyper-V-のVM-の設定"><a href="#Hyper-V-のVM-の設定" class="headerlink" title="Hyper-V  のVM の設定"></a>Hyper-V  のVM の設定</h4><ol>
<li>マウント  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install cifs-utils</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /mnt/share</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> mount -t cifs -o vers=3.0,username=hoge,password=fuga //192.168.11.2/share /mnt/share</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>vm</tag>
      </tags>
  </entry>
  <entry>
    <title>Draw.io VS Code Integration</title>
    <url>/2020/05/18/Draw-io-VS-Code-Integration/</url>
    <content><![CDATA[<p><img src="/images/sample.drawio.svg" alt="sample.drawio.svg"><br><a href="https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio">https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio</a><br><a href="https://github.com/hediet/vscode-drawio">https://github.com/hediet/vscode-drawio</a></p>
<p>Visual Studio Code でDraw.io を使う拡張が公開されたので使ってみました。<br>Visio みたいで便利ですね。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Insider Preview 19628<ul>
<li>Visual Studio Code 1.45.1<ul>
<li>Draw.io VS Code Integration 0.4.0<ul>
<li>draw.io 13.0.9</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>Visual Studio Code でDraw.io Integration 拡張機能をインストール</li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ol>
<li>拡張子 <code>.drawio.svg</code> のファイルを作成し、Visual Studio Code で開きます。</li>
<li>Draw.io のインタフェースになるので図形を配置します。</li>
<li>SVG 形式で保存されます。</li>
</ol>
<h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><h4 id="簡単な図形"><a href="#簡単な図形" class="headerlink" title="簡単な図形"></a>簡単な図形</h4><p><img src="/images/sample.drawio.svg" alt="sample.drawio.svg"><br><a href="https://ktkr3d.github.io/images/sample.drawio.svg">https://ktkr3d.github.io/images/sample.drawio.svg</a></p>
<h4 id="AWS-構成図"><a href="#AWS-構成図" class="headerlink" title="AWS 構成図"></a>AWS 構成図</h4><p><img src="/images/aws.drawio.svg" alt="sample.drawio.svg"><br><a href="https://ktkr3d.github.io/images/aws.drawio.svg">https://ktkr3d.github.io/images/aws.drawio.svg</a></p>
]]></content>
      <tags>
        <tag>vscode</tag>
        <tag>draw.io</tag>
      </tags>
  </entry>
  <entry>
    <title>Diagrams - VS Code</title>
    <url>/2020/05/19/Diagrams-VS-Code/</url>
    <content><![CDATA[<p><img src="/images/grouped_workers.png" alt="grouped_workers"><br><a href="https://diagrams.mingrammer.com/">https://diagrams.mingrammer.com/</a><br>Diagrams でシステム構成図を出力してみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Insider Preview 19628<ul>
<li>Visual Studio Code 1.45.1</li>
<li>WSL (Ubuntu 18.04 LTS)<ul>
<li>graphviz 2.40.1</li>
<li>pip3 9.0.1<ul>
<li>diagrams diagrams (0.11.0)</li>
</ul>
</li>
<li>python3 3.6.9</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install -y python3 python3-pip graphviz</span><br><span class="line">$ pip3 install diagrams</span><br></pre></td></tr></table></figure>

<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="サンプル"><a href="#サンプル" class="headerlink" title="サンプル"></a>サンプル</h4><p><a href="https://diagrams.mingrammer.com/docs/getting-started/examples">https://diagrams.mingrammer.com/docs/getting-started/examples</a></p>
<h4 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h4><ol>
<li>Python で記述します。<figure class="highlight python"><figcaption><span>sample1.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> diagrams <span class="keyword">import</span> Diagram</span><br><span class="line"><span class="keyword">from</span> diagrams.aws.compute <span class="keyword">import</span> EC2</span><br><span class="line"><span class="keyword">from</span> diagrams.aws.database <span class="keyword">import</span> RDS</span><br><span class="line"><span class="keyword">from</span> diagrams.aws.network <span class="keyword">import</span> ELB</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Diagram(<span class="string">&quot;Grouped Workers&quot;</span>, show=<span class="literal">False</span>, direction=<span class="string">&quot;TB&quot;</span>):</span><br><span class="line">    ELB(<span class="string">&quot;lb&quot;</span>) &gt;&gt; [EC2(<span class="string">&quot;worker1&quot;</span>),</span><br><span class="line">                  EC2(<span class="string">&quot;worker2&quot;</span>),</span><br><span class="line">                  EC2(<span class="string">&quot;worker3&quot;</span>),</span><br><span class="line">                  EC2(<span class="string">&quot;worker4&quot;</span>),</span><br><span class="line">                  EC2(<span class="string">&quot;worker5&quot;</span>)] &gt;&gt; RDS(<span class="string">&quot;events&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>実行します。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 sample1.py</span><br></pre></td></tr></table></figure></li>
<li>grouped_workers.png というファイルが出力されます。</li>
</ol>
<h4 id="Diagram-options"><a href="#Diagram-options" class="headerlink" title="Diagram options"></a>Diagram options</h4><ul>
<li>filename&#x3D;”my_diagram”</li>
<li>outformat&#x3D;”png”<ul>
<li>png (default)</li>
<li>jpg</li>
<li>svg (ラスタ画像部品はリンクで記述される)</li>
<li>pdf</li>
</ul>
</li>
</ul>
<h4 id="Graphviz-dot-attributes-options"><a href="#Graphviz-dot-attributes-options" class="headerlink" title="Graphviz dot attributes options"></a>Graphviz dot attributes options</h4><p><a href="https://www.graphviz.org/doc/info/attrs.html">https://www.graphviz.org/doc/info/attrs.html</a></p>
<ul>
<li>graph_attr</li>
<li>node_attr</li>
<li>edge_attr</li>
</ul>
<h4 id="円グラフ-PieChart"><a href="#円グラフ-PieChart" class="headerlink" title="円グラフ(PieChart)"></a>円グラフ(PieChart)</h4><div id="googleChart9365"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.PieChart(document.getElementById("googleChart9365"))).draw(google.visualization.arrayToDataTable([['Task', 'Hours per Day'],['Work',     11],['Eat',      2],['Commute',  2],['Watch TV', 2],['Sleep',    7]]),{"is3D":true,"legend":"none","title":" ","width":400,"height":400});
      });
    })();
  }
</script>
]]></content>
      <tags>
        <tag>vscode</tag>
        <tag>diagrams</tag>
      </tags>
  </entry>
  <entry>
    <title>Terminus</title>
    <url>/2020/05/21/Terminus/</url>
    <content><![CDATA[<p><a href="https://eugeny.github.io/terminus/">https://eugeny.github.io/terminus/</a><br>Windows の端末エミュレータをTerminus に切り替えました。</p>
<p>いろいろありますね。</p>
<ul>
<li>ConEmu&#x2F;Cmder<br><a href="https://conemu.github.io/">https://conemu.github.io/</a><br><a href="https://cmder.net/">https://cmder.net/</a></li>
<li>Fluent Terminal<br><a href="https://github.com/felixse/FluentTerminal">https://github.com/felixse/FluentTerminal</a></li>
<li>Terminus<br><a href="https://github.com/Eugeny/terminus">https://github.com/Eugeny/terminus</a></li>
<li>Windows Terminal<br><a href="https://github.com/microsoft/terminal">https://github.com/microsoft/terminal</a></li>
</ul>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Insider Preview 19628<ul>
<li>Terminus 1.0.111</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h4><ol>
<li>ダウンロード<br>  <a href="https://github.com/Eugeny/terminus/releases/latest">https://github.com/Eugeny/terminus/releases/latest</a></li>
<li>インストール</li>
</ol>
<h4 id="設定のカスタマイズ"><a href="#設定のカスタマイズ" class="headerlink" title="設定のカスタマイズ"></a>設定のカスタマイズ</h4><ul>
<li>自動起動<ul>
<li>ファイル名を指定して実行でshell:startup</li>
<li>Terminus のショートカットを登録</li>
<li>実行時の大きさを最小化に設定<br>有効にならない場合があるかもしれない</li>
</ul>
</li>
<li>Application 設定<ul>
<li>Theme をCompact</li>
<li>Tabs location をAt the bottom</li>
<li>Dock the terminal をTop<br>Windows タスクバーを右側に配置している場合はオフにして位置を調整する</li>
<li>Dock always on top をオフ</li>
</ul>
</li>
<li>Hotkeys 設定<ul>
<li>Toggle Terminal window にCtrl+F1 を追加</li>
</ul>
</li>
<li>Plugins<ul>
<li>save-output を有効化</li>
</ul>
</li>
<li>SSH 設定<ul>
<li>プロファイルを登録</li>
</ul>
</li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul>
<li>表示&#x2F;非表示(Ctrl + Space または Ctrl + F1)</li>
<li>拡大(Ctrl + ^)、縮小(Ctrl + -)</li>
<li>新しいタブ(Ctrl + Shift + T)</li>
<li>右に分割(Ctrl＋Shift＋E)</li>
</ul>
<h3 id="良さそうなところ"><a href="#良さそうなところ" class="headerlink" title="良さそうなところ"></a>良さそうなところ</h3><ul>
<li>ドロップダウン的に使えます</li>
<li>ConEmu よりも描画が安定しているように感じます</li>
<li>マルチプラットフォーム</li>
<li>プラグイン</li>
</ul>
<h3 id="これから確認するところ"><a href="#これから確認するところ" class="headerlink" title="これから確認するところ"></a>これから確認するところ</h3><ul>
<li>Ctrl + Wheel で文字の拡大縮小をしたい</li>
<li>日本語化<br><a href="https://github.com/Eugeny/terminus/issues/2538">https://github.com/Eugeny/terminus/issues/2538</a></li>
</ul>
]]></content>
      <tags>
        <tag>terminus</tag>
      </tags>
  </entry>
  <entry>
    <title>Marp for VS Code</title>
    <url>/2020/05/27/Marp-for-VS-Code/</url>
    <content><![CDATA[<p><a href="https://marp.app/">https://marp.app/</a><br><a href="https://github.com/marp-team/marp-vscode">https://github.com/marp-team/marp-vscode</a><br>Marp はMarkdown でスライドショーを作成できるツールです。<br>Marp for VS Code を使ってみました。<br>Visual Studio Code 上でMarp を使えるようになったんですね。</p>
<h4 id="2020-06-05-追記"><a href="#2020-06-05-追記" class="headerlink" title="2020-06-05 追記"></a>2020-06-05 追記</h4><p>Visual Studio Code 上でいろいろ書けるようになりました。</p>
<ul>
<li>スライド本体(Markdown 形式)<br>Marp for VS Codeで記述</li>
<li>図形(Draw.io SVG形式)<br>Draw.io VS Code Integration で描画してSVG 形式で出力</li>
<li>グラフ(Vega SVG形式)<br>Vega Viewer でJSON データをSVG 形式で出力</li>
</ul>
<h4 id="2020-07-08-追記"><a href="#2020-07-08-追記" class="headerlink" title="2020-07-08 追記"></a>2020-07-08 追記</h4><ul>
<li>目次</li>
<li>無理やり感のある段組み</li>
<li>地図</li>
<li>テーマカスタマイズ</li>
<li>ページ番号非表示</li>
</ul>


	<div class="row">
    <embed src="/images/sample-presentation.pdf" width="100%" height="550" type="application/pdf">
	</div>




<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Insider Preview 19631<ul>
<li>Visual Studio Code 1.45.1<ul>
<li>Marp for VS Code 0.13.0</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>Visual Studio Code で「表示」-「拡張機能」メニューを選択し、<code>Marp</code>を検索</li>
<li>「Marp for VS Code」をインストールして再読み込みを実行</li>
</ol>
<h3 id="Marp-の書き方"><a href="#Marp-の書き方" class="headerlink" title="Marp の書き方"></a>Marp の書き方</h3><ul>
<li><p>Marp の構文<br><a href="https://marpit.marp.app/markdown">https://marpit.marp.app/markdown</a></p>
</li>
<li><p>Marp の紹介<br><a href="https://speakerdeck.com/yhatt/marp-basic-example">https://speakerdeck.com/yhatt/marp-basic-example</a></p>
</li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="スライドの作成"><a href="#スライドの作成" class="headerlink" title="スライドの作成"></a>スライドの作成</h4><ul>
<li>Markdown ファイルで記載<figure class="highlight markdown"><figcaption><span>marp-sample.md</span></figcaption><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="section">marp: true</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Your slide deck</span></span><br><span class="line"></span><br><span class="line">Start writing!</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="プレビュー"><a href="#プレビュー" class="headerlink" title="プレビュー"></a>プレビュー</h4><ul>
<li>ツールバーの「プレビューを横に表示」ボタン(Ctrl + K V)<br><img src="/images/marp_for_vscode_preview.png" alt="marp_for_vscode_preview"></li>
<li>プレビューを表示(Ctrl + Shift + V)</li>
</ul>
<h4 id="エクスポート"><a href="#エクスポート" class="headerlink" title="エクスポート"></a>エクスポート</h4><ol>
<li>ツールバーのMarp アイコンをクリックして<code>Export Slide Deck</code>を選択</li>
<li>ファイル名とファイルの種類を指定して<code>Export</code>を実行</li>
</ol>
<ul>
<li>HTML</li>
<li>PDF</li>
<li>PPTX (PowerPoint document)</li>
<li>PNG (First slide only)</li>
<li>JPEG (First slide only)</li>
</ul>
<ol start="3">
<li>ビューアで表示  

	<div class="row">
    <embed src="/images/marp-sample.pdf" width="100%" height="550" type="application/pdf">
	</div>


</li>
</ol>
<h3 id="サンプル"><a href="#サンプル" class="headerlink" title="サンプル"></a>サンプル</h3><ul>
<li><a href="/images/sample-presentation.md.txt">sample-presentation.md</a><br>スライド本体</li>
<li><a href="/images/sample.drawio.svg">sample.drawio.svg</a><br>画像(SVG形式)</li>
<li><a href="/images/ubuntudde.png">ubuntudde.png</a><br>画像(PNG形式)</li>
<li><a href="/images/aws.drawio.svg">aws.drawio.svg</a><br>画像(SVG形式) テキスト形式で図形部品を管理できるのが便利</li>
<li><a href="/images/pie.vg.json">pie.vg.json</a><br>グラフ(JSON 形式)</li>
<li><a href="/images/pie.vg.svg">pie.vg.svg</a><br>グラフ(SVG 形式)</li>
<li><a href="/images/sample-presentation.pdf">sample-presentation.pdf</a><br>生成したスライド(PDF 形式)</li>
<li><a href="/images/sample-presentation.pptx">sample-presentation.pptx</a><br>生成したスライド(PowerPoint 形式)</li>
</ul>
]]></content>
      <tags>
        <tag>markdown</tag>
        <tag>marp</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 10 Build 19645 + WSL 2</title>
    <url>/2020/06/11/Windows-10-Build-19645-WSL-2/</url>
    <content><![CDATA[<p><a href="https://docs.microsoft.com/ja-jp/windows/wsl/wsl2-kernel">https://docs.microsoft.com/ja-jp/windows/wsl/wsl2-kernel</a></p>
<p>Windows 10 Insider Preview Build 19645 をインストールしたらWSL2 が起動しなくなりました。Kernel の更新方法が変わったようです。</p>
<p>以下のMSI をインストールすると復帰しました。<br><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</a></p>
<h4 id="2020-06-18-追記"><a href="#2020-06-18-追記" class="headerlink" title="2020-06-18 追記"></a>2020-06-18 追記</h4><p>Windows 10 Insider Preview Build 20150 へ更新することで、<br>コマンドプロンプトから<code>wsl --update</code> で更新できるようになったようです。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">C:\&gt;wsl <span class="params">--update</span></span><br><span class="line">更新をチェック中<span class="string">...</span></span><br><span class="line">利用できる更新はありません。</span><br><span class="line">カーネル バージョン: 4.19.104</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Insider Preview Build 19645</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>以下のページを参照<br><a href="https://docs.microsoft.com/ja-jp/windows/wsl/wsl2-kernel">https://docs.microsoft.com/ja-jp/windows/wsl/wsl2-kernel</a></li>
<li>以下のリンクをクリック<br><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</a></li>
<li>管理者モードでインストール</li>
</ol>
]]></content>
      <tags>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL - Ubuntu 20.04 LTS</title>
    <url>/2020/06/19/WSL-Ubuntu-20-04-LTS/</url>
    <content><![CDATA[<p>WSL のUbuntu 20.04 LTS が公開されていたのでUbuntu 18.04 LTS から移行しました。</p>
<p>マイクロソフトストアには以下の3つのUbuntu が存在しています。「Ubuntu」からは<code>do-release-upgrade</code>でバージョンアップできるけれど、「Ubuntu 18.04 LTS」からはバージョンアップできないんですね。</p>
<ul>
<li>Ubuntu</li>
<li>Ubuntu-18.04</li>
<li>Ubuntu-20.04</li>
</ul>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Insider Preview Build 20150<ul>
<li>移行前WSL<ul>
<li>Ubuntu 18.04 (Ubuntu 18.04 LTS)</li>
<li>bash 4.4.20</li>
<li>node v13.9.0</li>
<li>npm 6.13.7</li>
<li>Docker version 19.03.6</li>
<li>Docker Compose version 1.24.0</li>
</ul>
</li>
<li>移行後WSL<ul>
<li>Ubuntu (Ubuntu 20.04 LTS)</li>
<li>bash 5.0.16</li>
<li>node v14.4.0</li>
<li>npm 6.14.5</li>
<li>Docker version 19.03.11</li>
<li>Docker Compose version 1.26.0</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="WSL-のインストール"><a href="#WSL-のインストール" class="headerlink" title="WSL のインストール"></a>WSL のインストール</h4><ol>
<li>マイクロソフトストアから「Ubuntu」をインストール</li>
<li>Ubuntu を起動してアカウント<code>ubuntu</code>を作成</li>
</ol>
<h3 id="WSL-側の設定"><a href="#WSL-側の設定" class="headerlink" title="WSL 側の設定"></a>WSL 側の設定</h3><h4 id="日本語設定"><a href="#日本語設定" class="headerlink" title="日本語設定"></a>日本語設定</h4><ul>
<li>日本語オンラインマニュアルのインストール<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt install language-pack-ja manpages-ja manpages-ja-dev</span><br><span class="line">$ sudo update-locale LANG=ja_JP.UTF8</span><br><span class="line">$ exit</span><br></pre></td></tr></table></figure></li>
<li>~&#x2F;.bash_aliases の設定<figure class="highlight bash"><figcaption><span>~/.bash_aliases</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> upd=<span class="string">&#x27;sudo apt update &amp;&amp; sudo apt dist-upgrade &amp;&amp; sudo apt autoremove -y&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> en=<span class="string">&#x27;export LC_ALL=en_US.UTF8&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ja=<span class="string">&#x27;export LC_ALL=ja_JP.UTF8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">sshu</span></span>() &#123;</span><br><span class="line">  <span class="built_in">command</span> ssh ubuntu@192.168.11.<span class="variable">$1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><ul>
<li>n でNode.js をインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade</span><br><span class="line">$ <span class="built_in">sudo</span> apt install nodejs npm</span><br><span class="line">$ <span class="built_in">sudo</span> apt clean all</span><br><span class="line">$ <span class="built_in">sudo</span> npm install n -g</span><br><span class="line">$ <span class="built_in">sudo</span> n latest</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">ln</span> -sf /usr/local/bin/node /usr/bin/node</span><br><span class="line">$ <span class="built_in">sudo</span> apt purge nodejs npm</span><br><span class="line">$ <span class="built_in">sudo</span> apt clean all</span><br><span class="line">$ <span class="built_in">sudo</span> apt autoremove</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Chinachu"><a href="#Chinachu" class="headerlink" title="Chinachu"></a>Chinachu</h4><ul>
<li>chinachu のインストール<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install build-essential curl git-core vainfo python</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> npm install pm2 -g</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> pm2 startup</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> git://github.com/kanreisa/Chinachu.git ~/chinachu</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ~/chinachu/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./chinachu installer</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> config.sample.json config.json</span></span><br></pre></td></tr></table></figure></li>
<li>~&#x2F;chinachu&#x2F;config.json の設定<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ubuntu&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;mirakurunPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://192.168.11.2:40772/&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;recordedDir&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;/mnt/j/home/chinachu/recorded/&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;wuiUsers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
<li>起動<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> [] &gt; ~/chinachu/rules.json</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./chinachu service wui execute</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">問題なく起動できたらCtrl+\で終了</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./chinachu update</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">EPG取得テスト（エラーが出た場合は恐らく Mirakurun に接続できていません）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> pm2 start processes.json</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> pm2 save</span></span><br></pre></td></tr></table></figure></li>
<li>起動スクリプト<figure class="highlight bash"><figcaption><span>/home/ubuntu/bin/wsl-chinachu.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/ubuntu/chinachu</span><br><span class="line">/usr/local/bin/pm2 restart processes.json</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><ul>
<li>Docker のインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install curl</span><br><span class="line">$ curl -fsSL https://get.docker.com/ | sh</span><br><span class="line">$ <span class="built_in">sudo</span> usermod -aG docker ubuntu</span><br><span class="line">$ <span class="built_in">sudo</span> /etc/init.d/docker start</span><br><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> docker <span class="keyword">system</span> info</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h4><ul>
<li>最新版のDocker Compose をインストールするワンライナー<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl --silent <span class="string">&quot;https://api.github.com/repos/docker/compose/releases/latest&quot;</span> | jq --arg PLATFORM_ARCH <span class="string">&quot;<span class="subst">$(echo `uname -s`-`uname -m`)</span>&quot;</span> -r <span class="string">&#x27;.assets[] | select(.name | endswith($PLATFORM_ARCH)).browser_download_url&#x27;</span> | xargs <span class="built_in">sudo</span> curl -L -o /usr/local/bin/docker-compose --url &amp;&amp; <span class="built_in">sudo</span> <span class="built_in">chmod</span> 755 /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li>
<li>Portainer のインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://downloads.portainer.io/docker-compose.yml</span><br><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><ul>
<li>hexo インストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile</span><br><span class="line">$ . ~/.profile</span><br><span class="line">$ npx hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ npm i -S hexo-tag-googlecharts</span><br><span class="line">$ npm i -S hexo-tag-twitter</span><br><span class="line">$ npm i -S hexo-pdf</span><br><span class="line">$ npm i -S hexo-deployer-git</span><br><span class="line">$ npm i -S hexo-generator-search</span><br><span class="line">$ npm i -S hexo-generator-feed</span><br><span class="line">$ npm i -S hexo-related-popular-posts</span><br></pre></td></tr></table></figure></li>
<li>ライブラリの修正<br><a href="https://ktkr3d.github.io/2020/02/27/hexo-related-popular-posts/">https://ktkr3d.github.io/2020/02/27/hexo-related-popular-posts/</a></li>
<li>データの移行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scp -r ubuntu@localhost:/home/ubuntu/blog/_config.yml         ~/blog/</span><br><span class="line">$ scp -r ubuntu@localhost:/home/ubuntu/blog/google-services.pem ~/blog/</span><br><span class="line">$ scp -r ubuntu@localhost:/home/ubuntu/blog/source              ~/blog/</span><br><span class="line">$ scp -r ubuntu@localhost:/home/ubuntu/blog/scaffolds           ~/blog/</span><br><span class="line">$ scp -r ubuntu@localhost:/home/ubuntu/blog/themes/freemind     ~/blog/themes/</span><br></pre></td></tr></table></figure></li>
<li>キーの移行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scp -r ubuntu@localhost:/home/ubuntu/.ssh ~</span><br></pre></td></tr></table></figure></li>
<li>キャッシュのクリア<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="ポートフォワードの設定"><a href="#ポートフォワードの設定" class="headerlink" title="ポートフォワードの設定"></a>ポートフォワードの設定</h4><ul>
<li>ポートフォワードスクリプトの作成<figure class="highlight bash"><figcaption><span>/home/ubuntu/bin/wsl-portforward.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">IP=$(ip -f inet -o addr show eth0 | <span class="built_in">cut</span> -d\  -f 7 | <span class="built_in">cut</span> -d/ -f 1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> PORT <span class="keyword">in</span> 22 4000 8000 9000 20772; <span class="keyword">do</span></span><br><span class="line">  /mnt/c/Windows/system32/netsh.exe interface portproxy delete v4tov4 listenport=<span class="variable">$PORT</span></span><br><span class="line">  /mnt/c/Windows/system32/netsh.exe interface portproxy add    v4tov4 listenport=<span class="variable">$PORT</span> connectaddress=<span class="variable">$IP</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="sshd-の設定"><a href="#sshd-の設定" class="headerlink" title="sshd の設定"></a>sshd の設定</h4><ul>
<li>キーの作成<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> su</span><br><span class="line"><span class="comment"># ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key</span></span><br><span class="line"><span class="comment"># ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Windows-10-側の設定"><a href="#Windows-10-側の設定" class="headerlink" title="Windows 10 側の設定"></a>Windows 10 側の設定</h3><h4 id="WSL-のデフォルトを変更"><a href="#WSL-のデフォルトを変更" class="headerlink" title="WSL のデフォルトを変更"></a>WSL のデフォルトを変更</h4><ul>
<li>コマンドプロンプトでWSL のデフォルトをUbuntu に変更<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">wslconfig /list</span></span><br><span class="line">Linux 用 Windows サブシステム ディストリビューション:</span><br><span class="line">Ubuntu-18.04 (既定)</span><br><span class="line">Ubuntu</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">wslconfig /setdefault Ubuntu</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">wslconfig /list</span></span><br><span class="line">Ubuntu (既定)</span><br><span class="line">Ubuntu-18.04</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="タスクスケジューラの設定"><a href="#タスクスケジューラの設定" class="headerlink" title="タスクスケジューラの設定"></a>タスクスケジューラの設定</h4><ul>
<li>ポートフォワードの自動設定<br>名称: <code>wsl-portforward</code><br>プログラム: <code>wsl</code><br>引数: <code>-u root bash /home/ubuntu/bin/wsl-portforward.sh</code><br>権限昇格: あり</li>
<li>sshd の自動起動<br>名称: <code>wsl-sshd</code><br>プログラム: <code>wsl</code><br>引数: <code>-u root bash service ssh restart</code><br>権限昇格: あり</li>
<li>chinachu の自動起動<br>名称: <code>wsl-chinachu</code><br>プログラム: <code>wsl</code><br>引数: <code>-u root bash /home/ubuntu/bin/wsl-chinachu.sh</code><br>権限昇格: あり</li>
<li>docker の自動起動<br>名称: <code>wsl-docker</code><br>プログラム: <code>wsl</code><br>引数: <code>-u root -- /etc/init.d/docker start</code><br>権限昇格: あり</li>
</ul>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>Ray tracing in Nim on WSL</title>
    <url>/2020/07/02/Ray-tracing-in-Nim-on-WSL/</url>
    <content><![CDATA[<p><img src="/images/trace-of-radiance.png" alt="trace-of-radiance"><br><a href="https://nim-lang.org/blog/2020/06/30/ray-tracing-in-nim.html">https://nim-lang.org/blog/2020/06/30/ray-tracing-in-nim.html</a><br>WSL 上のNim 言語でレイトレースしてみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Insider Preview Build 20161<ul>
<li>WSL2 (Ubuntu 20.04 LTS)<ul>
<li>nim 1.2.4</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="WSL-側"><a href="#WSL-側" class="headerlink" title="WSL 側"></a>WSL 側</h4><ol>
<li>nim のインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl https://nim-lang.org/choosenim/init.sh -sSf | sh</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><figcaption><span>$HOME/.profile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/.nimble/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li>
<li>clang のインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install clang</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="Trace-of-Radiance"><a href="#Trace-of-Radiance" class="headerlink" title="Trace of Radiance"></a>Trace of Radiance</h4><p><a href="https://github.com/mratsim/trace-of-radiance">https://github.com/mratsim/trace-of-radiance</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/mratsim/trace-of-radiance</span><br><span class="line">$ <span class="built_in">cd</span> trace-of-radiance</span><br><span class="line">$ git checkout v0.1.0</span><br><span class="line">$ nim c -d:danger --outdir:build trace_of_radiance.nim</span><br><span class="line">$ ./build/trace_of_radiance &gt; image.ppm</span><br></pre></td></tr></table></figure>
<p><img src="/images/trace-of-radiance.png" alt="trace-of-radiance"></p>
<h4 id="SmallPT"><a href="#SmallPT" class="headerlink" title="SmallPT"></a>SmallPT</h4><p><a href="https://github.com/mratsim/weave/tree/master/demos/raytracing">https://github.com/mratsim/weave/tree/master/demos/raytracing</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/mratsim/weave</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> weave</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nimble install -y</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nim -v <span class="comment"># Ensure you have nim 1.2.0 or more recent</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nim c -d:danger --threads:on -o:build/ray_threaded demos/raytracing/smallpt.nim</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">nim c -d:danger --threads:off -o:build/ray_single demos/raytracing/smallpt.nim</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ -O3 -o build/ray_gcc_single demos/raytracing/smallpt.cpp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ -O3 -fopenmp -o build/ray_gcc_omp demos/raytracing/smallpt.cpp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">clang++ -O3 -o build/ray_clang_single demos/raytracing/smallpt.cpp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">clang++ -O3 -fopenmp -o build/ray_clang_omp demos/raytracing/smallpt.cpp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">Then run <span class="keyword">for</span> 300 samples with:</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">build/ray_single 300</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/weave.png" alt="weave"></p>
]]></content>
      <tags>
        <tag>nim</tag>
        <tag>raytrace</tag>
      </tags>
  </entry>
  <entry>
    <title>USB support to WSL2</title>
    <url>/2020/07/06/USB-support-to-WSL2/</url>
    <content><![CDATA[<p><a href="https://github.com/rpasek/usbip-wsl2-instructions">https://github.com/rpasek/usbip-wsl2-instructions</a><br><a href="https://github.com/cezanne/usbip-win">https://github.com/cezanne/usbip-win</a><br><a href="https://snowstar.org/2020/06/14/wsl2-usb-via-usbip/">https://snowstar.org/2020/06/14/wsl2-usb-via-usbip/</a><br>WSL のカーネルをカスタムしてUSB デバイスにアクセスしてみました。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -r -v</span><br><span class="line">4.19.104-microsoft-standard <span class="comment">#1 SMP Mon Jul 6 18:00:19 JST 2020</span></span><br><span class="line">$ lsusb</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>セキュアブート無効</li>
<li>Windows 10 Insider Preview Build 20161<ul>
<li>usbip-win 0.3.0</li>
<li>WSL2 (Ubuntu 20.04 LTS)</li>
</ul>
</li>
</ul>
<h3 id="構築-Windows-10"><a href="#構築-Windows-10" class="headerlink" title="構築(Windows 10)"></a>構築(Windows 10)</h3><h4 id="USBIP-WIN-のインストール"><a href="#USBIP-WIN-のインストール" class="headerlink" title="USBIP-WIN のインストール"></a>USBIP-WIN のインストール</h4><ol>
<li>ファイルのダウンロード<br>  <a href="https://github.com/cezanne/usbip-win/releases">https://github.com/cezanne/usbip-win/releases</a><br>  usbip-win 0.1.0 のAssets からダウンロード</li>
<li>証明書のインポート</li>
</ol>
<ul>
<li><code>usbip_test.pfx</code>をダブルクリック</li>
<li>パスワードは「usbip」</li>
<li>保存場所はローカルコンピュータ</li>
<li>以下の２つの証明書ストアに繰り返して配置<ul>
<li>信頼されたルート証明機関</li>
<li>信頼された発行元</li>
</ul>
</li>
</ul>
<ol start="3">
<li>テスト署名されたドライバーの読み込みの有効化  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">&gt;bcdedit.exe /<span class="keyword">set</span> TESTSIGNING <span class="keyword">ON</span></span><br></pre></td></tr></table></figure></li>
<li>以下のメッセージが表示された場合はセキュアブートの無効化を実行する。  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">要素データ設定中にエラーが発生しました。</span><br><span class="line">この値はセキュアブートポリシーによって保護されているため、変更 または削除できません。</span><br></pre></td></tr></table></figure></li>
<li>USB 一覧の表示と転送<br>  マスストレージデバイス(busid &#x3D; 1-112)の場合  <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&gt;usbip.<span class="keyword">exe</span> <span class="keyword">list</span> -<span class="keyword">l</span></span><br><span class="line">- busid <span class="number">1</span>-<span class="number">112</span> (<span class="number">0</span><span class="keyword">bd</span><span class="variable">a:0169</span>)</span><br><span class="line">  Realtek Semiconductor Corp. : Mass Storage Device (<span class="number">0</span><span class="keyword">bd</span><span class="variable">a:0169</span>)</span><br><span class="line">&gt;usbip.<span class="keyword">exe</span> bind -<span class="keyword">b</span> <span class="number">1</span>-<span class="number">112</span></span><br><span class="line">usbip: info: bind_device: bind device <span class="keyword">on</span> busid <span class="number">1</span>-<span class="number">112</span>: <span class="built_in">complete</span></span><br><span class="line">&gt; usbipd.<span class="keyword">exe</span> -d -<span class="number">4</span></span><br></pre></td></tr></table></figure></li>
<li>ファイアウォールの許可(TCP port 3240)の問い合わせがあったら許可する。</li>
</ol>
<h3 id="構築-WSL"><a href="#構築-WSL" class="headerlink" title="構築(WSL)"></a>構築(WSL)</h3><h4 id="カーネルのビルド"><a href="#カーネルのビルド" class="headerlink" title="カーネルのビルド"></a>カーネルのビルド</h4><ol>
<li>ビルド用パッケージのインストールと現在のカーネルバージョンの確認<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install build-essential flex bison libssl-dev libelf-dev libncurses-dev autoconf libudev-dev libtool</span><br><span class="line">$ <span class="built_in">uname</span> -r</span><br><span class="line">4.19.104-microsoft-standard</span><br></pre></td></tr></table></figure></li>
<li>カーネルのソースコード取得<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> git <span class="built_in">clone</span> https://github.com/microsoft/WSL2-Linux-Kernel.git /usr/src/4.19.104-microsoft-standard</span><br><span class="line">$ <span class="built_in">cd</span> /usr/src/4.19.104-microsoft-standard</span><br><span class="line">$ <span class="built_in">sudo</span> git checkout v4.19.104</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">cp</span> /proc/config.gz config.gz</span><br><span class="line">$ <span class="built_in">sudo</span> gunzip config.gz</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">mv</span> config .config</span><br><span class="line">$ <span class="built_in">sudo</span> make menuconfig</span><br></pre></td></tr></table></figure></li>
<li>オプション選択<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">Device Drivers<span class="punctuation">-&gt;</span>USB support[*]</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>USB support<span class="punctuation">-&gt;</span>Support <span class="keyword">for</span> <span class="title class_">Host</span>-side USB[M]</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>USB support<span class="punctuation">-&gt;</span>Enable USB persist by default[*]</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>USB support<span class="punctuation">-&gt;</span>USB <span class="title function_ invoke__">Modem</span> (CDC ACM) support[M]</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>USB support<span class="punctuation">-&gt;</span>USB Mass Storage support[M]</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>USB support<span class="punctuation">-&gt;</span>USB/IP support[M]</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>USB support<span class="punctuation">-&gt;</span>VHCI hcd[M]</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>USB support<span class="punctuation">-&gt;</span>VHCI hcd<span class="punctuation">-&gt;</span>Number of ports per USB/IP <span class="keyword">virtual</span> host <span class="title function_ invoke__">controller</span>(<span class="number">8</span>)</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>USB support<span class="punctuation">-&gt;</span>VHCI hcd<span class="punctuation">-&gt;</span>Number of USB/IP <span class="keyword">virtual</span> host <span class="title function_ invoke__">controllers</span>(<span class="number">1</span>)</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>USB support<span class="punctuation">-&gt;</span>USB Serial Converter support[M]</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>USB support<span class="punctuation">-&gt;</span>USB Serial Converter support<span class="punctuation">-&gt;</span>USB FTDI Single Port Serial Driver[M]</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>USB support<span class="punctuation">-&gt;</span>USB Physical Layer drivers<span class="punctuation">-&gt;</span>NOP USB Transceiver Driver[M]</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>Network device support<span class="punctuation">-&gt;</span>USB Network Adapters[M]</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>Network device support<span class="punctuation">-&gt;</span>USB Network Adapters<span class="punctuation">-&gt;</span>[Deselect everything you don<span class="symbol">&#x27;t</span> care about]</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>Network device support<span class="punctuation">-&gt;</span>USB Network Adapters<span class="punctuation">-&gt;</span>Multi-purpose USB Networking Framework[M]</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>Network device support<span class="punctuation">-&gt;</span>USB Network Adapters<span class="punctuation">-&gt;</span>CDC Ethernet <span class="title function_ invoke__">support</span> (smart devices such <span class="keyword">as</span> cable modems)[M]</span><br><span class="line">Device Drivers<span class="punctuation">-&gt;</span>Network device support<span class="punctuation">-&gt;</span>USB Network Adapters<span class="punctuation">-&gt;</span>Multi-purpose USB Networking Framework<span class="punctuation">-&gt;</span>Host <span class="keyword">for</span> <span class="title class_">RNDIS</span> and ActiveSync devices[M]</span><br></pre></td></tr></table></figure></li>
<li>ビルド(6 多重で実行)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> make -j 6 &amp;&amp; <span class="built_in">sudo</span> make modules_install -j 6 &amp;&amp; <span class="built_in">sudo</span> make install -j 6</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> tools/usb/usbip</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> ./autogen.sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> ./configure</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> sed <span class="string">&#x27;s/-Werror//g&#x27;</span> -i Makefile</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> sed <span class="string">&#x27;s/-Werror//g&#x27;</span> -i src/Makefile</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> sed <span class="string">&#x27;s/-Werror//g&#x27;</span> -i libsrc/Makefile</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> make install -j 6</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">cp</span> libsrc/.libs/libusbip.so.0 /lib/libusbip.so.0</span></span><br></pre></td></tr></table></figure></li>
<li>USB 有効化スクリプトの作成<figure class="highlight bash"><figcaption><span>$HOME/startusb.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sudo</span> modprobe usbcore</span><br><span class="line"><span class="built_in">sudo</span> modprobe usb-common</span><br><span class="line"><span class="built_in">sudo</span> modprobe hid-generic</span><br><span class="line"><span class="built_in">sudo</span> modprobe hid</span><br><span class="line"><span class="built_in">sudo</span> modprobe usbnet</span><br><span class="line"><span class="built_in">sudo</span> modprobe cdc_ether</span><br><span class="line"><span class="built_in">sudo</span> modprobe rndis_host</span><br><span class="line"><span class="built_in">sudo</span> modprobe usbserial</span><br><span class="line"><span class="built_in">sudo</span> modprobe usb-storage</span><br><span class="line"><span class="built_in">sudo</span> modprobe cdc-acm</span><br><span class="line"><span class="built_in">sudo</span> modprobe ftdi_sio</span><br><span class="line"><span class="built_in">sudo</span> modprobe usbip-core</span><br><span class="line"><span class="built_in">sudo</span> modprobe vhci-hcd</span><br><span class="line"><span class="built_in">echo</span> $(<span class="built_in">cat</span> /etc/resolv.conf | grep nameserver | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>実行権限付与<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chmod</span> +x startusb.sh</span><br></pre></td></tr></table></figure></li>
<li>カーネルのコピー<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /usr/src/4.19.104-microsoft-standard/vmlinux /mnt/c/Users/&lt;username&gt;/</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="構築-Windows-10-1"><a href="#構築-Windows-10-1" class="headerlink" title="構築(Windows 10)"></a>構築(Windows 10)</h3><h4 id="WSL-のカーネルファイル指定"><a href="#WSL-のカーネルファイル指定" class="headerlink" title="WSL のカーネルファイル指定"></a>WSL のカーネルファイル指定</h4><ol>
<li>WSL のカーネル指定<figure class="highlight ini"><figcaption><span>C:\Users\ユーザ名\.wslconfig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[WSL2]</span></span><br><span class="line"><span class="attr">kernel</span>=C:\\Users\\&lt;username&gt;\\vmlinux</span><br></pre></td></tr></table></figure></li>
<li>WSL のシャットダウン(再起動)<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&gt;wsl <span class="comment">--shutdown</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="構築-WSL-1"><a href="#構築-WSL-1" class="headerlink" title="構築(WSL)"></a>構築(WSL)</h3><h4 id="カーネルの確認とUSB-アクセス"><a href="#カーネルの確認とUSB-アクセス" class="headerlink" title="カーネルの確認とUSB アクセス"></a>カーネルの確認とUSB アクセス</h4><ol>
<li>カーネルの確認とUSB デバイスの参照<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -r -v</span><br><span class="line">4.19.104-microsoft-standard <span class="comment">#1 SMP Mon Jul 6 18:00:19 JST 2020</span></span><br><span class="line">$ ./startusb.sh</span><br><span class="line">$ <span class="built_in">sudo</span> usbip attach --remote=192.168.11.2 --busid=1-112</span><br><span class="line">$ <span class="built_in">sudo</span> dmesg</span><br><span class="line">$ lsusb</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>wsl</tag>
        <tag>usb</tag>
      </tags>
  </entry>
  <entry>
    <title>SheetUI</title>
    <url>/2020/07/10/SheetUI/</url>
    <content><![CDATA[<p><img src="/images/sheetui.png" alt="sheetui"><br><a href="https://sheetui.com/">https://sheetui.com/</a><br>SheetUI でGoogle スプレッドシートのデータをWeb ページで可視化してみました。<br>ARMORY ボタンでBlizzard の各キャラクタのページに遷移します。<br>GUIDE ボタンで各キャラクタのクラス&#x2F;スペックに応じたWowHead ガイドに遷移します。</p>
<span id="more"></span>

<h3 id="Google-スプレッドシートの準備"><a href="#Google-スプレッドシートの準備" class="headerlink" title="Google スプレッドシートの準備"></a>Google スプレッドシートの準備</h3><ol>
<li>Chrome のツールバーの「アプリ」を選択</li>
<li>「スプレッドシート」を開く</li>
<li>新しいスプレッドシートを作成「空白」を選択</li>
<li>データの登録</li>
</ol>
  <div id="googleChart9713"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.Table(document.getElementById("googleChart9713"))).draw(google.visualization.arrayToDataTable([['カラム', '1行目', '2行目以降の内容例'],['A', 'region',  'us'],['B', 'id1', '111 (Armory のページソースから `111/222222-main.jpg` を抽出)'],['C', 'id2', '222222 (Armory のページソースから `111/222222-main.jpg` を抽出)'],['D', 'realm', 'Blackrock'],['E', 'faction', 'Horde'],['F', 'name', 'Name01'],['G', 'race', 'vulpera'],['H', 'gender', 'male'],['I', 'class', 'Priest'],['J', 'title', 'the Explorer'],['K', 'spec', 'Shadow'],['L', 'guild', 'guild01'],['M', 'level', '120'],['N', 'achievement', '10000'],['O', 'ilevel', '433'],['P', 'url_profile', '="https://worldofwarcraft.com/en-us/character/"&A2&"/"&D2&"/"&F2'],['Q', 'url_avator', '="https://render-"&A2&".worldofwarcraft.com/character/"&LOWER(D2)&"/"&B2&"/"&C2&"-avatar.jpg"'],['R', 'url_inset', '="https://render-"&A2&".worldofwarcraft.com/character/"&LOWER(D2)&"/"&B2&"/"&C2&"-inset.jpg"'],['S', 'url_main', '="https://render-"&A2&".worldofwarcraft.com/character/"&LOWER(D2)&"/"&B2&"/"&C2&"-main.jpg"'],['T', 'url_wowhead', '="https://www.wowhead.com/"&SUBSTITUTE(K2, " ", "-")&"-"&SUBSTITUTE(I2, " ", "-")&"-guide"']]),{"title":"No title","width":"100%","height":"100%"});
      });
    })();
  }
</script>

<ol start="5">
<li>[ファイル]-[ウェブに公開] を選択</li>
<li>[公開] を選択</li>
<li>ブラウザのアドレスバーからURL をコピー</li>
</ol>
<h3 id="SheetUI-の操作"><a href="#SheetUI-の操作" class="headerlink" title="SheetUI の操作"></a>SheetUI の操作</h3><ol>
<li><a href="https://sheetui.com/">https://sheetui.com/</a></li>
<li><code>Try It!</code> を選択</li>
<li>Google スプレッドシートのURL を貼り付け</li>
<li>Customize UI の設定</li>
</ol>
  <div id="googleChart4101"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.Table(document.getElementById("googleChart4101"))).draw(google.visualization.arrayToDataTable([['項目', '値'],['Page Title',  'Champions'],['Page Description', 'from World of Warcraft Armory'],['Select Container', 'Responsive Grid を選択'],['Select Item', 'Media Card を選択']]),{"title":"No title","width":"100%","height":"100%"});
      });
    })();
  }
</script>

<ol start="5">
<li>Configure Content の設定</li>
</ol>
  <div id="googleChart2438"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.Table(document.getElementById("googleChart2438"))).draw(google.visualization.arrayToDataTable([['カテゴリ', '項目', '値'],['Image', 'Source', '\{\{url_inset}}'],['', 'Title', ''],['', 'Image Height', '250'],['Title',  'Title',  '\{\{name}}'],['Description', 'Description', '\{\{level}} \{\{race}} \{\{spec}} \{\{class}} <\{\{guild}}> \{\{realm}}'],['Primary Button', 'Caption', 'ARMORY'],['', 'Link', '\{\{url_profile}}'],['Secondary Button', 'Caption', 'GUIDE'],['', 'Link', '\{\{url_wowhead}}']]),{"title":"No title","width":"100%","height":"100%"});
      });
    })();
  }
</script>

<ol start="6">
<li>FINISH 押下後に表示されるURL をクリック</li>
</ol>
]]></content>
      <tags>
        <tag>wow</tag>
        <tag>sheetui</tag>
      </tags>
  </entry>
  <entry>
    <title>EPGStation/Mirakurun on WSL</title>
    <url>/2020/07/12/EPGStation-on-WSL/</url>
    <content><![CDATA[<p><img src="/images/epgstation.drawio.svg" alt="epgstation とりあえず版"><br><a href="https://github.com/l3tnun/EPGStation">https://github.com/l3tnun/EPGStation</a><br><a href="https://github.com/Chinachu/Mirakurun">https://github.com/Chinachu/Mirakurun</a><br>Chianchu の調子が悪くなったのでEPGStation に乗り換えてみました。<br>EPGStation とMirakurun をWSL 上に構築しました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li><p>ソフトウェア構成</p>
<ul>
<li>Windows 10 Insider Preview build 20161<ul>
<li>WSL (Ubuntu 20.04 LTS)<ul>
<li>node v14.4.0<ul>
<li>EPGStation 1.7.0</li>
<li>Mirakurun 3.2.0</li>
</ul>
</li>
<li>npm 6.14.5</li>
<li>pm2 4.4.0</li>
<li>ffmpeg 4.2.2</li>
<li>python 2.7.18rc1</li>
<li>gcc 9.3.0</li>
</ul>
</li>
<li>BonRecTest 1.0.0</li>
<li>Kodi 18.6<ul>
<li>PVR IPTV Simple Client 3.9.8</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>ディレクトリ配置</p>
<div id="googleChart1815"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.Table(document.getElementById("googleChart1815"))).draw(google.visualization.arrayToDataTable([['環境', '項目', 'パス'],['WSL (Ubuntu)', 'mirakurun コマンド', '/usr/loca/bin/mirakurun'],['', 'mirakurun 設定', '/usr/local/etc/mirakurun/'],['', 'mirakurun ログ', '/usr/local/var/log/'],['', 'mirakurun データ', '/usr/local/var/db/mirakurun/'],['', 'mirakurun プロセス', '/usr/local/var/run/'],['', 'EPGStation 環境', '$HOME/EPGStation/'],['', 'EPGStation の設定', '$HOME/EPGStation/config/'],['', 'EPGStation の録画保存先', '/mnt/j/home/epgstation/'],['', 'シェルスクリプト', '$HOME/bin/'],['Windows 10', 'BonRecTest', 'C:\\tools\\PT3\\']]),{"title":"No title","width":"100%","height":"100%"});
      });
    })();
  }
</script></li>
</ul>
<h3 id="Mirakurun-の構築-WSL"><a href="#Mirakurun-の構築-WSL" class="headerlink" title="Mirakurun の構築 (WSL)"></a>Mirakurun の構築 (WSL)</h3><ol>
<li><p>Mirakurun のインストール</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> npm install mirakurun@latest -g  --unsafe --production</span><br><span class="line">$ <span class="built_in">sudo</span> mirakurun init</span><br></pre></td></tr></table></figure>
</li>
<li><p>チューナの設定</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> mirakurun config tuners</span><br></pre></td></tr></table></figure>
  <figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">- <span class="params">name:</span> PT3-T1</span><br><span class="line">  <span class="params">types:</span></span><br><span class="line">    <span class="operator">-</span> GR</span><br><span class="line">  <span class="params">command:</span> <span class="symbol">/mnt/c/Windows/System32/lxss/tools/init</span> <span class="symbol">/mnt/c/tools/PT3/BonRecTest.exe</span> <span class="operator">-</span>-decoder B25Decoder.dll <span class="operator">-</span>-driver BonDriver_PT3-T0.dll <span class="operator">-</span>-output <span class="operator">-</span> <span class="operator">-</span>-channel <span class="symbol">&lt;channel&gt;</span></span><br><span class="line">  <span class="params">decoder:</span> ~</span><br><span class="line">  <span class="params">isDisabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> <span class="params">name:</span> PT3-T2</span><br><span class="line">  <span class="params">types:</span></span><br><span class="line">    <span class="operator">-</span> GR</span><br><span class="line">  <span class="params">command:</span> <span class="symbol">/mnt/c/Windows/System32/lxss/tools/init</span> <span class="symbol">/mnt/c/tools/PT3/BonRecTest.exe</span> <span class="operator">-</span>-decoder B25Decoder.dll <span class="operator">-</span>-driver BonDriver_PT3-T1.dll <span class="operator">-</span>-output <span class="operator">-</span> <span class="operator">-</span>-channel <span class="symbol">&lt;channel&gt;</span></span><br><span class="line">  <span class="params">decoder:</span> ~</span><br><span class="line">  <span class="params">isDisabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>  💡 WSL からWindows のコマンドを<code>/mnt/c/Windows/System32/lxss/tools/init</code>で起動</p>
</li>
<li><p>チャンネルの設定</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> mirakurun config channels</span><br></pre></td></tr></table></figure>
  <figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">name: ＴＯＫＹＯ　ＭＸ</span></span><br><span class="line">  <span class="attribute">type</span><span class="punctuation">:</span> <span class="string">GR</span></span><br><span class="line">  <span class="attribute">channel</span><span class="punctuation">:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="string">name: フジテレビ</span></span><br><span class="line">  <span class="attribute">type</span><span class="punctuation">:</span> <span class="string">GR</span></span><br><span class="line">  <span class="attribute">channel</span><span class="punctuation">:</span> <span class="string">&#x27;8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="string">name: ＴＢＳ</span></span><br><span class="line">  <span class="attribute">type</span><span class="punctuation">:</span> <span class="string">GR</span></span><br><span class="line">  <span class="attribute">channel</span><span class="punctuation">:</span> <span class="string">&#x27;9</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="string">name: テレビ東京</span></span><br><span class="line">  <span class="attribute">type</span><span class="punctuation">:</span> <span class="string">GR</span></span><br><span class="line">  <span class="attribute">channel</span><span class="punctuation">:</span> <span class="string">&#x27;10&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="string">name: テレビ朝日</span></span><br><span class="line">  <span class="attribute">type</span><span class="punctuation">:</span> <span class="string">GR</span></span><br><span class="line">  <span class="attribute">channel</span><span class="punctuation">:</span> <span class="string">&#x27;11&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="string">name: 日テレ</span></span><br><span class="line">  <span class="attribute">type</span><span class="punctuation">:</span> <span class="string">GR</span></span><br><span class="line">  <span class="attribute">channel</span><span class="punctuation">:</span> <span class="string">&#x27;12&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="string">name: ＮＨＫＥテレ・東京</span></span><br><span class="line">  <span class="attribute">type</span><span class="punctuation">:</span> <span class="string">GR</span></span><br><span class="line">  <span class="attribute">channel</span><span class="punctuation">:</span> <span class="string">&#x27;13&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="string">name: ＮＨＫ総合・東京</span></span><br><span class="line">  <span class="attribute">type</span><span class="punctuation">:</span> <span class="string">GR</span></span><br><span class="line">  <span class="attribute">channel</span><span class="punctuation">:</span> <span class="string">&#x27;14&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>ログローテーションの設定</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> pm2 install pm2-logrotate</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><figcaption><span>/etc/logrotate.d/mirakurun</span></figcaption><table><tr><td class="code"><pre><span class="line">/usr/local/var/log/mirakurun.stdout.log</span><br><span class="line">/usr/local/var/log/mirakurun.stderr.log</span><br><span class="line">/&#123;</span><br><span class="line">  daily</span><br><span class="line">  compress</span><br><span class="line">  rotate 7</span><br><span class="line">  missingok</span><br><span class="line">  notifempty</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="EPGStation-の構築-WSL"><a href="#EPGStation-の構築-WSL" class="headerlink" title="EPGStation の構築 (WSL)"></a>EPGStation の構築 (WSL)</h3><ol>
<li>前提パッケージの確認<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node --version</span><br><span class="line">$ ffmpeg -version</span><br><span class="line">$ <span class="built_in">which</span> ffmpeg</span><br><span class="line">$ python --version</span><br><span class="line">$ gcc --version</span><br></pre></td></tr></table></figure></li>
<li>EPGStation のインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/l3tnun/EPGStation.git</span><br><span class="line">$ <span class="built_in">cd</span> EPGStation</span><br><span class="line">$ npm install --no-save</span><br><span class="line">$ npm run build</span><br></pre></td></tr></table></figure></li>
<li>EPGStation の設定ファイルの作成  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> config/config.sample.json config/config.json</span><br><span class="line">$ <span class="built_in">cp</span> config/operatorLogConfig.sample.json config/operatorLogConfig.json</span><br><span class="line">$ <span class="built_in">cp</span> config/serviceLogConfig.sample.json config/serviceLogConfig.json</span><br></pre></td></tr></table></figure></li>
<li>EPGStation の設定<br>  💡 <a href="https://github.com/l3tnun/EPGStation/blob/master/doc/conf-manual.md">https://github.com/l3tnun/EPGStation/blob/master/doc/conf-manual.md</a>  <figure class="highlight json"><figcaption><span>$HOME/EPGStation/config/config.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;ffmpeg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/ffmpeg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ffprobe&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/ffprobe&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight json"><figcaption><span>$HOME/EPGStation/config/config.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;recorded&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/mnt/j/home/epgstation&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;recordedTemp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/mnt/j/home/epgstation/temp&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
<li>PM2 ecosystem.config.js ファイルの作成<figure class="highlight js"><figcaption><span>$HOME/EPGStation/ecosystem.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  apps : [&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;epgstation&quot;</span>,</span><br><span class="line">    <span class="attr">script</span>: <span class="string">&#x27;dist/server/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">cwd</span>: <span class="string">&quot;/home/ubuntu/EPGStation&quot;</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="ポートフォワード設定の追加-WSL"><a href="#ポートフォワード設定の追加-WSL" class="headerlink" title="ポートフォワード設定の追加 (WSL)"></a>ポートフォワード設定の追加 (WSL)</h3><ol>
<li>8888 (EPGStation), 40772 (Mirakurun) をWSL に転送  <figure class="highlight bash"><figcaption><span>$HOME/bin/wsl-portforward.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">IP=$(ip -f inet -o addr show eth0 | <span class="built_in">cut</span> -d\  -f 7 | <span class="built_in">cut</span> -d/ -f 1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> PORT <span class="keyword">in</span> 22 4000 8000 8888 9000 40772; <span class="keyword">do</span></span><br><span class="line">  /mnt/c/Windows/system32/netsh.exe interface portproxy delete v4tov4 listenport=<span class="variable">$PORT</span></span><br><span class="line">  /mnt/c/Windows/system32/netsh.exe interface portproxy add    v4tov4 listenport=<span class="variable">$PORT</span> connectaddress=<span class="variable">$IP</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="起動処理-Windows-10"><a href="#起動処理-Windows-10" class="headerlink" title="起動処理 (Windows 10)"></a>起動処理 (Windows 10)</h3><ol>
<li><p>非表示で実行するためのランチャの作成</p>
  <figure class="highlight vbscript"><figcaption><span>C:\tools\launcher\silentLauncher.vbs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">ReDim</span> arr(WScript.Arguments.Count<span class="number">-1</span>) </span><br><span class="line"><span class="keyword">For</span> i = <span class="number">0</span> <span class="keyword">To</span> WScript.Arguments.Count<span class="number">-1</span> </span><br><span class="line">    arr(i) = WScript.Arguments(i) </span><br><span class="line"><span class="keyword">Next</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">CreateObject</span>(<span class="string">&quot;WScript.Shell&quot;</span>).Run <span class="built_in">Join</span>(arr) , <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>タスクスケジューラ(taskschd.msc)で自動起動するように設定</p>
  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cscript C:\tools\launcher\silentLauncher.vbs wsl -u root bash <span class="regexp">/home/u</span>buntu<span class="regexp">/bin/</span>wsl-portforward.sh</span><br></pre></td></tr></table></figure>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">cscript C:\tools\launcher\silentLauncher.vbs wsl -u root mirakurun <span class="keyword">init</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">cscript C:\tools\launcher\silentLauncher.vbs wsl -u ubuntu pm2 start /home/ubuntu/EPGStation/ecosystem.config.js</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Windows-ファイアウォールの設定-Windows-10"><a href="#Windows-ファイアウォールの設定-Windows-10" class="headerlink" title="Windows ファイアウォールの設定 (Windows 10)"></a>Windows ファイアウォールの設定 (Windows 10)</h3><ol>
<li>ポート開放</li>
</ol>
<ul>
<li>8888 (EPGStation)</li>
<li>40772 (Mirakurun) オプション</li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ol>
<li>Mirakurun の動作確認<br>  <code>http://192.168.11.2:40772</code></li>
<li>EPGStation にアクセス<br>  <code>http://192.168.11.2:8888</code></li>
<li>ライブ視聴は「GR」→ 局名 →「視聴」を選択して、VLC やMX Player MX Player 等で開く</li>
</ol>
<h3 id="Kodi-でライブ視聴"><a href="#Kodi-でライブ視聴" class="headerlink" title="Kodi でライブ視聴"></a>Kodi でライブ視聴</h3><p><a href="https://github.com/l3tnun/EPGStation/blob/master/doc/kodi.md">https://github.com/l3tnun/EPGStation/blob/master/doc/kodi.md</a></p>
<ol>
<li>アドオンをインストール<br>  「アドオン」→「ダウンロード」→「PVRクライアント」→「PVR IPTV Simple Client」</li>
<li>インストールが完了したら「C」キーを押下して、コンテキストメニューから「設定」を選択</li>
<li>一般 &#x2F; M3U プレイリストのURL<br>  <code>http://host:port/api/iptv/channel.m3u8?mode=2</code></li>
<li>EPG 設定 &#x2F; M3U プレイリストのURL<br>  <code>http://host:port/api/iptv/epg.xml?days=3</code></li>
<li>Kodi を再起動</li>
<li>「TV」メニューから視聴</li>
</ol>
]]></content>
      <tags>
        <tag>mirakurun</tag>
        <tag>wsl</tag>
        <tag>epgstation</tag>
      </tags>
  </entry>
  <entry>
    <title>Enabling sound in WSL</title>
    <url>/2020/08/01/Enabling-sound-in-WSL/</url>
    <content><![CDATA[<p><img src="/images/moc-on-wsl2.png" alt="moc-on-wsl2"><br><a href="https://x410.dev/cookbook/wsl/enabling-sound-in-wsl-ubuntu-let-it-sing/">https://x410.dev/cookbook/wsl/enabling-sound-in-wsl-ubuntu-let-it-sing/</a><br><a href="https://www.freedesktop.org/wiki/Software/PulseAudio/Ports/Windows/Support/">https://www.freedesktop.org/wiki/Software/PulseAudio/Ports/Windows/Support/</a></p>
<p>PulseAudio を使ってWSL2 上でサウンドを再生できるようにしてみました。<br>Extraterm 上でMOC(Music on Console) を利用してみました。<br>Visual Studio Code のターミナルでも実行できます。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Insider Preview Build 20180 [IP: 192.168.11.2]<ul>
<li>PulseAudio for Windows 1.1</li>
<li>WSL2 (Ubuntu)<ul>
<li>pulseaudio 13.99.1</li>
<li>moc 2.6-alpha3 (Theme: transparent-background)</li>
</ul>
</li>
<li>Extraterm 0.52.0 (Theme: Extraterm Default)</li>
</ul>
</li>
</ul>
<h3 id="構築-Windows-10-側"><a href="#構築-Windows-10-側" class="headerlink" title="構築 (Windows 10 側)"></a>構築 (Windows 10 側)</h3><ol>
<li>PulseAudio for Windows のダウンロードと展開<br>  <a href="https://www.freedesktop.org/wiki/Software/PulseAudio/Ports/Windows/Support/">https://www.freedesktop.org/wiki/Software/PulseAudio/Ports/Windows/Support/</a></li>
<li>PulseAudio の設定  <figure class="highlight text"><figcaption><span>C:\tools\pulseaudio\etc\pulse\default.pa</span></figcaption><table><tr><td class="code"><pre><span class="line">#load-module module-native-protocol-tcp</span><br><span class="line">load-module module-native-protocol-tcp auth-anonymous=1</span><br></pre></td></tr></table></figure>
  <figure class="highlight text"><figcaption><span>C:\tools\pulseaudio\etc\pulse\default.pa</span></figcaption><table><tr><td class="code"><pre><span class="line">#load-module module-waveout sink_name=output source_name=input</span><br><span class="line">load-module module-waveout sink_name=output source_name=input record=0</span><br></pre></td></tr></table></figure>
  <figure class="highlight text"><figcaption><span>C:\tools\pulseaudio\etc\pulse\daemon.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">; exit-idle-time = 20</span><br><span class="line">exit-idle-time = -1</span><br></pre></td></tr></table></figure></li>
<li>PulseAudio for Window の実行  <figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">C:\tools\pulseaudio\bin&gt;pulseaudio.exe</span><br><span class="line">W: [(<span class="literal">null</span>)] pulsecore/core-util.c: Secure <span class="built_in">directory</span> creation <span class="keyword">not</span> supported <span class="keyword">on</span> <span class="title">Win32</span>.</span><br><span class="line">W: [(<span class="literal">null</span>)] pulsecore/core-util.c: Secure <span class="built_in">directory</span> creation <span class="keyword">not</span> supported <span class="keyword">on</span> <span class="title">Win32</span>.</span><br><span class="line">W: [(<span class="literal">null</span>)] pulsecore/core-util.c: Secure <span class="built_in">directory</span> creation <span class="keyword">not</span> supported <span class="keyword">on</span> <span class="title">Win32</span>.</span><br><span class="line">W: [(<span class="literal">null</span>)] pulsecore/pid.c: Stale PID <span class="built_in">file</span>, overwriting.</span><br><span class="line">W: [(<span class="literal">null</span>)] pulsecore/core.c: failed <span class="built_in">to</span> allocate shared memory pool. Falling back <span class="built_in">to</span> <span class="keyword">a</span> <span class="keyword">normal</span> memory pool.</span><br><span class="line">W: [(<span class="literal">null</span>)] pulsecore/core-util.c: Secure <span class="built_in">directory</span> creation <span class="keyword">not</span> supported <span class="keyword">on</span> <span class="title">Win32</span>.</span><br><span class="line">W: [(<span class="literal">null</span>)] pulsecore/core-util.c: Secure <span class="built_in">directory</span> creation <span class="keyword">not</span> supported <span class="keyword">on</span> <span class="title">Win32</span>.</span><br><span class="line">W: [(<span class="literal">null</span>)] pulsecore/core-util.c: Secure <span class="built_in">directory</span> creation <span class="keyword">not</span> supported <span class="keyword">on</span> <span class="title">Win32</span>.</span><br><span class="line">E: [(<span class="literal">null</span>)] daemon/main.c: Failed <span class="built_in">to</span> <span class="built_in">load</span> <span class="built_in">directory</span>.</span><br></pre></td></tr></table></figure>
  一度、<code>pulseaudio.exe -D</code>を実行した方がよいかもしれません。<br>  試しに<code>http://192.168.11.2:4317</code>にアクセスするとログが追記されます。</li>
<li>Windows ファイアウォールの許可要求に対して許可する</li>
</ol>
<h3 id="構築-WSL-側"><a href="#構築-WSL-側" class="headerlink" title="構築 (WSL 側)"></a>構築 (WSL 側)</h3><ol>
<li>パッケージのインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install pulseaudio libasound2-plugins moc moc-ffmpeg-plugin</span><br></pre></td></tr></table></figure></li>
<li>PulseAudio の設定  <figure class="highlight text"><figcaption><span>/etc/pulse/default.pa</span></figcaption><table><tr><td class="code"><pre><span class="line">#load-module module-native-protocol-tcp</span><br><span class="line">load-module module-native-protocol-tcp</span><br></pre></td></tr></table></figure>
  <figure class="highlight text"><figcaption><span>/etc/pulse/client.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">; default-server =</span><br><span class="line">default-server = tcp:192.168.11.2</span><br></pre></td></tr></table></figure></li>
<li>ALSA の設定  <figure class="highlight text"><figcaption><span>/etc/asound.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">pcm.!default &#123;</span><br><span class="line">    type pulse</span><br><span class="line">    # If defaults.namehint.showall is set to off in alsa.conf, then this is</span><br><span class="line">    # necessary to make this pcm show up in the list returned by</span><br><span class="line">    # snd_device_name_hint or aplay -L</span><br><span class="line">    hint.description &quot;Default Audio Device&quot;</span><br><span class="line">&#125;</span><br><span class="line">ctl.!default &#123;</span><br><span class="line">    type pulse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="実行-Windows-10-側"><a href="#実行-Windows-10-側" class="headerlink" title="実行 (Windows 10 側)"></a>実行 (Windows 10 側)</h3><ol>
<li>タスクスケジューラでログイン時に実行  <figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="built_in">C</span><span class="operator">:</span>\<span class="variable">tools</span>\<span class="variable">pulseaudio</span>\<span class="variable">bin</span>\<span class="variable">pulseaudio</span><span class="operator">.</span><span class="variable">exe</span> <span class="operator">-</span><span class="built_in">D</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="利用-WSL-側"><a href="#利用-WSL-側" class="headerlink" title="利用 (WSL 側)"></a>利用 (WSL 側)</h3><ol>
<li>Moc の実行  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocp</span><br></pre></td></tr></table></figure>
  Moc の使い方は<br>  <a href="https://ktkr3d.github.io/2012/05/31/moc-music-on-console/">https://ktkr3d.github.io/2012/05/31/moc-music-on-console/</a></li>
</ol>
]]></content>
      <tags>
        <tag>moc</tag>
        <tag>wsl</tag>
        <tag>pulseaudio</tag>
      </tags>
  </entry>
  <entry>
    <title>EPGStation PVR addon for Kodi</title>
    <url>/2020/08/02/EPGStation-PVR-addon-for-Kodi/</url>
    <content><![CDATA[<p><img src="/images/kodi_pvr_epgstation_android.jpg" alt="kodi_pvr_epgstation_android"><br><a href="https://github.com/Harekaze/pvr.epgstation">https://github.com/Harekaze/pvr.epgstation</a></p>
<p>EPGStation 用のKodi PVR クライントがリリースされていたのでWindows 10 とAndroid の環境で利用してみました。とても便利ですね。<br>また、Android NDK の環境をWSL 上に構築してAndroid 版をビルドしてみました。</p>
<h4 id="2020-08-11-追記"><a href="#2020-08-11-追記" class="headerlink" title="2020-08-11 追記"></a>2020-08-11 追記</h4><p>README.md に記載のとおりVisual Studio 2019 で開発されています。<br>Windows 10 64bit の場合、Kodi 64bit の他にMSVC ラインタイム(vc_redist.x64.exe)をインストールしないといけないようです。</p>
<ul>
<li>エラーログ抜粋(MSVC ラインタイムをインストールしていない環境)<figure class="highlight text"><figcaption><span>%APPDATA%\Kodi\kodi.log</span></figcaption><table><tr><td class="code"><pre><span class="line">ERROR: Win32DllLoader::Load: Failed to load &quot;C:\Users\&lt;user_name&gt;\AppData\Roaming\Kodi\addons\pvr.epgstation\pvr.epgstation.dll&quot; with error 126: &quot;The specified module could not be found.</span><br></pre></td></tr></table></figure></li>
<li>利用しているDLL<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;cd %APPDATA%</span><br><span class="line"></span><br><span class="line">&gt;dumpbin.exe /IMPORTS Kodi\addons\pvr.epgstation\pvr.epgstation.dll | find &quot;.dll&quot;</span><br><span class="line">Dump of file Kodi\addons\pvr.epgstation\pvr.epgstation.dll</span><br><span class="line">    KERNEL32.dll</span><br><span class="line">    MSVCP140.dll</span><br><span class="line">    VCRUNTIME140_1.dll</span><br><span class="line">    VCRUNTIME140.dll</span><br><span class="line">    api-ms-win-crt-stdio-l1-1-0.dll</span><br><span class="line">    api-ms-win-crt-string-l1-1-0.dll</span><br><span class="line">    api-ms-win-crt-runtime-l1-1-0.dll</span><br><span class="line">    api-ms-win-crt-time-l1-1-0.dll</span><br><span class="line">    api-ms-win-crt-convert-l1-1-0.dll</span><br><span class="line">    api-ms-win-crt-heap-l1-1-0.dll</span><br><span class="line">    api-ms-win-crt-math-l1-1-0.dll</span><br><span class="line">    api-ms-win-crt-locale-l1-1-0.dll</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Insider Preview Build 21080<ul>
<li>Kodi 18.8 (64bit)<ul>
<li>Harekaze2 for Kodi&#x2F;XBMC Release v0.0.5</li>
</ul>
</li>
<li>WSL (Ubuntu)<ul>
<li>openjdk 11.0.8</li>
<li>sdkmanager 4.0.1</li>
<li>ndk 21.3.6528147</li>
</ul>
</li>
</ul>
</li>
<li>Android バージョン9 (arm64-v8a)<ul>
<li>Kodi 18.7<ul>
<li>Harekaze2 for Kodi&#x2F;XBMC Release v0.0.5</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="/images/epgstation_harekaze2.drawio.svg" alt="epgstation_harekaze2"></p>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>PVR クライアントのダウンロード<br>  <a href="https://github.com/Harekaze/pvr.epgstation/releases">https://github.com/Harekaze/pvr.epgstation/releases</a><br>  pvr.epgstation.multiarch-0.0.5.zip</li>
<li>PVR クライアントのインストール<br>  「⚙️(システム)」→「アドオン」→「zipファイルからインストール」</li>
<li>PVR クライアントの設定<br>  「⚙️(システム)」→「アドオン」→「My アドオン」→「PVR クライアント」→「Harekaze (EPGStation PVR CLient)」→「設定」</li>
</ol>
<table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">項目</th>
<th align="left">設定値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">基本</td>
<td align="left">EPGStation WUI のURL</td>
<td align="left"><a href="http://192.168.11.2:8888/">http://192.168.11.2:8888/</a></td>
</tr>
<tr>
<td align="left">ストリーミング</td>
<td align="left">ライブ視聴エンコードモード</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">録画</td>
<td align="left">エンコード済みのメディア再生を優先する</td>
<td align="left">オン</td>
</tr>
</tbody></table>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul>
<li>ライブ放送を視聴する<br>「TV」→「チャンネル」</li>
<li>番組表を確認する<br>「TV」→「ガイド」</li>
<li>録画を視聴する<br>「TV」→「録画」</li>
</ul>
<h3 id="Android-での設定"><a href="#Android-での設定" class="headerlink" title="Android での設定"></a>Android での設定</h3><p>Windows 環境と同様な操作でインストールします。</p>
<h3 id="Android-arm64-v8a-用アドオンのビルド-WSL-環境"><a href="#Android-arm64-v8a-用アドオンのビルド-WSL-環境" class="headerlink" title="Android(arm64-v8a)用アドオンのビルド (WSL 環境)"></a>Android(arm64-v8a)用アドオンのビルド (WSL 環境)</h3><ol>
<li>JDK と ZIP のインストール   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install default-jdk zip unzip</span><br></pre></td></tr></table></figure></li>
<li>Android SDK Manager コマンドラインツールのダウンロード<br>  <a href="https://developer.android.com/studio?hl=ja#command-tools">https://developer.android.com/studio?hl=ja#command-tools</a><br>  commandlinetools-linux-6609375_latest.zip</li>
<li>sdkmanager の設定  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> ~/cmdline-tools</span><br><span class="line">$ unzip -d ~/cmdline-tools/ commandlinetools-linux-6609375_latest.zip</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><figcaption><span>$HOME/.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/cmdline-tools/tools/bin</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ . ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li>NDK のインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sdkmanager --list | grep NDK</span><br><span class="line">$ sdkmanager --install <span class="string">&quot;ndk;21.3.6528147&quot;</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><figcaption><span>$HOME/.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/ndk/21.3.6528147/build</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ . ~/.bashrc</span><br></pre></td></tr></table></figure></li>
<li>pvr.epgstation.zip のビルド  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/Harekaze/pvr.epgstation.git</span><br><span class="line">$ <span class="built_in">cd</span> pvr.epgstation</span><br><span class="line">$ ndk-build APP_ABI=arm64-v8a</span><br><span class="line">$ ./jni/pack.sh APP_ABI=arm64-v8a</span><br><span class="line">$ <span class="built_in">ls</span> pvr.epgstation.zip</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>kodi</tag>
        <tag>epgstation</tag>
      </tags>
  </entry>
  <entry>
    <title>Extraterm</title>
    <url>/2020/08/02/Extraterm/</url>
    <content><![CDATA[<p><img src="/images/extraterm_frame.png" alt="extraterm_frame"><br><a href="https://extraterm.org/">https://extraterm.org/</a><br><a href="https://github.com/sedwards2009/extraterm">https://github.com/sedwards2009/extraterm</a></p>
<p>Extraterm を使ってみました。<br>シェル統合機能やカーソルモードが独特で良いです。</p>
<span id="more"></span>

<h3 id="私の要件"><a href="#私の要件" class="headerlink" title="私の要件"></a>私の要件</h3><ul>
<li>Quake モード</li>
<li>WSL 対応</li>
<li>背景の透過率設定</li>
<li>横分割</li>
<li>タブ</li>
<li>テーマ</li>
<li>マウスホイールで拡大縮小</li>
<li>できればローカライズ<br><a href="https://github.com/sedwards2009/extraterm/issues/247">https://github.com/sedwards2009/extraterm/issues/247</a></li>
</ul>
<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Insider Preview Build 20180<ul>
<li>Extraterm 0.52.0</li>
<li>WSL (Ubuntu)</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>ダウンロード<br>  <a href="https://github.com/sedwards2009/extraterm/releases">https://github.com/sedwards2009/extraterm/releases</a><br>  Assets から<code>extraterm-setup-0.52.0.exe</code> をダウンロード</li>
<li>インストール<br>  <code>extraterm-setup-0.52.0.exe</code> を実行</li>
</ol>
<h3 id="シェル統合機能の構築"><a href="#シェル統合機能の構築" class="headerlink" title="シェル統合機能の構築"></a>シェル統合機能の構築</h3><ol>
<li>ダウンロード<br>  <a href="https://github.com/sedwards2009/extraterm/releases">https://github.com/sedwards2009/extraterm/releases</a><br>  Assets から<code>extraterm-commands-0.52.0.zip</code> をダウンロード</li>
<li><code>~/bin</code> に展開</li>
<li><code>. ~/bin/setup_extraterm_bash.sh</code> を実行</li>
</ol>
<h3 id="基本的な使い方"><a href="#基本的な使い方" class="headerlink" title="基本的な使い方"></a>基本的な使い方</h3><ul>
<li>機能<br><a href="https://extraterm.org/features.html">https://extraterm.org/features.html</a></li>
<li>ユーザガイド<br><a href="https://extraterm.org/guide.html">https://extraterm.org/guide.html</a></li>
<li>FAQ<br><a href="https://extraterm.org/faq.html">https://extraterm.org/faq.html</a></li>
</ul>
<h3 id="ショートカット"><a href="#ショートカット" class="headerlink" title="ショートカット"></a>ショートカット</h3><ul>
<li><p>≡(ハンバーガーメニュー) → <code>Settings</code> → <code>Keybindings</code></p>
<table>
<thead>
<tr>
<th align="left">処理</th>
<th align="left">キーバインド</th>
</tr>
</thead>
<tbody><tr>
<td align="left">新しいタブ</td>
<td align="left"><code>Ctrl+Shift+T</code></td>
</tr>
<tr>
<td align="left">タブを直接閉じる</td>
<td align="left"><code>Ctrl+Shift+Q</code></td>
</tr>
<tr>
<td align="left">タブ間を左右に移動</td>
<td align="left"><code>Ctrl+,</code> <code>Ctrl+.</code></td>
</tr>
<tr>
<td align="left">スクロール</td>
<td align="left"><code>Shift+PageUp</code> <code>Shift+PageDown</code></td>
</tr>
<tr>
<td align="left">選択&amp;コピー</td>
<td align="left">マウスドラッグ</td>
</tr>
<tr>
<td align="left">矩形選択&amp;コピー</td>
<td align="left"><code>Alt</code>+マウスドラッグ</td>
</tr>
<tr>
<td align="left">ペースト</td>
<td align="left"><code>Shift+Insert</code></td>
</tr>
<tr>
<td align="left">カーソルモード切り替え</td>
<td align="left"><code>Ctrl+Shift+Space</code></td>
</tr>
<tr>
<td align="left">コマンドパレット</td>
<td align="left"><code>Ctrl+Shift+P</code></td>
</tr>
<tr>
<td align="left">ウィンドウ表示の切り替え</td>
<td align="left">ユーザ定義(私は<code>Ctrl+F12</code>を設定)</td>
</tr>
<tr>
<td align="left">横分割(Vertical Split)</td>
<td align="left">ユーザ定義(私は<code>Ctrl+Shift+Right</code>を設定)</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="実行例"><a href="#実行例" class="headerlink" title="実行例"></a>実行例</h3><ul>
<li>フレームとfrom<br><img src="/images/extraterm_frame.png" alt="extraterm_frame"><ul>
<li>コマンドを実行した結果が長い場合にフレーム化されます。デフォルトの閾値は10行です。</li>
<li>フレームには実行結果(成功✔、失敗❌)とコマンド文字列が表示されます。</li>
<li>フレームには現在の表示位置が%で表されます。これはスクロールにより動的に変化します。</li>
<li>フレーム毎にタグ番号が採番されます。これはfrom コマンドで再利用できます。</li>
<li>その隣のアイコンでフレームの内容を別のタブに表示することができます。</li>
</ul>
</li>
<li>show<br><img src="/images/extraterm_show.png" alt="extraterm_show"><ul>
<li>一般的な画像形式のファイルを表示できます。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>extraterm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 5.0.0</title>
    <url>/2020/08/03/Hexo-5-0-0/</url>
    <content><![CDATA[<p><a href="https://hexo.io/news/2020/07/29/hexo-5-released/">https://hexo.io/news/2020/07/29/hexo-5-released/</a></p>
<p>Hexo 5.0.0 がリリースされていたので導入してみました。</p>
<ul>
<li>さらに高速になったようです。</li>
<li>メモリ使用量が減った気がします。</li>
<li>フロントマターに<code>published: false</code>を設定できるようになりました。以下を追記しました。<figure class="highlight markdown"><figcaption><span>./scalfolds/post.md</span></figcaption><table><tr><td class="code"><pre><span class="line">published: true</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows Insider Preview Build 20180<ul>
<li>WSL (Ubuntu)<ul>
<li>n 6.5.1</li>
<li>node v14.7.0</li>
<li>npm 6.14.7<ul>
<li>hexo 5.0.0</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>バックアップ  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mv</span> blog _blog</span><br></pre></td></tr></table></figure></li>
<li>node の更新  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ n latest</span><br><span class="line">$ node --version</span><br><span class="line">v14.7.0</span><br><span class="line">$ npm --version</span><br><span class="line">6.14.7</span><br><span class="line">$ n --version</span><br><span class="line">6.5.1</span><br></pre></td></tr></table></figure></li>
<li>Hexo のインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo</span><br></pre></td></tr></table></figure></li>
<li>blog の初期化  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li>
<li>プラグインのインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i -S hexo-deployer-git</span><br><span class="line">$ npm i -S hexo-filter-mermaid-diagrams</span><br><span class="line">$ npm i -S hexo-generator-feed</span><br><span class="line">$ npm i -S hexo-generator-search</span><br><span class="line">$ npm i -S hexo-pdf</span><br><span class="line">$ npm i -S hexo-related-popular-posts</span><br><span class="line">$ npm i -S hexo-tag-googlecharts</span><br><span class="line">$ npm i -S hexo-tag-table-bootstrap</span><br><span class="line">$ npm i -S hexo-tag-twitter</span><br></pre></td></tr></table></figure></li>
<li>モジュールの修正</li>
</ol>
<ul>
<li><p>前回と同様の修正<br><a href="https://ktkr3d.github.io/2020/02/27/hexo-related-popular-posts/">https://ktkr3d.github.io/2020/02/27/hexo-related-popular-posts/</a></p>
</li>
<li><p>キャッシュの構造変更対応</p>
<table>
<thead>
<tr>
<th align="left">Key</th>
<th align="left">Value</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ソース</td>
<td align="left">.&#x2F;node_modules&#x2F;hexo-related-popular-posts&#x2F;lib&#x2F;list-json.js</td>
</tr>
<tr>
<td align="left">置換前</td>
<td align="left">locals.cache.cache.posts</td>
</tr>
<tr>
<td align="left">置換後</td>
<td align="left">locals.cache.cache.get(“posts”)</td>
</tr>
</tbody></table>
</li>
<li><p>テーマ関連の修正</p>
<table>
<thead>
<tr>
<th align="left">Key</th>
<th align="left">Value</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ソース</td>
<td align="left">.&#x2F;themes&#x2F;freemind&#x2F;layout&#x2F;partial&#x2F;footer.ejs</td>
</tr>
<tr>
<td align="left">置換前</td>
<td align="left">theme.mermaid</td>
</tr>
<tr>
<td align="left">置換後</td>
<td align="left">config.mermaid</td>
</tr>
</tbody></table>
</li>
</ul>
<ol start="7">
<li>バージョンの確認  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --version</span><br><span class="line">INFO  Validating config</span><br><span class="line">hexo: 5.0.0</span><br><span class="line">hexo-cli: 4.1.0</span><br><span class="line">os: Linux 4.19.121-microsoft-standard linux x64</span><br><span class="line">node: 14.7.0</span><br><span class="line">v8: 8.4.371.19-node.12</span><br><span class="line">uv: 1.38.1</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.16.0</span><br><span class="line">modules: 83</span><br><span class="line">nghttp2: 1.41.0</span><br><span class="line">napi: 6</span><br><span class="line">llhttp: 2.0.4</span><br><span class="line">openssl: 1.1.1g</span><br><span class="line">cldr: 37.0</span><br><span class="line">icu: 67.1</span><br><span class="line">tz: 2020a</span><br><span class="line">unicode: 13.0</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="データの移行"><a href="#データの移行" class="headerlink" title="データの移行"></a>データの移行</h3><ul>
<li>バックアップからインポート<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/blog</span><br><span class="line">$ <span class="built_in">cp</span> ../_blog/google-services.pem .</span><br><span class="line">$ <span class="built_in">cp</span> -r ../_blog/source .</span><br><span class="line">$ <span class="built_in">cp</span> -r ../_blog/scalfolds .</span><br><span class="line">$ <span class="built_in">cp</span> -r ../_blog/theme .</span><br><span class="line">$ <span class="built_in">mv</span> ./blog/themes/freemind/_config.yml ./_config.freemind.yml</span><br></pre></td></tr></table></figure>
⚠️Hexo 5.0.0 からテーマの設定ファイルをルートに<code>./_config.[theme].yml</code> の名称で配置することが推奨されているようです。設定内容は <code>./_config.[theme].yml</code> &gt; <code>./[theme]/_config.yml</code> の優先順位でマージされます。混乱を避けるために移動しておいた方がよさそうです。</li>
</ul>
<h3 id="config-yml-の更新"><a href="#config-yml-の更新" class="headerlink" title="_config.yml の更新"></a>_config.yml の更新</h3><ul>
<li>移行元の_config.yml を参考に作成</li>
<li>prismjs の項目が増えていたがそのまま</li>
<li><code>external_link</code> の仕様変更</li>
<li><code>use_date_for_updated</code> は<code>updated_option</code> に仕様変更</li>
</ul>
<h3 id="生成とデプロイ"><a href="#生成とデプロイ" class="headerlink" title="生成とデプロイ"></a>生成とデプロイ</h3><ul>
<li>生成とデプロイ<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Terminal Shortcuts</title>
    <url>/2020/08/09/Linux-Terminal-Shortcuts/</url>
    <content><![CDATA[<p><img src="/images/shortcuts.png" alt="shortcuts"><br>Linux 端末のショートカットのチートシートをman のように表示してみました。<br><code>Alt+.</code> (前回の引数を貼り付け) は<code>mkdir</code> した直後に<code>cd</code> する時に便利ですね。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Insider Preview Build 20185<ul>
<li>WSL (Ubuntu)</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>データ格納用ディレクトリを作成  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p ~/man/ja/manl/</span><br></pre></td></tr></table></figure></li>
<li>チートシート本体の作成<br>  <a href="https://gist.github.com/ktkr3d/4ef437666cfbc0c9cec8f8e26d3b6d06">https://gist.github.com/ktkr3d/4ef437666cfbc0c9cec8f8e26d3b6d06</a>  <figure class="highlight plaintext"><figcaption><span>$HOME/man/ja/manl/shortcuts.l</span></figcaption><table><tr><td class="code"><pre><span class="line">.\&quot; ~/man/ja/manl/shortcuts.l</span><br><span class="line">.TH SHORTCUTS &quot;1&quot; &quot;2020年8月&quot; &quot;shortcuts 0.1&quot; &quot;チートシート&quot;</span><br><span class="line">.SH 名称</span><br><span class="line">shortcuts \- Linux 端末キーボードショートカットのチートシート</span><br><span class="line"></span><br><span class="line">.SH Ctrl 系</span><br><span class="line">Ctrl+A      カーソルを行頭へ移動 (Home)</span><br><span class="line">.br</span><br><span class="line">Ctrl+B      カーソルを前の文字へ移動 (Left)</span><br><span class="line">.br</span><br><span class="line">Ctrl+C      実行中のコマンドを停止 (SIGINT)</span><br><span class="line">.br</span><br><span class="line">Ctrl+D      現在のセッションをログアウト (exit)</span><br><span class="line">.br</span><br><span class="line">Ctrl+E      カーソルを行末へ移動 (End)</span><br><span class="line">.br</span><br><span class="line">Ctrl+F      カーソルを次の文字へ移動 (Right)</span><br><span class="line">.br</span><br><span class="line">Ctrl+H      一文字削除 (Backspace)</span><br><span class="line">.br</span><br><span class="line">CTRL+K      次の文字を切り取り</span><br><span class="line">.br</span><br><span class="line">Ctrl+L      画面をクリア (clear)</span><br><span class="line">.br</span><br><span class="line">Ctrl+N      コマンド履歴を次へ</span><br><span class="line">.br</span><br><span class="line">Ctrl+P      前回のコマンドを貼り付け</span><br><span class="line">.br</span><br><span class="line">Ctrl+Q      停止していた出力を表示 (XON)</span><br><span class="line">.br</span><br><span class="line">Ctrl+R      コマンド履歴を検索</span><br><span class="line">.br</span><br><span class="line">Ctrl+S      すべての出力を停止 (XOFF)</span><br><span class="line">.br</span><br><span class="line">Ctrl+U      行全体を切り取り</span><br><span class="line">.br</span><br><span class="line">Ctrl+W      最後の単語を切り取り</span><br><span class="line">.br</span><br><span class="line">CTRL+Y      貼り付け</span><br><span class="line">.br</span><br><span class="line">Ctrl+Z      実行中のコマンドをバックグラウンドへ切り替え (SIGTSTP)</span><br><span class="line">.br</span><br><span class="line">Ctrl+_      アンドゥ</span><br><span class="line">.br</span><br><span class="line">Ctrl+Right  次の単語へ移動</span><br><span class="line">.br</span><br><span class="line">Ctrl+Left   前の単語へ移動</span><br><span class="line"></span><br><span class="line">.SH Alt 系</span><br><span class="line">Alt+F       次の単語へ移動</span><br><span class="line">.br</span><br><span class="line">Alt+B       前の単語へ移動</span><br><span class="line">.br</span><br><span class="line">ALT-.       前回の引数を貼り付け</span><br><span class="line"></span><br><span class="line">.SH その他</span><br><span class="line">.br</span><br><span class="line">Up/Down     コマンド履歴の呼び出し (history)</span><br><span class="line">.br</span><br><span class="line">TAB         オートコンプリート</span><br></pre></td></tr></table></figure></li>
<li>Alias の設定  <figure class="highlight bash"><figcaption><span>$HOME/.bash_alias</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> shortcuts=<span class="string">&#x27;man -M ~/man/ja shortcuts&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>すぐに有効にする場合  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ . ~/.bash_aliases</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ol>
<li>コマンド実行  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ shortcuts</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode on Android</title>
    <url>/2020/08/23/VSCode-on-Android/</url>
    <content><![CDATA[<p><img src="/images/vscode-android.jpg" alt="vscode-android"><br><a href="https://github.com/MFDGaming/ubuntu-in-termux">https://github.com/MFDGaming/ubuntu-in-termux</a><br><a href="https://github.com/cdr/code-server">https://github.com/cdr/code-server</a></p>
<p>Android 上でVisual Studio Code を利用してみました。<br>Samsung Dex でディスプレイに表示しています。<br>そこそこ動きますが文字入力操作が難点ですね。</p>
<h4 id="2021-12-29-追記"><a href="#2021-12-29-追記" class="headerlink" title="2021-12-29 追記"></a>2021-12-29 追記</h4><p><a href="https://github.com/coder/code-server/issues/215">https://github.com/coder/code-server/issues/215</a><br>日本語表示にするには日本語言語パックをインストールして、</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> ~/.local/share/code-server/locale.json ~/.local/share/code-server/User/</span><br></pre></td></tr></table></figure>


<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Galaxy s8<ul>
<li>Android 9<ul>
<li>Termux 0.98<ul>
<li>Ubuntu 20.04<ul>
<li>code-server 3.4.1 arm64<ul>
<li>VS Code 1.45.1</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>Termux をインストール</li>
<li>Ubuntu のインストールと実行  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -a</span><br><span class="line">Linux localhost 4.4.153-16213510 <span class="comment">#2 SMP PREEMPT Thu Jun 20 15:49:10 KST 2019 aarch64 Android </span></span><br><span class="line">$ apt update &amp;&amp; apt upgrade</span><br><span class="line">$ apt install wget proot git</span><br><span class="line">$ <span class="built_in">cd</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/MFDGaming/ubuntu-in-termux.git</span><br><span class="line">$ <span class="built_in">cd</span> ubuntu-in-termux</span><br><span class="line">$ <span class="built_in">chmod</span> +x ubuntu.sh</span><br><span class="line">$ ./ubuntu.sh -y</span><br><span class="line">$ ./startubuntu.sh</span><br></pre></td></tr></table></figure></li>
<li>code-server を実行<br>  <a href="https://github.com/cdr/code-server/releases">https://github.com/cdr/code-server/releases</a>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uname -a</span></span><br><span class="line">Linux localhost 4.4.153-16213510 <span class="comment">#2 SMP PREEMPT Thu Jun 20 15:49:10 KST 2019 aarch64 aarch64 aarch64 GNU/Linux</span></span><br><span class="line"><span class="comment"># apt update</span></span><br><span class="line"><span class="comment"># apt install wget</span></span><br><span class="line"><span class="comment"># wget https://github.com/cdr/code-server/releases/download/3.4.1/code-server-3.4.1-linux-arm64.tar.gz</span></span><br><span class="line"><span class="comment"># tar xvf code-server-3.4.1-linux-arm64.tar.gz</span></span><br><span class="line"><span class="comment"># ./code-server-3.4.1-linux-arm64/code-server --auth none</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ol>
<li>Termux を起動</li>
<li>Ubuntu を起動  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> ./ubuntu<span class="operator">-in</span><span class="literal">-termux</span>/startubuntu.sh</span><br></pre></td></tr></table></figure></li>
<li>code-server を起動  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># ./<span class="selector-tag">code</span>-server-<span class="number">3.4</span>.<span class="number">1</span>-linux-arm64/<span class="selector-tag">code</span>-server <span class="attr">--auth</span> <span class="attribute">none</span></span><br></pre></td></tr></table></figure></li>
<li>ブラウザで<code>http://localhost:8080</code> にアクセス<br>  <img src="/images/vscode_code-server.jpg" alt="vscode_code-server.jpg"></li>
</ol>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>vscode</tag>
        <tag>dex</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVPN on WSL2</title>
    <url>/2020/08/24/OpenVPN-on-WSL2/</url>
    <content><![CDATA[<p><img src="/images/openvpn_wsl.png" alt="openvpn wsl"><br><a href="https://github.com/pritunl/pritunl">https://github.com/pritunl/pritunl</a><br>WSL2 の環境にOpenVPN を導入してみました。<br>Pritunl を管理ツールとして使いました。<br>外出先から自宅環境のファイルサーバの参照、EPGStation の操作、WSL2 への接続、Windows 10 へのリモートデスクトップ接続、等ができます。<br>今まではRaspberry Pi をVPN サーバにしていました。<br>リスクがある気もしますが移行を検討してみます。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Insider Preview Build 20197<ul>
<li>WSL2 (Ubuntu 20.04)<ul>
<li>openvpn 2.4.7</li>
<li>pritunl 1.29.2530.72<br>ℹ️Wireguard を指定する項目が増えていました</li>
<li>mongodb 3.6.9</li>
</ul>
</li>
</ul>
</li>
<li>v6 プラスでインターネット接続</li>
</ul>
<p><img src="/images/openvpn-wsl2.drawio.svg" alt="openvpn wsl2"></p>
<h3 id="v6-プラス接続環境の調査"><a href="#v6-プラス接続環境の調査" class="headerlink" title="v6 プラス接続環境の調査"></a>v6 プラス接続環境の調査</h3><ol>
<li>公開IPv4 アドレスと公開IPv6 アドレスを確認<br>  <a href="https://test-ipv6.com/">https://test-ipv6.com/</a></li>
<li>公開IPv6 アドレスから公開可能なポート番号を確認<br>  <a href="http://ipv4.web.fc2.com/map-e.html">http://ipv4.web.fc2.com/map-e.html</a></li>
<li>公開するポート番号を決定<br>  例えば<code>60000/tcp</code>を選択<br>  ⚠️tcp になります。</li>
<li>Windows 10 のローカルIPアドレスを確認  <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;ipconfig</span><br></pre></td></tr></table></figure>
  例えば、<code>192.168.11.2</code></li>
</ol>
<h3 id="構築-WSL"><a href="#構築-WSL" class="headerlink" title="構築(WSL)"></a>構築(WSL)</h3><ol>
<li>WSL2 でsystemd を有効化<br>  <a href="https://github.com/arkane-systems/genie/">https://github.com/arkane-systems/genie/</a>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install daemonize dbus policykit-1</span><br><span class="line">$ wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb</span><br><span class="line">$ <span class="built_in">sudo</span> dpkg -i packages-microsoft-prod.deb</span><br><span class="line">$ <span class="built_in">sudo</span> apt update; <span class="built_in">sudo</span> apt upgrade</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get install -y dotnet-runtime-3.1</span><br><span class="line">$ curl -s https://packagecloud.io/install/repositories/arkane-systems/wsl-translinux/script.deb.sh | <span class="built_in">sudo</span> bash</span><br><span class="line">$ <span class="built_in">sudo</span> apt install -y systemd-genie</span><br></pre></td></tr></table></figure></li>
<li>pritunl を導入<br>  <a href="https://github.com/pritunl/pritunl">https://github.com/pritunl/pritunl</a>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/mongodb-org-4.2.list &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.2 multiverse</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/pritunl.list &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb https://repo.pritunl.com/stable/apt focal main</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">sudo</span> apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv E162F504A20CDF15827F718D4B7C549A058F8B6B</span><br><span class="line">$ <span class="built_in">sudo</span> apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv 7568D9BB55FF9E5287D586017AE645C0CF8E292A</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get --assume-yes install pritunl mongodb-server</span><br></pre></td></tr></table></figure>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">genie -s</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> systemctl start pritunl mongodb</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> pritunl mongodb</span></span><br></pre></td></tr></table></figure></li>
<li>ポートフォワードのスクリプト<br>  443&#x2F;tcp と60000&#x2F;tcp をWindows 10 からWSL2 へ転送する。  <figure class="highlight bash"><figcaption><span>/home/ubuntu/bin/wsl-portforward.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">IP=$(ip -f inet -o addr show eth0 | <span class="built_in">cut</span> -d\  -f 7 | <span class="built_in">cut</span> -d/ -f 1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> PORT <span class="keyword">in</span> 443 60000; <span class="keyword">do</span></span><br><span class="line">  /mnt/c/Windows/system32/netsh.exe interface portproxy delete v4tov4 listenport=<span class="variable">$PORT</span></span><br><span class="line">  /mnt/c/Windows/system32/netsh.exe interface portproxy add    v4tov4 listenport=<span class="variable">$PORT</span> connectaddress=<span class="variable">$IP</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="構築-Windows-10"><a href="#構築-Windows-10" class="headerlink" title="構築(Windows 10)"></a>構築(Windows 10)</h3><ol>
<li>Firewall の受信許可</li>
</ol>
<ul>
<li>60000&#x2F;tcp</li>
</ul>
<ol start="2">
<li>WSL 側のwsl-portforward.sh を起動  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wsl -u root bash <span class="regexp">/home/u</span>buntu<span class="regexp">/bin/</span>wsl-portforward.sh</span><br></pre></td></tr></table></figure>
  ⚠️タスクスケジューラでWindows 10 起動時に実行するように設定</li>
<li>pritunl の起動  <figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">wsl -u<span class="built_in"> root</span> genie -c systemctl <span class="keyword">start</span> pritunl mongodb</span><br></pre></td></tr></table></figure>
  ⚠️タスクスケジューラでWindows 10 起動時に実行するように設定</li>
<li>WSL 側のPritunl の設定<br>  <code>https://192.168.11.2</code> にアクセスし、画面の指示に従ってログインした後、サーバを設定します。<br>  4.1 <code>Users</code> &gt;&gt; <code>Add Organization</code><br>  4.2 <code>Users</code> &gt;&gt; <code>Add User</code><br>  4.3 <code>Servers</code> &gt;&gt; <code>Add Server</code> ⚠️公開IPv4 アドレスと60000&#x2F;tcp を指定<br>  4.4 <code>Servers</code> &gt;&gt; <code>Attach Organization</code><br>  4.5 <code>Servers</code> &gt;&gt; <code>Start Server</code></li>
<li>クライアント設定ファイルの生成<br>  5.1 <code>Users</code> &gt;&gt; <code>Click to download profile</code><br>  5.2 <code>username.tar</code> を展開して.ovpn ファイルを抽出</li>
</ol>
<h3 id="構築-ルータ"><a href="#構築-ルータ" class="headerlink" title="構築(ルータ)"></a>構築(ルータ)</h3><ol>
<li>ポート変換の設定</li>
</ol>
<ul>
<li>ポート: 60000&#x2F;tcp</li>
<li>宛先: 192.168.11.2</li>
</ul>
<h3 id="Android-クライアントからの利用"><a href="#Android-クライアントからの利用" class="headerlink" title="Android クライアントからの利用"></a>Android クライアントからの利用</h3><ol>
<li>OpenVPN アプリで.ovpn ファイルをインポート</li>
<li>接続</li>
</ol>
]]></content>
      <tags>
        <tag>openvpn</tag>
        <tag>wsl</tag>
        <tag>pritunl</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron App</title>
    <url>/2020/11/17/Electron-App/</url>
    <content><![CDATA[<p><img src="/images/wowslhp.png" alt="wowslhp"><br><a href="https://github.com/ktkr3d/wowslhp">https://github.com/ktkr3d/wowslhp</a></p>
<p><a href="https://www.electronjs.org/">Electron</a>で簡単なアプリケーションを作成してみました。</p>
<ul>
<li><a href="https://github.com/electron/electron-quick-start-typescript">electron-quick-start-typescript</a> をカスタマイズ</li>
<li>単純に、指定したURL をBrowserWindow で表示<br><code>https://worldofwarcraft.com/en-us/shadowlands</code></li>
<li><a href="https://github.com/electron-userland/electron-builder">electron-builder</a>でインストーラを生成</li>
</ul>
<p>World of Warcraft Shadowlands のリリース時刻までカウントダウンします。残り一週間ですね。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Pro Insider Preview Build 20231<ul>
<li>Git 2.29.2</li>
<li>Node.js v14.15.0<ul>
<li>npm 6.14.8</li>
<li>Yarn 1.22.5<ul>
<li>electron-builder 22.9.1</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="前提パッケージの導入"><a href="#前提パッケージの導入" class="headerlink" title="前提パッケージの導入"></a>前提パッケージの導入</h3><ol>
<li>Git<br>  <a href="https://gitforwindows.org/">https://gitforwindows.org/</a></li>
<li>Node.js<br>  <a href="https://nodejs.org/ja/">https://nodejs.org/ja/</a></li>
<li>Yarn<br>  <a href="https://classic.yarnpkg.com/ja/docs/install/#windows-stable">https://classic.yarnpkg.com/ja/docs/install/#windows-stable</a></li>
<li>electron-builder  <figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt; yarn <span class="built_in">add</span> electron-builder <span class="comment">--dev</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="プロジェクトの作成、ビルド、起動"><a href="#プロジェクトの作成、ビルド、起動" class="headerlink" title="プロジェクトの作成、ビルド、起動"></a>プロジェクトの作成、ビルド、起動</h3><ol>
<li><p>プロジェクトの作成</p>
  <figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">git clone <span class="attr">https</span>:<span class="comment">//github.com/ktkr3d/wowslhp</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">cd wowslhp</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">npm install</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ビルドと起動</p>
  <figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">npm start</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="インストールパッケージの生成"><a href="#インストールパッケージの生成" class="headerlink" title="インストールパッケージの生成"></a>インストールパッケージの生成</h3><ol>
<li><p>ビルド</p>
  <figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">npm build</span></span><br></pre></td></tr></table></figure>
<p>  <code>npm build</code> を実行すると、<code>src/main.ts</code> が<code>dist/main.js</code> にトランスパイルされます。</p>
</li>
<li><p>インストーラファイルの生成</p>
  <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">&gt; npx electron-builder <span class="params">--win</span> <span class="params">--x64</span> <span class="params">--config</span>.nsis.oneClick=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>  nsis.oneClick にfalse を指定すると、インストール時に確認ウィンドウを表示します。<br>  <a href="https://www.electron.build/configuration/nsis">https://www.electron.build/configuration/nsis</a></p>
</li>
<li><p>生成されたインストーラファイルの確認<br>  <code>dist/wowslhp Setup 1.0.0.exe</code><br>  ファイルサイズは50MB 程度です。</p>
</li>
</ol>
<h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><ol>
<li>インストール<br>  <code>wowslhp Setup 1.0.0.exe</code> を実行します。</li>
</ol>
<ul>
<li>すべてのユーザ用を選択した場合、<code>%PROGRAMFILES%\wowslhp\</code> にインストールされます。</li>
<li>現在のユーザのみを選択した場合、<code>%LOCALAPPDATA%\Programs\wowslhp\</code> にインストールされます。</li>
</ul>
]]></content>
      <tags>
        <tag>electron</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>GNOME 40</title>
    <url>/2021/02/21/GNOME-40/</url>
    <content><![CDATA[<p><img src="/images/fedora_gnome_40.png" alt="fedora_gnome_40.png"></p>
<p><a href="https://copr.fedorainfracloud.org/coprs/haeckerfelix/gnome-shell-40/">https://copr.fedorainfracloud.org/coprs/haeckerfelix/gnome-shell-40/</a></p>
<p>GNOME 40 アルファ版を起動してみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Fedora 33<ul>
<li>GNOME Shell 40.beta</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li><p>Fedora 33 インストール<br><a href="https://getfedora.org/ja/workstation/download/">https://getfedora.org/ja/workstation/download/</a></p>
</li>
<li><p>アップデート</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> dnf update -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>リポジトリ追加＆アップデート</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> dnf copr <span class="built_in">enable</span> haeckerfelix/gnome-shell-40 </span><br><span class="line">$ <span class="built_in">sudo</span> dnf upgrade</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Fedora-33-との差分"><a href="#Fedora-33-との差分" class="headerlink" title="Fedora 33 との差分"></a>Fedora 33 との差分</h3><ul>
<li>バージョン確認<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dnf list --installed | grep haeckerfelix</span><br><span class="line">glib2.x86_64                                       2.67.3-1.fc33                       @copr:copr.fedorainfracloud.org:haeckerfelix:gnome-shell-40</span><br><span class="line">gnome-settings-daemon.x86_64                       40~beta-3.fc33                      @copr:copr.fedorainfracloud.org:haeckerfelix:gnome-shell-40</span><br><span class="line">gnome-shell.x86_64                                 40.0~alpha.1.1-1.20210217.0         @copr:copr.fedorainfracloud.org:haeckerfelix:gnome-shell-40</span><br><span class="line">gsettings-desktop-schemas.x86_64                   40~alpha-2.git66b9f97.fc33          @copr:copr.fedorainfracloud.org:haeckerfelix:gnome-shell-40</span><br><span class="line">gtk4.x86_64                                        4.1.0-2.fc33                        @copr:copr.fedorainfracloud.org:haeckerfelix:gnome-shell-40</span><br><span class="line">libgweather.x86_64                                 40.alpha.1-2.fc33                   @copr:copr.fedorainfracloud.org:haeckerfelix:gnome-shell-40</span><br><span class="line">mutter.x86_64                                      40.0~alpha.1.1-5.gitd6babca.fc33    @copr:copr.fedorainfracloud.org:haeckerfelix:gnome-shell-40</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal</title>
    <url>/2021/03/08/Windows-Terminal/</url>
    <content><![CDATA[<p>久しぶりにWindows Terminal を使ってみました。<br>背景透過の設定、ドロップダウンターミナル的な使い方の設定をしてみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10<ul>
<li>Windows Terminal Preview バージョン: 1.7.572.0</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>ダウンロード<br>  <a href="https://github.com/microsoft/terminal/releases">https://github.com/microsoft/terminal/releases</a></li>
<li>インストールして実行</li>
<li>Windows タスクバーの設定</li>
</ol>
<ul>
<li>右クリックして「タスクバーにピン留めする」を選択</li>
<li>アイコンをタスクバー の一番左に移動(<code>Windows</code> キーと<code>1</code>キーで起動するため)</li>
</ul>
<ol start="3">
<li>起動サイズの指定<figure class="highlight json"><figcaption><span>settings.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;initialPosition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0,0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;initialCols&quot;</span><span class="punctuation">:</span> <span class="number">280</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;initialRows&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
<li>背景色透過<figure class="highlight json"><figcaption><span>settings.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;useAcrylic&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;acrylicOpacity&quot;</span><span class="punctuation">:</span> <span class="number">0.8</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><ol>
<li><code>Windows</code> + <code>1</code> で起動と最小化&#x2F;元に戻すを切り替え</li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><table>
<thead>
<tr>
<th align="left">操作</th>
<th align="left">ショートカットキー</th>
</tr>
</thead>
<tbody><tr>
<td align="left">画面分割</td>
<td align="left">Alt + Shift + <code>+</code>キー</td>
</tr>
<tr>
<td align="left">画面分割</td>
<td align="left">Alt + 上部の<code>+</code>アイコン</td>
</tr>
<tr>
<td align="left">ペイン移動</td>
<td align="left">Alt + 矢印キー</td>
</tr>
<tr>
<td align="left">表示の切り替え</td>
<td align="left"><code>Windows</code> + <code>1</code></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>windows-terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter</title>
    <url>/2021/03/08/flutter/</url>
    <content><![CDATA[<p><img src="/images/flutter-web-app.png" alt="flutter-web-app"></p>
<p>Flutter の環境を構築してサンプルアプリケーションを実行してみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10<ul>
<li>flutter 2.0.1</li>
<li>git 2.30.0</li>
<li>android studio 4.1.2</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="Flutter-のインストール"><a href="#Flutter-のインストール" class="headerlink" title="Flutter のインストール"></a>Flutter のインストール</h4><ol>
<li>Download<br>  <a href="https://flutter.dev/docs/get-started/install/windows">https://flutter.dev/docs/get-started/install/windows</a><br>  flutter_windows_2.0.1-stable.zip</li>
<li>展開<br>  <code>C:\tools\flutter</code></li>
<li>環境変数PATH の追加<br>  <code>C:\tools\flutter\bin</code></li>
</ol>
<h4 id="Android-Studio-のインストール"><a href="#Android-Studio-のインストール" class="headerlink" title="Android Studio のインストール"></a>Android Studio のインストール</h4><ol start="4">
<li>Andoird Studio インストール<br>  <a href="https://developer.android.com/studio">https://developer.android.com/studio</a><br>  Web アプリのみの場合は不要かもしれません。</li>
<li>Configure &gt; AVD Manager<br>  AVD の起動を確認して終了</li>
<li>Configure &gt; Plugins</li>
</ol>
<ul>
<li>Dart</li>
<li>Flutter</li>
</ul>
<h4 id="VSCode-プラグインのインストール"><a href="#VSCode-プラグインのインストール" class="headerlink" title="VSCode プラグインのインストール"></a>VSCode プラグインのインストール</h4><ol start="7">
<li>VSCode プラグインのインストール</li>
</ol>
<ul>
<li>Dart</li>
<li>Flutter</li>
<li>flutter Widget Snippets</li>
</ul>
<h4 id="診断"><a href="#診断" class="headerlink" title="診断"></a>診断</h4><ol start="8">
<li>Android ライセンス使用許諾の設定  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span>&gt; flutter doctor <span class="literal">--android-licenses</span></span><br></pre></td></tr></table></figure>
  ‘y’ を押下して許諾</li>
<li>flutter doctor<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\repos\blog&gt; flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor <span class="literal">-v</span>):</span><br><span class="line"><span class="function">[√] <span class="title">Flutter</span></span> (Channel stable, <span class="number">2.0</span>.<span class="number">1</span>, on Microsoft Windows [<span class="type">Version</span> <span class="number">10.0</span><span class="type">.19042.804</span>], locale ja<span class="literal">-JP</span>)</span><br><span class="line">[√] Android toolchain - develop <span class="keyword">for</span> Android devices (Android SDK version <span class="number">30.0</span>.<span class="number">3</span>)</span><br><span class="line">[√] Chrome - develop <span class="keyword">for</span> the web</span><br><span class="line">[√] Android Studio (version <span class="number">4.1</span>.<span class="number">0</span>)</span><br><span class="line">[√] Connected device (<span class="number">2</span> available)</span><br><span class="line"></span><br><span class="line">• No issues found!</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><ol>
<li>F1 &gt; flutter<br>  <code>Flutter: New Application Project</code></li>
<li>プロジェクトフォルダを選択<br>  <code>C:\repos\flutter_sample</code></li>
<li>実行<br>  VSCode の右下からデバイスを選択して実行  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> &gt; flutter run</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>Visual Studio Code<br><img src="/images/flutter-vscode.png" alt="flutter-vscode"></li>
<li>Web アプリケーション<br><img src="/images/flutter-web-app.png" alt="flutter-web-app"></li>
<li>Android アプリケーション<br><img src="/images/flutter-android-app.png" alt="flutter-android-app.png"></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>vscode</tag>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Utterances</title>
    <url>/2021/03/11/Utterances/</url>
    <content><![CDATA[<p><a href="https://utteranc.es/">https://utteranc.es/</a><br><a href="https://github.com/utterance/utterances">https://github.com/utterance/utterances</a></p>
<p>Utterances はGithub のIssue 管理機能を利用したコメントシステムです。<br>Utterances でコメントを欄を作成してみました。</p>
<span id="more"></span>

<h3 id="スクリプト"><a href="#スクリプト" class="headerlink" title="スクリプト"></a>スクリプト</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://utteranc.es/client.js&quot;</span></span><br><span class="line">        repo=<span class="string">&quot;ktkr3d/ktkr3d.github.io&quot;</span></span><br><span class="line">        issue-term=<span class="string">&quot;pathname&quot;</span></span><br><span class="line">        theme=<span class="string">&quot;github-light&quot;</span></span><br><span class="line">        crossorigin=<span class="string">&quot;anonymous&quot;</span></span><br><span class="line">        <span class="keyword">async</span>&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h3 id="コメント欄"><a href="#コメント欄" class="headerlink" title="コメント欄"></a>コメント欄</h3><script src="https://utteranc.es/client.js"
        repo="ktkr3d/ktkr3d.github.io"
        issue-term="pathname"
        theme="github-light"
        crossorigin="anonymous"
        async>
</script>

]]></content>
      <tags>
        <tag>utterances</tag>
      </tags>
  </entry>
  <entry>
    <title>EPGStation Settings</title>
    <url>/2021/03/18/EPGStation-Settings/</url>
    <content><![CDATA[<p>EPGStation でストリーミングが失敗するので対策してみました。</p>
<h4 id="2025-2-3-更新"><a href="#2025-2-3-更新" class="headerlink" title="2025&#x2F;2&#x2F;3 更新"></a>2025&#x2F;2&#x2F;3 更新</h4><ul>
<li>yadifありでも問題なくWebストリーミングできた</li>
<li>mirakurunのtuners.ymlで<code>--decoder libaribb25.dll</code>の設定を忘れると同様にWebストリーミングできなくなるみたい</li>
</ul>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>EPGStation</li>
</ul>
<h3 id="ストリーミング設定の変更"><a href="#ストリーミング設定の変更" class="headerlink" title="ストリーミング設定の変更"></a>ストリーミング設定の変更</h3><p>いつからか無変換以外のストリーミング再生ができなくなりました。<br>調べたところ、ffmpeg でインタレース解除のビデオフィルター<code>yadif</code>を指定すると失敗しているようです。</p>
<h4 id="yadifの設定を削除します。18個所ありました。"><a href="#yadifの設定を削除します。18個所ありました。" class="headerlink" title="yadifの設定を削除します。18個所ありました。"></a><code>yadif</code>の設定を削除します。18個所ありました。</h4><ul>
<li>修正前<figure class="highlight yaml"><figcaption><span>EPGStation/config/config.sample.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">cmd:</span></span><br><span class="line">    <span class="string">&#x27;%FFMPEG% -re -dual_mono_mode main -i pipe:0 -sn -threads 0 -c:a aac -ar 48000 -b:a 192k -ac 2</span></span><br><span class="line"><span class="string">    -c:v libx264 -vf yadif,scale=-2:720 -b:v 3000k -preset veryfast -y -f mpegts pipe:1&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>修正後<figure class="highlight yaml"><figcaption><span>EPGStation/config/config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">cmd:</span></span><br><span class="line">    <span class="string">&#x27;%FFMPEG% -re -dual_mono_mode main -i pipe:0 -sn -threads 0 -c:a aac -ar 48000 -b:a 192k -ac 2</span></span><br><span class="line"><span class="string">    -c:v libx264 -vf scale=-2:720 -b:v 3000k -preset veryfast -y -f mpegts pipe:1&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>epgstation</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 21.04 Hirsute</title>
    <url>/2021/03/28/Ubuntu-21-04-Hirsute/</url>
    <content><![CDATA[<p><video src="/images/ubuntu_2104_gnome40.mp4" controls></video><br><a href="https://launchpad.net/~shemgp/+archive/ubuntu/gnome-40">https://launchpad.net/~shemgp/+archive/ubuntu/gnome-40</a><br>Ubuntu 21.04 にGNOME 40 のPPA を設定してみました。</p>
<h4 id="2021-04-07-追記"><a href="#2021-04-07-追記" class="headerlink" title="2021-04-07 追記"></a>2021-04-07 追記</h4><ul>
<li><p>GNOME 40.0 でDash to Dock 拡張を導入してみました。<br><a href="https://github.com/ewlsh/dash-to-dock/tree/ewlsh/gnome-40">https://github.com/ewlsh/dash-to-dock/tree/ewlsh/gnome-40</a><br><a href="https://github.com/micheleg/dash-to-dock/pull/1402">https://github.com/micheleg/dash-to-dock/pull/1402</a><br><img src="/images/gnome40-dashtodock.png" alt="gnome40 dashtodock"></p>
</li>
<li><p>GNOME 40.0 でDash to Panel 拡張を導入してみました。<br><a href="https://github.com/philippun1/dash-to-panel/tree/update-to-gnome40">https://github.com/philippun1/dash-to-panel/tree/update-to-gnome40</a><br><a href="https://github.com/home-sweet-gnome/dash-to-panel/pull/1303">https://github.com/home-sweet-gnome/dash-to-panel/pull/1303</a><br><img src="/images/gnome40-dashtopanel.png" alt="gnome40 dashtopanel"></p>
</li>
</ul>
<h4 id="2021-04-08-追記"><a href="#2021-04-08-追記" class="headerlink" title="2021-04-08 追記"></a>2021-04-08 追記</h4><ul>
<li>Auto Hide Top Panel 拡張をGNOME 40 に対応させてみました。<br><a href="http://www.webupd8.org/2012/05/gnome-shell-autohide-top-bar-for-gnome.html">http://www.webupd8.org/2012/05/gnome-shell-autohide-top-bar-for-gnome.html</a><br>マウスを画面上部に近づけるとパネルが表示されます。<br>パネルをダブルクリックすることで固定と固定解除を切り替えます。<br><img src="/images/gnome40-autohidetoppanel.png" alt="gnome40 gnome40-autohidetoppanel"></li>
</ul>
<span id="more"></span>

<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>Ubutnu 21.04 のインストール<br>  <a href="http://ftp.jaist.ac.jp/pub/Linux/ubuntu-cdimage/daily-live/current/">http://ftp.jaist.ac.jp/pub/Linux/ubuntu-cdimage/daily-live/current/</a></li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install git build-essential gettext</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>PPA の追加<br>  <a href="https://launchpad.net/~shemgp/+archive/ubuntu/gnome-40">https://launchpad.net/~shemgp/+archive/ubuntu/gnome-40</a></li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> add-apt-repository ppa:shemgp/gnome-40</span><br><span class="line">$ <span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>
  <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Installing </span>packages after <span class="keyword">adding </span>this PPA:</span><br><span class="line"><span class="number">1</span>. Manually upgrade mutter:</span><br><span class="line">  sudo apt <span class="keyword">install </span>mutter=<span class="number">40</span>.<span class="number">0</span><span class="number">-0</span>shemgpubuntu6 -y</span><br><span class="line"><span class="number">2</span>. Manually upgrade gnome-<span class="keyword">shell:</span></span><br><span class="line"><span class="keyword"></span>  sudo apt <span class="keyword">install </span>gnome-<span class="keyword">shell=40.0-0shemgpubuntu3 </span>-y</span><br><span class="line"><span class="number">3</span>. <span class="keyword">Install </span>gnome-session:</span><br><span class="line">  sudo apt <span class="keyword">install </span>gnome-session -y</span><br><span class="line"><span class="number">4</span>. Upgrade the rest:</span><br><span class="line">  sudo apt upgrade -y</span><br><span class="line"><span class="number">5</span>. Reboot</span><br><span class="line"><span class="number">6</span>. Click your username then the gear icon to select GNOME <span class="keyword">or</span></span><br><span class="line"><span class="keyword"></span>  GNOME on <span class="keyword">Xorg </span>session.</span><br><span class="line"><span class="symbol">Note:</span> You might want to <span class="keyword">install </span>fonts-cantarell too, to make the font weights correct.</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Dash to Dock 拡張の導入</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ewlsh/dash-to-dock.git -b ewlsh/gnome-40</span><br><span class="line">$ <span class="built_in">cd</span> dash-to-dock</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Dash to Panel 拡張の導入</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/philippun1/dash-to-panel.git -b update-to-gnome40</span><br><span class="line">$ <span class="built_in">cd</span> dash-to-panel</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>Auto Hide Top Panel 拡張の導入</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://launchpad.net/~webupd8team/+archive/gnome3/+files/gnome-shell-extensions-autohidetopbar_0.2%2B1-1~webupd8~precise.tar.gz</span><br><span class="line">$ tar xvfz gnome-shell-extensions-autohidetopbar_0.2+1-1~webupd8~precise.tar.gz</span><br><span class="line">$ <span class="built_in">cp</span> -r gnome-shell-extensions-autohidetopbar-0.2/autohidetopbar2@werewolves.us/ ~/.local/share/gnome-shell/extensions/</span><br></pre></td></tr></table></figure>

<ul>
<li><p>extension.js の修正<br><code>imports.ui.tweener</code>を<code>imports.tweener.tweener</code>で置換します。</p>
<figure class="highlight javascript"><figcaption><span>~/.local/share/gnome-shell/extensions/autohidetopbar2@werewolves.us/extension.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// const Tweener = imports.ui.tweener;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Tweener</span> = imports.<span class="property">tweener</span>.<span class="property">tweener</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>metadata.json の修正<br>サポートバージョンに<code>40</code>を追加します。</p>
 <figure class="highlight javascript"><figcaption><span>~/.local/share/gnome-shell/extensions/autohidetopbar2@werewolves.us/metadata.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="string">&quot;shell-version&quot;</span>: [ <span class="string">&quot;3.2.0&quot;</span>, <span class="string">&quot;3.2&quot;</span>, <span class="string">&quot;3.2.1&quot;</span>, <span class="string">&quot;3.4&quot;</span>, <span class="string">&quot;3.4.1&quot;</span>, <span class="string">&quot;40&quot;</span> ], </span><br><span class="line">  <span class="string">&quot;uuid&quot;</span>: <span class="string">&quot;autohidetopbar2@werewolves.us&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Auto Hide Top Panel&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Auto hide the top panel&quot;</span>,</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://fpmurphy.com/gnome-shell-extensions&quot;</span>,</span><br><span class="line">  <span class="string">&quot;original-authors&quot;</span>: [ <span class="string">&quot;Finnbarr P. Murphy&quot;</span>, <span class="string">&quot;Kevin R. Kane&quot;</span> ],</span><br><span class="line">  <span class="string">&quot;locale&quot;</span>: <span class="string">&quot;locale&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="6">
<li>GNOME Shell を再起動した後に拡張機能を有効化します。</li>
</ol>
]]></content>
      <tags>
        <tag>gnome</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Fedora 34 Beta</title>
    <url>/2021/04/24/Fedora-34-Beta/</url>
    <content><![CDATA[<p><img src="/images/fedora34_gnome40.png" alt="fedora34 gnome40"><br><a href="https://getfedora.org/ja/workstation/download/">https://getfedora.org/ja/workstation/download/</a></p>
<span id="more"></span>

<h3 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h3><ul>
<li><p>Dash to Panel (GNOME Shell 拡張)<br><a href="https://extensions.gnome.org/extension/1160/dash-to-panel/">https://extensions.gnome.org/extension/1160/dash-to-panel/</a><br><a href="https://github.com/philippun1/dash-to-panel">https://github.com/philippun1/dash-to-panel</a><br><img src="/images/fedora34_gnome40_00.png" alt="fedora34 gnome40"></p>
</li>
<li><p>システムメニュー + Tweaks &amp; Extensions in System Menu (GNOME Shell 拡張)<br><a href="https://extensions.gnome.org/extension/1653/tweaks-in-system-menu/">https://extensions.gnome.org/extension/1653/tweaks-in-system-menu/</a><br><img src="/images/fedora34_gnome40_01.png" alt="fedora34 gnome40"></p>
</li>
<li><p>時刻<br><img src="/images/fedora34_gnome40_02.png" alt="fedora34 gnome40"></p>
</li>
<li><p>Argos (GNOME Shell 拡張)<br><a href="https://extensions.gnome.org/extension/1176/argos/">https://extensions.gnome.org/extension/1176/argos/</a><br><a href="https://github.com/rammie/argos/tree/gnome-3.36">https://github.com/rammie/argos/tree/gnome-3.36</a><br><img src="/images/fedora34_gnome40_03.png" alt="fedora34 gnome40"></p>
</li>
<li><p>ArcMenu (GNOME Shell 拡張) + 日本語化<br><a href="https://extensions.gnome.org/extension/3628/arcmenu/">https://extensions.gnome.org/extension/3628/arcmenu/</a><br><a href="https://github.com/ktkr3d/arcmenu-translation-ja">https://github.com/ktkr3d/arcmenu-translation-ja</a><br><img src="/images/fedora34_gnome40_04.png" alt="fedora34 gnome40"></p>
</li>
<li><p>Extensions<br><a href="https://flathub.org/apps/details/org.gnome.Extensions">https://flathub.org/apps/details/org.gnome.Extensions</a><br><img src="/images/fedora34_gnome40_05.png" alt="fedora34 gnome40"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>fedora</tag>
        <tag>gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>Minecraft Java Edition</title>
    <url>/2021/08/30/Minecraft-Java-Edition/</url>
    <content><![CDATA[<p><img src="/images/mc_title.png" alt="minecraft title"></p>
<p>Windows 10 環境でMinecraft Java Edition を設定してみました。</p>
<ul>
<li>Iris Shaders (Sodium 内包による負荷軽減、シェーダーのサポート&#x2F;高速切り替え)</li>
<li>ズーム表示</li>
<li>防具の耐久度表示</li>
<li>方位表示</li>
<li>地図 (ミニマップ、ワールドマップ)</li>
<li>ミニHUD の表示とカスタマイズ</li>
<li>日本語丸ゴシックTrueType フォント (Rounded M+ 1c bold)</li>
</ul>
<span id="more"></span>

<p><img src="/images/mc_customize.png" alt="minecraft customize"></p>
<h3 id="Minecraft-と-Fabric-Loader"><a href="#Minecraft-と-Fabric-Loader" class="headerlink" title="Minecraft と Fabric Loader"></a>Minecraft と Fabric Loader</h3><p>インストーラをダウンロードして実行します。</p>
<ul>
<li><a href="https://www.minecraft.net/ja-jp/store/minecraft-java-edition">Minecraft Java Edition</a></li>
<li><a href="https://fabricmc.net/use/">Fabric Loader</a></li>
</ul>
<h3 id="Fabric-系Mods-とショートカット操作"><a href="#Fabric-系Mods-とショートカット操作" class="headerlink" title="Fabric 系Mods とショートカット操作"></a>Fabric 系Mods とショートカット操作</h3><p><code>%APPDATA%\.minecraft\mods\</code> フォルダに格納します。</p>
<table>
<thead>
<tr>
<th align="left">Mod</th>
<th align="left">ショートカット操作</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.curseforge.com/minecraft/mc-mods/fabric-api">Fabric API</a></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://www.curseforge.com/minecraft/mc-mods/irisshaders">Iris Shaders</a></td>
<td align="left"><code>O</code> シェーダーパックの選択<br><code>K</code> シェーダーのオン&#x2F;オフ</td>
</tr>
<tr>
<td align="left"><a href="https://www.curseforge.com/minecraft/mc-mods/ok-zoomer">Ok Zoomer</a></td>
<td align="left"><code>C</code> ズーム</td>
</tr>
<tr>
<td align="left"><a href="https://www.curseforge.com/minecraft/mc-mods/rpg-hud-fabric">RPG-Hud</a> <a href="https://github.com/KurodaAkira/RPG-Hud/issues/79">⚠️ V1.17 対策版</a></td>
<td align="left"><code>Esc</code> で右上の<code>RPG-Hud</code>ボタンで設定</td>
</tr>
<tr>
<td align="left"><a href="https://www.curseforge.com/minecraft/mc-mods/xaeros-minimap">Xaero’s Minimap</a></td>
<td align="left"><code>Y</code> Xaero’s Minimap の設定</td>
</tr>
<tr>
<td align="left"><a href="https://www.curseforge.com/minecraft/mc-mods/xaeros-world-map">Xaero’s World Map</a></td>
<td align="left"><code>M</code> WorldMap の表示<br><code>[</code> Xaero’s World Map の設定</td>
</tr>
<tr>
<td align="left"><a href="https://www.curseforge.com/minecraft/mc-mods/malilib">MaLiLib</a></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://www.curseforge.com/minecraft/mc-mods/minihud">MiniHUD</a></td>
<td align="left"><code>H</code> MiniHUD のオン&#x2F;オフ<br><code>H</code>+<code>C</code> MiniHUDの設定</td>
</tr>
</tbody></table>
<h3 id="シェーダーパック"><a href="#シェーダーパック" class="headerlink" title="シェーダーパック"></a>シェーダーパック</h3><p><code>%APPDATA%\.minecraft\shaderpacks\</code> フォルダに格納します。</p>
<ul>
<li><a href="https://sildurs-shaders.github.io/">Sildur’s Vibrant Shaders</a></li>
<li><a href="https://www.curseforge.com/minecraft/customization/complementary-shaders">Complementary Shaders</a></li>
<li><a href="https://www.bitslablab.com/bslshaders/">BSL Shaders</a></li>
<li><a href="https://sildurs-shaders.github.io/">Sildur’s Enhanced Default</a></li>
<li><a href="https://sonicether.com/shaders/download/renewed-v1-0-1/">SEUS Renewed</a></li>
<li><a href="https://sonicether.com/shaders/download/v11-0/">SEUS v11</a></li>
<li><a href="https://www.curseforge.com/minecraft/customization/skylec-shader">Skylec Shader</a></li>
</ul>
<h3 id="日本語TrueType-フォント切り替え"><a href="#日本語TrueType-フォント切り替え" class="headerlink" title="日本語TrueType フォント切り替え"></a>日本語TrueType フォント切り替え</h3><p><code>%APPDATA%\.minecraft\resourcepacks\</code> フォルダにリソースパックを作成して有効化します。</p>
<h4 id="⛏️-リソースパックの作成"><a href="#⛏️-リソースパックの作成" class="headerlink" title="⛏️ リソースパックの作成"></a>⛏️ リソースパックの作成</h4><p>以下の3つのファイルを準備します。</p>
<ol>
<li><p>日本語TrueType フォント<br>私はM+ の丸ゴシック体<code>rounded-mplus-1c-bold.ttf</code> を準備しました。以下のフォルダに格納します。<br><code>%APPDATA%\.minecraft\resourcepacks\rounded-mplus-1c-bold\assets\minecraft\font\</code></p>
</li>
<li><p>default.json</p>
<figure class="highlight json"><figcaption><span>%APPDATA%\.minecraft\resourcepacks\rounded-mplus-1c-bold\assets\minecraft\font\default.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;providers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ttf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:rounded-mplus-1c-bold.ttf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;shift&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">-0.5</span><span class="punctuation">,</span> <span class="number">0.5</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">12.0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;oversample&quot;</span><span class="punctuation">:</span> <span class="number">8.0</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>pack.mcmeta</p>
<figure class="highlight json"><figcaption><span>%APPDATA%\.minecraft\resourcepacks\rounded-mplus-1c-bold\pack.mcmeta</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pack&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Rounded M+ 1c bold&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pack_format&quot;</span><span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="⛏️-言語設定の変更"><a href="#⛏️-言語設定の変更" class="headerlink" title="⛏️ 言語設定の変更"></a>⛏️ 言語設定の変更</h4><ul>
<li>[設定…]-[言語設定…]で[Unicode フォントを強制する]をオフにします。</li>
</ul>
<h4 id="⛏️-リソースパックの有効化"><a href="#⛏️-リソースパックの有効化" class="headerlink" title="⛏️ リソースパックの有効化"></a>⛏️ リソースパックの有効化</h4><ul>
<li>[設定…]-[リソースパック…]で[rounded-mplus-1c-bold]を有効にします。</li>
</ul>
<h3 id="スクリーンショット"><a href="#スクリーンショット" class="headerlink" title="スクリーンショット"></a>スクリーンショット</h3><h4 id="⛏️-シェーダーなし"><a href="#⛏️-シェーダーなし" class="headerlink" title="⛏️ シェーダーなし"></a>⛏️ シェーダーなし</h4><p><img src="/images/mc_without_shader.png" alt="minecraft without shader"></p>
<h4 id="⛏️-シェーダーあり"><a href="#⛏️-シェーダーあり" class="headerlink" title="⛏️ シェーダーあり"></a>⛏️ シェーダーあり</h4><p><img src="/images/mc_with_shader.png" alt="minecraft with shader"></p>
<h4 id="⛏️-シェーダー選択"><a href="#⛏️-シェーダー選択" class="headerlink" title="⛏️ シェーダー選択"></a>⛏️ シェーダー選択</h4><p><img src="/images/mc_shaders.png" alt="minecraft shaders"></p>
<h3 id="シェーダー比較"><a href="#シェーダー比較" class="headerlink" title="シェーダー比較"></a>シェーダー比較</h3><h4 id="⛏️-Sildur’s-Vibrant-Shaders"><a href="#⛏️-Sildur’s-Vibrant-Shaders" class="headerlink" title="⛏️ Sildur’s Vibrant Shaders"></a>⛏️ Sildur’s Vibrant Shaders</h4><p><img src="/images/mc_shader_svs.png" alt="minecraft shaders"></p>
<h4 id="⛏️-Complementary-Shaders"><a href="#⛏️-Complementary-Shaders" class="headerlink" title="⛏️ Complementary Shaders"></a>⛏️ Complementary Shaders</h4><p><img src="/images/mc_shader_cs.png" alt="minecraft shaders"></p>
<h4 id="⛏️-BSL-Shaders"><a href="#⛏️-BSL-Shaders" class="headerlink" title="⛏️ BSL Shaders"></a>⛏️ BSL Shaders</h4><p><img src="/images/mc_shader_bsl.png" alt="minecraft shaders"></p>
<h4 id="⛏️-Sildur’s-Enhanced-Default"><a href="#⛏️-Sildur’s-Enhanced-Default" class="headerlink" title="⛏️ Sildur’s Enhanced Default"></a>⛏️ Sildur’s Enhanced Default</h4><p><img src="/images/mc_shader_ed.png" alt="minecraft shaders"></p>
<h4 id="⛏️-SEUS-Renewed"><a href="#⛏️-SEUS-Renewed" class="headerlink" title="⛏️ SEUS Renewed"></a>⛏️ SEUS Renewed</h4><p><img src="/images/mc_shader_sr.png" alt="minecraft shaders"></p>
]]></content>
      <tags>
        <tag>minecraft</tag>
      </tags>
  </entry>
  <entry>
    <title>Decode / Encode URI</title>
    <url>/2021/09/17/Decode-Encode-URI/</url>
    <content><![CDATA[<p>エンコードされたURI のデコード、デコードされたURI のエンコードを簡単に実行できるツールを作ってみました。</p>
<span id="more"></span>

<form name="f01">
<div>
<textarea name="ta01" rows="3" placeholder="Input encoded URI!" style="width:70%"></textarea>
<input type="button" value="decodeURI" onclick="document.f01.ta02.value=decodeURI(document.f01.ta01.value)" />
<input type="button" id="btn02" value="copy" />
<script type="text/javascript">
  document.f01.btn02.addEventListener("click", function(event) {
    event.preventDefault();
    document.f01.ta01.select();
    document.execCommand("copy");
  });
</script>
</div>
<div>
<textarea name="ta02" rows="3" placeholder="Input decoded URI!" style="width:70%;"></textarea>
<input type="button" value="encodeURI" onclick="document.f01.ta01.value=encodeURI(document.f01.ta02.value)" />
<input type="button" id="btn04" value="copy" />
<script type="text/javascript">
  document.f01.btn04.addEventListener("click", function(event) {
    event.preventDefault();
    document.f01.ta02.select();
    document.execCommand("copy");
  });
</script>
</div>
</form>

<h3 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;f01&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;ta01&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Input encoded URI!&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:60%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;decodeURI&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;document.f01.ta02.value=decodeURI(document.f01.ta01.value)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span> <span class="attr">value</span>=<span class="string">&quot;copy&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="property">f01</span>.<span class="property">btn02</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">f01</span>.<span class="property">ta01</span>.<span class="title function_">select</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&quot;copy&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;ta02&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Input decoded URI!&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:60%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;encodeURI&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;document.f01.ta01.value=encodeURI(document.f01.ta02.value)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn04&quot;</span> <span class="attr">value</span>=<span class="string">&quot;copy&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="property">f01</span>.<span class="property">btn04</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">f01</span>.<span class="property">ta02</span>.<span class="title function_">select</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&quot;copy&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3>]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron Minecraft Mod Manager</title>
    <url>/2021/09/25/Electron-Minecraft-Mods-Manager/</url>
    <content><![CDATA[<p><img src="/images/emcmm_m_list.png" alt="electron minecraft mod manager"><br><a href="https://github.com/ktkr3d/electron-mcmm">https://github.com/ktkr3d/electron-mcmm</a></p>
<p>Electron でマインクラフトの Mod 管理アプリケーションを作ってみました。<br>Mods 情報収集のために mc-curseforge-api を使っています。<br>Electron の IPC 通信の仕様を勉強中です。</p>
<span id="more"></span>

<h3 id="実装状況"><a href="#実装状況" class="headerlink" title="実装状況"></a>実装状況</h3><table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">機能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">My Mods</td>
<td align="left">☑ インストール済の Mod 一覧 (Fabric)</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">☐ インストール済の Mod 一覧 (Forge)</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">☐ Mod のダウンロード&#x2F;インストール</td>
</tr>
<tr>
<td align="left">My Shaderpacks</td>
<td align="left">☑ インストール済の Shaderpack 一覧</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">☐ Shaderpack 情報の取得</td>
</tr>
<tr>
<td align="left">My Resourcepacks</td>
<td align="left">☑ インストール済の Resourcepack 一覧</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">☑ Resourcepack 情報の取得</td>
</tr>
<tr>
<td align="left">Catalog</td>
<td align="left">☑ CourseForge 検索</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">☐ Mod のダウンロード&#x2F;インストール</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">☐ フィルタ</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">☐ ページ処理</td>
</tr>
<tr>
<td align="left">Settings</td>
<td align="left">☐ デフォルト以外のインストールフォルダの指定</td>
</tr>
</tbody></table>
<h3 id="スクリーンショット"><a href="#スクリーンショット" class="headerlink" title="スクリーンショット"></a>スクリーンショット</h3><h4 id="インストール済の-Mod-一覧"><a href="#インストール済の-Mod-一覧" class="headerlink" title="インストール済の Mod 一覧"></a>インストール済の Mod 一覧</h4><p><img src="/images/emcmm_m_list.png" alt="electron minecraft mod manager"></p>
<h4 id="インストール済の-Shaderpack-一覧"><a href="#インストール済の-Shaderpack-一覧" class="headerlink" title="インストール済の Shaderpack 一覧"></a>インストール済の Shaderpack 一覧</h4><p><img src="/images/emcmm_s_list.png" alt="electron minecraft mod manager"></p>
<h4 id="インストール済の-Resourcepack-一覧"><a href="#インストール済の-Resourcepack-一覧" class="headerlink" title="インストール済の Resourcepack 一覧"></a>インストール済の Resourcepack 一覧</h4><p><img src="/images/emcmm_r_list.png" alt="electron minecraft mod manager"></p>
<h4 id="カタログ"><a href="#カタログ" class="headerlink" title="カタログ"></a>カタログ</h4><p><img src="/images/emcmm_catalog.png" alt="electron minecraft mod manager"></p>
<p>CurseForge に掲載されている Mod を検索します。<br>mc-curseforge-api で取得できる値は少し古いようです。</p>
<h4 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h4><p><img src="/images/emcmm_settings.png" alt="electron minecraft mod manager"></p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p><img src="/images/emcmm_linux.png" alt="electron minecraft mod manager"></p>
<p>Ubuntu 21.10 Beta で起動しました。</p>
]]></content>
      <tags>
        <tag>electron</tag>
        <tag>minecraft</tag>
      </tags>
  </entry>
  <entry>
    <title>Neutralinojs</title>
    <url>/2021/10/05/Neutralinojs/</url>
    <content><![CDATA[<p><img src="/images/neutralinojs.png" alt="Neutralinojs"></p>
<p><a href="https://github.com/neutralinojs/neutralinojs">https://github.com/neutralinojs/neutralinojs</a><br><a href="https://neutralino.js.org/docs/getting-started/your-first-neutralinojs-app">https://neutralino.js.org/docs/getting-started/your-first-neutralinojs-app</a></p>
<p>Neutralinojs(ニュートラリーノ JS)は Electron の代替となるクロスプラットフォームアプリケーションフレームワークです。Neutralinojs は Chromium をバンドルせず、オペレーティングシステムの既存の Web ブラウザライブラリを使用しているため実行モジュールのサイズが小さいです。hello-world のリリース用のアーカイブファイル hello-world-release.zip のサイズは 1.87 MB (1,961,616 バイト)でした。</p>
<span id="more"></span>

<h3 id="Windows-環境での準備"><a href="#Windows-環境での準備" class="headerlink" title="Windows 環境での準備"></a>Windows 環境での準備</h3><p>管理者モードのコマンドプロンプトで以下を実行<br><a href="https://github.com/neutralinojs/v2-specification/blob/main/webview.md">https://github.com/neutralinojs/v2-specification/blob/main/webview.md</a></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">CheckNetIsolation<span class="selector-class">.exe</span> LoopbackExempt -<span class="selector-tag">a</span> -n=<span class="string">&quot;Microsoft.Win32WebViewHost_cw5n1h2txyewy&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Ubuntu-環境での準備"><a href="#Ubuntu-環境での準備" class="headerlink" title="Ubuntu 環境での準備"></a>Ubuntu 環境での準備</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt-get install libgtk-3-dev libwebkit2gtk-4.0-37 libwebkit2gtk-4.0-dev libappindicator3-dev</span><br></pre></td></tr></table></figure>

<h3 id="サンプルアプリの作成"><a href="#サンプルアプリの作成" class="headerlink" title="サンプルアプリの作成"></a>サンプルアプリの作成</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> -<span class="selector-tag">g</span> <span class="keyword">@neutralinojs</span>/neu</span><br><span class="line">neu create hello-world</span><br><span class="line">cd hello-world</span><br></pre></td></tr></table></figure>

<p>以下のファイルが生成されます。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ tree -f</span><br><span class="line">.</span><br><span class="line">├── <span class="string">./LICENSE</span></span><br><span class="line">├── <span class="string">./README.md</span></span><br><span class="line">├── <span class="string">./bin</span></span><br><span class="line">│   ├── <span class="string">./bin/WebView2Loader.dll</span></span><br><span class="line">│   ├── <span class="string">./bin/neutralino-linux_armhf</span></span><br><span class="line">│   ├── <span class="string">./bin/neutralino-linux_ia32</span></span><br><span class="line">│   ├── <span class="string">./bin/neutralino-linux_x64</span></span><br><span class="line">│   ├── <span class="string">./bin/neutralino-mac_x64</span></span><br><span class="line">│   └── <span class="string">./bin/neutralino-win_x64.exe</span></span><br><span class="line">├── <span class="string">./neutralino.config.json</span></span><br><span class="line">└── <span class="string">./resources</span></span><br><span class="line">    ├── <span class="string">./resources/icons</span></span><br><span class="line">    │   ├── <span class="string">./resources/icons/appIcon.png</span></span><br><span class="line">    │   └── <span class="string">./resources/icons/trayIcon.png</span></span><br><span class="line">    ├── <span class="string">./resources/index.html</span></span><br><span class="line">    ├── <span class="string">./resources/js</span></span><br><span class="line">    │   ├── <span class="string">./resources/js/main.js</span></span><br><span class="line">    │   └── <span class="string">./resources/js/neutralino.js</span></span><br><span class="line">    └── <span class="string">./resources/styles.css</span></span><br></pre></td></tr></table></figure>

<p>index.html, main.js, styles.css あたりを編集していけばよさそうです。</p>
<h3 id="サンプルアプリの実行"><a href="#サンプルアプリの実行" class="headerlink" title="サンプルアプリの実行"></a>サンプルアプリの実行</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">neu <span class="built_in">run</span></span><br></pre></td></tr></table></figure>

<h3 id="サンプルアプリのビルド"><a href="#サンプルアプリのビルド" class="headerlink" title="サンプルアプリのビルド"></a>サンプルアプリのビルド</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">neu build <span class="comment">--release</span></span><br></pre></td></tr></table></figure>

<p>以下のファイルが生成されます。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ tree -f -s dist/</span><br><span class="line">dist</span><br><span class="line">├── <span class="selector-attr">[        512]</span>  dist/hello-world</span><br><span class="line">│   ├── <span class="selector-attr">[     427928]</span>  dist/hello-world/WebView2Loader<span class="selector-class">.dll</span></span><br><span class="line">│   ├── <span class="selector-attr">[     813008]</span>  dist/hello-world/hello-world-linux_armhf</span><br><span class="line">│   ├── <span class="selector-attr">[     894848]</span>  dist/hello-world/hello-world-linux_ia32</span><br><span class="line">│   ├── <span class="selector-attr">[     857480]</span>  dist/hello-world/hello-world-linux_x64</span><br><span class="line">│   ├── <span class="selector-attr">[    1071672]</span>  dist/hello-world/hello-world-mac_x64</span><br><span class="line">│   ├── <span class="selector-attr">[    1741312]</span>  dist/hello-world/hello-world-win_x64<span class="selector-class">.exe</span></span><br><span class="line">│   └── <span class="selector-attr">[      34845]</span>  dist/hello-world/res<span class="selector-class">.neu</span></span><br><span class="line">└── <span class="selector-attr">[    1961616]</span>  dist/hello-world-release.zip</span><br></pre></td></tr></table></figure>

<h3 id="Linux-で実行"><a href="#Linux-で実行" class="headerlink" title="Linux で実行"></a>Linux で実行</h3><p><img src="/images/neutralinojs_linux.png" alt="Neutralinojs"></p>
<h3 id="SPA-Single-Page-Application-をデスクトップアプリにする"><a href="#SPA-Single-Page-Application-をデスクトップアプリにする" class="headerlink" title="SPA(Single Page Application) をデスクトップアプリにする"></a>SPA(Single Page Application) をデスクトップアプリにする</h3><ul>
<li><p>Appify プラグインを利用する方法<br><a href="https://github.com/neutralinojs/neutralinojs-cli-appify">https://github.com/neutralinojs/neutralinojs-cli-appify</a></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">npm install -<span class="selector-tag">g</span> @neutralinojs/neu</span><br><span class="line">neu plugins <span class="attr">--add</span> @neutralinojs/appify</span><br><span class="line">neu appify <span class="attr">--title</span> <span class="string">&quot;ktkr3d&quot;</span> https:<span class="comment">//ktkr3d.github.io</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>2021&#x2F;10&#x2F;5 時点でアプリケーションが正しく終了しない問題があります。<br><a href="https://github.com/neutralinojs/neutralinojs/issues/618">https://github.com/neutralinojs/neutralinojs/issues/618</a></p>
<p>修正版が公開されており、次のバージョンで取り込まれる予定のようです。<br><a href="https://github.com/neutralinojs/neutralinojs/commit/7e2113a838f29714e48f1b5fa30e3d8dc8741cdd">https://github.com/neutralinojs/neutralinojs/commit/7e2113a838f29714e48f1b5fa30e3d8dc8741cdd</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/neutralinojs/neutralinojs.git</span><br><span class="line"><span class="built_in">cd</span> neutralinojs</span><br></pre></td></tr></table></figure>

<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bash </span><span class="keyword">build_linux.sh</span></span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">build_windows.bat</span><br></pre></td></tr></table></figure>

<p>生成された<code>./bin/neutralino-linux_x64</code>、<code>bin\neutralino-win_x64.exe</code>を利用します。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>neutralinojs</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 21.10 on RPi4B</title>
    <url>/2021/10/17/Ubuntu-21-10-on-RPi4B/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_2110_rpi4b.png"></p>
<p>Ubuntu 21.10 を Raspberry Pi 4B にインストールしてみました。</p>
<h4 id="2021-10-23-以下の問題の修正が期待されます。"><a href="#2021-10-23-以下の問題の修正が期待されます。" class="headerlink" title="2021-10-23 以下の問題の修正が期待されます。"></a>2021-10-23 以下の問題の修正が期待されます。</h4><ul>
<li><p>HDMI output freezes under current&#x2F;proposed impish kernels<br><a href="https://bugs.launchpad.net/ubuntu/+source/linux-raspi/+bug/1946368">https://bugs.launchpad.net/ubuntu/+source/linux-raspi/+bug/1946368</a></p>
<p>現在のバージョンは</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -r -v</span><br><span class="line">5.13.0-1008-raspi <span class="comment">#9-Ubuntu SMP PREEMPT Wed Sep 29 08:27:44 UTC 2021`</span></span><br></pre></td></tr></table></figure>

<p>2021-11-08 に Updates に修正がリリースされるらしい。<a href="https://bugs.launchpad.net/ubuntu/+source/linux-raspi/+bug/1946368/comments/46"></a><br>proposed リポジトリをウォッチしよう。<a href="https://bugs.launchpad.net/ubuntu/+source/linux-raspi/+bug/1946368/comments/48"></a></p>
</li>
</ul>
<h4 id="2021-10-30-proposed-で修正版が公開されたようです。"><a href="#2021-10-30-proposed-で修正版が公開されたようです。" class="headerlink" title="2021-10-30 proposed で修正版が公開されたようです。"></a>2021-10-30 proposed で修正版が公開されたようです。</h4><p><a href="https://bugs.launchpad.net/ubuntu/+source/linux-raspi/+bug/1946368/comments/60">https://bugs.launchpad.net/ubuntu/+source/linux-raspi/+bug/1946368/comments/60</a></p>
<span id="more"></span>

<h3 id="Ubuntu-のバージョンとパッケージバージョンの整理"><a href="#Ubuntu-のバージョンとパッケージバージョンの整理" class="headerlink" title="Ubuntu のバージョンとパッケージバージョンの整理"></a>Ubuntu のバージョンとパッケージバージョンの整理</h3><table>
<thead>
<tr>
<th align="left">Ubuntu</th>
<th align="left">21.10</th>
<th align="left">21.04</th>
<th align="left">20.10</th>
<th align="left">20.04</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Codename</td>
<td align="left">impish</td>
<td align="left">hirsute</td>
<td align="left">groovy</td>
<td align="left">focal</td>
</tr>
<tr>
<td align="left">Release Date</td>
<td align="left">2021-10-14</td>
<td align="left">2021-04-22</td>
<td align="left">2020-10-22</td>
<td align="left">2020-04-23</td>
</tr>
<tr>
<td align="left">End of Life</td>
<td align="left">2022-07</td>
<td align="left">2022-01</td>
<td align="left">2021-07</td>
<td align="left">2025-04</td>
</tr>
<tr>
<td align="left">linux</td>
<td align="left">5.13.0</td>
<td align="left">5.8.0</td>
<td align="left">5.4.0</td>
<td align="left">5.3</td>
</tr>
<tr>
<td align="left">gnome-shell</td>
<td align="left">40.5</td>
<td align="left">3.38.1</td>
<td align="left">3.36.1</td>
<td align="left">3.34.1</td>
</tr>
<tr>
<td align="left">xorg-server</td>
<td align="left">1.20.13</td>
<td align="left">1.20.9</td>
<td align="left">1.20.8</td>
<td align="left">1.20.5</td>
</tr>
<tr>
<td align="left">xrdp</td>
<td align="left">9.15</td>
<td align="left">9.12</td>
<td align="left">-</td>
<td align="left">9.12</td>
</tr>
<tr>
<td align="left">pulseaudio</td>
<td align="left">15.0</td>
<td align="left">14.2</td>
<td align="left">-</td>
<td align="left">13.99</td>
</tr>
<tr>
<td align="left">pulseaudio-module-xrdp</td>
<td align="left">-</td>
<td align="left">0.5</td>
<td align="left">0.5</td>
<td align="left">0.5</td>
</tr>
</tbody></table>
<h3 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h3><h4 id="Ubuntu-メディアの作成"><a href="#Ubuntu-メディアの作成" class="headerlink" title="Ubuntu メディアの作成"></a>Ubuntu メディアの作成</h4><ol>
<li><p>Raspberry Pi Imager で SD カードに Ubuntu Server 21.10 (64bit) を書き込む。</p>
</li>
<li><p>Raspberry Pi 4B に SD カードを挿入して電源オンする。</p>
</li>
<li><p>ルータの DHCP サーバログから IP アドレスを確認する。(例: 192.168.11.4)</p>
</li>
<li><p>SSH で接続してパスワードを更新する。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh ubuntu@192.168.11.4</span><br></pre></td></tr></table></figure>
</li>
<li><p>パッケージを更新する。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt udpate</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure>
</li>
<li><p>Raspberry Pi 関連ツール</p>
<ul>
<li>ツールのインストール<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">install </span>raspi-<span class="built_in">config</span></span><br></pre></td></tr></table></figure></li>
<li>ツールの実行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vcgencmd bootloader_version</span><br><span class="line"><span class="built_in">sudo</span> rpi-eeprom-update</span><br><span class="line"><span class="built_in">sudo</span> raspi-config</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>config.txt の修正<br><a href="https://bugs.launchpad.net/ubuntu/+source/linux-raspi/+bug/1946368">https://bugs.launchpad.net/ubuntu/+source/linux-raspi/+bug/1946368</a><br>下の 2 行を追加する。</p>
<figure class="highlight bash"><figcaption><span>/boot/firmware/config.txt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Config settings specific to arm64</span></span><br><span class="line">arm_64bit=1</span><br><span class="line">dtoverlay=dwc2</span><br><span class="line">gpu_mem=512</span><br><span class="line">dtoverlay=vc4-fkms-v3d</span><br></pre></td></tr></table></figure>
</li>
<li><p>ビルド用パッケージのインストール</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install build-essential gettext meson m4</span><br><span class="line"><span class="built_in">sudo</span> apt install gdebi</span><br></pre></td></tr></table></figure>
</li>
<li><p>デスクトップ環境をインストールする。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install ubuntu-desktop-minimal</span><br></pre></td></tr></table></figure>
</li>
<li><p>日本語化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install language-pack-ja</span><br><span class="line"><span class="built_in">sudo</span> update-locale LANG=ja_JP.UTF8</span><br><span class="line"><span class="built_in">sudo</span> dpkg-reconfigure tzdata</span><br></pre></td></tr></table></figure>
</li>
<li><p>XRDP をインストール</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install xrdp</span><br></pre></td></tr></table></figure>
</li>
<li><p>netplan から network manager に切り替える。</p>
<figure class="highlight yaml"><figcaption><span>/etc/netplan/99-my-config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">NetworkManager</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Ubuntu-Desktop-の設定"><a href="#Ubuntu-Desktop-の設定" class="headerlink" title="Ubuntu Desktop の設定"></a>Ubuntu Desktop の設定</h4><ol start="13">
<li><p>ルータの DHCP サーバログから IP アドレスを確認する。(例: 192.168.11.4)</p>
</li>
<li><p>RDP で接続する。</p>
</li>
<li><p>ホームディレクトリの各フォルダ名を英語名に変更</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LANG=C xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure>
</li>
<li><p>テキストテンプレートファイルの作成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> ~/Templates/Text</span><br></pre></td></tr></table></figure>
</li>
<li><p>日本語化の続き</p>
<p>Settings &#x2F; Region and Language &#x2F; Manage Installed Languages<br>を選択すると不足パッケージがインストールされる。</p>
</li>
<li><p>「カラーマネジメントされたデバイスを作成するには認証が必要です。」の対策</p>
<figure class="highlight text"><figcaption><span>/etc/polkit-1/localauthority/50-local.d/45-allow-colord.pkla</span></figcaption><table><tr><td class="code"><pre><span class="line">[Allow Colord all Users]</span><br><span class="line">Identity=unix-user:*</span><br><span class="line">Action=org.freedesktop.color-manager.create-device;org.freedesktop.color-manager.create-profile;org.freedesktop.color-manager.delete-device;org.freedesktop.color-manager.delete-profile;org.freedesktop.color-manager.modify-device;org.freedesktop.color-manager.modify-profile</span><br><span class="line">ResultAny=no</span><br><span class="line">ResultInactive=no</span><br><span class="line">ResultActive=yes</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart polkit.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>「Authentication is required to refresh the system repositories」対策</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo &quot;X-GNOME-Autostart-enabled=false&quot; &gt;&gt; /etc/xdg/autostart/gnome-software-service.desktop</span></span><br><span class="line"><span class="comment"># echo &quot;X-GNOME-Autostart-enabled=false&quot; &gt;&gt; /etc/xdg/autostart/gnome-settings-daemon.desktop</span></span><br></pre></td></tr></table></figure>

<p>または</p>
<figure class="highlight text"><figcaption><span>/etc/polkit-1/localauthority/50-local.d/50-allow-package-management.pkla</span></figcaption><table><tr><td class="code"><pre><span class="line">[Allow Package Management all Users]</span><br><span class="line">Identity=unix-user:*</span><br><span class="line">Action=org.debian.apt.*;io.snapcraft.*;org.freedesktop.packagekit.*;com.ubuntu.update-notifier.*</span><br><span class="line">ResultAny=no</span><br><span class="line">ResultInactive=no</span><br><span class="line">ResultActive=yes</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart polkit.service</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="GNOME-Shell-の設定"><a href="#GNOME-Shell-の設定" class="headerlink" title="GNOME Shell の設定"></a>GNOME Shell の設定</h4><ol start="20">
<li><p>Tweaks のインストール</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install gnome-tweaks</span><br></pre></td></tr></table></figure>
</li>
<li><p>GNOME Shell 拡張のインストール</p>
<ul>
<li><p>GNOME Shell Extensions</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install gnome-shell-extensions</span><br></pre></td></tr></table></figure>
</li>
<li><p>Arch Menu</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitlab.com/arcmenu/ArcMenu.git</span><br><span class="line"><span class="built_in">cd</span> ArcMenu</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>Argos</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mwilck/argos.git</span><br><span class="line"><span class="built_in">cp</span> -r argos/argos@pew.worldwidemann.com ~/.local/share/gnome-shell/extensions</span><br></pre></td></tr></table></figure>
</li>
<li><p>Dash to Panel</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install gnome-shell-extension-dash-to-panel</span><br></pre></td></tr></table></figure>
</li>
<li><p>Tweaks &amp; Extensions in System Menu</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git clone https://github.<span class="keyword">com</span>/F-i-<span class="keyword">f</span>/tweaks-<span class="built_in">system</span>-<span class="keyword">menu</span>.git</span><br><span class="line"><span class="keyword">cd</span> tweaks-<span class="built_in">system</span>-<span class="keyword">menu</span></span><br><span class="line">meson build</span><br><span class="line">ninja -C build install</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>ログアウトしてログイン</p>
</li>
<li><p><code>Extensions</code> を起動し、インストールした Gnome Shell 拡張を有効化する</p>
</li>
</ol>
<h4 id="アプリケーション"><a href="#アプリケーション" class="headerlink" title="アプリケーション"></a>アプリケーション</h4><ol start="24">
<li><p>アプリケーションのインストール</p>
<ul>
<li><p>Audacious</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install audacious</span><br></pre></td></tr></table></figure></li>
<li><p>Chromium</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> snap install chromium</span><br></pre></td></tr></table></figure></li>
<li><p>Visual Studio Code<br><a href="https://code.visualstudio.com/download">https://code.visualstudio.com/download</a><br>Download .deb package</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> gdebi code_*_arm64.deb</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h4 id="XRDP-のサウンド転送"><a href="#XRDP-のサウンド転送" class="headerlink" title="XRDP のサウンド転送"></a>XRDP のサウンド転送</h4><ol start="25">
<li><p>XRDP でサウンド転送</p>
<ul>
<li><p>前提パッケージ</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt build-dep pulseaudio</span><br><span class="line"><span class="built_in">sudo</span> apt install libpulse-dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>ソースリポジトリの有効化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">software-properties-gtk</span><br></pre></td></tr></table></figure>

<p>「ソースコード」をチェック</p>
</li>
<li><p>インストール済みの pulseaudio (バージョン 15.0) のソースを展開</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/ubuntu/repos</span><br><span class="line">apt <span class="built_in">source</span> pulseaudio</span><br><span class="line"><span class="built_in">cd</span> pulseaudio-15.0+dfsg1</span><br><span class="line">meson build</span><br></pre></td></tr></table></figure></li>
<li><p>(pulseaudio-module-xrdp がサポートする) pulseaudio 14.x のソースを展開</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/ubuntu/repos</span><br><span class="line">git <span class="built_in">clone</span> -b stable-14.x https://gitlab.freedesktop.org/pulseaudio/pulseaudio.git</span><br><span class="line"><span class="built_in">cd</span> pulseaudio</span><br><span class="line">./bootstrap.sh</span><br><span class="line">./configure</span><br></pre></td></tr></table></figure></li>
<li><p>config.h の移植(14.2 から 15.0 へ)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cd</span> /home/ubuntu/repos</span><br><span class="line"><span class="attribute">cp</span> pulseaudio/config.h pulseaudio-<span class="number">15</span>.<span class="number">0</span>+dfsg1/config.h</span><br><span class="line"><span class="attribute">sed</span> -i -e &#x27;s/<span class="number">14</span>.<span class="number">2</span>/<span class="number">15</span>.<span class="number">0</span>/g&#x27; pulseaudio-<span class="number">15</span>.<span class="number">0</span>+dfsg1/config.h</span><br></pre></td></tr></table></figure></li>
<li><p>pulseaudio-module-xrdp のインストール</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/ubuntu/repos</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/neutrinolabs/pulseaudio-module-xrdp.git</span><br><span class="line"><span class="built_in">cd</span> pulseaudio-module-xrdp</span><br><span class="line">./bootstrap &amp;&amp; ./configure PULSE_DIR=/home/ubuntu/repos/pulseaudio-15.0+dfsg1</span><br><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"><span class="built_in">ls</span> $(pkg-config --variable=modlibexecdir libpulse)</span><br></pre></td></tr></table></figure>
<p>ログアウトしてログインすると、サウンドの出力デバイスが<code>xrdp sink</code>になる。<br>内蔵ヘッドフォンに戻った場合は<code>pulseaudio -k</code>で回復する。</p>
</li>
</ul>
</li>
</ol>
<h4 id="Wi-Fi-アクセスポイント"><a href="#Wi-Fi-アクセスポイント" class="headerlink" title="Wi-Fi アクセスポイント"></a>Wi-Fi アクセスポイント</h4><ol start="26">
<li><p>アクセスポイント化</p>
<p><a href="https://gist.github.com/narate/d3f001c97e1c981a59f94cd76f041140">https://gist.github.com/narate/d3f001c97e1c981a59f94cd76f041140</a></p>
</li>
</ol>
<h4 id="Bluetooth"><a href="#Bluetooth" class="headerlink" title="Bluetooth"></a>Bluetooth</h4><ol start="27">
<li><p>Bluetooth の有効化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install pi-bluetooth bluetooth bluez</span><br><span class="line"><span class="built_in">sudo</span> usermod -a -G bluetooth ubuntu</span><br><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>
</li>
<li><p>Flatpak</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install flatpak</span><br><span class="line">flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo</span><br><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="接続構成検討"><a href="#接続構成検討" class="headerlink" title="接続構成検討"></a>接続構成検討</h3><h4 id="インターネット経由接続"><a href="#インターネット経由接続" class="headerlink" title="インターネット経由接続"></a>インターネット経由接続</h4><p>クライアントから OpenVPN のトンネルを通して RPi4 に接続する方式。接続できた。</p>
<p><img src="/images/rpi4_from_internet.drawio.svg"></p>
<h4 id="ルータ経由接続"><a href="#ルータ経由接続" class="headerlink" title="ルータ経由接続"></a>ルータ経由接続</h4><p>クライアントから Wi-Fi ルータ経由で RPi4 に接続する方式。接続できた。</p>
<p><img src="/images/rpi4_from_router.drawio.svg"></p>
<h4 id="直接接続"><a href="#直接接続" class="headerlink" title="直接接続"></a>直接接続</h4><p>RPi4 を Wi-Fi アクセスポイント化して直接接続する方式。<br>ルータがない場合でも RPi4 と Android スマートフォンは接続が可能。接続できた。</p>
<p><img src="/images/rpi4_from_direct.drawio.svg"></p>
<p><a href="https://gist.github.com/narate/d3f001c97e1c981a59f94cd76f041140">https://gist.github.com/narate/d3f001c97e1c981a59f94cd76f041140</a></p>
<h4 id="画面転送"><a href="#画面転送" class="headerlink" title="画面転送"></a>画面転送</h4><p>RPi4 の画面出力を HDMI キャプチャ機器からクライアント端末の入力とする。<br>マウスとキーボードは本体に接続する。接続できたがクライアントのバッテリーの消費が激しい。</p>
<p><img src="/images/rpi4_from_capture.drawio.svg"></p>
<h3 id="メモ"><a href="#メモ" class="headerlink" title="メモ"></a>メモ</h3><h4 id="SD-カード起動"><a href="#SD-カード起動" class="headerlink" title="SD カード起動"></a>SD カード起動</h4><ul>
<li>Ubuntu Server を入れてから Ubuntu Desktop をインストールした方がよいかもしれない。</li>
<li>物理ディスプレイを HDMI 接続した環境では GDM からログイン直後に再起動してしまう。<br>以下の問題かもしれない。<br><a href="https://bugs.launchpad.net/ubuntu/+source/linux-raspi/+bug/1946368">https://bugs.launchpad.net/ubuntu/+source/linux-raspi/+bug/1946368</a></li>
<li>USB HUB を接続すると Ubuntu がうまく起動しない。</li>
</ul>
<h4 id="USB-起動"><a href="#USB-起動" class="headerlink" title="USB 起動"></a>USB 起動</h4><ul>
<li>Raspberry Pi OS は USB ブートできた</li>
<li>Ubuntu Server &#x2F; Desktop は USB ブート中に再起動がかかってループ。</li>
</ul>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>raspberry-pi</tag>
      </tags>
  </entry>
  <entry>
    <title>Minecraft Java Edition on Raspberry Pi 4B / Ubuntu 21.10</title>
    <url>/2021/10/24/Minecraft-Java-Edition-on-Raspberry-Pi-4B-Ubuntu-21-10/</url>
    <content><![CDATA[<p><img src="/images/minecraft_raspi4b_ubuntu2110.png"></p>
<p><a href="https://github.com/MultiMC/Launcher">https://github.com/MultiMC/Launcher</a><br><a href="https://forums.raspberrypi.com/viewtopic.php?f=78&t=321888">https://forums.raspberrypi.com/viewtopic.php?f=78&amp;t=321888</a></p>
<p>Raspberry Pi 4B + Ubuntu 21.10 に Minecraft をインストールしてみました。マイクロソフトアカウントでログインできます。</p>
<span id="more"></span>

<h3 id="Minecraft-Java-Edition-Microsoft-Account"><a href="#Minecraft-Java-Edition-Microsoft-Account" class="headerlink" title="Minecraft Java Edition (Microsoft Account)"></a>Minecraft Java Edition (Microsoft Account)</h3><p><img src="/images/minecraft_raspi4b_ubuntu2110_e.png"></p>
<ol>
<li><p>Pi-Apps をインストール</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Botspot/pi-apps.git</span><br><span class="line"><span class="built_in">cd</span> pi-app</span><br><span class="line">./install</span><br></pre></td></tr></table></figure>
</li>
<li><p>Pi-Apps を起動</p>
</li>
<li><p>Games &#x2F; Minecraft Java MultiMC5 をインストール<br>コンパイルが終わるまで気長に待つ。</p>
</li>
<li><p>Minecraft Java MultiMC5 を起動</p>
</li>
<li><p>Add Instance</p>
</li>
<li><p>Edit Instance &gt; Version &gt; Install Fabric</p>
</li>
<li><p>Edit Instance &gt; Version &gt; Install mods &gt; Add</p>
<ul>
<li>fabric-api-0.41.0+1.17.jar</li>
<li>iris-and-sodium-mc1.17-1.1.2+build.9.jar</li>
</ul>
</li>
<li><p>Edit Instance &gt; Settings &gt; Java &gt; Memory : Check</p>
<ul>
<li>Minimum memory allocation: 512MiB</li>
<li>Maximum memory Allocation: 1024MiB</li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>raspberry-pi</tag>
        <tag>minecraft</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Mate 21.10 on Raspberry Pi 4B</title>
    <url>/2021/11/08/Ubuntu-Mate-21-10-on-Raspberry-Pi-4B/</url>
    <content><![CDATA[<p><img src="/images/ubuntu_mate_21_10_rpi4b.png"><br><a href="https://ubuntu-mate.org/download/arm64/impish/">https://ubuntu-mate.org/download/arm64/impish/</a></p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li></li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li><p>linux-raspi の更新</p>
</li>
<li><p>xrdp のインストール</p>
</li>
<li><p>“could not acquire name on session bus” 対策</p>
</li>
</ol>
<figure class="highlight sh"><figcaption><span>/etc/xrdp/startwm.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> DBUS_SESSION_BUS_ADDRESS</span><br><span class="line"><span class="built_in">exec</span> mate-session</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> -x /etc/X11/Xsession &amp;&amp; <span class="built_in">exec</span> /etc/X11/Xsession</span><br><span class="line"><span class="built_in">exec</span> /bin/sh /etc/X11/Xsession</span><br></pre></td></tr></table></figure>

<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3>]]></content>
  </entry>
  <entry>
    <title>Slidev</title>
    <url>/2021/12/19/Slidev/</url>
    <content><![CDATA[<p><a href="https://sli.dev/">https://sli.dev/</a><br><a href="https://github.com/slidevjs/slidev">https://github.com/slidevjs/slidev</a><br>Slidev でスライドを作成してみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Pro</li>
<li>node v14.60.0</li>
</ul>
<h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><ul>
<li>NTFS 上にプロジェクトを配置するのであれば、Windows のnode を利用するのがよいかもしれない。WSL のnode ではファイルの更新がうまく検知されないみたい。</li>
<li><code>npm init slidev</code> でプロジェクトを作成するとnode_modules フォルダで260MB消費された。プロジェクトは一つだけにした方がよさそう。</li>
<li>生成された<code>slides.md</code> は使用せず、このフォルダ下にスライド群(.md)を作っていくのがよいかもしれない。</li>
<li>PDF にエクスポートするには<code>npm i -D playwright-chromium</code>しておく。<br><code>npx slidev export slidev-test.md</code>すると、<code>slidev-test-export.pdf</code>が生成される。</li>
<li>ローカル画像は<code>public</code>フォルダ下に配置する。<code>/hoge.png</code>で参照する。</li>
</ul>
<h3 id="マークダウンの例（作成中）"><a href="#マークダウンの例（作成中）" class="headerlink" title="マークダウンの例（作成中）"></a>マークダウンの例（作成中）</h3><ul>
<li><a href="/images/slidev-test.md">slidev-test.md</a></li>
</ul>
<h3 id="スライド例"><a href="#スライド例" class="headerlink" title="スライド例"></a>スライド例</h3>

	<div class="row">
    <embed src="/images/slidev-test-export.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <tags>
        <tag>markdown</tag>
        <tag>slidev</tag>
      </tags>
  </entry>
  <entry>
    <title>Development Environment on WSL</title>
    <url>/2022/02/08/Develop-Environment-on-WSL/</url>
    <content><![CDATA[<p><img src="/images/wsl-dev.png"><br><a href="https://github.com/coder/code-server">https://github.com/coder/code-server</a></p>
<p>WSL にこっそり開発環境を構築しようと思います。<br>Microsoft Store が利用不可、インターネットアクセスに認証プロキシが存在する環境とします。</p>
<h4 id="実現する機能"><a href="#実現する機能" class="headerlink" title="実現する機能"></a>実現する機能</h4><ul>
<li>WSL2 (Ubuntu 20.04, systemd 有効化)</li>
<li>Code Server (Web版Visual Studio Code)をPWA化</li>
<li>Code Server の拡張機能<ul>
<li>Japanese Language Pack (日本語化)</li>
<li>Project Manager</li>
<li>Activitus Bar</li>
<li>Draw.io (図形エディタ)</li>
</ul>
</li>
<li>Gitea (Git リポジトリ管理)</li>
<li>SliDev (スライド)</li>
</ul>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">認証プロキシ環境</td>
<td align="left"><a href="http://hoge:fuga@100.100.100.100:8080/">http://hoge:fuga@100.100.100.100:8080</a></td>
</tr>
<tr>
<td align="left">ローカルホスト: OS</td>
<td align="left">Windows 10 Pro + WSL2</td>
</tr>
<tr>
<td align="left">ローカルホスト: WSL</td>
<td align="left">WSL2 (Ubuntu 20.4)</td>
</tr>
<tr>
<td align="left">ローカルホスト: Microsoft Store</td>
<td align="left">利用不可</td>
</tr>
<tr>
<td align="left">ローカルホスト: ブラウザ</td>
<td align="left">Google Chrome または Microsoft Edge</td>
</tr>
<tr>
<td align="left">リモートホスト: OS</td>
<td align="left">Windows 10 Home</td>
</tr>
<tr>
<td align="left">リモートホスト: ブラウザ</td>
<td align="left">Google Chrome または Microsoft Edge</td>
</tr>
</tbody></table>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h4><ul>
<li>WSL の有効化<br>[コントロールパネル] [プログラムと機能] [Windows の機能の有効化または無効化]で<ul>
<li>[Linux用Windowsサブシステム]を有効化</li>
<li>[仮想マシンプラットフォーム]を有効化</li>
</ul>
</li>
<li>WSL ディストリビューションをダウンロード<br><a href="https://docs.microsoft.com/ja-jp/windows/wsl/install-manual#downloading-distributions">https://docs.microsoft.com/ja-jp/windows/wsl/install-manual#downloading-distributions</a><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> &gt; <span class="built_in">Add-AppxPackage</span> .\app_name.appx</span><br></pre></td></tr></table></figure></li>
<li>WSL をバージョン2 に設定<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">PS</span> &gt; <span class="string">wsl</span> –<span class="built_in">set-default-version</span> <span class="string">2</span></span><br></pre></td></tr></table></figure></li>
<li>systemd の有効化<br><a href="https://github.com/arkane-systems/genie">https://github.com/arkane-systems/genie</a><br>タスクスケジューラでログイン時に<code>wsl genie -s</code>を設定</li>
<li>Proxy 設定<figure class="highlight bash"><figcaption><span>~/.bash_aliases</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> proxy=<span class="string">&#x27;read -p &quot;user: &quot; proxy_user &amp;&amp; read -sp &quot;pass: &quot; proxy_pass &amp;&amp; echo &amp;&amp; export &#123;http,https,ftp&#125;_proxy=&quot;http://$proxy_user:$proxy_pass@100.100.100.100:8080&quot;&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ proxy</span><br><span class="line">user: ubuntu</span><br><span class="line">pass: ********</span><br><span class="line">$ <span class="built_in">sudo</span> -E apt update</span><br><span class="line">$ <span class="built_in">sudo</span> -E apt upgrade</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Code-Server"><a href="#Code-Server" class="headerlink" title="Code Server"></a>Code Server</h4><ul>
<li><p>Code Server</p>
<ul>
<li><p>インストール<br><a href="https://github.com/coder/code-server#user-content-getting-started">https://github.com/coder/code-server#user-content-getting-started</a></p>
</li>
<li><p>拡張機能の導入</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">code</span>-server <span class="attr">--install-extension</span> &lt;Extension ID&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">Extension Name</th>
<th align="left">Extension ID</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Activitus Bar</td>
<td align="left">gruntfuggly.activitusbar</td>
</tr>
<tr>
<td align="left">Draw.io Integration</td>
<td align="left">hediet.vscode-drawio</td>
</tr>
<tr>
<td align="left">Japanese Language Pack</td>
<td align="left">ms-ceintl.vscode-language-pack-ja</td>
</tr>
<tr>
<td align="left">Project Manager</td>
<td align="left">alefragnani.project-manager</td>
</tr>
</tbody></table>
</li>
<li><p>日本語化</p>
<figure class="highlight json"><figcaption><span>~/.local/share/code-server/User/argv.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;locale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ja&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>認証なし設定、リモート公開設定</p>
<figure class="highlight yaml"><figcaption><span>~/.config/code-server/config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">bind-addr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">auth:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">f30444560218fde718b8ddb8</span></span><br><span class="line"><span class="attr">cert:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>gitea</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># snap install gitea</span></span><br></pre></td></tr></table></figure>

<p><code>http://localhost:3000</code> にアクセスし、右上からアカウントを登録</p>
</li>
<li><p>SLidev</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm init slidev</span><br><span class="line">$ npx slidev</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="ポートフォワード"><a href="#ポートフォワード" class="headerlink" title="ポートフォワード"></a>ポートフォワード</h4><ul>
<li>以下のポートをWSL に転送<br>3000|Gitea<br>8080|Code Server</li>
<li>以下のスクリプトを起動時に実行<figure class="highlight bash"><figcaption><span>~/bin/wsl-portforward.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">IP=$(ip -f inet -o addr show eth0 | <span class="built_in">cut</span> -d\  -f 7 | <span class="built_in">cut</span> -d/ -f 1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> PORT <span class="keyword">in</span> 3000 8080; <span class="keyword">do</span></span><br><span class="line">  /mnt/c/Windows/system32/netsh.exe interface portproxy delete v4tov4 listenport=<span class="variable">$PORT</span></span><br><span class="line">  /mnt/c/Windows/system32/netsh.exe interface portproxy add    v4tov4 listenport=<span class="variable">$PORT</span> connectaddress=<span class="variable">$IP</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="PWA-化"><a href="#PWA-化" class="headerlink" title="PWA 化"></a>PWA 化</h4><p><code>http://localhost:8080</code>にアクセスするとブラウザのアドレスバー右側にアイコンが表示されるのでクリック。</p>
<ul>
<li>Chromeなら「PCと下向き矢印」</li>
<li>Microsoft Edgeでは「グリッドとプラス記号」</li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul>
<li>Code Server<br><a href="http://localhost:8080/">http://localhost:8080</a><br>またはタスクバーのアイコンから起動</li>
<li>Gitea<br><a href="http://localhost:3000/">http://localhost:3000</a></li>
</ul>
]]></content>
      <tags>
        <tag>wsl</tag>
        <tag>code-server</tag>
      </tags>
  </entry>
  <entry>
    <title>Draw.io on code-server</title>
    <url>/2022/02/22/Draw-io-on-Code-Server/</url>
    <content><![CDATA[<p><img src="/images/drawio_codeserver.png"></p>
<p>WSL 上で実行しているcode-server でdraw.io integration 拡張を利用する方法を考えてみました。</p>
<p>はじめに以下の挙動になりました。</p>
<table>
<thead>
<tr>
<th align="left">利用ホスト</th>
<th align="left">OS</th>
<th align="left">URL</th>
<th align="left">Draw.io の状態</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ローカル</td>
<td align="left">Windows</td>
<td align="left"><a href="http://localhost:8080/">http://localhost:8080</a></td>
<td align="left">有効</td>
</tr>
<tr>
<td align="left">ローカル</td>
<td align="left">Windows</td>
<td align="left"><a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></td>
<td align="left">有効</td>
</tr>
<tr>
<td align="left">ローカル</td>
<td align="left">Windows</td>
<td align="left"><a href="http://192.168.11.2:8080/">http://192.168.11.2:8080</a></td>
<td align="left">無効</td>
</tr>
<tr>
<td align="left">リモート</td>
<td align="left">Windows&#x2F;Linux</td>
<td align="left"><a href="http://192.168.11.2:8080/">http://192.168.11.2:8080</a></td>
<td align="left">無効</td>
</tr>
<tr>
<td align="left">リモート</td>
<td align="left">Windows&#x2F;Linux</td>
<td align="left"><a href="http://server:8080/">http://server:8080</a></td>
<td align="left">無効</td>
</tr>
</tbody></table>
<p>localhost 指定の場合に有効になるようです。<br>利用するOS(localhost) の特定ポートをWSL のcode-server のポートに転送してあげればよいようです。</p>
<span id="more"></span>

<h3 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h3><p><img src="/images/drawio_codeserver.drawio.svg"></p>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ul>
<li><p>ローカルWindows の設定</p>
<p>WSL 上で以下を実行しておく。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">IP=$(ip -f inet -o addr show eth0 | <span class="built_in">cut</span> -d\  -f 7 | <span class="built_in">cut</span> -d/ -f 1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> PORT <span class="keyword">in</span> 8080; <span class="keyword">do</span></span><br><span class="line">  /mnt/c/Windows/system32/netsh.exe interface portproxy delete v4tov4 listenport=<span class="variable">$PORT</span></span><br><span class="line">  /mnt/c/Windows/system32/netsh.exe interface portproxy add    v4tov4 listenport=<span class="variable">$PORT</span> connectaddress=<span class="variable">$IP</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>リモートWindows の場合</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">netsh<span class="built_in"> interface </span>portproxy <span class="built_in">add</span> v4tov4 <span class="attribute">listenport</span>=8080 <span class="attribute">listenaddr</span>=127.0.0.1 <span class="attribute">connectport</span>=8080 <span class="attribute">connectaddress</span>=192.168.11.2</span><br></pre></td></tr></table></figure>
</li>
<li><p>リモートLinux の場合</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redir -n 0.0.0.0:8080 192.168.11.2:8080</span><br></pre></td></tr></table></figure>
<p><code>gnome-session-properties</code> でスタートアップ登録しておくと便利</p>
</li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>Chrome で<code>http://localhost:8080/</code> にアクセスします。<br>アドレスバーのPWA 化のボタンが表示されたらタスクバー(Dash to Panel 等)に起動ボタンを登録できます。</p>
]]></content>
      <tags>
        <tag>vscode</tag>
        <tag>draw.io</tag>
      </tags>
  </entry>
  <entry>
    <title>Argos GNOME 42 Support</title>
    <url>/2022/03/19/Argos-GNOME-42-Support/</url>
    <content><![CDATA[<p><img src="/images/argos_gnome42.png" alt="argos_gnome42.png"><br><a href="https://github.com/ktkr3d/argos">https://github.com/ktkr3d/argos</a><br>GNOME Shell Extension のArgos をGNOME Shell 42 で実行できるようにしてみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Ubuntu 22.04 Jammy</li>
<li>GNOME Shell 42.beta</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ktkr3d/argos.git</span><br><span class="line">$ <span class="built_in">mkdir</span> -p ~/.local/share/gnome-shell/extensions</span><br><span class="line">$ <span class="built_in">cp</span> -r argos/argos@pew.worldwidemann.com ~/.local/share/gnome-shell/extensions</span><br></pre></td></tr></table></figure>

<p>X11 の場合は[Alt]-[F2] で<code>r</code>してから拡張機能を有効化</p>
<h3 id="パッチの内容"><a href="#パッチの内容" class="headerlink" title="パッチの内容"></a>パッチの内容</h3><p><a href="/images/argos_gnome42.patch">argos_gnome42.patch</a></p>
<figure class="highlight patch"><figcaption><span>argos_gnome42.patch</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">diff --git argos@pew.worldwidemann.com/button.js argos@pew.worldwidemann.com/button.js</span></span><br><span class="line"><span class="comment">index 3565603..8c4164d 100644</span></span><br><span class="line"><span class="comment">--- argos@pew.worldwidemann.com/button.js</span></span><br><span class="line"><span class="comment">+++ argos@pew.worldwidemann.com/button.js</span></span><br><span class="line"><span class="meta">@@ -12,6 +12,7 @@</span></span><br><span class="line"> const Lang = imports.lang;</span><br><span class="line"> const GLib = imports.gi.GLib;</span><br><span class="line"> const Gio = imports.gi.Gio;</span><br><span class="line"><span class="addition">+const GObject = imports.gi.GObject;</span></span><br><span class="line"> const PanelMenu = imports.ui.panelMenu;</span><br><span class="line"> const PopupMenu = imports.ui.popupMenu;</span><br><span class="line"> const Mainloop = imports.mainloop;</span><br><span class="line"><span class="meta">@@ -21,12 +22,10 @@</span> const ArgosLineView = Extension.imports.lineview.ArgosLineView;</span><br><span class="line"> const ArgosMenuItem = Extension.imports.menuitem.ArgosMenuItem;</span><br><span class="line"> const Utilities = Extension.imports.utilities;</span><br><span class="line"> </span><br><span class="line"><span class="deletion">-var ArgosButton = new Lang.Class(&#123;</span></span><br><span class="line"><span class="deletion">-  Name: &quot;ArgosButton&quot;,</span></span><br><span class="line"><span class="deletion">-  Extends: PanelMenu.Button,</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-  _init: function(file, settings) &#123;</span></span><br><span class="line"><span class="deletion">-    this.parent(0, &quot;&quot;, false);</span></span><br><span class="line"><span class="addition">+var ArgosButton = GObject.registerClass(</span></span><br><span class="line"><span class="addition">+class ArgosButton extends PanelMenu.Button &#123;</span></span><br><span class="line"><span class="addition">+  _init(file, settings) &#123;</span></span><br><span class="line"><span class="addition">+    super._init(0, &quot;&quot;, false);</span></span><br><span class="line"> </span><br><span class="line">     this._file = file;</span><br><span class="line">     this._updateInterval = settings.updateInterval;</span><br><span class="line"><span class="meta">@@ -52,9 +51,9 @@</span> var ArgosButton = new Lang.Class(&#123;</span><br><span class="line">           this.update();</span><br><span class="line">       &#125;));</span><br><span class="line">     &#125;</span><br><span class="line"><span class="deletion">-  &#125;,</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="deletion">-  _onDestroy: function() &#123;</span></span><br><span class="line"><span class="addition">+  _onDestroy() &#123;</span></span><br><span class="line">     this._isDestroyed = true;</span><br><span class="line"> </span><br><span class="line">     if (this._updateTimeout !== null)</span><br><span class="line"><span class="meta">@@ -63,18 +62,18 @@</span> var ArgosButton = new Lang.Class(&#123;</span><br><span class="line">       Mainloop.source_remove(this._cycleTimeout);</span><br><span class="line"> </span><br><span class="line">     this.menu.removeAll();</span><br><span class="line"><span class="deletion">-  &#125;,</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="deletion">-  update: function() &#123;</span></span><br><span class="line"><span class="addition">+  update() &#123;</span></span><br><span class="line">     if (this._updateTimeout !== null) &#123;</span><br><span class="line">       Mainloop.source_remove(this._updateTimeout);</span><br><span class="line">       this._updateTimeout = null;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     this._update();</span><br><span class="line"><span class="deletion">-  &#125;,</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="deletion">-  _update: function() &#123;</span></span><br><span class="line"><span class="addition">+  _update() &#123;</span></span><br><span class="line">     if (this._updateRunning)</span><br><span class="line">       return;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@@ -106,9 +105,9 @@</span> var ArgosButton = new Lang.Class(&#123;</span><br><span class="line">       log(&quot;Unable to execute file &#x27;&quot; + this._file.get_basename() + &quot;&#x27;: &quot; + error);</span><br><span class="line">       this._updateRunning = false;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="deletion">-  &#125;,</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="deletion">-  _processOutput: function(output) &#123;</span></span><br><span class="line"><span class="addition">+  _processOutput(output) &#123;</span></span><br><span class="line">     let buttonLines = [];</span><br><span class="line">     let dropdownLines = [];</span><br><span class="line"> </span><br><span class="line"><span class="comment">diff --git argos@pew.worldwidemann.com/metadata.json argos@pew.worldwidemann.com/metadata.json</span></span><br><span class="line"><span class="comment">index bafe390..722244c 100644</span></span><br><span class="line"><span class="comment">--- argos@pew.worldwidemann.com/metadata.json</span></span><br><span class="line"><span class="comment">+++ argos@pew.worldwidemann.com/metadata.json</span></span><br><span class="line"><span class="meta">@@ -12,6 +12,7 @@</span></span><br><span class="line">     &quot;3.36&quot;,</span><br><span class="line">     &quot;3.38&quot;,</span><br><span class="line">     &quot;40&quot;,</span><br><span class="line"><span class="deletion">-    &quot;41&quot;</span></span><br><span class="line"><span class="addition">+    &quot;41&quot;,</span></span><br><span class="line"><span class="addition">+    &quot;42&quot;</span></span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3>]]></content>
      <tags>
        <tag>gnome-shell</tag>
        <tag>argos</tag>
      </tags>
  </entry>
  <entry>
    <title>CHUWI Hi 10 Go</title>
    <url>/2022/04/06/CHUWI-Hi-10-Go/</url>
    <content><![CDATA[<p><img src="/images/hi10go.png"><br><a href="https://www.chuwi.com/jp/product/items/Chuwi-Hi10-Go.html">https://www.chuwi.com/jp/product/items/Chuwi-Hi10-Go.html</a></p>
<p>CHUWI Hi 10 Go + Ubuntu 22.04</p>
<h4 id="CHUWI-Hi-10-Go-の新旧スペック比較"><a href="#CHUWI-Hi-10-Go-の新旧スペック比較" class="headerlink" title="CHUWI Hi 10 Go の新旧スペック比較"></a>CHUWI Hi 10 Go の新旧スペック比較</h4><p>Hi 10 Go は一つの型式で２つのスペックがあるようです。</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">旧 Hi 10 Go</th>
<th align="left">新Hi 10 Go</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CPU</td>
<td align="left">Celoron N4500</td>
<td align="left">Celeron N5100</td>
</tr>
<tr>
<td align="left">イヤフォンジャック</td>
<td align="left">あり</td>
<td align="left">なし</td>
</tr>
<tr>
<td align="left">スタイラス</td>
<td align="left">対応</td>
<td align="left">非対応?</td>
</tr>
</tbody></table>
<p>カバーキーボードのファンクションキー修飾配置も若干異なるみたいです。</p>
<span id="more"></span>

<h3 id="ハード仕様"><a href="#ハード仕様" class="headerlink" title="ハード仕様"></a>ハード仕様</h3><table>
<thead>
<tr>
<th align="left"></th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">CPU</td>
<td align="left">Celeron N5100</td>
</tr>
<tr>
<td align="left">Memory</td>
<td align="left">6GB</td>
</tr>
<tr>
<td align="left">Storage</td>
<td align="left">128GB</td>
</tr>
<tr>
<td align="left">Display</td>
<td align="left">10.1</td>
</tr>
<tr>
<td align="left">Resolution</td>
<td align="left">1920*1200</td>
</tr>
<tr>
<td align="left">Weight</td>
<td align="left">600 g</td>
</tr>
</tbody></table>
<h3 id="気になる仕様"><a href="#気になる仕様" class="headerlink" title="気になる仕様"></a>気になる仕様</h3><ul>
<li>背面カバーは意外と重いので普段は取り外し</li>
<li>キーボード<ul>
<li>キーボードは意外と打ちやすい</li>
<li>US 配列<br>左 Alt キーを無変換モード、右 Alt キーを変換モードに割り当てます</li>
<li>Insert キーがない<br>vi を使うときに困るので Caps Lock キーに Insert キーを割り当てます</li>
<li>物理ファンクションキーがない</li>
</ul>
</li>
<li>インタフェース<ul>
<li>起動時は電源ボタンを 1 ～ 2 秒押す</li>
<li>オーディオミニジャックがない<br>bluetooth オーディオや USB オーディオは普通に動作する</li>
<li>USB Type-C<br>上が USB 2.0、下が USB 3.0(フル)。どちらも充電可能。</li>
</ul>
</li>
</ul>
<h3 id="Windows-10-Home"><a href="#Windows-10-Home" class="headerlink" title="Windows 10 Home"></a>Windows 10 Home</h3><h4 id="ソフトウェア"><a href="#ソフトウェア" class="headerlink" title="ソフトウェア"></a>ソフトウェア</h4><ul>
<li>Visual Studio Code</li>
<li>サクラエディタ</li>
<li>Audacious</li>
<li>Kodi</li>
<li>OBS</li>
</ul>
<h4 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h4><ul>
<li>左 Alt を無変換モード、右 Alt を変換モード<br>alt-ime-ahk</li>
<li>Caps Lock を Insert に<br>Change Key</li>
<li>外部ディスプレイとして使う<br>OBS を起動して、USB Camera の入力を最大表示する。OBS なら実用に耐えられそう。<br><img src="/images/hi10go_monitor.drawio.svg"></li>
</ul>
<h3 id="Ubuntu-22-04"><a href="#Ubuntu-22-04" class="headerlink" title="Ubuntu 22.04"></a>Ubuntu 22.04</h3><h4 id="ソフトウェア-1"><a href="#ソフトウェア-1" class="headerlink" title="ソフトウェア"></a>ソフトウェア</h4><ul>
<li>GNOME Shell Extension<ul>
<li>Dash to Panel</li>
<li>Argos</li>
<li>Tweaks and Extensions</li>
</ul>
</li>
<li>Visual Studio Code</li>
<li>Audacious</li>
<li>Kodi</li>
<li>fcitx5</li>
</ul>
<h4 id="設定-1"><a href="#設定-1" class="headerlink" title="設定"></a>設定</h4><ul>
<li>左 Alt を無変換モード、右 Alt を変換モード<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install fcitx5-mozc</span><br><span class="line">$ im-config -n fcitx5</span><br><span class="line">$ reboot</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ fcitx-config-qt</span><br></pre></td></tr></table></figure>
<ul>
<li>一時的に第一入力メソッドに切り替える: ー</li>
<li>入力メソッドを有効にする: 右 Alt</li>
<li>入力メソッドをオフにする: 左 Alt</li>
</ul>
</li>
<li>Caps Lock を Insert に<figure class="highlight text"><figcaption><span>/usr/share/X11/xkb/symbols/pc</span></figcaption><table><tr><td class="code"><pre><span class="line">//key &lt;CAPS&gt; &#123;	[ Caps_Lock		]	&#125;;</span><br><span class="line">key &lt;CAPS&gt; &#123;	[ Insert  		]	&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h4><ul>
<li>本体スピーカーが鳴らない</li>
<li>スリープから復帰しない</li>
<li>傾きの検知方向がおかしいので手動で固定</li>
<li>Wayland とX11 で挙動が異なるところがあります。Dash to Panel のタッチ操作、Gnome Shell の画面の回転ロックとか。</li>
</ul>
]]></content>
      <tags>
        <tag>gnome</tag>
        <tag>ubuntu</tag>
        <tag>hi10go</tag>
      </tags>
  </entry>
  <entry>
    <title>Tauri</title>
    <url>/2022/06/19/Tauri/</url>
    <content><![CDATA[<p><img src="/images/tauri.png"></p>
<p><a href="https://github.com/tauri-apps/tauri">https://github.com/tauri-apps/tauri</a></p>
<p>Tauri を試してみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Ubuntu 22.04 LTS amd64</li>
<li>node v18.4.0</li>
<li>npm 8.12.1</li>
<li>npm-run-tauri 1.0.0</li>
<li>cargo 1.61.0 (a028ae4 2022-04-29)</li>
<li>rustc 1.61.0 (fe5b13d68 2022-05-18)</li>
<li>rustup 1.24.3 (ce5817a94 2021-05-31)</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>Node.js のインストール</li>
</ol>
<figure class="highlight bash"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> N_PREFIX=<span class="variable">$HOME</span>/.n</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$N_PREFIX</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ . ~/.bashrc</span><br><span class="line">$ <span class="built_in">sudo</span> apt install nodejs npm</span><br><span class="line">$ <span class="built_in">sudo</span> npm install n -g</span><br><span class="line">$ <span class="built_in">sudo</span> apt purge nodejs npm</span><br><span class="line">$ n latest</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Tauri 前提ライブラリのインストール</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update</span><br><span class="line">$ <span class="built_in">sudo</span> apt install libwebkit2gtk-4.0-dev \</span><br><span class="line">    build-essential \</span><br><span class="line">    curl \</span><br><span class="line">    wget \</span><br><span class="line">    libssl-dev \</span><br><span class="line">    libgtk-3-dev \</span><br><span class="line">    libayatana-appindicator3-dev \</span><br><span class="line">    librsvg2-dev</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>rust のインストール</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 https://sh.rustup.rs -sSf | sh</span><br><span class="line">$ . ~/.bashrc</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>tauri-app の作成と実行</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm create tauri-app</span><br><span class="line">$ <span class="built_in">cd</span> tauri-app</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run tauri dev</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>identifier の変更</li>
</ol>
<figure class="highlight json"><figcaption><span>./src-tauri/tauri.conf.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;identifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.tauri.dev&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><figcaption><span>./src-tauri/tauri.conf.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;identifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;io.github.ktkr3d&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>ビルドと実行</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run tauri build</span><br><span class="line">$ ./src-tauri/target/release/tauri-app</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>ロードモジュールとパッケージのファイルサイズ</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find . -name tauri-app -<span class="built_in">ls</span></span><br><span class="line">  2265545  13264 -rwxrwxr-x   1 ubuntu   ubuntu   13578488  6月 20 00:20 ./src-tauri/target/release/bundle/deb/tauri-app_0.1.0_amd64/data/usr/bin/tauri-app</span><br><span class="line">  2379736  13264 -rwxrwxr-x   2 ubuntu   ubuntu   13578488  6月 20 00:20 ./src-tauri/target/release/tauri-app</span><br><span class="line">$ find . -name *.deb -<span class="built_in">ls</span></span><br><span class="line">  2265566   4828 -rw-rw-r--   1 ubuntu   ubuntu    4942278  6月 20 00:20 ./src-tauri/target/release/bundle/deb/tauri-app_0.1.0_amd64.deb</span><br><span class="line">$ find . -name *.AppImage -<span class="built_in">ls</span></span><br><span class="line">  2137245  73344 -rwxr-xr-x   1 ubuntu   ubuntu   75101376  6月 20 00:22 ./src-tauri/target/release/bundle/appimage/tauri-app_0.1.0_amd64.AppImage</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>tauri</tag>
      </tags>
  </entry>
  <entry>
    <title>Neutralinojs + Vue3</title>
    <url>/2022/07/10/Neutralinojs-Vue3/</url>
    <content><![CDATA[<p><img src="/images/neutralinojs-vue3.png"></p>
<p><a href="https://github.com/ktkr3d/neutralinojs-vue">https://github.com/ktkr3d/neutralinojs-vue</a><br><a href="https://github.com/neutralinojs/neutralinojs">https://github.com/neutralinojs/neutralinojs</a><br><a href="https://neutralino.js.org/docs/how-to/use-a-frontend-library/">https://neutralino.js.org/docs/how-to/use-a-frontend-library/</a></p>
<p>Neutralinojs でVue3 を使ってみました。<br>React を導入する手順を参考にしてVue3 に置き換えてみました。<br>Windows 10 (x64)、Ubuntu 22.04 (x64)、Ubuntu 22.04 (arm64)で動作しました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Pro</li>
<li>node v16.13.1</li>
<li>npm 8.1.2</li>
<li>neutralinojs v4.6.0</li>
<li>vue 3.2.37</li>
</ul>
<h3 id="再利用するためのリポジトリと使い方"><a href="#再利用するためのリポジトリと使い方" class="headerlink" title="再利用するためのリポジトリと使い方"></a>再利用するためのリポジトリと使い方</h3><p><a href="https://github.com/ktkr3d/neutralinojs-vue">https://github.com/ktkr3d/neutralinojs-vue</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @neutralinojs/neu</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ktkr3d/neutralinojs-vue.git</span><br><span class="line"><span class="built_in">cd</span> neutralinojs-vue/vue-src</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">neu update</span><br><span class="line">neu run</span><br></pre></td></tr></table></figure>

<h3 id="私が導入した手順"><a href="#私が導入した手順" class="headerlink" title="私が導入した手順"></a>私が導入した手順</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">neu <span class="keyword">create</span> myapp <span class="comment">--template neutralinojs/neutralinojs-zero</span></span><br><span class="line">cd myapp</span><br><span class="line">npm init vue<span class="variable">@latest</span></span><br></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">√ Project name: <span class="built_in">..</span>. myapp-vue</span><br><span class="line">√ <span class="built_in">Add</span> TypeScript? <span class="built_in">..</span>. <span class="literal">No</span> / <span class="literal">Yes</span></span><br><span class="line">√ <span class="built_in">Add</span> JSX Support? <span class="built_in">..</span>. <span class="literal">No</span> / <span class="literal">Yes</span></span><br><span class="line">√ <span class="built_in">Add</span> Vue Router <span class="keyword">for</span> Single<span class="built_in"> Page </span>Application development? <span class="built_in">..</span>. <span class="literal">No</span> / <span class="literal">Yes</span></span><br><span class="line">√ <span class="built_in">Add</span> Pinia <span class="keyword">for</span> state management? <span class="built_in">..</span>. <span class="literal">No</span> / <span class="literal">Yes</span></span><br><span class="line">√ <span class="built_in">Add</span> Vitest <span class="keyword">for</span> Unit Testing? <span class="built_in">..</span>. <span class="literal">No</span> / <span class="literal">Yes</span></span><br><span class="line">√ <span class="built_in">Add</span> Cypress <span class="keyword">for</span> End-to-End testing? <span class="built_in">..</span>. <span class="literal">No</span> / <span class="literal">Yes</span></span><br><span class="line">√ <span class="built_in">Add</span> ESLint <span class="keyword">for</span> code quality? <span class="built_in">..</span>. <span class="literal">No</span> / <span class="literal">Yes</span></span><br><span class="line">√ <span class="built_in">Add</span> Prettier <span class="keyword">for</span> code formatting? <span class="built_in">..</span>. <span class="literal">No</span> / <span class="literal">Yes</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> myapp-vue</span><br><span class="line">npm install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># rm -rf www</span></span><br><span class="line"><span class="built_in">rmdir</span> www</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><figcaption><span>neutralino.config.json</span></figcaption><table><tr><td class="code"><pre><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;applicationId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;js.neutralino.zero&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;defaultMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;window&quot;</span><span class="punctuation">,</span></span><br><span class="line">-  <span class="attr">&quot;documentRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/www/&quot;</span><span class="punctuation">,</span></span><br><span class="line">+  <span class="attr">&quot;documentRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/myapp-vue/dist/&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;enableServer&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;enableNativeAPI&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;nativeAllowList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">     <span class="string">&quot;app.*&quot;</span></span><br><span class="line">   <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;modes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myapp&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">800</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;minWidth&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;minHeight&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">-      <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/www/icon.png&quot;</span></span><br><span class="line">+      <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/myapp-vue/public/favicon.ico&quot;</span></span><br><span class="line">     <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;cli&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;binaryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myapp&quot;</span><span class="punctuation">,</span></span><br><span class="line">-    <span class="attr">&quot;resourcesPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/www/&quot;</span><span class="punctuation">,</span></span><br><span class="line">+    <span class="attr">&quot;resourcesPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/myapp-vue/dist/&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;extensionsPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/extensions/&quot;</span><span class="punctuation">,</span></span><br><span class="line">-    <span class="attr">&quot;clientLibrary&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/www/neutralino.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">+    <span class="attr">&quot;clientLibrary&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/myapp-vue/public/neutralino.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;binaryVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.6.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;clientVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.5.0&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">neu <span class="keyword">update</span></span><br><span class="line"><span class="keyword">cd</span> myapp-vue</span><br><span class="line">npm <span class="keyword">run</span> build</span><br><span class="line"><span class="keyword">cd</span> ..</span><br><span class="line">neu <span class="keyword">run</span></span><br></pre></td></tr></table></figure>

<h3 id="サイドメニュー"><a href="#サイドメニュー" class="headerlink" title="サイドメニュー"></a>サイドメニュー</h3><p><img src="/images/neutralinojs-vue-sidemenu.png"></p>
]]></content>
      <tags>
        <tag>neutralinojs</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Neutralinojs + Nuxt3</title>
    <url>/2022/07/12/Neutralinojs-Nuxt3/</url>
    <content><![CDATA[<p><img src="/images/neutralinojs_nuxt3.png"></p>
<p><a href="https://github.com/ktkr3d/neutralinojs-nuxt3">https://github.com/ktkr3d/neutralinojs-nuxt3</a><br><a href="https://github.com/neutralinojs/neutralinojs">https://github.com/neutralinojs/neutralinojs</a><br><a href="https://v3.nuxtjs.org/">https://v3.nuxtjs.org/</a><br>Neutralinojs でNuxt3 を使ってみました。<br>Windows 10 (x64)、Ubuntu 22.04 (x64)、Ubuntu 22.04 (arm64)で動作しました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Pro</li>
<li>node v16.13.1</li>
<li>npm 8.1.2</li>
<li>neutralinojs v4.6.0</li>
<li>vue 3.2.37</li>
<li>nuxt 3.0.0-rc.4</li>
</ul>
<h3 id="再利用するためのリポジトリと使い方"><a href="#再利用するためのリポジトリと使い方" class="headerlink" title="再利用するためのリポジトリと使い方"></a>再利用するためのリポジトリと使い方</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @neutralinojs/neu</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ktkr3d/neutralinojs-nuxt3.git</span><br><span class="line"><span class="built_in">cd</span> neutralinojs-nuxt3/nuxt3-src</span><br><span class="line">npm install</span><br><span class="line">npm run generate</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">neu update</span><br><span class="line">neu run</span><br></pre></td></tr></table></figure>

<h3 id="私が導入した手順"><a href="#私が導入した手順" class="headerlink" title="私が導入した手順"></a>私が導入した手順</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">neu create neutralinojs-nuxt3 <span class="params">--template</span> neutralinojs/neutralinojs-zero</span><br><span class="line"><span class="keyword">cd</span> neutralinojs-nuxt3</span><br><span class="line">npx nuxi init nuxt3-src</span><br><span class="line"><span class="keyword">cd</span> nuxt3-src</span><br><span class="line">npm install</span><br><span class="line">npm run generate</span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><figcaption><span>neutralinojs.config.json</span></figcaption><table><tr><td class="code"><pre><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;applicationId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;js.neutralino.zero&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;defaultMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;window&quot;</span><span class="punctuation">,</span></span><br><span class="line">-   <span class="attr">&quot;documentRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/www/&quot;</span><span class="punctuation">,</span></span><br><span class="line">+   <span class="attr">&quot;documentRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/nuxt3-src/dist/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;enableServer&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;enableNativeAPI&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nativeAllowList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;app.*&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;modes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;neutralinojs-nuxt3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">800</span><span class="punctuation">,</span></span><br><span class="line">-       <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">+       <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">605</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;minWidth&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;minHeight&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/www/icon.png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cli&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;binaryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;neutralinojs-nuxt3&quot;</span><span class="punctuation">,</span></span><br><span class="line">-     <span class="attr">&quot;resourcesPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/www/&quot;</span><span class="punctuation">,</span></span><br><span class="line">+     <span class="attr">&quot;resourcesPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/nuxt3-src/dist/&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extensionsPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/extensions/&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;clientLibrary&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/www/neutralino.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;binaryVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.6.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;clientVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.5.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">neu <span class="keyword">update</span></span><br><span class="line">neu <span class="keyword">run</span></span><br></pre></td></tr></table></figure>

<h3 id="Windows-環境でのneu-build-失敗対策"><a href="#Windows-環境でのneu-build-失敗対策" class="headerlink" title="Windows 環境でのneu build 失敗対策"></a>Windows 環境での<code>neu build</code> 失敗対策</h3><p><code>npm run generate</code>で<code>nuxt3-src/dist</code>がシンボリックリンクで作成される。その影響によりWindows 環境では<code>neu build</code> コマンドがファイル群を意図したとおりにコピーできずに失敗する。<br><code>nuxt3-src/dist</code> がシンボリックリンクであっても普通のディレクトリとしてコピーされるように、fs-extra のcopy メソッドのdereference オプションをtrue に設定する。</p>
<figure class="highlight javascript"><figcaption><span>%APPDATA%\npm\node_modules\@neutralinojs\neu\src\modules\bundler.js</span></figcaption><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">mkdirSync</span>(<span class="string">`.tmp`</span>, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">//await fse.copy(`./$&#123;resourcesDir&#125;`, `.tmp/$&#123;resourcesDir&#125;`, &#123;overwrite: true&#125;);</span></span><br><span class="line"><span class="keyword">await</span> fse.<span class="title function_">copy</span>(<span class="string">`./<span class="subst">$&#123;resourcesDir&#125;</span>`</span>, <span class="string">`.tmp/<span class="subst">$&#123;resourcesDir&#125;</span>`</span>, &#123;<span class="attr">overwrite</span>: <span class="literal">true</span>, <span class="attr">dereference</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>neutralinojs</tag>
        <tag>nuxt</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Neutralinojs + Nuxt3 + Vuetify3</title>
    <url>/2022/07/14/Neutralinojs-Nuxt3-Vuetify3/</url>
    <content><![CDATA[<p><img src="/images/neutralinojs_nuxt3_vuetify3.png"></p>
<p><a href="https://next.vuetifyjs.com/en/components/cards/">https://next.vuetifyjs.com/en/components/cards/</a></p>
<p>Nuetralinojs + Nuxt3 でVuetify3 のCards を使ってみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Pro</li>
<li>node v16.13.1</li>
<li>npm 8.1.2</li>
<li>neutralinojs v4.6.0</li>
<li>vue 3.2.37</li>
<li>nuxt 3.0.0-rc.4</li>
<li>vuetify 3.0.0-beta.5</li>
<li>sass 1.53.0</li>
</ul>
<h3 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h3><ol>
<li><p>プロジェクトの作成</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @neutralinojs/neu</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ktkr3d/neutralinojs-nuxt3.git</span><br><span class="line"><span class="built_in">cd</span> neutralinojs-nuxt3/nuxt3-src</span><br></pre></td></tr></table></figure>
</li>
<li><p>プラグインのインストール</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vuetify@3.0.0-beta.5</span><br><span class="line">npm install sass</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p> Vuetify3 のリリース前なら<code>vuetify@next</code>、リリースされたら<code>vuetify@latest</code>でもよい。</p>
</li>
<li><p><code>plugins/vuetify.js</code> の作成</p>
 <figure class="highlight javascript"><figcaption><span>plugins/vuetify.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createVuetify &#125; <span class="keyword">from</span> <span class="string">&#x27;vuetify&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> components <span class="keyword">from</span> <span class="string">&#x27;vuetify/components&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtPlugin</span>( <span class="function"><span class="params">nuxtApp</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> vuetify = <span class="title function_">createVuetify</span>(&#123;</span><br><span class="line">        components</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    nuxtApp.<span class="property">vueApp</span>.<span class="title function_">use</span>( vuetify );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>コンポーネントの利用<br> <a href="https://next.vuetifyjs.com/en/components/cards/">https://next.vuetifyjs.com/en/components/cards/</a><br> を参考に<code>App.vue</code>を修正します。</p>
</li>
<li><p><code>nuxt.config.ts</code> の設定</p>
 <figure class="highlight typescript"><figcaption><span>nuxt.config.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineNuxtConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;nuxt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://v3.nuxtjs.org/api/configuration/nuxt.config</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">  <span class="attr">css</span>: [<span class="string">&quot;vuetify/lib/styles/main.sass&quot;</span>],</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">transpile</span>: [<span class="string">&quot;vuetify&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">vite</span>: &#123;</span><br><span class="line">    <span class="attr">define</span>: &#123;</span><br><span class="line">      <span class="string">&quot;process.env.DEBUG&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>ビルドと実行</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run generate</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">neu update</span><br><span class="line">neu run</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="サイドメニュー追加"><a href="#サイドメニュー追加" class="headerlink" title="サイドメニュー追加"></a>サイドメニュー追加</h3><p><a href="https://github.com/ktkr3d/neutralinojs-nuxt3">https://github.com/ktkr3d/neutralinojs-nuxt3</a></p>
<p><img src="/images/neutralinojs_nuxt3_vuetify3_menu.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @neutralinojs/neu</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ktkr3d/neutralinojs-nuxt3.git</span><br><span class="line"><span class="built_in">cd</span> neutralinojs-nuxt3/nuxt3-src</span><br><span class="line">npm install</span><br><span class="line">npm run generate</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">neu update</span><br><span class="line">neu run</span><br></pre></td></tr></table></figure>

<p><a href="https://next.vuetifyjs.com/en/components/navigation-drawers/">https://next.vuetifyjs.com/en/components/navigation-drawers/</a><br><a href="https://next.vuetifyjs.com/en/features/icon-fonts/">https://next.vuetifyjs.com/en/features/icon-fonts/</a></p>
]]></content>
      <tags>
        <tag>neutralinojs</tag>
        <tag>nuxt</tag>
        <tag>vuetify</tag>
      </tags>
  </entry>
  <entry>
    <title>Neutralinojs + Nuxt3 + Three.js</title>
    <url>/2022/07/28/Neutralinojs-Nuxt3-Three-js/</url>
    <content><![CDATA[<p><img src="/images/neutralinojs_nuxt3_threejs.png"></p>
<p><a href="https://threejs.org/">https://threejs.org/</a><br><a href="https://github.com/ktkr3d/neutralinojs-nuxt3">https://github.com/ktkr3d/neutralinojs-nuxt3</a><br>Nuxt3 でThree.js を利用して3Dオブジェクトを描画してみました。</p>
<p><img src="/images/neutralinojs_nuxt3_mmd.png"></p>
<p><a href="https://github.com/mrdoob/three.js/blob/dev/examples/webgl_loader_mmd.html">https://github.com/mrdoob/three.js/blob/dev/examples/webgl_loader_mmd.html</a><br><a href="https://github.com/ktkr3d/neutralinojs-nuxt3">https://github.com/ktkr3d/neutralinojs-nuxt3</a></p>
<p>MMD のサンプルが掲載されていたのでNuxt3 に移植してみました。<br>PMDファイルとVMDファイルは以下の階層に配置します。</p>
<ul>
<li>nuxt3-src&#x2F;public&#x2F;miku&#x2F;miku_v2.pmd</li>
<li>nuxt3-src&#x2F;public&#x2F;vmds&#x2F;wavefile_v2.vmd</li>
</ul>
<p>適当に組み込んだら動きました。まだ途中です。今日はここまで。</p>
<ul>
<li>PMD: Lat さん、Lat式ミクVer.2.31</li>
<li>VMD: せっけんP さん、恋愛サーキュレーション モーション</li>
</ul>
<span id="more"></span>

<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @neutralinojs/neu</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ktkr3d/neutralinojs-nuxt3.git</span><br><span class="line"><span class="built_in">cd</span> neutralinojs-nuxt3/nuxt3-src</span><br><span class="line">npm install</span><br><span class="line">npm run generate</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">neu update</span><br><span class="line">neu run</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>mmd</tag>
        <tag>neutralinojs</tag>
        <tag>nuxt</tag>
        <tag>threejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Neutralinojs + Nuxt3 + MMD + Audio</title>
    <url>/2022/07/30/Neutralinojs-Nuxt3-MMD-Audio/</url>
    <content><![CDATA[<p><img src="/images/neutralinojs_nuxt3_mmd_audio4.png"></p>
<p><a href="https://github.com/mrdoob/three.js/blob/dev/examples/webgl_loader_mmd_audio.html">https://github.com/mrdoob/three.js/blob/dev/examples/webgl_loader_mmd_audio.html</a><br><a href="https://github.com/ktkr3d/neutralinojs-nuxt3">https://github.com/ktkr3d/neutralinojs-nuxt3</a></p>
<p>MMD の音声再生付きサンプルが掲載されていたのでNuxt3 に移植してみました。<br>カメラ用のVMDでカメラアングルが目まぐるしく展開します。</p>
<p>利用させていただいたデータ。</p>
<ul>
<li>PMD: hololive さん、桃鈴ねね公式mmd_ver1.0</li>
<li>VMD: hino さん、ＷＡＶＥＦＩＬＥ </li>
<li>音声：ラマーズP さん、WAVEFILE</li>
</ul>
<p>まだ途中です。今日はここまで。</p>
<span id="more"></span>

<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li><p>クローン</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @neutralinojs/neu</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ktkr3d/neutralinojs-nuxt3.git</span><br><span class="line"><span class="built_in">cd</span> neutralinojs-nuxt3/nuxt3-src</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
<li><p>モデル<br>  <code>https://3d.nicovideo.jp/works/td78505</code> から以下を配置<br>  ファイル名は半角英数にして以下に配置</p>
<ul>
<li><code>nuxt3-src/public/PMX/nene_BEA.pmx</code></li>
<li><code>nuxt3-src/public/texture/TGA/*</code></li>
</ul>
</li>
<li><p>モーション<br>  <code>https://github.com/mrdoob/three.js/tree/dev/examples/models/mmd</code> から以下を配置</p>
<ul>
<li><code>nuxt3-src/public/vmds/wavefile_v2.vmd</code></li>
<li><code>nuxt3-src/public/vmds/wavefile_camera.vmd</code></li>
</ul>
</li>
<li><p>BGM<br>  <code>https://github.com/mrdoob/three.js/tree/dev/examples/models/mmd</code> から以下を配置</p>
<ul>
<li><code>nuxt3-src/public/audios/wavefile_short.mp3</code></li>
</ul>
</li>
<li><p>ジェネレート</p>
  <figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">npm run <span class="keyword">generate</span></span><br></pre></td></tr></table></figure></li>
<li><p>最新化</p>
  <figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">cd</span></span> ..</span><br><span class="line">neu update</span><br></pre></td></tr></table></figure>
<p>  上記では最新にならない場合があるので、  <code>https://github.com/neutralinojs/neutralinojs/releases</code>  からバイナリをダウンロードして<code>./bin/</code>に上書き展開</p>
</li>
<li><p>実行</p>
  <figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">neu <span class="built_in">run</span></span><br></pre></td></tr></table></figure></li>
<li><p>ビルド</p>
  <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">neu build</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>mmd</tag>
        <tag>neutralinojs</tag>
        <tag>nuxt</tag>
        <tag>threejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 11</title>
    <url>/2022/09/21/Windows-11/</url>
    <content><![CDATA[<p><img src="/images/windows11.png"><br>Windows 11 にアップグレードしました。</p>
<span id="more"></span>

<h3 id="トラブルシュート"><a href="#トラブルシュート" class="headerlink" title="トラブルシュート"></a>トラブルシュート</h3><ul>
<li><p>タスクバーの右置きができない<br><a href="https://github.com/valinet/ExplorerPatcher">https://github.com/valinet/ExplorerPatcher</a></p>
<ul>
<li>[Taskbar]Primary taskbar location on screen: Right</li>
<li>[Taskbar]Combine taskbar icons on primary taskbar: Always combine</li>
</ul>
</li>
<li><p>Kodi でBluetooth Audio の音声が途切れる<br>Kodiの[設定][システム][オーディオ][オーディオ出力デバイス]を<code>WASAPI: default</code>に変更する</p>
</li>
<li><p>タッチスクリーンで画面左端から中央へのスワイプの挙動が変更された<br>三本指&#x2F;四本指で上にスワイプでウインドウ一覧</p>
</li>
<li><p>リモートWindowsからCode-Server にアクセスできない<br>以下を再実行する</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenport=8080 listenaddr=127.0.0.1 connectport=8080 connectaddress=192.168.11.2</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mirakurun アップデート後にTuner が有効にならない<br><code>C:\Users\ユーザー名\.Mirakurun\tuners.yml</code>で対象のチューナに対して<code>isDisabled: false</code>を設定</p>
</li>
<li><p>時計に秒が表示されない<br>（インストールしてあった）Chrome の拡張機能の世界時計を見る</p>
</li>
</ul>
<h3 id="調査中"><a href="#調査中" class="headerlink" title="調査中"></a>調査中</h3><p>なし</p>
]]></content>
      <tags>
        <tag>Windows11</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 11 - WSL 2 - systemd</title>
    <url>/2022/10/22/Windows-11-WSL-2-systemd/</url>
    <content><![CDATA[<p><img src="/images/wsl2_systemd.drawio.svg"></p>
<p>Windows 11 のWSL でsystemd を有効にしてみました。<br>構成がすっきりしました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><p>まず、現在PC で構築しているサービスを整理します。</p>
<h4 id="WSL-で構築するサービス"><a href="#WSL-で構築するサービス" class="headerlink" title="WSL で構築するサービス"></a>WSL で構築するサービス</h4><ul>
<li>Pritunl (VPN、systemd で起動管理)</li>
<li>Code-server (IDE、systemd で起動管理)</li>
<li>Hexo (Blog、コマンドで実行)</li>
</ul>
<h4 id="Windows-で構築するサービス"><a href="#Windows-で構築するサービス" class="headerlink" title="Windows で構築するサービス"></a>Windows で構築するサービス</h4><ul>
<li>EPGStation (番組表&#x2F;番組予約)</li>
<li>Mirakurun (チューナ)</li>
</ul>
<h3 id="WSL-構築"><a href="#WSL-構築" class="headerlink" title="WSL 構築"></a>WSL 構築</h3><ol>
<li>systemd の有効化</li>
</ol>
<ul>
<li>設定<figure class="highlight ini"><figcaption><span>/etc/wsl.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[boot]</span></span><br><span class="line"><span class="attr">systemd</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>一旦、WSL をシャットダウン(or 対象ディストリビューションをターミネート)</li>
</ul>
<ol start="2">
<li>ポートフォワードの設定</li>
</ol>
<ul>
<li>PowerShell スクリプト<figure class="highlight ps1"><figcaption><span>wsl-proxy.ps1</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable">$WSL2_IPV4</span>=bash <span class="literal">-c</span> <span class="string">&quot;ip route | grep &#x27;eth0 proto kernel scope&#x27; | cut -d &#x27; &#x27; -f9&quot;</span></span><br><span class="line"><span class="variable">$HOST_IPV4</span>=<span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="variable">$PORTS</span>=<span class="selector-tag">@</span>(<span class="number">22</span>,<span class="number">443</span>,<span class="number">2049</span>,<span class="number">3030</span>,<span class="number">4000</span>,<span class="number">8080</span>,<span class="number">8443</span>,<span class="number">9090</span>,<span class="number">60000</span>)</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$PORT</span> <span class="keyword">in</span> <span class="variable">$PORTS</span>)</span><br><span class="line">&#123;</span><br><span class="line">    netsh interface portproxy delete v4tov4 listenaddress=<span class="variable">$HOST_IPV4</span> listenport=<span class="variable">$PORT</span></span><br><span class="line">    netsh interface portproxy add v4tov4 listenaddress=<span class="variable">$HOST_IPV4</span> listenport=<span class="variable">$PORT</span> connectaddress=<span class="variable">$WSL2_IPV4</span> connectport=<span class="variable">$PORT</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>ports<table>
<thead>
<tr>
<th align="left">port</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">22</td>
<td align="left">SSH</td>
</tr>
<tr>
<td align="left">443</td>
<td align="left">Pritunl</td>
</tr>
<tr>
<td align="left">2049</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">3030</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">4000</td>
<td align="left">Hexo s</td>
</tr>
<tr>
<td align="left">8080</td>
<td align="left">code-server</td>
</tr>
<tr>
<td align="left">8443</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">9090</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">60000</td>
<td align="left">OpenVPN</td>
</tr>
</tbody></table>
</li>
<li>タスクスケジューラで起動時に実行</li>
</ul>
<ol start="3">
<li>Node</li>
</ol>
<ul>
<li>n 用の設定<figure class="highlight ini"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line">export <span class="attr">N_PREFIX</span>=<span class="variable">$HOME</span>/.n</span><br><span class="line">export <span class="attr">PATH</span>=<span class="variable">$N_PREFIX</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li>
<li>導入<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install nodejs npm</span><br><span class="line">$ <span class="built_in">sudo</span> npm install n -g</span><br><span class="line">$ <span class="built_in">sudo</span> apt purge nodejs npm</span><br><span class="line">$ n latest</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>Printunl</li>
</ol>
<ul>
<li>手順<br><a href="https://techviewleo.com/install-pritunl-vpn-on-ubuntu-server/">https://techviewleo.com/install-pritunl-vpn-on-ubuntu-server/</a></li>
<li>準備<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade</span><br><span class="line">$ <span class="built_in">sudo</span> apt install wget vim curl gnupg2 software-properties-common apt-transport-https ca-certificates lsb-release</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/pritunl.list &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb https://repo.pritunl.com/unstable/apt jammy main</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">$ <span class="built_in">sudo</span> apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv 7568D9BB55FF9E5287D586017AE645C0CF8E292A</span><br></pre></td></tr></table></figure></li>
<li>リポジトリのlibssl パッケージでは依存関係が満たせないので別途導入<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ wget http:<span class="regexp">//</span>archive.ubuntu.com<span class="regexp">/ubuntu/</span>pool<span class="regexp">/main/</span>o<span class="regexp">/openssl/</span>libssl1.<span class="number">1</span>_1.<span class="number">1.1</span>-<span class="number">1</span>ubuntu2.<span class="number">1</span>~<span class="number">18.04</span>.<span class="number">20</span>_amd64.deb</span><br><span class="line">$ sudo dpkg -i libssl1.<span class="number">1</span>_1.<span class="number">1.0</span>g-<span class="number">2</span>ubuntu4_amd64.deb</span><br></pre></td></tr></table></figure></li>
<li>導入<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -fsSL https://www.mongodb.org/static/pgp/server-5.0.asc|<span class="built_in">sudo</span> gpg --dearmor -o /etc/apt/trusted.gpg.d/mongodb-5.gpg</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;deb [ arch=<span class="subst">$(dpkg --print-architecture)</span> ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/mongodb-org.list</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt install pritunl mongodb-org</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> systemctl start pritunl mongod</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> pritunl mongod</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl status pritunl mongod</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li>code-server</li>
</ol>
<ul>
<li>手順<br><a href="https://github.com/coder/code-server#user-content-getting-started">https://github.com/coder/code-server#user-content-getting-started</a></li>
<li>設定<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -fsSL https://code-server.dev/install.sh | sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now code-server@<span class="variable">$USER</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><figcaption><span>/.config/code-server/config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#bind-addr: 127.0.0.1:8080</span></span><br><span class="line"><span class="attr">bind-addr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8080</span></span><br><span class="line"><span class="comment">#auth: password</span></span><br><span class="line"><span class="attr">auth:</span> <span class="string">none</span></span><br></pre></td></tr></table></figure></li>
<li>拡張機能の導入</li>
<li>Project Manager でプロジェクトの登録</li>
<li>永続化（別途Windows Terminal を常駐化）</li>
<li>「VS Code Server」の方も試しましたが、導入できる拡張が少ないことと、接続に時間がかかることから不採用</li>
</ul>
<ol start="5">
<li>Hexo</li>
</ol>
<ul>
<li>手順<br><a href="https://hexo.io/docs/#Install-Hexo">https://hexo.io/docs/#Install-Hexo</a></li>
<li>導入<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure></li>
<li>プラグインの導入</li>
<li>現行のデータの移行</li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>windows</tag>
        <tag>wsl</tag>
        <tag>pritunl</tag>
        <tag>code-server</tag>
      </tags>
  </entry>
  <entry>
    <title>code-server + vscode-reveal</title>
    <url>/2022/10/25/code-server-vscode-reveal/</url>
    <content><![CDATA[<p><img src="/images/vscode-reveal.png"></p>
<p>code-server とvscode-reveal 拡張を組み合わせて利用してみました。</p>
<p>vscode-reveal はクライアント毎にポート番号を自動で生成します。ローカルPC上で利用する場合は問題ありませんが、リモートPCから利用する場合はポート番号が毎回変動してしまうため、PC間のポリシー許可設定が変動して面倒です。</p>
<p>reveal.js 本体はポート番号を指定可能ですが、残念ながらvscode-reveal にはポート番号を指定する設定項目がありませんでした。</p>
<p>調べたところ、vscode-reveal がlisten を開始する処理内でポート番号を固定に設定することでリモートから同じポート番号でアクセスできるようになりました。なお、ポート番号を1つに固定するため、複数のクライアントに対応できません。1つのクライアントからのアクセスのみが有効です。</p>
<span id="more"></span>

<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>vscode-reveal (reveal.js) で利用するポート番号(例えば 43039)を決めます。</li>
</ol>
<ul>
<li>FW でポート番号43039の受信を許可します</li>
</ul>
<ol start="2">
<li>vscode-reveal でreveal.js のポート番号を固定</li>
</ol>
<ul>
<li>修正ファイル<br>~&#x2F;.local&#x2F;share&#x2F;code-server&#x2F;extensions&#x2F;evilz.vscode-reveal-4.3.3-universal&#x2F;dist&#x2F;extension.js</li>
<li>修正前<br>listen(0)</li>
<li>修正後<br>listen(43039)</li>
</ul>
<ol start="3">
<li>ポートフォワードの設定 (43039を追加)</li>
</ol>
  <figure class="highlight ps1"><figcaption><span>wsl-potrfoward.ps1</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable">$WSL2_IPV4</span>=bash <span class="literal">-c</span> <span class="string">&quot;ip route | grep &#x27;eth0 proto kernel scope&#x27; | cut -d &#x27; &#x27; -f9&quot;</span></span><br><span class="line"><span class="variable">$HOST_IPV4</span>=<span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="variable">$PORTS</span>=<span class="selector-tag">@</span>(<span class="number">22</span>,<span class="number">443</span>,<span class="number">2049</span>,<span class="number">3030</span>,<span class="number">4000</span>,<span class="number">8080</span>,<span class="number">8443</span>,<span class="number">9090</span>,<span class="number">43039</span>,<span class="number">60000</span>)</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$PORT</span> <span class="keyword">in</span> <span class="variable">$PORTS</span>)</span><br><span class="line">&#123;</span><br><span class="line">    netsh interface portproxy delete v4tov4 listenaddress=<span class="variable">$HOST_IPV4</span> listenport=<span class="variable">$PORT</span></span><br><span class="line">    netsh interface portproxy add v4tov4 listenaddress=<span class="variable">$HOST_IPV4</span> listenport=<span class="variable">$PORT</span> connectaddress=<span class="variable">$WSL2_IPV4</span> connectport=<span class="variable">$PORT</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>リモートPCのポートフォワードの設定</li>
</ol>
  <figure class="highlight ps1"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenaddr=<span class="number">127.0</span>.<span class="number">0.1</span> listenport=<span class="number">43039</span> connectaddress=<span class="number">192.168</span>.<span class="number">11.2</span> connectport=<span class="number">43039</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>リモートLinux PCのポートフォワード設定</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redir -n 0.0.0.0:43039 192.168.11.2:43039</span><br></pre></td></tr></table></figure>


<h3 id="オプション"><a href="#オプション" class="headerlink" title="オプション"></a>オプション</h3><ol>
<li>Activitus Bar にアイコン追加 (オプション)</li>
</ol>
  <figure class="highlight json"><figcaption><span>settings.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;activitusbar.views&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;command.slidesExplorer.focus&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;codicon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;markdown&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="vscode-reveal-サイドバーの表示"><a href="#vscode-reveal-サイドバーの表示" class="headerlink" title="vscode-reveal サイドバーの表示"></a>vscode-reveal サイドバーの表示</h4><ul>
<li>ステータスバー(Activitusバー)上のvscode-revealアイコンをクリック</li>
</ul>
<h4 id="vscode-reveal-サイドバーの操作"><a href="#vscode-reveal-サイドバーの操作" class="headerlink" title="vscode-reveal サイドバーの操作"></a>vscode-reveal サイドバーの操作</h4><p>対象のマークダウンファイルを表示した状態で、</p>
<ul>
<li>Export in HTML<br>結果をHTML に出力します。同時に結果を横に表示します。</li>
<li>Export in PDF<br>結果をPDFに出力します。</li>
<li>Open Presentation on browser<br>結果をブラウザで表示します。リモート接続の場合はサーバ側で表示されます。</li>
<li>Show Presentation by side<br>結果を横に表示します。執筆中は一番使う操作と思います。</li>
</ul>
]]></content>
      <tags>
        <tag>code-server</tag>
        <tag>reveal.js</tag>
        <tag>vscode-reveal</tag>
      </tags>
  </entry>
  <entry>
    <title>WoW DragonFlight Addons</title>
    <url>/2022/10/30/WoW-DragonFlight-Addons/</url>
    <content><![CDATA[<p><img src="https://blz-contentstack-images.akamaized.net/v3/assets/blt9c12f249ac15c7ec/blt563e16b3504e5808/62545b180afb5024ae74b677/rc-logo-na.png"></p>
<p>DragonFlight のパッチが適用されたことに伴って、従来のアドオンの更新が活発化しています。<br>現時点のLUIにおいて、一部のクラスの設定が新バージョンに移行されなかったので暫定的に補正をしました。</p>
<h4 id="追記-2022-12-18"><a href="#追記-2022-12-18" class="headerlink" title="追記: 2022-12-18"></a>追記: 2022-12-18</h4><h5 id="⚙️移行準備"><a href="#⚙️移行準備" class="headerlink" title="⚙️移行準備"></a>⚙️移行準備</h5><ul>
<li>移行前に既存のLUIのセーブデータファイルを移動(退避)して初期状態にする<br>  <code>C:\Program Files (x86)\World of Warcraft\_retail_\WTF\Account\&lt;Account Name&gt;\SavedVariables\LUI.lua</code></li>
</ul>
<h5 id="⚙️カスタマイズ"><a href="#⚙️カスタマイズ" class="headerlink" title="⚙️カスタマイズ"></a>⚙️カスタマイズ</h5><ul>
<li>設定画面から入力できない項目があるが、以下のファイル内でデフォルト値が定義されている<br>  <code>C:\Program Files (x86)\World of Warcraft\_retail_\Interface\AddOns\LUI\modules\unitframes\unitframes_init.lua</code><br>デフォルト値から値を変更する場合はセーブデータファイルに項目を追記する。<br>  <code>C:\Program Files (x86)\World of Warcraft\_retail_\WTF\Account\&lt;Account Name&gt;\SavedVariables\LUI.lua</code></li>
<li>player フレームの数値表示書式設定  <figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;player&quot;</span>] = &#123;</span><br><span class="line">	[<span class="string">&quot;HealthText&quot;</span>] = &#123;</span><br><span class="line">		[<span class="string">&quot;Format&quot;</span>] = <span class="string">&quot;Standard Short&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	[<span class="string">&quot;PowerText&quot;</span>] = &#123;</span><br><span class="line">		[<span class="string">&quot;Format&quot;</span>] = <span class="string">&quot;Standard Short&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>target フレームの数値表示書式設定とBuffsの無効化  <figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;target&quot;</span>] = &#123;</span><br><span class="line">	[<span class="string">&quot;HealthText&quot;</span>] = &#123;</span><br><span class="line">		[<span class="string">&quot;Format&quot;</span>] = <span class="string">&quot;Standard Short&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	[<span class="string">&quot;PowerText&quot;</span>] = &#123;</span><br><span class="line">		[<span class="string">&quot;Format&quot;</span>] = <span class="string">&quot;Standard Short&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	[<span class="string">&quot;Aura&quot;</span>] = &#123;</span><br><span class="line">		[<span class="string">&quot;Buffs&quot;</span>] = &#123;</span><br><span class="line">			[<span class="string">&quot;Enable&quot;</span>] = <span class="literal">false</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>raid フレームの名前テキストの色設定  <figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;raid&quot;</span>] = &#123;</span><br><span class="line">	[<span class="string">&quot;NameText&quot;</span>] = &#123;</span><br><span class="line">		[<span class="string">&quot;ColorByClass&quot;</span>] = <span class="literal">true</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>party フレームの名前テキストの色設定  <figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;party&quot;</span>] = &#123;</span><br><span class="line">	[<span class="string">&quot;NameText&quot;</span>] = &#123;</span><br><span class="line">		[<span class="string">&quot;ColorByClass&quot;</span>] = <span class="literal">true</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="追記-2023-01-01"><a href="#追記-2023-01-01" class="headerlink" title="追記: 2023-01-01"></a>追記: 2023-01-01</h4><ul>
<li><p>partytarget フレームとpartypet フレームの位置不正対策(暫定)<br><a href="https://github.com/ktkr3d/LUI/commit/399617e06a558593139ba7bc3a67b8c67ded6220">https://github.com/ktkr3d/LUI/commit/399617e06a558593139ba7bc3a67b8c67ded6220</a></p>
</li>
<li><p>maintank フレームが表示されない対策(暫定)<br><a href="https://github.com/ktkr3d/LUI/commit/5bd2bb2d59a18a7cfab1ba0fa292e8896b5e5b32">https://github.com/ktkr3d/LUI/commit/5bd2bb2d59a18a7cfab1ba0fa292e8896b5e5b32</a></p>
</li>
</ul>
<h4 id="追記-2023-01-03"><a href="#追記-2023-01-03" class="headerlink" title="追記: 2023-01-03"></a>追記: 2023-01-03</h4><ul>
<li>maintank フレームのPadding の設定(PowerBar の高さを追加)  <figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;maintank&quot;</span>] = &#123;</span><br><span class="line">	[<span class="string">&quot;Padding&quot;</span>] = <span class="number">16</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="追記-2023-01-18"><a href="#追記-2023-01-18" class="headerlink" title="追記: 2023-01-18"></a>追記: 2023-01-18</h4><ul>
<li>Guild MOTD (Message of the Day) の長さ調整<br><a href="https://github.com/ktkr3d/LUI/commit/8059be8c58853271c96820320dbc5d8bde6b6365">https://github.com/ktkr3d/LUI/commit/8059be8c58853271c96820320dbc5d8bde6b6365</a></li>
</ul>
<span id="more"></span>

<h3 id="移行状況"><a href="#移行状況" class="headerlink" title="移行状況"></a>移行状況</h3><ul>
<li><p>LUI とHekili は移行中のようです。クラスやスペックによって対応状況が異なるようです。私の選択しているスペックでは以下の状況でした。</p>
<table>
<thead>
<tr>
<th align="left">Class</th>
<th align="left">LUI</th>
<th align="left">Hekili</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Death Knight</td>
<td align="left">〇</td>
<td align="left">〇</td>
</tr>
<tr>
<td align="left">Demon Hunter</td>
<td align="left">〇</td>
<td align="left">〇</td>
</tr>
<tr>
<td align="left">Druid</td>
<td align="left">〇</td>
<td align="left">〇</td>
</tr>
<tr>
<td align="left">Hunter</td>
<td align="left">〇</td>
<td align="left">〇</td>
</tr>
<tr>
<td align="left">Mage</td>
<td align="left">〇</td>
<td align="left">×</td>
</tr>
<tr>
<td align="left">Monk</td>
<td align="left">×</td>
<td align="left">×</td>
</tr>
<tr>
<td align="left">Paladin</td>
<td align="left">×</td>
<td align="left">〇</td>
</tr>
<tr>
<td align="left">Priest</td>
<td align="left">〇</td>
<td align="left">×</td>
</tr>
<tr>
<td align="left">Rogue</td>
<td align="left">×</td>
<td align="left">×</td>
</tr>
<tr>
<td align="left">Shaman</td>
<td align="left">〇</td>
<td align="left">×</td>
</tr>
<tr>
<td align="left">Warlock</td>
<td align="left">×</td>
<td align="left">×</td>
</tr>
<tr>
<td align="left">Warrior</td>
<td align="left">〇</td>
<td align="left">〇</td>
</tr>
</tbody></table>
</li>
<li><p>MoveAnything はエラーが出るので無効化しました。</p>
</li>
<li><p>Prat  はエラーが出るので無効化しました。</p>
</li>
</ul>
<h3 id="LUI-の暫定修正"><a href="#LUI-の暫定修正" class="headerlink" title="LUI の暫定修正"></a>LUI の暫定修正</h3><h4 id="エラーの内容"><a href="#エラーの内容" class="headerlink" title="エラーの内容"></a>エラーの内容</h4><p>旧バージョンLUI の設定が新バージョン用に移行されるのですが、一部のクラス(Rogue, Paladin, Warlock, Monk)で失敗します。その内、対策されると思います。</p>
<ul>
<li>一部のクラスでbar:SetStatusBarColor()関数がエラーになります。</li>
<li>一部のクラスでSetValue()関数がエラーになります。</li>
</ul>
<h4 id="暫定対策"><a href="#暫定対策" class="headerlink" title="暫定対策"></a>暫定対策</h4><p>エラーになる関数を暫定的にスキップさせて、移行を完了させます。</p>
<figure class="highlight lua"><figcaption><span>LUI/api/oUF11/elements/classpower.lua</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(PlayerClass ~= <span class="string">&#x27;ROGUE&#x27;</span> <span class="keyword">and</span> PlayerClass ~= <span class="string">&#x27;PALADIN&#x27;</span> <span class="keyword">and</span> PlayerClass ~= <span class="string">&#x27;WARLOCK&#x27;</span> <span class="keyword">and</span> PlayerClass ~= <span class="string">&#x27;MONK&#x27;</span>) <span class="keyword">then</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>WoW</tag>
      </tags>
  </entry>
  <entry>
    <title>WoW Addon - LoggingChat</title>
    <url>/2022/11/25/WoW-Addon-LoggingChat/</url>
    <content><![CDATA[<p><img src="/images/wow_loggingchat.jpg"><br><a href="https://github.com/ktkr3d/LoggingChat">https://github.com/ktkr3d/LoggingChat</a></p>
<p>World of Warcraft でチャット表示内容をファイルにロギングするアドオンを作ってみました。<br>処理はログイン時にチャットの保存設定を有効にしているだけです。</p>
<span id="more"></span>

<h3 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h3><ol>
<li><p>リポジトリをZIPでダウンロードします。<br><a href="https://github.com/ktkr3d/LoggingChat">https://github.com/ktkr3d/LoggingChat</a><br><a href="https://github.com/ktkr3d/LoggingChat/archive/refs/heads/main.zip">https://github.com/ktkr3d/LoggingChat/archive/refs/heads/main.zip</a></p>
</li>
<li><p>以下の階層になるように配置します。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">_retail_</span><br><span class="line">    └─<span class="keyword">Interface</span></span><br><span class="line">        └─AddOns</span><br><span class="line">            └─LoggingChat</span><br><span class="line">                    LoggingChat.lua</span><br><span class="line">                    LoggingChat.toc</span><br></pre></td></tr></table></figure></li>
<li><p>ゲーム内でアドオンを有効にします。</p>
</li>
<li><p>以下のファイルにログが追記されます。  </p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">_retail_</span></span><br><span class="line"><span class="code">    └─Logs</span></span><br><span class="line"><span class="code">            WoWChatLog.txt</span></span><br></pre></td></tr></table></figure>
<p>ログイン時に毎回ファイル名をメッセージで表示します。<br>不要であれば、<code>LoggingChat.lua</code>の最終行をコメントアウトします。</p>
</li>
<li><p>ログファイルは自動でローテーションされませんので単調増加します。大きくなったら適宜バックアップします。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>wow</tag>
      </tags>
  </entry>
  <entry>
    <title>code-server with SSL</title>
    <url>/2023/02/27/code-server-with-SSL/</url>
    <content><![CDATA[<p><img src="/images/code-server-with-ssl.png"><br><a href="https://coder.com/docs/code-server/latest/guide#using-a-self-signed-certificate">https://coder.com/docs/code-server/latest/guide#using-a-self-signed-certificate</a><br>Raspberry Pi 上のcode-server でSSL通信を有効にしてみました。</p>
<ul>
<li>Webアプリ(PWA)としてのインストールは問題ありませんでした。</li>
<li>Draw.ioは問題なく表示できました。</li>
<li>vscode-revealのプレビューはブラウザ表示ボタンで動作しました。</li>
</ul>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Raspberry Pi 4B</li>
<li>Ubuntu 23.04</li>
<li>code-server 4.10.0</li>
<li>mkcert 1.4.4</li>
</ul>
<h3 id="各種パラメタ"><a href="#各種パラメタ" class="headerlink" title="各種パラメタ"></a>各種パラメタ</h3><ul>
<li>ユーザ名<br><code>ubuntu</code></li>
<li>サーバ名<br>ホスト名は<code>ubuntu</code>で、リモートから<code>ubuntu.local</code>でアクセス可能</li>
<li>CA ディレクトリ兼証明書用ディレクトリ<br><code>/home/ubuntu/.local/share/mkcert/</code></li>
<li>code-server 設定ファイル<br><code>/home/ubuntu/.config/code-server/config.yaml</code></li>
</ul>
<h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><ul>
<li>Protocol<br>  TLS 1.3</li>
<li>Key exchange<br>  X25519</li>
<li>Server signature<br>  RSA-PSS with SHA-256</li>
<li>Cipher<br>  AES_256_GCM</li>
</ul>
<h3 id="サーバ側の環境設定"><a href="#サーバ側の環境設定" class="headerlink" title="サーバ側の環境設定"></a>サーバ側の環境設定</h3><ul>
<li>code-server の導入<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now code-server@<span class="variable">$USER</span></span><br></pre></td></tr></table></figure></li>
<li>念のため実行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure></li>
<li>CA の作成<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install mkcert libnss3-tools</span><br><span class="line">mkcert -install</span><br></pre></td></tr></table></figure>
以下のファイルが生成される。<ul>
<li>&#x2F;home&#x2F;ubuntu&#x2F;.local&#x2F;share&#x2F;mkcert&#x2F;rootCA.pem</li>
<li>&#x2F;home&#x2F;ubuntu&#x2F;.local&#x2F;share&#x2F;mkcert&#x2F;rootCA-key.pem</li>
</ul>
</li>
<li>サーバ証明書の作成<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.local/share/mkcert</span><br><span class="line">mkcert ubuntu.local</span><br></pre></td></tr></table></figure>
以下のファイルが生成される。<ul>
<li>&#x2F;home&#x2F;ubuntu&#x2F;.local&#x2F;share&#x2F;mkcert&#x2F;ubuntu.local.pem</li>
<li>&#x2F;home&#x2F;ubuntu&#x2F;.local&#x2F;share&#x2F;mkcert&#x2F;ubuntu.local-key.pem</li>
</ul>
</li>
<li>code-server の設定<figure class="highlight ini"><figcaption><span>~/.config/code-server/config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#bind-addr: 127.0.0.1:8080</span></span><br><span class="line">bind-addr: 0.0.0.0:443</span><br><span class="line"><span class="comment">#auth: password</span></span><br><span class="line">auth: none</span><br><span class="line">cert: /home/ubuntu/.local/share/mkcert/ubuntu.local.pem</span><br><span class="line">cert-key: /home/ubuntu/.local/share/mkcert/ubuntu.local-key.pem</span><br></pre></td></tr></table></figure></li>
<li>code-server に443&#x2F;tcp (1024以下のポート)へのバインドを許可<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">setcap</span> cap_net_bind_service=+ep /usr/lib/code-server/lib/node</span><br></pre></td></tr></table></figure></li>
<li>code-server の再起動<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart --now code-server@<span class="variable">$USER</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="クライアント側の環境設定"><a href="#クライアント側の環境設定" class="headerlink" title="クライアント側の環境設定"></a>クライアント側の環境設定</h3><ul>
<li>ブラウザの「信頼されたルート証明機関」に<code>rootCA.pem</code>を登録</li>
<li>ブラウザの「信頼された発行元」に<code>ubuntu.local.pem</code>を登録</li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul>
<li>ブラウザで<code>https://ubuntu.local</code>を開く</li>
<li>必要に応じてブラウザのアドレスバーにあるボタンからWebアプリとしてインストール</li>
</ul>
]]></content>
      <tags>
        <tag>code-server</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 23.04 on Raspberry Pi 4</title>
    <url>/2023/02/28/Ubuntu-23-04-on-Raspberry-Pi-4/</url>
    <content><![CDATA[<p><img src="/images/ubuntu2304_raspi4.png"><br>Raspberry Pi 4 にUbuntu 23.04 をインストールしました。<br>リモートからRDPで接続しました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Raspberry Pi 4B</li>
<li>Ubuntu 23.04</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>Ubuntu Server のインストール</li>
<li>ubuntu-desktop パッケージのインストール</li>
<li>xrdp パッケージのインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install xrdp</span><br></pre></td></tr></table></figure>
<figure class="highlight ini"><figcaption><span>/etc/xrdp/startwm.sh</span></figcaption><table><tr><td class="code"><pre><span class="line">unset DBUS_SESSION_BUS_ADDRESS</span><br><span class="line">exec gnome-session</span><br><span class="line"></span><br><span class="line">test -x /etc/X11/Xsession &amp;&amp; exec /etc/X11/Xsession</span><br><span class="line">exec /bin/sh /etc/X11/Xsession</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now xrdp</span><br></pre></td></tr></table></figure></li>
<li>Chromium のインストール<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:saiarcot895/chromium-beta</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install chromium-browser</span><br></pre></td></tr></table></figure></li>
<li>Gnome Shell 拡張機能のインストール</li>
</ol>
<ul>
<li><p>GNOME Shell 拡張連携パッケージ</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">install </span>-y chrome-gnome-<span class="keyword">shell </span>gnome-tweaks</span><br></pre></td></tr></table></figure></li>
<li><p>Google Chrome 拡張 : GNOME Shell Integration<br><a href="https://chrome.google.com/webstore/detail/gnome-shell-integration/gphhapmejobijbbhgpjhcjognlahblep">https://chrome.google.com/webstore/detail/gnome-shell-integration/gphhapmejobijbbhgpjhcjognlahblep</a></p>
</li>
<li><p>GNOME Shell 拡張機能<br><a href="https://extensions.gnome.org/extension/1160/dash-to-panel/">https://extensions.gnome.org/extension/1160/dash-to-panel/</a><br><a href="https://extensions.gnome.org/extension/3628/arcmenu/">https://extensions.gnome.org/extension/3628/arcmenu/</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>raspberrypi</tag>
      </tags>
  </entry>
  <entry>
    <title>Bottles</title>
    <url>/2023/07/09/bottles/</url>
    <content><![CDATA[<p><img src="/images/bottles_000.png"></p>
<p>Bottles でWindows アプリをLinux で動かしてみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Ubuntu 22.04</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>パッケージ、ドライバを最新に更新<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure></li>
<li>Bottles をインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flatpak install flathub com.usebottles.bottles</span><br></pre></td></tr></table></figure></li>
<li>ライブラリを更新<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flatpak update</span><br></pre></td></tr></table></figure></li>
<li>Bottles を起動して、<code>+</code>ボタンから「MyGames」というボトルを作成、環境はGamingを選択<br><img src="/images/bottles_001.png"></li>
<li>ランナーはlutris-GE-Proton を選択して、戻る(<code>&lt;</code>)<br><img src="/images/bottles_002.png"></li>
<li>「プログラムをインストール…」からBlizzard Battle.net をインストール<br><img src="/images/bottles_003.png"></li>
<li>インストールが完了したら起動<br><img src="/images/bottles_004.png"></li>
<li>Bottles からWindows アプリを起動<br><img src="/images/bottles_005.png"></li>
</ol>
]]></content>
      <tags>
        <tag>bottles</tag>
        <tag>flatpak</tag>
        <tag>wine</tag>
      </tags>
  </entry>
  <entry>
    <title>Flatpak</title>
    <url>/2023/07/18/Flatpak/</url>
    <content><![CDATA[<p><img src="/images/flatpak_flatseal.png"><br><a href="https://flatpak.org/">https://flatpak.org/</a><br><a href="https://flathub.org/">https://flathub.org/</a></p>
<p>FlatpakでGUIアプリケーションをインストールしてみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Ubuntu 22.04</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ul>
<li>Flatpak の準備<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository -y ppa:alexlarsson/flatpak</span><br><span class="line"><span class="built_in">sudo</span> apt install flatpak gnome-software-plugin-flatpak</span><br><span class="line">flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo</span><br></pre></td></tr></table></figure></li>
<li>Update<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flatpak update</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul>
<li>Audacious<br><a href="https://flathub.org/apps/org.atheme.audacious">https://flathub.org/apps/org.atheme.audacious</a></li>
<li>Gimp<br><a href="https://flathub.org/apps/org.gimp.GIMP">https://flathub.org/apps/org.gimp.GIMP</a></li>
<li>Google Chrome<br><a href="https://flathub.org/apps/com.google.Chrome">https://flathub.org/apps/com.google.Chrome</a><br>PWA には<code>$HOME/.local/share/applications/</code>, <code>$HOME/.local/share/icons/</code> にアクセス権が必要<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flatpak override --user --filesystem=~/.local/share/applications --filesystem=~/.local/share/icons com.google.Chrome</span><br></pre></td></tr></table></figure></li>
<li>Kodi<br><a href="https://flathub.org/apps/tv.kodi.Kodi">https://flathub.org/apps/tv.kodi.Kodi</a></li>
<li>Visual Studio Code<br><a href="https://flathub.org/apps/com.visualstudio.code">https://flathub.org/apps/com.visualstudio.code</a></li>
</ul>
]]></content>
      <tags>
        <tag>flatpak</tag>
      </tags>
  </entry>
  <entry>
    <title>Ventoy</title>
    <url>/2023/07/18/Ventoy/</url>
    <content><![CDATA[<p><img src="/images/ventoy.png"><br><a href="https://www.ventoy.net/">https://www.ventoy.net/</a><br><a href="https://github.com/ventoy/Ventoy/releases">https://github.com/ventoy/Ventoy/releases</a></p>
<p>USBメモリにOSのブート用イメージファイルをコピーしておくと、選択してブートできるというものです。複数ISOファイルにも対応しています。これは便利。<br>MBR用とGPT用で２つ用意しておけば困ることはないでしょう。</p>
<span id="more"></span>

<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="Windows-環境でVentoyを設定する場合"><a href="#Windows-環境でVentoyを設定する場合" class="headerlink" title="Windows 環境でVentoyを設定する場合"></a>Windows 環境でVentoyを設定する場合</h4><ul>
<li><code>Ventoy2Disk.exe</code>を起動して設定する。<br><img src="/images/ventoy_windows.png"></li>
</ul>
<h4 id="Linux-GUI-環境でVentoyを設定する場合"><a href="#Linux-GUI-環境でVentoyを設定する場合" class="headerlink" title="Linux GUI 環境でVentoyを設定する場合"></a>Linux GUI 環境でVentoyを設定する場合</h4><ul>
<li><code>VentoyGUI.x86_64</code>を起動して設定する。<br><img src="/images/ventoy_linux.png"></li>
</ul>
<h4 id="Linux-CUI-環境でVentoyを設定する場合"><a href="#Linux-CUI-環境でVentoyを設定する場合" class="headerlink" title="Linux CUI 環境でVentoyを設定する場合"></a>Linux CUI 環境でVentoyを設定する場合</h4><ul>
<li>MBR(Legacy BIOS) 起動用の場合<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ./Ventoy2Disk.sh -i /dev/sdX</span><br></pre></td></tr></table></figure></li>
<li>GPT(UEFI) 起動用の場合<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ./Ventoy2Disk.sh -g -i /dev/sdX</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="ISOファイルのコピー"><a href="#ISOファイルのコピー" class="headerlink" title="ISOファイルのコピー"></a>ISOファイルのコピー</h4><ul>
<li>USB メモリの<code>Ventoy</code>ボリュームの方にISOファイルをコピーする。<br>複数入れてもOK。<br>フォルダの中に入れてもOK。</li>
</ul>
<h4 id="テーマのカスタマイズ"><a href="#テーマのカスタマイズ" class="headerlink" title="テーマのカスタマイズ"></a>テーマのカスタマイズ</h4><p><code>VTOYEFI</code>パーティションの<code>/grub/themes/ventoy/</code>に格納されている。</p>
<ul>
<li>設定ファイルは<code>theme.txt</code></li>
<li>設定ファイルで画像ファイル名を指定可能。<br>デフォルト背景画像は<code>background.png</code><br>1024x768で16bitのPNG形式が利用可能。<br>GIMPで減色する場合は[画像]-[モード]-[インデックス]で、16bitを指定して色ディザリングを誤差拡散</li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul>
<li>公式サイトの動作報告リスト<br><a href="https://www.ventoy.net/en/isolist.html">https://www.ventoy.net/en/isolist.html</a></li>
<li>ChromeOS Flex は拡張子.bin を.img にするとよいらしい。<br>ChromeOS Flex 自体が動作するかは機器依存。</li>
</ul>
]]></content>
      <tags>
        <tag>ventoy</tag>
      </tags>
  </entry>
  <entry>
    <title>CHUWI MiniBook X N100</title>
    <url>/2023/08/08/CHUWI-Minibook-X-N100/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/S26d8f55afec54e329da770e143340e3ac.jpg"><br><a href="https://store.chuwi.jp/products/minibook-x-n100">https://store.chuwi.jp/products/minibook-x-n100</a><br>CHUWI MiniBook X N100が届いたから環境設定と動作確認をしてみよう。</p>
<h4 id="2023-11-06-更新"><a href="#2023-11-06-更新" class="headerlink" title="2023&#x2F;11&#x2F;06 更新"></a>2023&#x2F;11&#x2F;06 更新</h4><p>Kernel 6.6-rc5 を導入するとサスペンドからの復帰時の画面の乱れは解消した。<br>ただし、Bluetooth が無効になったので以下のようにシンボリックリンクを張り直す必要があった。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cd</span> /usr/lib/firmware/intel/</span><br><span class="line"><span class="attribute">sudo</span> unlink ibt-<span class="number">0040</span>-<span class="number">4150</span>.ddc.zst</span><br><span class="line"><span class="attribute">sudo</span> unlink ibt-<span class="number">1040</span>-<span class="number">4150</span>.ddc.zst</span><br><span class="line"><span class="attribute">sudo</span> ln -s ibt-<span class="number">1040</span>-<span class="number">4150</span>.ddc.zst ibt-<span class="number">0040</span>-<span class="number">1050</span>.ddc.zst</span><br><span class="line"><span class="attribute">sudo</span> ln -s ibt-<span class="number">1040</span>-<span class="number">4150</span>.sfi.zst ibt-<span class="number">0040</span>-<span class="number">1050</span>.sfi.zst</span><br></pre></td></tr></table></figure>

<h4 id="2023-11-15-更新"><a href="#2023-11-15-更新" class="headerlink" title="2023&#x2F;11&#x2F;15 更新"></a>2023&#x2F;11&#x2F;15 更新</h4><p>Kernel 6.6.1 とlinux-firmware が更新された。こちらは問題なさそう。</p>
<ul>
<li>Ubuntu<br>mainline(mainline-gtk)で導入する</li>
<li>Arch Linux<br>普通にアップデートすると導入される</li>
</ul>
<h4 id="2023-11-19-更新"><a href="#2023-11-19-更新" class="headerlink" title="2023&#x2F;11&#x2F;19 更新"></a>2023&#x2F;11&#x2F;19 更新</h4><p>Wayland 向けのタッチスクリーン環境対策版を導入する。Xorgなら通常版でも問題ない。</p>
<ul>
<li>GNOME Shell 拡張機能：Dash to Panel<br><a href="https://github.com/matt1432/dash-to-panel-touch-fix.git">https://github.com/matt1432/dash-to-panel-touch-fix.git</a></li>
<li>GNOME Shell 拡張機能：ArcMenu<br><a href="https://gitlab.com/arcmenu/ArcMenu/-/wikis/Install-From-Source-Guide">https://gitlab.com/arcmenu/ArcMenu/-/wikis/Install-From-Source-Guide</a></li>
</ul>
<h4 id="2023-12-03-更新"><a href="#2023-12-03-更新" class="headerlink" title="2023&#x2F;12&#x2F;03 更新"></a>2023&#x2F;12&#x2F;03 更新</h4><p>MiniBook Xは画面の倍率を100%か125%で利用すると見やすいのですが、LinuxのWaylandで125%とする場合には注意が必要です。<br>Waylandにネイティブ対応のアプリケーション(Firefox 等)の場合は問題ありませんが、ネイティブ非対応のアプリケーション(Chrome, Electron)の場合に機能に制限があります。</p>
<p><a href="https://monorail-prod.appspot.com/p/chromium/issues/detail?id=1183262">https://monorail-prod.appspot.com/p/chromium/issues/detail?id=1183262</a></p>
<table>
<thead>
<tr>
<th align="left">OS</th>
<th align="left">ブラウザ(設定)</th>
<th align="left">画面の質</th>
<th align="left">IME文字入力</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Windows 11</td>
<td align="left">Firefox</td>
<td align="left">✔</td>
<td align="left">✔</td>
</tr>
<tr>
<td align="left">&nbsp;</td>
<td align="left">Chrome</td>
<td align="left">✔</td>
<td align="left">✔</td>
</tr>
<tr>
<td align="left">Ubuntu &#x2F; Arch Linux</td>
<td align="left">Firefox</td>
<td align="left">✔</td>
<td align="left">✔</td>
</tr>
<tr>
<td align="left">&nbsp;</td>
<td align="left">Chrome(標準)</td>
<td align="left">NG</td>
<td align="left">✔</td>
</tr>
<tr>
<td align="left">&nbsp;</td>
<td align="left">Chrome(Waylandモード)</td>
<td align="left">✔</td>
<td align="left">NG</td>
</tr>
</tbody></table>
<p>これは以下の対応状況の結果のようです。</p>
<table>
<thead>
<tr>
<th align="left">text input</th>
<th align="left">Mutter(Waylandコンポジタ)</th>
<th align="left">Firefox</th>
<th align="left">Chrome</th>
</tr>
</thead>
<tbody><tr>
<td align="left">v1</td>
<td align="left">非対応</td>
<td align="left">✔</td>
<td align="left">✔</td>
</tr>
<tr>
<td align="left">v3</td>
<td align="left">✔</td>
<td align="left">✔</td>
<td align="left">非対応</td>
</tr>
</tbody></table>
<p><code>--gtk-version=4</code>を指定することでIME文字入力できるようになりました。<br><a href="https://ktkr3d.github.io/2023/12/03/Fractional-Scaling-on-Wayland/">https://ktkr3d.github.io/2023/12/03/Fractional-Scaling-on-Wayland/</a></p>
<span id="more"></span>

<h3 id="動作確認結果-随時更新"><a href="#動作確認結果-随時更新" class="headerlink" title="動作確認結果 (随時更新)"></a>動作確認結果 (随時更新)</h3><h4 id="💿対象OS"><a href="#💿対象OS" class="headerlink" title="💿対象OS"></a>💿対象OS</h4><ul>
<li>A: Windows 11 Home</li>
<li>B: Ubuntu 23.04</li>
</ul>
<h4 id="💻本体確認結果-動作OK-✔-動作せず-✗-未確認"><a href="#💻本体確認結果-動作OK-✔-動作せず-✗-未確認" class="headerlink" title="💻本体確認結果 (動作OK: ✔ &#x2F; 動作せず: ✗ &#x2F; 未確認:  )"></a>💻本体確認結果 (動作OK: ✔ &#x2F; 動作せず: ✗ &#x2F; 未確認: <code> </code>)</h4><div id="googleChart1900"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.Table(document.getElementById("googleChart1900"))).draw(google.visualization.arrayToDataTable([['項目', '仕様', 'A', 'B'],['CPU', 'Intel Alder Lake-N100', "✔", "✔"],['メモリ', '12GB (LPDDR5)', "✔", "✔"],['ストレージ', '512GB (NVMe SSD)', "✔", "✔"],['内蔵ディスプレイ', 'IPS 10.51 inch 1920×1200', "✔", "✔"],['タッチスクリーン', '', "✔", "✔"],['タッチパッド', '', "✔", "✔"],['キーボード/バックライト', '', "✔", "✔"],['Wi-Fi', 'Wi-Fi 6', "✔", "✔"],['Bluetooth', 'Bluetooth 5.2', "✔", "✔"],['Audio Jack', '3.5mm (ステレオ)', "✔", "✔"],['内蔵スピーカ', '', "✔", "✔"],['内蔵マイク', '', "✔", "✔"],['内蔵カメラ', '', "✔", "✔"],['USB Port #1 (奥)', 'Type-C USB 3.0', "✔", "✔"],['USB Port #2 (手前)', 'Type-C USB 3.0', "✔", "✔"]]),{"showRowNumber":true,"title":"No title","width":"100%","height":"100%"});
      });
    })();
  }
</script>

<h4 id="🎮外部機器接続確認結果-動作OK-✔-動作せず-✗-未確認"><a href="#🎮外部機器接続確認結果-動作OK-✔-動作せず-✗-未確認" class="headerlink" title="🎮外部機器接続確認結果 (動作OK: ✔ &#x2F; 動作せず: ✗ &#x2F; 未確認:  )"></a>🎮外部機器接続確認結果 (動作OK: ✔ &#x2F; 動作せず: ✗ &#x2F; 未確認: <code> </code>)</h4><div id="googleChart3323"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.Table(document.getElementById("googleChart3323"))).draw(google.visualization.arrayToDataTable([['項目', '仕様', 'A', 'B'],['外部ディスプレイ接続', '4K Dell', "✔", "✔"],['外部タッチスクリーンディスプレイ', 'FHD Touch Screen(USB Type-C)', "✔", ""],['ゲームパッド', 'Microsoft', "", ""],['Bluetooth ヘッドセット #1', 'Sony', "✔", "✔"],['Bluetooth ヘッドセット #2', '', "", ""],['USB Camera', 'Logi', "", ""],['USB Mouse', 'Logi', "", ""],['Bluetooth Mouse', 'Logi', "", ""],['タッチペン', '', "", ""],['USB-LAN', '', "", ""],['Video Capture', '別PC のHDMI出力 → MiniBook X のUSB-Cポート', "", ""]]),{"showRowNumber":true,"title":"No title","width":"100%","height":"100%"});
      });
    })();
  }
</script>

<ul>
<li>B2: 映像出力OKだがタッチが反応しない。GNOME 45で再確認</li>
</ul>
<h3 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h3><h4 id="🧰UEFI-BIOS"><a href="#🧰UEFI-BIOS" class="headerlink" title="🧰UEFI (BIOS)"></a>🧰UEFI (BIOS)</h4><ul>
<li>UEFI BIOS設定: <code>F2</code>キー</li>
<li>ブートデバイス選択: <code>F7</code>キー</li>
</ul>
<h4 id="🪟Windows-11-Home"><a href="#🪟Windows-11-Home" class="headerlink" title="🪟Windows 11 Home"></a>🪟Windows 11 Home</h4><p><img src="/images/win11_minibookx.png"></p>
<ul>
<li>HWiNFO<br><a href="https://www.hwinfo.com/">https://www.hwinfo.com/</a><br>初期状態をレポート出力しておく</li>
<li>タスクバーを右に<br>ExplorerPatcher<br><a href="https://github.com/valinet/ExplorerPatcher/releases">https://github.com/valinet/ExplorerPatcher/releases</a></li>
<li>Windows Terminal<br><a href="https://apps.microsoft.com/store/detail/windows-terminal">https://apps.microsoft.com/store/detail/windows-terminal</a><br>WTの自動起動設定は使わずに<code>shell:startup</code>で引数<code>-w _quake</code>を指定して起動</li>
<li>WSL<br>UbuntuをWSL2のsystemd指定で導入</li>
<li>Visual Studio Code またはcode-server<br><a href="https://ktkr3d.github.io/Visual-Studio-Code/">https://ktkr3d.github.io/Visual-Studio-Code/</a></li>
<li>Kodi<br><a href="https://kodi.tv/download/windows/">https://kodi.tv/download/windows/</a></li>
<li>左 Alt を無変換モード、右 Alt をかな漢字変換モード<br>alt-ime-ahk<br><a href="https://github.com/karakaram/alt-ime-ahk/releases">https://github.com/karakaram/alt-ime-ahk/releases</a><br>自動起動にしておく</li>
<li>Battle.net Client &#x2F; World of Warcraft<br><a href="https://www.blizzard.com/ja-jp/download">https://www.blizzard.com/ja-jp/download</a><br>1280x720の解像度にして25人Raidプレイに耐えられました。これはすごい！<br>Havoc Demon Hunter以外でも試したい<br><img src="/images/wow_minibookx.jpg"></li>
</ul>
<h4 id="🐧Ubuntu-23-04"><a href="#🐧Ubuntu-23-04" class="headerlink" title="🐧Ubuntu 23.04"></a>🐧Ubuntu 23.04</h4><p><img src="/images/minibookx-ubuntu.png"></p>
<ul>
<li>Ubunutu ISO<br><a href="https://ubuntu.com/download/desktop">https://ubuntu.com/download/desktop</a><br>Ventoy USBメモリにISO をコピー、USB Type-C ⇔ Type-A 変換経由でブート</li>
<li>gparted で512GB(477GiB)ストレージのパーティションを再構成</li>
</ul>
<div id="googleChart5482"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.BarChart(document.getElementById("googleChart5482"))).draw(google.visualization.arrayToDataTable([['Name', 'EFI (100MiB)', 'Reserved (128MiB)', 'Win (400GiB)', 'Ubuntu (74.85GiB)', 'Recovery (1.87GiB)'],['出荷時', 10, 10, 447, 0, 10],['再構成', 10, 10, 365, 82, 10]]),{"isStacked":true,"legend":{"position":"top"},"title":" ","width":"100%","height":"100%"});
      });
    })();
  }
</script>

<ul>
<li>Intel Wi-Fi 6 AX101<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:cappelikan/ppa</span><br><span class="line">sudo apt update &amp;&amp; sudo apt full-upgrade</span><br><span class="line">sudo apt install mainline</span><br></pre></td></tr></table></figure>
Mainline Kernels アプリからカーネル6.4をインストール</li>
<li>Bluetooth<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/firmware/intel/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s ibt-1040-4150.ddc ibt-0040-1050.ddc</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s ibt-1040-4150.sfi ibt-0040-1050.sfi</span><br></pre></td></tr></table></figure>
別のファームウェアで代替</li>
<li>Ubuntu &#x2F; GNOME Shell 基本設定<br><a href="https://ktkr3d.github.io/ubuntu/">https://ktkr3d.github.io/ubuntu/</a><br>Google Chromeはネイティブパッケージを使用(<code>chrome-gnome-shell</code>連携したいので)</li>
<li>Visual Studio Code またはcode-server<br><a href="https://ktkr3d.github.io/Visual-Studio-Code/">https://ktkr3d.github.io/Visual-Studio-Code/</a></li>
<li>Kodi<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install software-properties-common</span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository -y ppa:team-xbmc/ppa</span><br><span class="line"><span class="built_in">sudo</span> apt install kodi</span><br></pre></td></tr></table></figure></li>
<li>左 Alt を無変換モード、右 Alt をかな漢字変換モード<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">install </span>fcitx5-mozc</span><br><span class="line">im-<span class="built_in">config</span> -n fcitx5</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">fcitx5-config-qt</span><br></pre></td></tr></table></figure>
<ul>
<li>一時的に第一入力メソッドに切り替える: ー</li>
<li>入力メソッドを有効にする: 右 Alt</li>
<li>入力メソッドをオフにする: 左 Alt<br>Altでメニューバーにフォーカスする場合があるので2回連続押下するとよいかも</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>windows</tag>
        <tag>minibook-x</tag>
      </tags>
  </entry>
  <entry>
    <title>MiniBook X N100 - WoW Raid Try</title>
    <url>/2023/08/11/MiniBook-X-N100-WoW-Raid-try/</url>
    <content><![CDATA[<p><img src="/images/wow-minibookx-raid-try.jpg"><br>CHUWI MiniBook X N100 でWorld of Warcraft のRaid耐久をやってみよう。<br>LFRで。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><h4 id="ハード"><a href="#ハード" class="headerlink" title="ハード"></a>ハード</h4><ul>
<li>CHUWI MiniBook X N100</li>
<li>外部ディスプレイ</li>
<li>外部キーボード</li>
<li>外部マウス</li>
</ul>
<h4 id="Windows-11"><a href="#Windows-11" class="headerlink" title="Windows 11"></a>Windows 11</h4><ul>
<li>電源モード：最適なパフォーマンス (任意)</li>
<li>ゲームモード：オン</li>
<li>Game Bar：オフ</li>
<li>不要なアプリケーションをすべて終了</li>
</ul>
<h4 id="World-of-Warcraft"><a href="#World-of-Warcraft" class="headerlink" title="World of Warcraft"></a>World of Warcraft</h4><ul>
<li>解像度:<ul>
<li>1280 x 720 (Fullscreen): ✔</li>
<li>1600 x 900 (Fullscreen): ✔</li>
<li>1920 x 1080 (Fullscreen):</li>
</ul>
</li>
<li>Vertical Sync: Off</li>
<li>Anti-Aliasing: None</li>
<li>UI Scale: 75%</li>
</ul>
<h4 id="Addons"><a href="#Addons" class="headerlink" title="Addons"></a>Addons</h4><ul>
<li>DBM</li>
<li>Details</li>
<li>GTFO</li>
<li>IceHUD</li>
<li>LUI</li>
<li>Weakauras</li>
<li>etc</li>
</ul>
<h3 id="Raid"><a href="#Raid" class="headerlink" title="Raid"></a>Raid</h3><ul>
<li>Boss<br><a href="https://www.wowhead.com/guide/raids/aberrus-the-shadowed-crucible/overview#bosses">https://www.wowhead.com/guide/raids/aberrus-the-shadowed-crucible/overview#bosses</a><br>のボス9体</li>
<li>難易度<br>LFR: Looking for Raid</li>
</ul>
<h3 id="耐久実績"><a href="#耐久実績" class="headerlink" title="耐久実績"></a>耐久実績</h3><div id="googleChart1800"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.Table(document.getElementById("googleChart1800"))).draw(google.visualization.arrayToDataTable([['クラス', 'スペック', '分類', '実績'],['Death Knight', 'Frost', "Melee", "✔"],['Demon Hunter', 'Havoc', "Melee", "✔"],['Druid', 'Balance', "Ranged", "✔"],['Evoker', 'Devastation', "Ranged", "✔"],['Hunter', 'Beast Mastery', "Ranged", "✔"],['Monk', 'Windwalker', "Melee", "✔"],['Mage', 'Frost', "Ranged", "✔"],['Warlock', 'Demonology', "Ranged", "✔"]]),{"showRowNumber":true,"title":"No title","width":"100%","height":"100%"});
      });
    })();
  }
</script>

<ul>
<li>プレイ中に落ちるということはない</li>
<li>1280x720よりも1600x900の方が負荷が高いと思われる</li>
<li>FPSが下がるとMeleeの方が扱いにくい</li>
<li>慣れているRaidは先読みが効くけれど初見のRaidは大変だと思う</li>
</ul>
<h3 id="アドオンのリソース使用状況"><a href="#アドオンのリソース使用状況" class="headerlink" title="アドオンのリソース使用状況"></a>アドオンのリソース使用状況</h3><p>Addon Usage という拡張機能で各アドオンのリソース使用状況を計測してみました。<br>メモリ使用量は気にせずにCPU時間の上位を確認していきます。<br>Raid開始から終了までを計測して結果を表示しました。<br><a href="https://www.curseforge.com/wow/addons/addon-usage">https://www.curseforge.com/wow/addons/addon-usage</a><br><img src="/images/wow_addon_usage.png"></p>
<ul>
<li>Hekili<br>慣れていないクラスの時に困るくらいで無くてもどうにかなりそう<br><a href="https://github.com/Hekili/hekili/issues/339">https://github.com/Hekili/hekili/issues/339</a><br>CPU負荷についてはGitHub のIssues にも掲載されていてクローズされていた</li>
<li>IceHUD<br>Targetのヘルスバーの描画遅延があった<br>これは無いと困るので、負荷を下げる設定を探さないといけない<br>DogTagライブラリの影響かもしれないらしいので<code>Use Dog Tag</code>をオフにする<br><code>Update Period</code>を30から15に下げる</li>
<li>TipTac<br>情報を追加するオプション機能がとても便利だけど無くても困らない</li>
<li>Dugi<br>ギアを入手したタイミングで装着を提案してくれる機能は残しておきたい<br>使っていない機能があるので設定を見直そう<br>AutoRepair は他のアドオンでも代替可能</li>
</ul>
<h3 id="育成枠"><a href="#育成枠" class="headerlink" title="育成枠"></a>育成枠</h3><div id="googleChart1515"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.Table(document.getElementById("googleChart1515"))).draw(google.visualization.arrayToDataTable([['クラス', 'スペック', '分類'],['Paladin', 'Retribution', "Melee"],['Priest', 'Shadow', "Ranged"],['Rogue', 'Subtlety', "Melle"],['Shaman', 'Elemental', "Ranged"],['Warrior', 'Arms', "Melee"]]),{"showRowNumber":true,"title":"No title","width":"100%","height":"100%"});
      });
    })();
  }
</script>
]]></content>
      <tags>
        <tag>minibook-x</tag>
        <tag>world-of-warcraft</tag>
      </tags>
  </entry>
  <entry>
    <title>Minecraft on MiniBook X N100</title>
    <url>/2023/08/14/Minecraft-on-MiniBook-X-N100/</url>
    <content><![CDATA[<p><img src="/images/minecraft-minibokx-01.png"></p>
<p>MiniBook X N100 でMinecraft Java Edition を実行してみました。</p>
<span id="more"></span>

<h3 id="実行画面"><a href="#実行画面" class="headerlink" title="実行画面"></a>実行画面</h3><p><img src="/images/minecraft-minibokx-02.png"></p>
<h3 id="Minecraft-と-Fabric-Loader"><a href="#Minecraft-と-Fabric-Loader" class="headerlink" title="Minecraft と Fabric Loader"></a>Minecraft と Fabric Loader</h3><p>インストーラをダウンロードして実行します。</p>
<ul>
<li><a href="https://www.minecraft.net/ja-jp/store/minecraft-java-edition">Minecraft Java Edition</a></li>
<li><a href="https://fabricmc.net/use/">Fabric Loader</a></li>
</ul>
<h3 id="Fabric-系Mods-とショートカット操作"><a href="#Fabric-系Mods-とショートカット操作" class="headerlink" title="Fabric 系Mods とショートカット操作"></a>Fabric 系Mods とショートカット操作</h3><p><code>%APPDATA%\.minecraft\mods\</code> フォルダに格納します。</p>
<table>
<thead>
<tr>
<th align="left">Mod</th>
<th align="left">ショートカット操作</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.curseforge.com/minecraft/mc-mods/fabric-api">Fabric API</a></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://modrinth.com/mod/iris">Iris Shaders</a></td>
<td align="left"><code>O</code> シェーダーパックの選択<br><code>K</code> シェーダーのオン&#x2F;オフ</td>
</tr>
<tr>
<td align="left"><a href="https://www.curseforge.com/minecraft/mc-mods/xaeros-minimap">Xaero’s Minimap</a></td>
<td align="left"><code>Y</code> Xaero’s Minimap の設定</td>
</tr>
<tr>
<td align="left"><a href="https://www.curseforge.com/minecraft/mc-mods/xaeros-world-map">Xaero’s World Map</a></td>
<td align="left"><code>M</code> WorldMap の表示<br><code>[</code> Xaero’s World Map の設定</td>
</tr>
<tr>
<td align="left"><a href="https://www.curseforge.com/minecraft/mc-mods/malilib">MaLiLib</a></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://www.curseforge.com/minecraft/mc-mods/minihud">MiniHUD</a></td>
<td align="left"><code>H</code> MiniHUD のオン&#x2F;オフ<br><code>H</code>+<code>C</code> MiniHUDの設定</td>
</tr>
<tr>
<td align="left"><a href="https://www.curseforge.com/minecraft/mc-mods/simple-armor-hud">Simple Armor Hud</a></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://modrinth.com/mod/sodium">Sodium</a></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://www.curseforge.com/minecraft/mc-mods/wi-zoom">WI Zoom</a></td>
<td align="left"><code>V</code>　ズーム(マウススクロール可)</td>
</tr>
</tbody></table>
<h3 id="シェーダーパック"><a href="#シェーダーパック" class="headerlink" title="シェーダーパック"></a>シェーダーパック</h3><p><code>%APPDATA%\.minecraft\shaderpacks\</code> フォルダに格納します。</p>
<p>MiniBook X N100 はシェーダーを設定すると処理が重くなります。<br>適度なシェーダーを調査中です。</p>
<ul>
<li>MakeUp - Ultra Fast<br><a href="https://www.curseforge.com/minecraft/customization/makeup-ultra-fast-shader">https://www.curseforge.com/minecraft/customization/makeup-ultra-fast-shader</a><br>比較的軽くて表示バグはなさそう<br>1280x800の解像度で30fps</li>
</ul>
<!--
- [Sildur's Vibrant Shaders](https://sildurs-shaders.github.io/)
- [Complementary Shaders](https://www.curseforge.com/minecraft/customization/complementary-shaders)
- [BSL Shaders](https://www.bitslablab.com/bslshaders/)
- [Sildur's Enhanced Default](https://sildurs-shaders.github.io/)
- [SEUS Renewed](https://sonicether.com/shaders/download/renewed-v1-0-1/)
- [SEUS v11](https://sonicether.com/shaders/download/v11-0/)
- [Skylec Shader](https://www.curseforge.com/minecraft/customization/skylec-shader)
-->

<h3 id="日本語TrueType-フォント切り替え"><a href="#日本語TrueType-フォント切り替え" class="headerlink" title="日本語TrueType フォント切り替え"></a>日本語TrueType フォント切り替え</h3><p><code>%APPDATA%\.minecraft\resourcepacks\</code> フォルダにリソースパックを作成して有効化します。</p>
<h4 id="⛏️-リソースパックの作成"><a href="#⛏️-リソースパックの作成" class="headerlink" title="⛏️ リソースパックの作成"></a>⛏️ リソースパックの作成</h4><p>以下の3つのファイルを準備します。</p>
<ol>
<li><p>日本語TrueType フォント<br>私はM+ の丸ゴシック体<code>rounded-mplus-1c-bold.ttf</code> を準備しました。以下のフォルダに格納します。<br><code>%APPDATA%\.minecraft\resourcepacks\rounded-mplus-1c-bold\assets\minecraft\font\</code></p>
</li>
<li><p>default.json</p>
<figure class="highlight json"><figcaption><span>%APPDATA%\.minecraft\resourcepacks\rounded-mplus-1c-bold\assets\minecraft\font\default.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;providers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ttf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minecraft:rounded-mplus-1c-bold.ttf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;shift&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">-0.5</span><span class="punctuation">,</span> <span class="number">0.5</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">12.0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;oversample&quot;</span><span class="punctuation">:</span> <span class="number">8.0</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>pack.mcmeta</p>
<figure class="highlight json"><figcaption><span>%APPDATA%\.minecraft\resourcepacks\rounded-mplus-1c-bold\pack.mcmeta</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pack&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Rounded M+ 1c bold&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pack_format&quot;</span><span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="⛏️-言語設定の変更"><a href="#⛏️-言語設定の変更" class="headerlink" title="⛏️ 言語設定の変更"></a>⛏️ 言語設定の変更</h4><ul>
<li>[設定…]-[言語設定…]で[Unicode フォントを強制する]をオフにします。</li>
</ul>
<h4 id="⛏️-リソースパックの有効化"><a href="#⛏️-リソースパックの有効化" class="headerlink" title="⛏️ リソースパックの有効化"></a>⛏️ リソースパックの有効化</h4><ul>
<li>[設定…]-[リソースパック…]で[rounded-mplus-1c-bold]を有効にします。</li>
</ul>
<h3 id="スクリーンショット"><a href="#スクリーンショット" class="headerlink" title="スクリーンショット"></a>スクリーンショット</h3><ul>
<li><p>シェーダーなしであれば、FHDでも十分遊べます。<br><img src="/images/minecraft-minibokx-03.png"></p>
</li>
<li><p>シェーダーあり: MakeUp - Ultra Fast (1280x800)<br><img src="/images/minecraft-makeup-ultra-fast.png"><br><img src="/images/minecraft-makeup-ultra-fast-f3.png"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>minecraft</tag>
        <tag>minibook-x</tag>
      </tags>
  </entry>
  <entry>
    <title>Arch Linux</title>
    <url>/2023/08/20/Arch-Linux/</url>
    <content><![CDATA[<p><img src="/images/archlinux-minibookx.png"><br>MiniBook X N100 にArch Linux を導入してみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>MiniBook X N100</li>
<li>Calam Arch Installer 2023-08</li>
<li>gparted で512GB(477GiB)ストレージにArch Linux 用パーティションとして50GiBを準備</li>
</ul>
<div id="googleChart404"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.BarChart(document.getElementById("googleChart404"))).draw(google.visualization.arrayToDataTable([['Name', 'EFI (100MiB)', 'Reserved (128MiB)', 'Win (350GiB)', 'Arch (50GiB)', 'Ubuntu (74.85GiB)', 'Recovery (1.87GiB)'],['出荷時', 10, 10, 447, 0, 0, 10],['再構成', 10, 10, 330, 50, 67, 10]]),{"isStacked":true,"legend":{"position":"top"},"title":" ","width":"100%","height":"100%"});
      });
    })();
  }
</script>

<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="💿媒体準備"><a href="#💿媒体準備" class="headerlink" title="💿媒体準備"></a>💿媒体準備</h4><ol>
<li>USBメモリにVenToy を導入</li>
<li>Calam-Arch-Installer.iso をUSBメモリにコピー<br>  <a href="https://sourceforge.net/projects/blue-arch-installer/">https://sourceforge.net/projects/blue-arch-installer/</a></li>
</ol>
<h4 id="💻インストール"><a href="#💻インストール" class="headerlink" title="💻インストール"></a>💻インストール</h4><ol start="3">
<li>起動時に[F7]キー押下してUSBを選択</li>
<li>ディスプレイの設定を横に回転</li>
<li>ネットワーク接続<ul>
<li>カーネルが6.4なのでAX101も認識する</li>
</ul>
</li>
<li>ミラーサイト選択<ul>
<li>Japan を選択して書き込み</li>
<li>表示されなかったり閉じてしまった場合はメニューから再表示可能</li>
</ul>
</li>
<li>インストーラ表示用の日本語フォント導入  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S otf-ipafont</span><br></pre></td></tr></table></figure></li>
<li>インストーラ起動  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> calamares</span><br></pre></td></tr></table></figure></li>
<li>パッケージ選択<ul>
<li>GNOME-Desktop</li>
<li>Web Browsers &#x2F; Firefox</li>
</ul>
</li>
<li>再起動</li>
<li>起動時に[F7]キーを押下して<code>Arch (AirDisk 512GB SSD)</code>を選択</li>
</ol>
<h4 id="🐧設定"><a href="#🐧設定" class="headerlink" title="🐧設定"></a>🐧設定</h4><ol start="12">
<li>日本語フォントの導入  <figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">sudo pacman -S noto-<span class="built_in">fonts</span> noto-<span class="built_in">fonts</span>-cjk noto-<span class="built_in">fonts</span>-emoji</span><br></pre></td></tr></table></figure></li>
<li><code>yay</code>の導入  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S git</span><br><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure></li>
<li>Google Chrome の導入  <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yay -S google-chrome</span></span><br></pre></td></tr></table></figure></li>
<li>GNOME の設定<ul>
<li>[Tweaks(調整)]-[ウィンドウタイトルバー]の<code>最大化</code>と<code>最小化</code>ボタンを有効</li>
<li>[Tweaks(調整)]-[キーボードとマウス]-[マウスクリックのエミュレーション]を<code>エリア</code>に設定</li>
<li>[設定]-[マウスとタッチパッド]-[タッチパッド]で<code>タップでクリックする</code>を有効</li>
</ul>
</li>
<li>GNOME Shell Extension の設定<ul>
<li>Google Chrome拡張機能<code>GNOME Shell integration </code>の導入<br><a href="https://extensions.gnome.org/">https://extensions.gnome.org/</a> で促される</li>
<li>gnome-browser-connector の導入<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/gnome-browser-connector.git</span><br><span class="line"><span class="built_in">cd</span> gnome-browser-connector/</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure></li>
<li>Dash to Panel</li>
<li>ArcMenu</li>
<li>Imput Method Panel</li>
<li>Blur my Shell</li>
</ul>
</li>
<li>日本語入力の設定  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S fcitx5-im fcitx5-mozc</span><br></pre></td></tr></table></figure>
  <figure class="highlight ini"><figcaption><span>/etc/environment</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">GTK_IM_MODULE</span>=fcitx</span><br><span class="line"><span class="attr">QT_IM_MODULE</span>=fcitx</span><br><span class="line"><span class="attr">XMODIFIERS</span>=@im=fcitx</span><br></pre></td></tr></table></figure>
  再ログイン<br>  デフォルトでは[Ctrl]+[Space]で切り替え</li>
<li>GDMの解像度&#x2F;方向をユーザセッションと同じ設定にする (この方法は不安定になる？)  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> ~/.config/monitors.xml /var/lib/gdm/.config/monitors.xml</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> gdm:gdm /var/lib/gdm/.config/monitors.xml</span><br></pre></td></tr></table></figure></li>
<li>マルチブート時の時刻ズレ調整  <figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">sudo</span> <span class="string">timedatectl</span> <span class="built_in">set-local-rtc</span> <span class="string">true</span></span><br></pre></td></tr></table></figure></li>
<li>alias  <figure class="highlight bash"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> upd=<span class="string">&#x27;sudo pacman -Syu; sudo pacman -Sc;&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>ホームディレクトリの各フォルダ名を英語名に変更  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LANG=C xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure></li>
<li>Guake  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S guake</span><br></pre></td></tr></table></figure>
  自動起動設定し、<code>Ctrl</code>+<code>F12</code>で表示切り替えに設定</li>
<li>Nautilus からSMBサーバへの接続<br>  <a href="https://wiki.archlinux.jp/index.php/Samba#GNOME_Files%2C_Nemo%2C_Caja%2C_Thunar%2C_PCManFM">https://wiki.archlinux.jp/index.php/Samba#GNOME_Files%2C_Nemo%2C_Caja%2C_Thunar%2C_PCManFM</a>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S gvfs-smb</span><br></pre></td></tr></table></figure></li>
<li>Bluetooth の有効化  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib/firmware/intel/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s ibt-1040-4150.ddc.zst ibt-0040-1050.ddc.zst</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s ibt-1040-4150.sfi.zst ibt-0040-1050.sfi.zst</span><br><span class="line"><span class="built_in">sudo</span> pacman -S bluez bluez-utils</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> bluetooth</span><br><span class="line"><span class="built_in">sudo</span> systemctl start bluetooth</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul>
<li>起動時に[F7]キーを押下して<code>Arch (AirDisk 512GB SSD)</code>を選択</li>
<li>rEFInd をデフォルトにしたら全てのOSをGUIから選択できて便利だった</li>
</ul>
<h3 id="調査中"><a href="#調査中" class="headerlink" title="調査中"></a>調査中</h3><ul>
<li>スリープ(?)後に画面の上半分が表示されない。下半分もインタレースがかかったような表示になる。<br>Ubuntu も同じなので、カーネル6.4 の問題かもしれない</li>
<li>Dash to Panel で、起動済みのアプリケーションに対してタッチスクリーンのタッチで切り替えできない(既知の問題)<br><a href="https://github.com/home-sweet-gnome/dash-to-panel/issues/1878">https://github.com/home-sweet-gnome/dash-to-panel/issues/1878</a></li>
</ul>
]]></content>
      <tags>
        <tag>minibook-x</tag>
        <tag>arch-linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hyprland</title>
    <url>/2023/08/25/Hyprland/</url>
    <content><![CDATA[<p><img src="/images/hyprland-minibookx.png"><br><a href="https://hyprland.org/">https://hyprland.org/</a><br>MiniBook X のArch Linux にHyprland を導入してみました。<br>かなりイケていますが、私に使いこなせるのだろうか。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><p><a href="https://wiki.hyprland.org/">https://wiki.hyprland.org/</a><br><a href="https://github.com/hyprland-community/awesome-hyprland">https://github.com/hyprland-community/awesome-hyprland</a></p>
<div id="googleChart6162"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.Table(document.getElementById("googleChart6162"))).draw(google.visualization.arrayToDataTable([['項目', '選択肢', '2023-08-25'],['Distribution', 'Arch Linux', "✔"],['Display Manager', 'GDM', "✔"],['WM / Wayland Compositor', 'Hyprland', "✔"],['', 'Sway', ""],['Terminal Emulator', 'kitty', "✔"],['Status Bar', 'Waybar', "✔"],['', 'Eww', ""],['', 'Ags', ""],['Wallpaper', 'hyprpaper', "✔"],['App Launcher', 'Wofi', "✔"],['', 'Rofi', ""],['Screenshot', 'hyprshot', "✔"],['Idle Daemon', 'swayidle', ""],['Locker', "swaylock", ""],['Color Picker', 'hyprpicker', "✔"],['Power Menu', 'Wofi (Script)', "✔"]]),{"showRowNumber":true,"title":"No title","width":"100%","height":"100%"});
      });
    })();
  }
</script>

<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="💿インストール"><a href="#💿インストール" class="headerlink" title="💿インストール"></a>💿インストール</h4><p>基本的に<code>yay</code>でインストールしていきます。</p>
<ol>
<li>hyprland-git</li>
<li>waybar-git</li>
<li>hyprpaper-git</li>
</ol>
<h4 id="💻環境設定"><a href="#💻環境設定" class="headerlink" title="💻環境設定"></a>💻環境設定</h4><ul>
<li>画面解像度、ローテーションの設定<figure class="highlight ini"><figcaption><span>~/.config/hypy/hyprland.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">monitor</span>=,<span class="number">1920</span>x1200,<span class="number">0</span>x0,<span class="number">1</span>,transform,<span class="number">3</span></span><br></pre></td></tr></table></figure></li>
<li>タッチパッドをナチュラルスクロールに設定<figure class="highlight ini"><figcaption><span>~/.config/hypy/hyprland.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    touchpad &#123;</span><br><span class="line">        <span class="attr">natural_scroll</span> = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>タッチスクリーンの方向補正<figure class="highlight ini"><figcaption><span>~/.config/hypy/hyprland.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    touchdevice &#123;</span><br><span class="line">        <span class="attr">transform</span> = <span class="number">3</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>waybar のポップアップを最前面に<figure class="highlight ini"><figcaption><span>~/.config/waybar/config</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;layer&quot;: &quot;top&quot;,</span><br></pre></td></tr></table></figure></li>
<li>バッテリーデバイス名の確認<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dmesg | grep -e BAT -e ADP</span><br></pre></td></tr></table></figure>
<code>~/.config/waybar/config</code> に設定</li>
<li>日本語入力<figure class="highlight ini"><figcaption><span>~/.config/hypy/hyprland.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">exec-once</span> = fcitx5</span><br></pre></td></tr></table></figure></li>
<li>ボリュームキー設定<figure class="highlight ini"><figcaption><span>~/.config/hypy/hyprland.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">bind</span> = , xf86audioraisevolume, exec, pamixer -i <span class="number">5</span></span><br><span class="line"><span class="attr">bind</span> = , xf86audiolowervolume, exec, pamixer -d <span class="number">5</span></span><br></pre></td></tr></table></figure></li>
<li>起動時に別ワークスペースで実行<figure class="highlight ini"><figcaption><span>~/.config/hypy/hyprland.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">exec-once</span> = [workspace <span class="number">2</span> silent] google-chrome-stable</span><br></pre></td></tr></table></figure></li>
<li>xdg-desktop-portal-gnome と共存させるワークアラウンド<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S dbus-broker</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --global dbus-broker.service</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> dbus-broker.service</span><br></pre></td></tr></table></figure></li>
<li>電源メニュー<br><a href="https://github.com/itsKia2/dotfiles/blob/master/.config/wofi/wofi-powermenu.sh">https://github.com/itsKia2/dotfiles/blob/master/.config/wofi/wofi-powermenu.sh</a><br><code>pkill -u</code> は自分のアカウントに変更<br><code>SUPER</code>+<code>X</code> にバインド</li>
<li>デフォルトのロゴを削除<figure class="highlight ini"><figcaption><span>~/.config/hypy/hyprland.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">misc &#123;</span><br><span class="line">  <span class="attr">disable_hyprland_logo</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>複数モニタ<br>モニタの確認<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hyprctl monitors</span><br></pre></td></tr></table></figure>
<code>DSI-1</code>が本体(270度回転)、<code>DP-2</code>が外部で、本体の右に外部を配置する場合<figure class="highlight ini"><figcaption><span>~/.config/hypy/hyprland.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">monitor</span>=DSI-<span class="number">1</span>,<span class="number">1920</span>x1200,<span class="number">0</span>x0,<span class="number">1</span>,transform,<span class="number">3</span></span><br><span class="line"><span class="attr">monitor</span>=DP-<span class="number">2</span>,<span class="number">1920</span>x1080,<span class="number">1920</span>x0,<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><p>GDM にログインする際、デスクトップ環境に<code>Hyprland</code>を指定します。</p>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p><code>~/.config/hypr/hyprland.conf</code> に設定されているショートカットを駆使して、主にキーボードで利用します。</p>
]]></content>
      <tags>
        <tag>minibook-x</tag>
        <tag>arch-linux</tag>
        <tag>hyprland</tag>
      </tags>
  </entry>
  <entry>
    <title>Hyprland + Ags</title>
    <url>/2023/08/27/Hyprland-Ags/</url>
    <content><![CDATA[<p><img src="/images/hyprland-ags.png"><br><a href="https://github.com/Aylur/ags">https://github.com/Aylur/ags</a><br>MiniBook X のArch Linux &#x2F; Hyprland 環境にAgs を導入してみました。<br>Ags はJavaScript でGTK ウィジェットを定義できます。</p>
<h4 id="2023-09-18-更新"><a href="#2023-09-18-更新" class="headerlink" title="2023-09-18 更新"></a>2023-09-18 更新</h4><ul>
<li>Arch Linux, Hyprland, ags, VSCode, Google Chrome, Cava, fastfetch, bashtop, nginx, Three.js, ammo.js</li>
<li>MiniBook X N100 -&gt; Type-C to HDMI -&gt; HDMI Capture -&gt; Hi10 Go N5100 -&gt; OBS Studio</li>
<li>音無しMP4 16MB 1分35秒</li>
</ul>
<p><video src="/images/arch-hyprland.mp4" controls></video></p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>MiniBook X N100</li>
<li>Arch Linux</li>
<li>Hyprland</li>
<li>Ags</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="📖手順"><a href="#📖手順" class="headerlink" title="📖手順"></a>📖手順</h4><ul>
<li><a href="https://github.com/Aylur/ags/wiki">https://github.com/Aylur/ags/wiki</a></li>
<li><a href="https://github.com/Aylur/dotfiles">https://github.com/Aylur/dotfiles</a></li>
</ul>
<h4 id="💿インストール"><a href="#💿インストール" class="headerlink" title="💿インストール"></a>💿インストール</h4><ol>
<li>Ags のインストール<br>  <a href="https://github.com/Aylur/ags/wiki/installation">https://github.com/Aylur/ags/wiki/installation</a><br>  ⚠️リポジトリの<code>ags</code>パッケージではないので注意</li>
</ol>
<h4 id="💻環境設定"><a href="#💻環境設定" class="headerlink" title="💻環境設定"></a>💻環境設定</h4><ol>
<li><code>https://github.com/Aylur/dotfiles</code> を利用<br>  Hyprland とAgsの 設定が含まれている  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Aylur/dotfiles.git</span><br><span class="line"><span class="built_in">cd</span> dotfiles</span><br><span class="line"><span class="built_in">cp</span> -r .config/ags <span class="variable">$HOME</span>/.config/ags</span><br><span class="line"><span class="built_in">cp</span> -r .config/hypr <span class="variable">$HOME</span>/.config/hypr</span><br></pre></td></tr></table></figure></li>
<li>Hyprland のカスタマイズ<br>  <code>~/.config/hypr/</code>配下のファイルをカスタマイズ<ul>
<li>binds.conf<br>キーバインドの指定 (確認必須)</li>
<li>monitors.conf<br>モニタの指定 (修正必須)</li>
<li>rules.conf<br>ウィンドウルールの指定</li>
<li>settings.conf<br>各種設定(レイアウト、キーボード、等)の指定 (修正必須)</li>
<li>startup.conf<br>自動起動の指定 (確認必須)</li>
<li>theme.conf<br>テーマの指定</li>
</ul>
</li>
<li>Args のカスタマイズ<br>  <code>~/.config/ags/</code>配下のファイルを更新する<ul>
<li><code>layouts/widgets/dock.js</code> の<code>pinned</code> にお気に入りアプリを設定する。</li>
<li><code>modules/clock.js</code>で日時の書式を変更する。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Clock</span> = (&#123;</span><br><span class="line">    format = <span class="string">&#x27;%m/%d (%a) %H:%M&#x27;</span>,</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>Hyprland の更新とAgs の有効化<ul>
<li>既存の設定をバックアップ<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp ~<span class="regexp">/.config/</span>hypr<span class="regexp">/hyperland.conf ~/</span>.config<span class="regexp">/hypr/</span>__hyperland.conf</span><br></pre></td></tr></table></figure></li>
<li>設定を差し替え<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp -r ~<span class="regexp">/.config/</span>hypr<span class="regexp">/_hyperland.conf ~/</span>.config<span class="regexp">/hypr/</span>hyperland.conf</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>テーマ等設定<ol>
<li>ステータスバー右上のバッテリー等のボタンをクリック</li>
<li>ポップアップ上のギアアイコンをクリック</li>
<li>設定変更</li>
<li>ダイアログはタイルなのでタイルを閉じるコマンドを実行</li>
</ol>
</li>
<li>Amazon Music アプリ(Firefox PWA)を登録<ul>
<li>PWA を利用するためのパッケージの導入<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S firefox-pwa-bin</span><br></pre></td></tr></table></figure></li>
<li>Firefox で拡張機能を導入<br><a href="https://addons.mozilla.org/en-US/firefox/addon/pwas-for-firefox/">https://addons.mozilla.org/en-US/firefox/addon/pwas-for-firefox/</a></li>
<li>Firefox で<code>https://music.amazon.co.jp</code> を参照</li>
<li>拡張機能でPWAに登録</li>
<li>再ログオンするとアプリケーションの一覧に表示される</li>
<li>自動起動に設定する場合は<code>~/.local/share/applications/FFPWA*.desktop</code>の<code>Exec</code>行のコマンドを参考に<code>~/.config/hypr/startup.conf</code>の<code>exec-once</code>に設定する。</li>
</ul>
</li>
<li>デスクトップ時計の削除  <figure class="highlight javascript"><figcaption><span>~/.config/ags/layouts/widgets/desktop.js</span></figcaption><table><tr><td class="code"><pre><span class="line">    <span class="attr">onMiddleClick</span>: print,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  child: Box(&#123;</span></span><br><span class="line"><span class="comment">      vertical: true,</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  ...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      ],</span></span><br><span class="line"><span class="comment">  &#125;),</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure></li>
<li>FPS の向上<br>  drop_shadow を無効化することによりFPS が向上する！  <figure class="highlight css"><figcaption><span>~/.conf/hypr/theme.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">decoration &#123;</span><br><span class="line">  drop_shadow = false</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul>
<li>操作は<code>~/.config/hypr/binds.conf</code>を参照する<br>私の主なキーバインド設定<table>
<thead>
<tr>
<th align="left">キー</th>
<th align="left">処理</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SUPER + R</td>
<td align="left">アプリケーションの検索と起動</td>
</tr>
<tr>
<td align="left">SUPER + E</td>
<td align="left">Nautilus を起動</td>
</tr>
<tr>
<td align="left">SUPER + W</td>
<td align="left">Web ブラウザを起動</td>
</tr>
<tr>
<td align="left">SUPER + Q</td>
<td align="left">Terminal を起動</td>
</tr>
<tr>
<td align="left">SUPER + X</td>
<td align="left">電源メニュー</td>
</tr>
<tr>
<td align="left">SUPER + C</td>
<td align="left">アクティブなタイルを終了</td>
</tr>
<tr>
<td align="left">SUPER + F</td>
<td align="left">アクティブなタイルのフローティングモードを切り替え</td>
</tr>
<tr>
<td align="left">SUPER + G</td>
<td align="left">アクティブなタイルを最大表示切り替え</td>
</tr>
<tr>
<td align="left">SUPER + Tab</td>
<td align="left">ワークスペースの一覧</td>
</tr>
<tr>
<td align="left">SUPER + Left</td>
<td align="left">左のワークスペースを表示</td>
</tr>
<tr>
<td align="left">SUPER + Right</td>
<td align="left">右のワークスペースを表示</td>
</tr>
<tr>
<td align="left">SUPER + <code>Number</code></td>
<td align="left">指定したワークスペースを表示</td>
</tr>
<tr>
<td align="left">SUPER + Shift + <code>Number</code></td>
<td align="left">アクティブなタイルを指定したワークスペースへ移動</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + R</td>
<td align="left">Ags を再起動</td>
</tr>
</tbody></table>
</li>
<li>MPRIS 対応のプレイヤー、ブラウザの動画等、曲名表示に反映される</li>
<li>複数ディスプレイにも対応している</li>
</ul>
]]></content>
      <tags>
        <tag>minibook-x</tag>
        <tag>arch-linux</tag>
        <tag>hyprland</tag>
        <tag>ags</tag>
      </tags>
  </entry>
  <entry>
    <title>Forge - GNOME Shell Extension</title>
    <url>/2023/10/15/Forge-GNOME-Shell-extension/</url>
    <content><![CDATA[<p><a href="https://extensions.gnome.org/extension/4481/forge/">https://extensions.gnome.org/extension/4481/forge/</a><br><a href="https://github.com/forge-ext/forge">https://github.com/forge-ext/forge</a></p>
<!--
![](/images/forge_gnome_shell_extension_4.png)
-->
<p><img src="/images/forge_gnome_shell_extension_3.png"></p>
<!--
![](/images/forge_gnome_shell_extension.png)
-->
<p>Forge はタイリングウィンドウ制御をしてくれるGNOME Shell 拡張機能です。<br>GNOME Shell のままウィンドウマネージャを切り替えることなくタイリングを利用できるので環境構築がとても簡単です。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Ubuntu</li>
<li>GNOME Shell</li>
<li>Dash to Panel (GNOME Shell Extension)</li>
<li>ArcMenu (GNOME Shell Extension)</li>
<li>Forge (GNOME Shell Extension)</li>
</ul>
<h3 id="キーボードショートカット-GNOME-Shell"><a href="#キーボードショートカット-GNOME-Shell" class="headerlink" title="キーボードショートカット(GNOME Shell)"></a>キーボードショートカット(GNOME Shell)</h3><p><a href="https://help.gnome.org/users/gnome-help/stable/shell-keyboard-shortcuts.html.ja">https://help.gnome.org/users/gnome-help/stable/shell-keyboard-shortcuts.html.ja</a><br><a href="https://gist.github.com/rothgar/7079722">https://gist.github.com/rothgar/7079722</a></p>
<table>
<thead>
<tr>
<th align="left">Shortcut</th>
<th align="left">Action</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>&lt;Super&gt; A</code></td>
<td align="left">アプリケーション一覧</td>
</tr>
<tr>
<td align="left"><code>&lt;Super&gt; D</code></td>
<td align="left">デスクトップ表示(トグル)⭐⭐</td>
</tr>
<tr>
<td align="left"><code>&lt;Super&gt; H</code></td>
<td align="left">ウィンドウを最小化⭐⭐</td>
</tr>
<tr>
<td align="left"><code>&lt;Super&gt; L</code></td>
<td align="left">画面のロック</td>
</tr>
<tr>
<td align="left"><code>&lt;Super&gt; M</code></td>
<td align="left">通知トレイ(トグル)</td>
</tr>
<tr>
<td align="left"><code>&lt;Super&gt; S</code></td>
<td align="left">GNOME Shell 設定トレイ(トグル)</td>
</tr>
<tr>
<td align="left"><code>&lt;Super&gt; V</code></td>
<td align="left">カレンダートレイ(トグル)</td>
</tr>
<tr>
<td align="left"><code>&lt;Super&gt; Number</code></td>
<td align="left">お気に入りのアプリの起動</td>
</tr>
<tr>
<td align="left"><code>&lt;Super&gt; Tab</code> then <code>&lt;Super&gt; ` </code></td>
<td align="left">アプリケーションの切り替え後<br>ウィンドウの切り替え</td>
</tr>
<tr>
<td align="left"><code>&lt;Alt&gt; Tab</code></td>
<td align="left">ウィンドウの切り替え⭐⭐</td>
</tr>
<tr>
<td align="left"><code>&lt;Ctrl&gt; &lt;Alt&gt; Tab</code></td>
<td align="left">バーにフォーカス</td>
</tr>
<tr>
<td align="left"><code>&lt;Ctrl&gt; &lt;Alt&gt; left/right</code></td>
<td align="left">ワークスペースの移動⭐⭐</td>
</tr>
<tr>
<td align="left"><code>&lt;Alt&gt; F2</code></td>
<td align="left">コマンドを実行⭐</td>
</tr>
<tr>
<td align="left"><code>&lt;Alt&gt; F4</code></td>
<td align="left">アクティブウィンドウを閉じる⭐</td>
</tr>
<tr>
<td align="left"><code>&lt;Super&gt; Up/Down</code></td>
<td align="left">アクティブなウィンドウを最大表示&#x2F;解除⭐⭐</td>
</tr>
<tr>
<td align="left"><code>&lt;Super&gt; Left/Right</code></td>
<td align="left">アクティブウィンドウを画面の左半分&#x2F;右半分に表示</td>
</tr>
<tr>
<td align="left"><code>&lt;Shift&gt; &lt;Super&gt; PageUp/PageDown</code></td>
<td align="left">アクティブなウィンドウを別のワークスペースに移動⭐<br>ノートPCで<code>PageUp = &lt;Fn&gt; Up</code>&#x2F;<code>PageDown = &lt;Fn&gt; Down</code>押下は操作性が悪いので別のキーに再設定しています</td>
</tr>
</tbody></table>
<h3 id="キーボードショートカット-Forge"><a href="#キーボードショートカット-Forge" class="headerlink" title="キーボードショートカット(Forge)"></a>キーボードショートカット(Forge)</h3><p><a href="https://github.com/forge-ext/forge#forge-keybinding-defaults">https://github.com/forge-ext/forge#forge-keybinding-defaults</a></p>
<table>
<thead>
<tr>
<th align="left">Shortcut</th>
<th align="left">Action</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>&lt;Super&gt; w</code></td>
<td align="left">タイリングモードの切り替え(トグル)⭐<br>タスクトレイのタイリングアイコンで判別できる</td>
</tr>
<tr>
<td align="left"><code>&lt;Super&gt; C</code></td>
<td align="left">選択中のウィンドウのフローティング化(トグル)⭐</td>
</tr>
<tr>
<td align="left"><code>&lt;Shift&gt; &lt;Super&gt; C</code></td>
<td align="left">選択中のウィンドウおよびクラスのフローティング化(トグル)⭐⭐⭐</td>
</tr>
<tr>
<td align="left"><code>&lt;Super&gt; period</code></td>
<td align="left">Forge の設定を開く</td>
</tr>
<tr>
<td align="left"><code>&lt;Shift&gt; &lt;Super&gt; H</code></td>
<td align="left">アクティブなタイルを一つ左へ<br>上下分割を左右分割にできる！⭐⭐⭐</td>
</tr>
<tr>
<td align="left"><code>&lt;Shift&gt; &lt;Super&gt; J</code></td>
<td align="left">アクティブなタイルを一番右へ</td>
</tr>
</tbody></table>
<h3 id="キーボードショートカット-ArcMenu"><a href="#キーボードショートカット-ArcMenu" class="headerlink" title="キーボードショートカット(ArcMenu)"></a>キーボードショートカット(ArcMenu)</h3><table>
<thead>
<tr>
<th align="left">Shortcut</th>
<th align="left">Action</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>&lt;Super&gt;</code></td>
<td align="left">Arc メニュー⭐⭐⭐<br>そのままテキスト入力するとアプリをインクリメンタルサーチできる</td>
</tr>
</tbody></table>
<h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><ul>
<li>画面ロック<br>gnome-control-centerであらためて<code>&lt;Super&gt; L</code>をアサインすると有効になる。</li>
</ul>
<h3 id="設定変更"><a href="#設定変更" class="headerlink" title="設定変更"></a>設定変更</h3><p><code>&lt;Super&gt; period</code>から設定画面を表示できます。<br>またタスクバーの端のGNOME Shell の設定ポップアップにも組み込まれていて、Tiling から設定変更できます。</p>
]]></content>
      <tags>
        <tag>gnome-shell-extension</tag>
        <tag>forge</tag>
      </tags>
  </entry>
  <entry>
    <title>Lutris</title>
    <url>/2023/11/23/Lutris/</url>
    <content><![CDATA[<p><img src="/images/ubuntu2204lts.png"><br><a href="https://lutris.net/">https://lutris.net/</a></p>
<p>Lutris でWorld of Warcraft を実行してみました。</p>
<ul>
<li>OS はUbuntu 22.04.3 LTS, GNOME Shell 42.9, X11(X.org), Pulseaudio</li>
<li>wine-ge-8-24, DirectX 11モード, 64bit, dxvk, vkd3d</li>
</ul>
<p>結果としては、</p>
<ul>
<li>FPS が90超えることもあります。Windows 11(同じPC)と同等の性能です。</li>
<li>Shaderのコンパイルが発生すると左下に<code>Compiling Shaders...</code>と表示されます。若干もたつく感じがします。キャッシュ方法があるのかよくわかりません。</li>
<li>キーボードの反応が遅れることがあります。</li>
<li>極まれに音飛びします。</li>
<li>DungeonやRaidには若干不安があるがファーミングには使えそう。</li>
</ul>
<h4 id="2024-10-10"><a href="#2024-10-10" class="headerlink" title="2024-10-10"></a>2024-10-10</h4><ul>
<li>lutris repository has been disabled<br><a href="https://github.com/lutris/lutris/releases">https://github.com/lutris/lutris/releases</a></li>
</ul>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Ubuntu 22.04.3 LTS, kernel 6.2.0-37</li>
<li>GNOME Shell 42.9, X11(X.org), Pulseaudio</li>
<li>Memory 32GiB</li>
<li>CPU i7-4790 4.00GHz x8</li>
<li>Geforce GTX 1060 6GB</li>
<li>Lutris</li>
<li>Runner はWine-ge-8-24</li>
<li>Game options - Argumentsに<code>-dx11</code>オプションを指定</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ul>
<li>Lutris のインストール<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install wine-stable</span><br><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:lutris-team/lutris</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install lutris</span><br></pre></td></tr></table></figure></li>
<li>Battle.net のインストールの場合<ol>
<li>左上の<code>+</code>ボタンをクリック</li>
<li>Searchメニューで <code>Battlenet</code>を検索して選択、インストールを実行</li>
<li>言語選択画面が表示されたら適当に選択(Englishで)</li>
<li>ログイン画面は閉じる(重要)</li>
<li>インストール完了を待つ</li>
<li>Configureメニューを選択</li>
<li>パラメタに<code>-dx11</code>を指定</li>
<li>Battle.Net アプリのショートカットを作成</li>
<li>Battle.Net アプリを起動してログイン</li>
<li>ゲームをインストールしているwindowsのボリュームをマウント(ディスク アプリでWindows ボリュームを起動時に自動マウントできる)</li>
<li>ゲームディレクトリを指定</li>
</ol>
</li>
</ul>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><ol>
<li>Battle.Net アプリを起動</li>
<li>World of Warcraft を起動</li>
</ol>
]]></content>
      <tags>
        <tag>lutris</tag>
      </tags>
  </entry>
  <entry>
    <title>GNOME Shell Extensions</title>
    <url>/2023/11/25/GNOME-Shell-Extensions/</url>
    <content><![CDATA[<p><img src="/images/gse.png"><br><a href="https://extensions.gnome.org/">https://extensions.gnome.org/</a></p>
<p>久しぶりにGNOME Shell Extension を整理してみよう。環境は以下のとおり。</p>
<ul>
<li>Ubuntu 22.04(GNOME Shell 42.9, X11) &#x2F; デスクトップPC</li>
<li>Ubuntu 23.10(GNOME Shell 45.1, Wayland) &#x2F; タッチスクリーンのノートPC</li>
<li>Ubuntu 24.04 Daily Build(GNOME Shell 45.1, Wayland) &#x2F; VMWare Player</li>
<li>Arch Linux(GNOME Shell 45.1, Wayland) &#x2F; タッチスクリーンのノートPC</li>
</ul>
<span id="more"></span>

<h2 id="🚀タスクバー、ランチャー"><a href="#🚀タスクバー、ランチャー" class="headerlink" title="🚀タスクバー、ランチャー"></a>🚀タスクバー、ランチャー</h2><h3 id="Dash-to-Panel-⭐⭐⭐"><a href="#Dash-to-Panel-⭐⭐⭐" class="headerlink" title="Dash to Panel ⭐⭐⭐"></a>Dash to Panel ⭐⭐⭐</h3><p><a href="https://extensions.gnome.org/extension/1160/dash-to-panel/">https://extensions.gnome.org/extension/1160/dash-to-panel/</a><br>お気に入りのアプリケーション、タスクトレイをパネルで表示する<br>私はタッチスクリーンを利用するので右側にパネルを配置して親指で操作している<br>⚠️Wayland+タッチスクリーン環境で使う場合は以下を利用する<br><a href="https://github.com/matt1432/dash-to-panel-touch-fix.git">https://github.com/matt1432/dash-to-panel-touch-fix.git</a></p>
<h3 id="ArcMenu-⭐⭐⭐"><a href="#ArcMenu-⭐⭐⭐" class="headerlink" title="ArcMenu ⭐⭐⭐"></a>ArcMenu ⭐⭐⭐</h3><p><a href="https://extensions.gnome.org/extension/3628/arcmenu/">https://extensions.gnome.org/extension/3628/arcmenu/</a><br>アプリケーションメニューやランチャー<br>Superキー押下してそのままキー入力でテキスト型のランチャーとして使える<br>⚠️Wayland+タッチスクリーン環境で使う場合は最新のソースコードから手動で導入する<br><a href="https://gitlab.com/arcmenu/ArcMenu.git">https://gitlab.com/arcmenu/ArcMenu.git</a></p>
<h3 id="Argos-⭐⭐"><a href="#Argos-⭐⭐" class="headerlink" title="Argos ⭐⭐"></a>Argos ⭐⭐</h3><p><a href="https://extensions.gnome.org/extension/1176/argos/">https://extensions.gnome.org/extension/1176/argos/</a><br>タスクトレイにスクリプトの結果を表示したり、スクリプトを起動できる<br>使い方次第で汎用性が非常に高い</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/p-e-w/</span>argos.git -b WIP-gnome-<span class="number">45</span></span><br><span class="line">cp -r argos<span class="regexp">/argos@pew.worldwidemann.com/</span> ~<span class="regexp">/.local/</span>share<span class="regexp">/gnome-shell/</span>extensions/</span><br></pre></td></tr></table></figure>

<h3 id="Panel-Date-Format-⭐"><a href="#Panel-Date-Format-⭐" class="headerlink" title="Panel Date Format ⭐"></a>Panel Date Format ⭐</h3><p><a href="https://extensions.gnome.org/extension/1462/panel-date-format/">https://extensions.gnome.org/extension/1462/panel-date-format/</a><br>パネルの日時表示書式をカスタマイズできる<br><code>%n</code>で改行も入れられる</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">dconf <span class="keyword">write</span> /org/gnome/shell/extensions/panel-date-<span class="keyword">format</span>/<span class="keyword">format</span> <span class="string">&quot;&#x27;<span class="variable">%m</span>/%d%n%a%n<span class="variable">%H</span>:<span class="variable">%M</span>&#x27;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Input-Method-Panel"><a href="#Input-Method-Panel" class="headerlink" title="Input Method Panel"></a>Input Method Panel</h3><p><a href="https://extensions.gnome.org/extension/261/kimpanel/">https://extensions.gnome.org/extension/261/kimpanel/</a><br>Arch Linux でIMEの状況をアイコン表示する</p>
<hr>
<h2 id="🪟ウィンドウ制御"><a href="#🪟ウィンドウ制御" class="headerlink" title="🪟ウィンドウ制御"></a>🪟ウィンドウ制御</h2><h3 id="Forge-⭐⭐⭐"><a href="#Forge-⭐⭐⭐" class="headerlink" title="Forge ⭐⭐⭐"></a>Forge ⭐⭐⭐</h3><p><a href="https://extensions.gnome.org/extension/4481/forge/">https://extensions.gnome.org/extension/4481/forge/</a><br>ウィンドウをタイル制御してくれる<br>特にタッチスクリーン操作の場合に画面配置の自動化が便利</p>
<hr>
<h2 id="🧱壁紙"><a href="#🧱壁紙" class="headerlink" title="🧱壁紙"></a>🧱壁紙</h2><h3 id="Wallpaper-Slideshow-⭐"><a href="#Wallpaper-Slideshow-⭐" class="headerlink" title="Wallpaper Slideshow ⭐"></a>Wallpaper Slideshow ⭐</h3><p><a href="https://extensions.gnome.org/extension/6281/wallpaper-slideshow/">https://extensions.gnome.org/extension/6281/wallpaper-slideshow/</a><br>指定した間隔で壁紙を切り替える<br>BINGの壁紙もダウンロードできる<br>操作はデスクトップを右クリック</p>
<h3 id="Bing-Wallpaper"><a href="#Bing-Wallpaper" class="headerlink" title="Bing Wallpaper"></a>Bing Wallpaper</h3><p><a href="https://extensions.gnome.org/extension/1262/bing-wallpaper-changer/">https://extensions.gnome.org/extension/1262/bing-wallpaper-changer/</a><br>日替わりでBINGの壁紙を背景に設定してくれる<br>美しい画像が揃っている</p>
<hr>
<h2 id="💻ワークスペース"><a href="#💻ワークスペース" class="headerlink" title="💻ワークスペース"></a>💻ワークスペース</h2><h3 id="Space-Bar-⭐"><a href="#Space-Bar-⭐" class="headerlink" title="Space Bar ⭐"></a>Space Bar ⭐</h3><p><a href="https://extensions.gnome.org/extension/5090/space-bar/">https://extensions.gnome.org/extension/5090/space-bar/</a><br>パネルを左&#x2F;右に配置しても見栄えが悪くならない<br>現在のワークスペース番号を表示する<br>私はSpace Barのショートカットキーをすべてクリアしている</p>
<h3 id="Workplace-Indicator"><a href="#Workplace-Indicator" class="headerlink" title="Workplace Indicator"></a>Workplace Indicator</h3><p><a href="https://extensions.gnome.org/extension/21/workspace-indicator/">https://extensions.gnome.org/extension/21/workspace-indicator/</a><br>パネルを左&#x2F;右に配置するとワークスペースは白太線、黒細線で表示される</p>
<hr>
<h2 id="🧰アプリケーションアイコン"><a href="#🧰アプリケーションアイコン" class="headerlink" title="🧰アプリケーションアイコン"></a>🧰アプリケーションアイコン</h2><h3 id="Dynamic-Calendar-Clocks-and-Weather-Icons"><a href="#Dynamic-Calendar-Clocks-and-Weather-Icons" class="headerlink" title="Dynamic Calendar, Clocks and Weather Icons"></a>Dynamic Calendar, Clocks and Weather Icons</h3><p><a href="https://extensions.gnome.org/extension/5550/dynamic-calendar-and-clocks-icons/">https://extensions.gnome.org/extension/5550/dynamic-calendar-and-clocks-icons/</a><br>カレンダー、時計、天気のアプリアイコンが現在の状況を示してくれる</p>
]]></content>
      <tags>
        <tag>gnome-shell-extension</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 7.0 + Freemind + Travel</title>
    <url>/2023/12/02/Hexo-7-0-freemind/</url>
    <content><![CDATA[<p><img src="/images/hexo-freemind-travel.png"><br><a href="https://hexo.io/news/2023/11/03/hexo-7-0-0-released/">https://hexo.io/news/2023/11/03/hexo-7-0-0-released/</a><br><a href="https://github.com/wzpan/hexo-theme-freemind/">https://github.com/wzpan/hexo-theme-freemind/</a><br><a href="https://github.com/ktkr3d/hexo-theme-freemind-travel">https://github.com/ktkr3d/hexo-theme-freemind-travel</a></p>
<p>Hexo 7.0 がリリースされたので新規に環境を構築してみよう。<br>FreemindテーマとTravelカラーテーマを設定します。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>WSL(Ubuntu 22.04) on Windows 11</li>
<li>nodejs v20.10.0</li>
<li>npm 10.2.3</li>
<li>hexo 7.0.0</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li><p>Hexo 7.0のインストール<br><a href="https://hexo.io/">https://hexo.io/</a></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span>hexo-cli -g</span><br><span class="line">hexo init <span class="keyword">blog</span></span><br><span class="line"><span class="keyword"></span>cd <span class="keyword">blog</span></span><br><span class="line"><span class="keyword"></span>npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Freemind テーマのインストール<br><a href="https://github.com/wzpan/hexo-theme-freemind">https://github.com/wzpan/hexo-theme-freemind</a></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/wzpan/hexo-theme-freemind.git themes/freemind</span><br><span class="line">npm install hexo-<span class="keyword">tag</span>-bootstrap --save <span class="comment"># optional</span></span><br><span class="line">npm install hexo-generator-search --save <span class="comment"># optional</span></span><br><span class="line">npm install hexo-recommended-posts --save <span class="comment"># optional</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> themes/freemind/_config.yml _config.freemind.yml</span><br></pre></td></tr></table></figure>
</li>
<li><p>Freemind-Travel カラーテーマのインストール<br><a href="https://github.com/ktkr3d/hexo-theme-freemind-travel">https://github.com/ktkr3d/hexo-theme-freemind-travel</a><br>zipをダウンロードして以下のように配置<br><code> themes/freemind/source/favicon.png</code><br><code>themes/freemind/source/css/themes/travel.css</code><br><code>themes/freemind/source/img/travel.png</code></p>
</li>
<li><p>Hexo の設定 (Freemind テーマを指定)</p>
<figure class="highlight yaml"><figcaption><span>./_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">freemind</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Freemind テーマの設定 (Travel カラーテーマを指定)</p>
<figure class="highlight yaml"><figcaption><span>./_config.freemind.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">travel</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><ol>
<li>hexo サーバの起動  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
<li>ブラウザで<code>http://localhost:4000</code>を開く</li>
<li>hexo サーバの終了はCtrl+C</li>
</ol>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Fractional Scaling on Wayland</title>
    <url>/2023/12/03/Fractional-Scaling-on-Wayland/</url>
    <content><![CDATA[<p><img src="/images/fractional_scaling.png"><br>CHUWI MiniBook X(10.51 inch, 1200*1920px)のように画素密度の高い画面ではスケーリング値を125%にすると見やすくなるとともにタッチスクリーン操作がしやすくなります。出荷時のWindows 11は150%になっています。これをLinux でもやってみましょう。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Ubuntu 23.10 &#x2F; GNOME Shell 45.1</li>
<li>Arch Linux &#x2F; GNOME Shell 45.1</li>
<li>CHUWI MiniBook X N100<br>画素密度： 215ppi<br>画素ピッチ： 0.118mm<br>総画素数： 2,304,000ピクセル<br>スペック： 10.51インチ(1920×1200)</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="Waylandで分数スケーリング-Fractional-Scaling-の有効化"><a href="#Waylandで分数スケーリング-Fractional-Scaling-の有効化" class="headerlink" title="Waylandで分数スケーリング(Fractional Scaling)の有効化"></a>Waylandで分数スケーリング(Fractional Scaling)の有効化</h4><ul>
<li>Ubuntuではデフォルトで有効になっています。</li>
<li>Arch Linuxで分数スケーリングを有効にするには以下を実行します。<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">gsettings <span class="keyword">set</span> org.gnome.mutter <span class="comment">experimental-features</span> <span class="comment">&quot;[&#x27;scale-monitor-framebuffer&#x27;]&quot;</span></span><br></pre></td></tr></table></figure>
再ログインすると設定画面のディスプレイからスケーリング値(100%, 125%, 150%, 175%, 200%, 225%)を選択できるようになります。</li>
</ul>
<h4 id="FirefoxをWaylandモードで起動"><a href="#FirefoxをWaylandモードで起動" class="headerlink" title="FirefoxをWaylandモードで起動"></a>FirefoxをWaylandモードで起動</h4><ul>
<li>Ubuntu のFirefox はWaylandモードで起動します。</li>
<li>Arch Linux でFirefox をWaylandモードで起動するには以下の設定をします。<figure class="highlight bash"><figcaption><span>~/.bash_profile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$XDG_SESSION_TYPE</span>&quot;</span> = <span class="string">&quot;wayland&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">export</span> MOZ_ENABLE_WAYLAND=1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li>
<li>Firefoxの動作モードを確認するには<code>about:support</code>を開いてウィンドウプロトコルの値を確認します。</li>
<li>FirefoxはWayland環境において動作上の問題がなさそうです。</li>
</ul>
<h4 id="Google-ChromeをWayland-モードで起動"><a href="#Google-ChromeをWayland-モードで起動" class="headerlink" title="Google ChromeをWayland モードで起動"></a>Google ChromeをWayland モードで起動</h4><ul>
<li>Linux でスケーリング値を125%にするとGoogle Chrome の文字がぼやけてしまいます。これはGoogle CromeがWaylandモードではなくXWaylandモードで起動されているためです。以下のコマンドによりWaylandモードで起動すると文字がくっきりと描画されます。<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">google-chrome-stable <span class="attribute">--enable-features</span>=UseOzonePlatform <span class="attribute">--ozone-platform</span>=wayland</span><br></pre></td></tr></table></figure></li>
<li>Wayland モードはGoogle Chromeの画面からでも有効にできます。<code>chrome:flags</code>を開いて、<code>Preferred Ozone platform</code>に <code>wayland</code>または<code>Auto</code>を指定します。</li>
</ul>
<h4 id="Google-ChromeをWayland-モードで起動した際のIME入力"><a href="#Google-ChromeをWayland-モードで起動した際のIME入力" class="headerlink" title="Google ChromeをWayland モードで起動した際のIME入力"></a>Google ChromeをWayland モードで起動した際のIME入力</h4><ul>
<li>Waylandモードで起動した場合、text inputプロトコルの実装仕様バージョンの差異に起因してIME入力ができなくなります。IMEを有効にするには<code>--gtk-version=4</code>を指定します。<code>chrome:flags</code>画面から指定できないので以下のコマンドで起動します。<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">google-chrome-stable <span class="attribute">--enable-features</span>=UseOzonePlatform <span class="attribute">--ozone-platform</span>=wayland <span class="attribute">--gtk-version</span>=4</span><br></pre></td></tr></table></figure></li>
<li>Arch Linux の場合は以下のファイルに記述することで起動時のフラグを指定できます。<figure class="highlight bash"><figcaption><span>~/.config/chrome-flags.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># --enable-features=UseOzonePlatform</span></span><br><span class="line"><span class="comment"># --ozone-platform=wayland</span></span><br><span class="line">--gtk-version=4</span><br></pre></td></tr></table></figure></li>
<li>Ubuntu の場合はローカルにGTK4用の.desktopファイルを作ります。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/share/applications/google-chrome.desktop ~/.local/share/applications/</span><br></pre></td></tr></table></figure>
<figure class="highlight ini"><figcaption><span>~/.local/share/applications/google-chrome.desktop</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[Desktop Entry]</span></span><br><span class="line"><span class="attr">Name</span>=Google Chrome GTK4</span><br><span class="line"><span class="attr">Exec</span>=/usr/bin/google-chrome-stable %U --gtk-version=<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Desktop Action new-window]</span></span><br><span class="line"><span class="attr">Exec</span>=/usr/bin/google-chrome-stable --gtk-version=<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Desktop Action new-private-window]</span></span><br><span class="line"><span class="attr">Exec</span>=/usr/bin/google-chrome-stable --incognito --gtk-version=<span class="number">4</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Google-Chrome-のIMEポップアップの位置修正"><a href="#Google-Chrome-のIMEポップアップの位置修正" class="headerlink" title="Google Chrome のIMEポップアップの位置修正"></a>Google Chrome のIMEポップアップの位置修正</h4><ul>
<li>GTKバージョン指定でIMEのポップアップは表示されますが、IMEのポップアップの表示位置がずれてしまいます。これを修正するにはGNOME Shellの拡張機能であるInput Method Panelを導入します。<br><a href="https://extensions.gnome.org/extension/261/kimpanel/">https://extensions.gnome.org/extension/261/kimpanel/</a></li>
</ul>
<h4 id="Visual-Studio-CodeのWaylandモード起動"><a href="#Visual-Studio-CodeのWaylandモード起動" class="headerlink" title="Visual Studio CodeのWaylandモード起動"></a>Visual Studio CodeのWaylandモード起動</h4><ul>
<li>Visual Studio Code(Electronアプリケーション)をWaylandモードで起動するには<code>--enable-features=WaylandWindowDecorations</code>と<code>--ozone-platform-hint=auto</code>を指定します。<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">code <span class="attribute">--enable-features</span>=WaylandWindowDecorations <span class="attribute">--ozone-platform-hint</span>=auto</span><br></pre></td></tr></table></figure></li>
<li>Arch Linux であれば以下のファイルでフラグを指定できます。<figure class="highlight bash"><figcaption><span>~/.config/code-flags.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">--enable-features=WaylandWindowDecorations</span><br><span class="line">--ozone-platform-hint=auto</span><br></pre></td></tr></table></figure></li>
<li>ただし、Electronの実装によりGTK4モードにすることはできないためIME入力できません。引き継き調査が必要です。</li>
</ul>
<h4 id="Code-Server"><a href="#Code-Server" class="headerlink" title="Code Server"></a>Code Server</h4><ul>
<li>Code Server(Visual Studio CodeのWeb版)はブラウザがWaylandモードとGTK4モードに対応していればよいので問題ありません。PWA化することによりアプリケーションとして起動できます。</li>
</ul>
]]></content>
      <tags>
        <tag>wayland</tag>
        <tag>ubuntu</tag>
        <tag>minibook-x</tag>
        <tag>arch-linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Theme Butterfly</title>
    <url>/2023/12/09/Hexo-Theme-Butterfly/</url>
    <content><![CDATA[<p><img src="/images/hexo-theme-butterfly.png"><br><a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></p>
<p>モダンで多機能なHexo のテーマButterflyを使ってみました。<br>あまりにも多機能なのでシンプルになるように設定しました。<br>パッケージ版を導入して、オリジナルのスクリプトは修正しないようにしました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>WSL(Ubuntu 22.04) on Windows 11</li>
<li>nodejs v20.10.0</li>
<li>npm 10.2.3</li>
<li>hexo 7.0.0</li>
<li>hexo-theme-butterfly 4.11.0</li>
</ul>
<h3 id="ソフトウェアのインストール"><a href="#ソフトウェアのインストール" class="headerlink" title="ソフトウェアのインストール"></a>ソフトウェアのインストール</h3><h4 id="Hexoのインストール"><a href="#Hexoのインストール" class="headerlink" title="Hexoのインストール"></a>Hexoのインストール</h4><p><a href="https://hexo.io/">https://hexo.io/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h4 id="Butterflyテーマのインストール"><a href="#Butterflyテーマのインストール" class="headerlink" title="Butterflyテーマのインストール"></a>Butterflyテーマのインストール</h4><p><a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-butterfly</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus</span><br><span class="line"><span class="built_in">cp</span> ./node_modules/hexo-theme-butterfly/_config.yml _config.butterfly.yml</span><br></pre></td></tr></table></figure>
<div class="alert alert-info"><i class="fa fa-info  float-left"></i>  <p>今回は<code>git clone</code>ではなくテーマのパッケージを使います。</p>
</div>


<h4 id="プラグインのインストール"><a href="#プラグインのインストール" class="headerlink" title="プラグインのインストール"></a>プラグインのインストール</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<h3 id="各種ページの準備"><a href="#各種ページの準備" class="headerlink" title="各種ページの準備"></a>各種ページの準備</h3><h4 id="Tagsページ"><a href="#Tagsページ" class="headerlink" title="Tagsページ"></a>Tagsページ</h4><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">hexo <span class="built_in">n</span> page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><figcaption><span>./source/tags/index.md</span></figcaption><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Tags</span><br><span class="line">type: tags</span><br><span class="line"><span class="section">layout: tags</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h4 id="Categoriesページ"><a href="#Categoriesページ" class="headerlink" title="Categoriesページ"></a>Categoriesページ</h4><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">hexo <span class="built_in">n</span> page <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><figcaption><span>./source/categories/index.md</span></figcaption><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Categories</span><br><span class="line">type: categories</span><br><span class="line"><span class="section">layout: categories</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h3 id="カスタマイズ-プロフィール"><a href="#カスタマイズ-プロフィール" class="headerlink" title="カスタマイズ - プロフィール"></a>カスタマイズ - プロフィール</h3><h4 id="サイト情報の設定"><a href="#サイト情報の設定" class="headerlink" title="サイト情報の設定"></a>サイト情報の設定</h4><figure class="highlight yaml"><figcaption><span>./_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Memorandum!</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">ktkr3d</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Japan&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://ktkr3d.github.io</span></span><br></pre></td></tr></table></figure>

<h4 id="アバター画像の差し替え"><a href="#アバター画像の差し替え" class="headerlink" title="アバター画像の差し替え"></a>アバター画像の差し替え</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># img: https://i.loli.net/2021/02/24/5O1day2nriDzjSu.png</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/images/avatar.png</span></span><br></pre></td></tr></table></figure>

<h4 id="アバターの下のGithubリンクの設定"><a href="#アバターの下のGithubリンクの設定" class="headerlink" title="アバターの下のGithubリンクの設定"></a>アバターの下のGithubリンクの設定</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="comment"># link: https://github.com/xxxxxx</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/ktkr3d</span></span><br></pre></td></tr></table></figure>

<h4 id="フッタのブログ開始年の設定"><a href="#フッタのブログ開始年の設定" class="headerlink" title="フッタのブログ開始年の設定"></a>フッタのブログ開始年の設定</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="comment"># since: 2020</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2010</span></span><br></pre></td></tr></table></figure>

<h4 id="記事のコピーライト表記を無効化"><a href="#記事のコピーライト表記を無効化" class="headerlink" title="記事のコピーライト表記を無効化"></a>記事のコピーライト表記を無効化</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="記事テンプレートのカスタマイズ"><a href="#記事テンプレートのカスタマイズ" class="headerlink" title="記事テンプレートのカスタマイズ"></a>記事テンプレートのカスタマイズ</h4><figure class="highlight markdown"><figcaption><span>./scaffolds/post.md</span></figcaption><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> </span><br><span class="line">toc: true</span><br><span class="line">published: true</span><br><span class="line"><span class="section">cover:</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">![](<span class="link">/images/.png</span>)</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">### 環境</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 構築</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 実行</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 利用</span></span><br></pre></td></tr></table></figure>

<h3 id="カスタマイズ-外観"><a href="#カスタマイズ-外観" class="headerlink" title="カスタマイズ - 外観"></a>カスタマイズ - 外観</h3><h4 id="Butterfly-テーマの指定"><a href="#Butterfly-テーマの指定" class="headerlink" title="Butterfly テーマの指定"></a>Butterfly テーマの指定</h4><figure class="highlight yaml"><figcaption><span>./_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure>

<h4 id="上部ナビゲーションバーの表示を固定"><a href="#上部ナビゲーションバーの表示を固定" class="headerlink" title="上部ナビゲーションバーの表示を固定"></a>上部ナビゲーションバーの表示を固定</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="comment"># fixed: false # fixed navigation bar</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">true</span> <span class="comment"># fixed navigation bar</span></span><br></pre></td></tr></table></figure>

<h4 id="インデックスページのバナー画像を無効化"><a href="#インデックスページのバナー画像を無効化" class="headerlink" title="インデックスページのバナー画像を無効化"></a>インデックスページのバナー画像を無効化</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#disable_top_img: false</span></span><br><span class="line"><span class="attr">disable_top_img:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="サイドバーを左側に移動"><a href="#サイドバーを左側に移動" class="headerlink" title="サイドバーを左側に移動"></a>サイドバーを左側に移動</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="comment"># position: right # left or right</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span> <span class="comment"># left or right</span></span><br></pre></td></tr></table></figure>

<h4 id="インデックスページの各記事のカバー画像を右側に統一"><a href="#インデックスページの各記事のカバー画像を右側に統一" class="headerlink" title="インデックスページの各記事のカバー画像を右側に統一"></a>インデックスページの各記事のカバー画像を右側に統一</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># position: both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span></span><br></pre></td></tr></table></figure>

<h4 id="サイドバーでは記事カバー画像を非表示"><a href="#サイドバーでは記事カバー画像を非表示" class="headerlink" title="サイドバーでは記事カバー画像を非表示"></a>サイドバーでは記事カバー画像を非表示</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># aside_enable: true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="ページ背景色の設定"><a href="#ページ背景色の設定" class="headerlink" title="ページ背景色の設定"></a>ページ背景色の設定</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># background:</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">rgb(227,</span> <span class="number">233</span><span class="string">,</span> <span class="number">199</span><span class="string">)</span> <span class="comment">#e3e9c7</span></span><br></pre></td></tr></table></figure>

<h4 id="フッタに背景画像の設定"><a href="#フッタに背景画像の設定" class="headerlink" title="フッタに背景画像の設定"></a>フッタに背景画像の設定</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># footer_bg: false</span></span><br><span class="line"><span class="attr">footer_bg:</span> <span class="string">url(/images/travel.png)</span></span><br></pre></td></tr></table></figure>

<h4 id="フォントの設定"><a href="#フォントの設定" class="headerlink" title="フォントの設定"></a>フォントの設定</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">Dummy,</span> <span class="string">&quot;Noto Sans CJK JP&quot;</span><span class="string">,</span> <span class="string">&quot;ヒラギノ角ゴ ProN W3&quot;</span><span class="string">,</span> <span class="string">&quot;Hiragino Kaku Gothic ProN&quot;</span><span class="string">,</span> <span class="string">&quot;メイリオ&quot;</span><span class="string">,</span> <span class="string">Meiryo,</span> <span class="string">sans-serif</span></span><br></pre></td></tr></table></figure>
<div class="alert alert-warning"><i class="fa fa-bell  float-left"></i>  <p>一つ目はダブルクォートなしを指定しないといけないのはバグ？</p>
</div>

<h4 id="favicon-の設定"><a href="#favicon-の設定" class="headerlink" title="favicon の設定"></a>favicon の設定</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># favicon: /img/favicon.png</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/images/favicon.png</span></span><br></pre></td></tr></table></figure>

<h4 id="コードブロックの行番号を非表示"><a href="#コードブロックの行番号を非表示" class="headerlink" title="コードブロックの行番号を非表示"></a>コードブロックの行番号を非表示</h4><figure class="highlight yaml"><figcaption><span>./_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">syntax_highlighter:</span> <span class="string">highlight.js</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="comment"># line_number: true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="コードブロックテーマの変更"><a href="#コードブロックテーマの変更" class="headerlink" title="コードブロックテーマの変更"></a>コードブロックテーマの変更</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># highlight_theme: light #  darker / pale night / light / ocean / mac / mac light / false</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">darker</span> <span class="comment">#  darker / pale night / light / ocean / mac / mac light / false</span></span><br></pre></td></tr></table></figure>

<h4 id="コードブロックのヘッダを無効化"><a href="#コードブロックのヘッダを無効化" class="headerlink" title="コードブロックのヘッダを無効化"></a>コードブロックのヘッダを無効化</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># highlight_copy: true # copy button</span></span><br><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">false</span> <span class="comment"># copy button</span></span><br><span class="line"><span class="comment"># highlight_lang: true # show the code language</span></span><br><span class="line"><span class="attr">highlight_lang:</span> <span class="literal">false</span> <span class="comment"># show the code language</span></span><br><span class="line"><span class="comment"># highlight_shrink: false # true: shrink the code blocks / false: expand the code blocks | none: expand code blocks and hide the button</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="string">none</span> <span class="comment"># true: shrink the code blocks / false: expand the code blocks | none: expand code blocks and hide the button</span></span><br></pre></td></tr></table></figure>

<h3 id="カスタマイズ-カスタムCSS"><a href="#カスタマイズ-カスタムCSS" class="headerlink" title="カスタマイズ - カスタムCSS"></a>カスタマイズ - カスタムCSS</h3><h4 id="カスタムCSSの作成"><a href="#カスタムCSSの作成" class="headerlink" title="カスタムCSSの作成"></a>カスタムCSSの作成</h4><figure class="highlight css"><figcaption><span>./source/css/custom.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/* custom css */</span></span><br></pre></td></tr></table></figure>

<h4 id="カスタムCSSの有効化"><a href="#カスタムCSSの有効化" class="headerlink" title="カスタムCSSの有効化"></a>カスタムCSSの有効化</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="コンテンツ幅を最大に拡張"><a href="#コンテンツ幅を最大に拡張" class="headerlink" title="コンテンツ幅を最大に拡張"></a>コンテンツ幅を最大に拡張</h4><figure class="highlight css"><figcaption><span>./source/css/custom.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.layout</span>&#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="見出しの装飾"><a href="#見出しの装飾" class="headerlink" title="見出しの装飾"></a>見出しの装飾</h4><figure class="highlight css"><figcaption><span>./source/css/custom.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">40px</span> <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">0</span> <span class="number">8px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">6px</span> solid <span class="number">#5ca3c5</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#5ca3c5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="コードブロック"><a href="#コードブロック" class="headerlink" title="コードブロック"></a>コードブロック</h4><figure class="highlight css"><figcaption><span>./source/css/custom.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">figcaption</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#456789</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="カスタマイズ-機能"><a href="#カスタマイズ-機能" class="headerlink" title="カスタマイズ - 機能"></a>カスタマイズ - 機能</h3><h4 id="ローカル検索を有効化"><a href="#ローカル検索を有効化" class="headerlink" title="ローカル検索を有効化"></a>ローカル検索を有効化</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="comment"># enable: false</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="ナビゲーションバーにPagesメニューを追加"><a href="#ナビゲーションバーにPagesメニューを追加" class="headerlink" title="ナビゲーションバーにPagesメニューを追加"></a>ナビゲーションバーにPagesメニューを追加</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">Pages</span> <span class="string">||</span> <span class="attr">fas fa-list:</span></span><br><span class="line">    <span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">    <span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">    <span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br></pre></td></tr></table></figure>

<h4 id="Google-Analytics-の導入"><a href="#Google-Analytics-の導入" class="headerlink" title="Google Analytics の導入"></a>Google Analytics の導入</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">google_analytics:</span> <span class="string">G-XXXXXXXXXX</span></span><br></pre></td></tr></table></figure>

<h4 id="RSS2-の生成"><a href="#RSS2-の生成" class="headerlink" title="RSS2 の生成"></a>RSS2 の生成</h4><figure class="highlight yaml"><figcaption><span>./_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">rss2</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">rss.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">icon.png</span></span><br><span class="line">  <span class="attr">autodiscovery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">template:</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Subscrive:</span> <span class="string">/rss.xml</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-rss</span></span><br></pre></td></tr></table></figure>

<h4 id="Busuanzi-カウンタの無効化"><a href="#Busuanzi-カウンタの無効化" class="headerlink" title="Busuanzi カウンタの無効化"></a>Busuanzi カウンタの無効化</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="comment"># site_uv: true</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># site_pv: true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># page_pv: true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="Announcement-カードの無効化"><a href="#Announcement-カードの無効化" class="headerlink" title="Announcement カードの無効化"></a>Announcement カードの無効化</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="comment"># enable: true</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="Info-カードの無効化"><a href="#Info-カードの無効化" class="headerlink" title="Info カードの無効化"></a>Info カードの無効化</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="comment"># enable: true</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="目次スクロール率-の非表示"><a href="#目次スクロール率-の非表示" class="headerlink" title="目次スクロール率(%)の非表示"></a>目次スクロール率(%)の非表示</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="comment"># scroll_percent: true</span></span><br><span class="line">  <span class="attr">scroll_percent:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="Share-js-の設定"><a href="#Share-js-の設定" class="headerlink" title="Share.js の設定"></a>Share.js の設定</h4><figure class="highlight yaml"><figcaption><span>./_config.butterfly.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">sharejs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># sites: facebook,twitter,wechat,weibo,qq</span></span><br><span class="line">  <span class="attr">sites:</span> <span class="string">facebook,twitter,google</span></span><br></pre></td></tr></table></figure>

<h3 id="記事投稿時の個別設定"><a href="#記事投稿時の個別設定" class="headerlink" title="記事投稿時の個別設定"></a>記事投稿時の個別設定</h3><h4 id="カバー画像を指定する"><a href="#カバー画像を指定する" class="headerlink" title="カバー画像を指定する"></a>カバー画像を指定する</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">/images/hogehoge.png</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h4 id="目次を生成する"><a href="#目次を生成する" class="headerlink" title="目次を生成する"></a>目次を生成する</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h4 id="注意書き"><a href="#注意書き" class="headerlink" title="注意書き"></a>注意書き</h4><p><a href="https://github.com/jerryc127/hexo-theme-butterfly/tree/dev/scripts/tag">https://github.com/jerryc127/hexo-theme-butterfly/tree/dev/scripts/tag</a></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span><span class="built_in">warning</span> %&#125;</span><br><span class="line">注意書きメッセージ (default | primary | success | <span class="built_in">info</span> | <span class="built_in">warning</span> | danger)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="alert alert-warning"><i class="fa fa-bell  float-left"></i>  <p>注意書きメッセージ (default | primary | success | info | warning | danger)</p>
</div>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt3 + Vue-good-table-next</title>
    <url>/2023/12/30/Nuxt3-Vue-good-table-next/</url>
    <content><![CDATA[<p><img src="/images/vue-good-table-next.png"><br><a href="https://nuxt.com/">https://nuxt.com/</a><br><a href="https://github.com/borisflesch/vue-good-table-next">https://github.com/borisflesch/vue-good-table-next</a></p>
<p>Nuxt 3 でVue-good-table-nextを使ってみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>node v20.10.0</li>
<li>npm 10.2.3</li>
<li>nuxt 3.9.0</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="プロジェクト"><a href="#プロジェクト" class="headerlink" title="プロジェクト"></a>プロジェクト</h4><ul>
<li>Nuxt 3 プロジェクトの作成<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">npx nuxi@latest init nuxt3-<span class="keyword">app</span></span><br><span class="line"><span class="keyword">cd</span> nuxt3-<span class="keyword">app</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="vue-good-table-next"><a href="#vue-good-table-next" class="headerlink" title="vue-good-table-next"></a>vue-good-table-next</h4><ul>
<li>インストール<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">npm install vue-good-<span class="built_in">table</span>-<span class="built_in">next</span></span><br></pre></td></tr></table></figure></li>
<li>プラグインの設定<figure class="highlight typescript"><figcaption><span>nuxt3-app/plugins/vue-good-table-next.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">VueGoodTable</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue-good-table-next&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;vue-good-table-next/dist/vue-good-table-next.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtPlugin</span>(<span class="function">(<span class="params">nuxtApp</span>) =&gt;</span> &#123;</span><br><span class="line">  nuxtApp.<span class="property">vueApp</span>.<span class="title function_">component</span>(<span class="string">&quot;vue-good-table&quot;</span>, <span class="title class_">VueGoodTable</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="ページ"><a href="#ページ" class="headerlink" title="ページ"></a>ページ</h4><ul>
<li>vue-good-table の利用<figure class="highlight plaintext"><figcaption><span>nuxt3-app/pages/vue-good-table.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;vue-good-table</span><br><span class="line">      v-on:selected-rows-change=&quot;selectionChanged&quot;</span><br><span class="line">      :columns=&quot;columns&quot;</span><br><span class="line">      :rows=&quot;rows&quot;</span><br><span class="line">      :select-options=&quot;&#123;</span><br><span class="line">        enabled: true,</span><br><span class="line">      &#125;&quot;</span><br><span class="line">      :search-options=&quot;&#123; enabled: true &#125;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;template #selected-row-actions&gt;</span><br><span class="line">        &lt;button&gt;Action 1&lt;/button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/vue-good-table&gt;</span><br><span class="line">    &lt;!-- click on a row below to show the action button --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;my-component&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      columns: [</span><br><span class="line">        &#123;</span><br><span class="line">          label: &quot;Name&quot;,</span><br><span class="line">          field: &quot;name&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          label: &quot;Age&quot;,</span><br><span class="line">          field: &quot;age&quot;,</span><br><span class="line">          type: &quot;number&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          label: &quot;Created On&quot;,</span><br><span class="line">          field: &quot;createdAt&quot;,</span><br><span class="line">          type: &quot;date&quot;,</span><br><span class="line">          dateInputFormat: &quot;yyyy-MM-dd&quot;,</span><br><span class="line">          dateOutputFormat: &quot;MMM do yy&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          label: &quot;Percent&quot;,</span><br><span class="line">          field: &quot;score&quot;,</span><br><span class="line">          type: &quot;percentage&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      rows: [</span><br><span class="line">        &#123; id: 1, name: &quot;John&quot;, age: 20, createdAt: &quot;2011-10-31&quot;, score: 0.03343 &#125;,</span><br><span class="line">        &#123; id: 2, name: &quot;Jane&quot;, age: 24, createdAt: &quot;2011-10-31&quot;, score: 0.03343 &#125;,</span><br><span class="line">        &#123; id: 3, name: &quot;Susan&quot;, age: 16, createdAt: &quot;2011-10-30&quot;, score: 0.03343 &#125;,</span><br><span class="line">        &#123; id: 4, name: &quot;Chris&quot;, age: 55, createdAt: &quot;2011-10-11&quot;, score: 0.03343 &#125;,</span><br><span class="line">        &#123; id: 5, name: &quot;Dan&quot;, age: 40, createdAt: &quot;2011-10-21&quot;, score: 0.03343 &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="サーバ"><a href="#サーバ" class="headerlink" title="サーバ"></a>サーバ</h4><ul>
<li>開発サーバを起動<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">run</span> dev</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="ブラウザ"><a href="#ブラウザ" class="headerlink" title="ブラウザ"></a>ブラウザ</h4><ul>
<li><p>ページを表示<br><code>htttp://localhost:3000/vue-good-table</code></p>
<p><img src="/images/vue-good-table-next.png"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>nuxt3</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt3 + VOICEVOX</title>
    <url>/2023/12/31/Nuxt3-VOICEVOX/</url>
    <content><![CDATA[<p><img src="/images/nuxt3-voicevox.png"></p>
<p>Nuxt3 からVOICEVOXを利用してみました。ずんだもんがしゃべってくれます。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>node v20.10.0</li>
<li>npm 10.2.3</li>
<li>nuxt 3.9.0</li>
<li>voicebox 0.14.10</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="VOICEVOX"><a href="#VOICEVOX" class="headerlink" title="VOICEVOX"></a>VOICEVOX</h4><ul>
<li>VOICEVOX をインストール<br>VOICEVOXをインストールします。REST API サーバとして使うのでdocker版でもよいと思います。</li>
</ul>
<h4 id="アプリケーション"><a href="#アプリケーション" class="headerlink" title="アプリケーション"></a>アプリケーション</h4><ul>
<li>Nuxt 3 プロジェクトの作成<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">npx <span class="symbol">nuxi@</span>latest <span class="keyword">init</span> nuxt3-voicevox</span><br><span class="line">cd nuxt3-voicevox</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="ページ"><a href="#ページ" class="headerlink" title="ページ"></a>ページ</h4><ul>
<li>NUXT3 からVOICEVOXを呼び出すページを作成<figure class="highlight plaintext"><figcaption><span>nuxt3-voicevox/app.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;form @submit.prevent=&quot;submitForm&quot;&gt;</span><br><span class="line">      &lt;table&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">              &lt;textarea id=&quot;text&quot; v-model=&quot;formData.text&quot; placeholder=&quot;Your message...&quot; /&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">              &lt;button type=&quot;submit&quot;&gt;音声合成&lt;/button&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">          &lt;tr v-for=&quot;(message, index) in messages&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123; message.text &#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;audio :src=&quot;message.url&quot; controls /&gt;&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const formData = ref(&#123;</span><br><span class="line">  text: &quot;&quot;,</span><br><span class="line">  url: &quot;&quot;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const messagesData = [];</span><br><span class="line">const messages = ref(messagesData);</span><br><span class="line"></span><br><span class="line">function addMessage() &#123;</span><br><span class="line">  if (formData.value.text) &#123;</span><br><span class="line">    messages.value.push(&#123;</span><br><span class="line">      text: formData.value.text,</span><br><span class="line">      url: formData.value.url,</span><br><span class="line">    &#125;);</span><br><span class="line">    formData.value.text = &quot;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const submitForm = async () =&gt; &#123;</span><br><span class="line">  const &#123; data: queryJson &#125; = await useFetch(&quot;http://localhost:50021/audio_query&quot;, &#123;</span><br><span class="line">    method: &quot;POST&quot;,</span><br><span class="line">    query: &#123; speaker: &quot;1&quot;, text: formData.value.text &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  const &#123; data: audioData &#125; = await useFetch(&quot;http://localhost:50021/synthesis&quot;, &#123;</span><br><span class="line">    method: &quot;POST&quot;,</span><br><span class="line">    query: &#123; speaker: &quot;1&quot; &#125;,</span><br><span class="line">    body: queryJson,</span><br><span class="line">    responseType: &quot;blob&quot;,</span><br><span class="line">    onResponse(&#123; request, response, options &#125;) &#123;</span><br><span class="line">      formData.value.url = window.URL.createObjectURL(response._data);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  addMessage();</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="VOICEVOX-1"><a href="#VOICEVOX-1" class="headerlink" title="VOICEVOX"></a>VOICEVOX</h4><ul>
<li>VOICEVOX を起動しておきます。<br>50021番ポートで待ち受けます。</li>
</ul>
<h4 id="アプリケーション-1"><a href="#アプリケーション-1" class="headerlink" title="アプリケーション"></a>アプリケーション</h4><ul>
<li>アプリケーションjを起動します。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
3000番ポートで待ち受けます。</li>
</ul>
<h4 id="ブラウザ"><a href="#ブラウザ" class="headerlink" title="ブラウザ"></a>ブラウザ</h4><ul>
<li>アクセス<br><code>http://localhost:3000</code></li>
</ul>
<h4 id="音声合成"><a href="#音声合成" class="headerlink" title="音声合成"></a>音声合成</h4><ul>
<li>左上のテキストエリアに文章を入力して、右上の「音声合成」ボタンを押します。</li>
<li>音声合成が完了すると、文章とオーディオプレイヤーが下に表示されます。さらに音声合成を実行すると追加されていきます。</li>
</ul>
<h4 id="音声再生"><a href="#音声再生" class="headerlink" title="音声再生"></a>音声再生</h4><ul>
<li>オーディオプレイヤーの再生ボタンを押下して再生します。</li>
</ul>
]]></content>
      <tags>
        <tag>nuxt</tag>
        <tag>voicevox</tag>
      </tags>
  </entry>
  <entry>
    <title>Neutralinojs + VOICEVOX</title>
    <url>/2024/01/02/Neutralinojs-VOICEVOX/</url>
    <content><![CDATA[<p><img src="/images/neutralinojs_voicevox_windows.png"><br>Nuxt3で作ったVOICEVOXのフロントエンドアプリをクロスプラットフォームなネイティブアプリケーションにしてみました。</p>
<p><a href="https://github.com/ktkr3d/neutralinojs-nuxt3-voicevox">https://github.com/ktkr3d/neutralinojs-nuxt3-voicevox</a></p>
<span id="more"></span>

<h3 id="リポジトリの使い方"><a href="#リポジトリの使い方" class="headerlink" title="リポジトリの使い方"></a>リポジトリの使い方</h3><h4 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h4><ul>
<li>クローン<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ktkr3d/neutralinojs-nuxt3-voicevox.git</span><br></pre></td></tr></table></figure></li>
<li>ビルド<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> neutralinojs-nuxt3-voicevox</span><br><span class="line">neu <span class="keyword">update</span></span><br><span class="line"><span class="keyword">cd</span> nuxt3-src</span><br><span class="line">npm install</span><br><span class="line">npm <span class="keyword">run</span> <span class="keyword">generate</span></span><br><span class="line"><span class="keyword">cd</span> ..</span><br><span class="line">neu build</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h4><ol>
<li>あらかじめVOICEVOX(docker版でも可)を起動しておきます</li>
<li>neutralinojs-nuxt3-voicevox の起動<br>  2.1 <code>neu</code>コマンドから起動する場合 <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> neutralinojs-nuxt3-voicevox</span><br><span class="line">neu <span class="keyword">run</span></span><br></pre></td></tr></table></figure>
  2.2 各OS用の実行プログラムを直接起動する場合<br> <code>neutralinojs-nuxt3-voicevox/dist/neutralinojs-nuxt3-voicevox/</code>フォルダの実行形式ファイルを実行</li>
</ol>
<h4 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h4><ul>
<li>Windows 環境でクローズボタンを押してもすぐに終了しない<br><a href="https://github.com/neutralinojs/neutralinojs/issues/618">https://github.com/neutralinojs/neutralinojs/issues/618</a><br>アプリケーションが終了するまで10秒くらい待つ必要があります。</li>
<li>Linux環境でダウンロードボタンが機能しない。調査中。<ul>
<li><code>window</code>モードの場合にボタン押下でダウンロードが始まらない。Inspector経由でリンク先blobのダウンロードはできたので、libwebkit2gtk 4.0-37やパーミッション設定の問題かもしれない。</li>
<li><code>browser</code>モード, <code>chrome</code>モードでは問題なくダウンロードできる。</li>
</ul>
</li>
</ul>
<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><h4 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h4><ul>
<li>node v20.10.0</li>
<li>npm 10.2.3</li>
<li>Neutralinojs binaries: v4.14.1</li>
<li>Neutralinojs client: v3.12.0</li>
<li>vue 3.4.3</li>
<li>nuxt 3.9.0</li>
<li>veutify 3.4.9</li>
<li>VOICEVOX 0.14.5</li>
</ul>
<h4 id="実行環境"><a href="#実行環境" class="headerlink" title="実行環境"></a>実行環境</h4><ul>
<li>Windows 11</li>
<li>Ubuntu 23.10</li>
<li>Arch Linux</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="プロジェクトフォルダ構成"><a href="#プロジェクトフォルダ構成" class="headerlink" title="プロジェクトフォルダ構成"></a>プロジェクトフォルダ構成</h4><ul>
<li>フォルダ階層と主なファイル<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">neutralinojs-nuxt3-voicevox/</span><br><span class="line">  bin/                      # Neutrianojsから提供される各OSのローダ</span><br><span class="line">  dist/                     # Neutrianojsプロジェクトのビルド結果</span><br><span class="line">  nuxt3-src/                # Nuxt3 プロジェクト</span><br><span class="line">    components/</span><br><span class="line">      sidebar.vue</span><br><span class="line">    layouts/</span><br><span class="line">      default.vue</span><br><span class="line">    pages/</span><br><span class="line">      index.vue</span><br><span class="line">      voicevox.vue          # VOICEVOX フロントエンドアプリ</span><br><span class="line">    plugins/</span><br><span class="line">      veutify.ts</span><br><span class="line">    nuxtconfig.ts           # Nuxt プロジェクトの設定</span><br><span class="line">  resources/</span><br><span class="line">  neutralinojs.config.json  # Neutralinojs プロジェクトの設定</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Neutralinojs"><a href="#Neutralinojs" class="headerlink" title="Neutralinojs"></a>Neutralinojs</h4><ul>
<li>Neutralinojs インストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @neutralinojs/neu</span><br></pre></td></tr></table></figure></li>
<li>Neutralinojs プロジェクト作成<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">neu <span class="keyword">create</span> neutralinojs-nuxt3-voicevox</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h4><ul>
<li>Neutralinojs プロジェクト配下にNuxtプロジェクトを作成<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> neutralinojs-nuxt3-voicevox</span><br><span class="line">npx nuxi@latest init nuxt3-src</span><br><span class="line"><span class="built_in">cd</span> nuxt3-src</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Vuetify"><a href="#Vuetify" class="headerlink" title="Vuetify"></a>Vuetify</h4><ul>
<li>Vuetify Plugin のインストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D vuetify vite-plugin-vuetify</span><br><span class="line">npm i @mdi/font</span><br></pre></td></tr></table></figure></li>
<li>Vuetify Plugin の設定<figure class="highlight typescript"><figcaption><span>src/plugins/vuetify.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// import this after install `@mdi/font` package</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@mdi/font/css/materialdesignicons.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vuetify/styles&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createVuetify &#125; <span class="keyword">from</span> <span class="string">&#x27;vuetify&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtPlugin</span>(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> vuetify = <span class="title function_">createVuetify</span>(&#123;</span><br><span class="line">    <span class="comment">// ... your configuration</span></span><br><span class="line">  &#125;)</span><br><span class="line">  app.<span class="property">vueApp</span>.<span class="title function_">use</span>(vuetify)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="アプリケーション"><a href="#アプリケーション" class="headerlink" title="アプリケーション"></a>アプリケーション</h4><ul>
<li>VOICEVOX フロントエンドアプリケーション<figure class="highlight html"><figcaption><span>nuxt3-src/pages/voicevox.vue</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;submitForm&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">v-table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">v-container</span> <span class="attr">fluid</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">v-textarea</span>  <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.text&quot;</span> <span class="attr">counter</span> <span class="attr">prepend-inner-icon</span>=<span class="string">&quot;mdi-comment&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mx-2&quot;</span> <span class="attr">label</span>=<span class="string">&quot;メッセージを入力...&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">v-textarea</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">v-container</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>音声合成<span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(message, index) in messages&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; message.text &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">audio</span> <span class="attr">:src</span>=<span class="string">&quot;message.url&quot;</span> <span class="attr">controls</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;message.url&quot;</span> <span class="attr">download</span> <span class="attr">title</span>=<span class="string">&quot;ダウンロード&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">elevation</span>=<span class="string">&quot;8&quot;</span> <span class="attr">fab</span> <span class="attr">icon</span>=<span class="string">&quot;mdi-file-download&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">v-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> formData = <span class="title function_">ref</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">text</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">url</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> messagesData = [];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> messages = <span class="title function_">ref</span>(messagesData);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">addMessage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (formData.<span class="property">value</span>.<span class="property">text</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    messages.<span class="property">value</span>.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">text</span>: formData.<span class="property">value</span>.<span class="property">text</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: formData.<span class="property">value</span>.<span class="property">url</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    formData.<span class="property">value</span>.<span class="property">text</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">submitForm</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: queryJson &#125; = <span class="keyword">await</span> <span class="title function_">useFetch</span>(<span class="string">&quot;http://localhost:50021/audio_query&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">query</span>: &#123; <span class="attr">style_id</span>: <span class="string">&quot;1&quot;</span>, <span class="attr">text</span>: formData.<span class="property">value</span>.<span class="property">text</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: audioData &#125; = <span class="keyword">await</span> <span class="title function_">useFetch</span>(<span class="string">&quot;http://localhost:50021/synthesis&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">query</span>: &#123; <span class="attr">style_id</span>: <span class="string">&quot;1&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">body</span>: queryJson,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">responseType</span>: <span class="string">&quot;blob&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onResponse</span>(<span class="params">&#123; request, response, options &#125;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      formData.<span class="property">value</span>.<span class="property">url</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(response.<span class="property">_data</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">addMessage</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">16px</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h4><ul>
<li>Neutralinojs の設定(変更点)<figure class="highlight json"><figcaption><span>neutralinojs.config.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;documentRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/nuxt3-src/dist/&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;modes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;enableInspector&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;exitProcessOnClose&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>Nuxt の設定<figure class="highlight typescript"><figcaption><span>src/nuxt.config.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vuetify, &#123; transformAssetUrls &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vuetify&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">transpile</span>: [<span class="string">&#x27;vuetify&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: [</span><br><span class="line">    <span class="function">(<span class="params">_options, nuxt</span>) =&gt;</span> &#123;</span><br><span class="line">      nuxt.<span class="property">hooks</span>.<span class="title function_">hook</span>(<span class="string">&#x27;vite:extendConfig&#x27;</span>, <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// @ts-expect-error</span></span><br><span class="line">        config.<span class="property">plugins</span>.<span class="title function_">push</span>(<span class="title function_">vuetify</span>(&#123; <span class="attr">autoImport</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">vite</span>: &#123;</span><br><span class="line">    <span class="attr">vue</span>: &#123;</span><br><span class="line">      <span class="attr">template</span>: &#123;</span><br><span class="line">        transformAssetUrls,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="ビルド-1"><a href="#ビルド-1" class="headerlink" title="ビルド"></a>ビルド</h3><h4 id="注意事項-1"><a href="#注意事項-1" class="headerlink" title="注意事項"></a>注意事項</h4><ul>
<li>Windows 環境でビルドする場合は以下を対策する (2022-07-12の記事)<br><a href="https://ktkr3d.github.io/2022/07/12/Neutralinojs-Nuxt3/#Windows-%E7%92%B0%E5%A2%83%E3%81%A7%E3%81%AEneu-build-%E5%A4%B1%E6%95%97%E5%AF%BE%E7%AD%96">https://ktkr3d.github.io/2022/07/12/Neutralinojs-Nuxt3/#Windows-環境でのneu-build-失敗対策</a></li>
</ul>
<h4 id="ビルド手順"><a href="#ビルド手順" class="headerlink" title="ビルド手順"></a>ビルド手順</h4><ul>
<li>ビルド<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">cd neutralinojs-nuxt3-voicevox</span><br><span class="line">cd nuxt3-src; npm run <span class="keyword">generate</span>; cd ..; neu build --<span class="keyword">release</span></span><br></pre></td></tr></table></figure></li>
<li>実行<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">neu <span class="built_in">run</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="生成されたファイル"><a href="#生成されたファイル" class="headerlink" title="生成されたファイル"></a>生成されたファイル</h4><ul>
<li>ファイル一覧<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tree -h dist/</span><br><span class="line">[ 512]  dist/</span><br><span class="line">├── [ 512]  neutralinojs-nuxt3-voicevox</span><br><span class="line">│   ├── [1.8M]  neutralinojs-nuxt3-voicevox-linux_arm64</span><br><span class="line">│   ├── [1.4M]  neutralinojs-nuxt3-voicevox-linux_armhf</span><br><span class="line">│   ├── [1.6M]  neutralinojs-nuxt3-voicevox-linux_x64</span><br><span class="line">│   ├── [1.9M]  neutralinojs-nuxt3-voicevox-mac_arm64</span><br><span class="line">│   ├── [3.9M]  neutralinojs-nuxt3-voicevox-mac_universal</span><br><span class="line">│   ├── [1.9M]  neutralinojs-nuxt3-voicevox-mac_x64</span><br><span class="line">│   ├── [2.5M]  neutralinojs-nuxt3-voicevox-win_x64.exe</span><br><span class="line">│   └── [6.9M]  resources.neu</span><br><span class="line">└── [7.4M]  neutralinojs-nuxt3-voicevox-release.zip</span><br></pre></td></tr></table></figure></li>
<li>各OSのローダはNeutralinojsのリリースファイルをコピーしたもの。<code>bin</code>に存在するファイル。</li>
<li><code>resources.neu</code>ファイルがプログラム。Veutifyを使う前は1MB未満で、Veutifyを使うほどサイズが大きくなった。</li>
</ul>
<h3 id="実行の準備"><a href="#実行の準備" class="headerlink" title="実行の準備"></a>実行の準備</h3><h4 id="Windowsの場合"><a href="#Windowsの場合" class="headerlink" title="Windowsの場合"></a>Windowsの場合</h4><ul>
<li>管理者モードのコマンドプロンプトで以下を実行しておく<br><a href="https://github.com/neutralinojs/v2-specification/blob/main/webview.md">https://github.com/neutralinojs/v2-specification/blob/main/webview.md</a><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">CheckNetIsolation<span class="selector-class">.exe</span> LoopbackExempt -<span class="selector-tag">a</span> -n=<span class="string">&quot;Microsoft.Win32WebViewHost_cw5n1h2txyewy&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>VOICEVOXを起動しておく</li>
<li>実行<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">neutralinojs-nuxt3-voicevox-win_x64.<span class="keyword">exe</span></span><br></pre></td></tr></table></figure>
<img src="/images/neutralinojs_voicevox_windows.png"></li>
</ul>
<h4 id="Ubuntuの場合"><a href="#Ubuntuの場合" class="headerlink" title="Ubuntuの場合"></a>Ubuntuの場合</h4><ul>
<li>docker版VOICEVOXを実行<br><a href="https://hub.docker.com/r/voicevox/voicevox_engine">https://hub.docker.com/r/voicevox/voicevox_engine</a></li>
<li>ライブラリ<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> apt install libwebkit2gtk-<span class="number">4</span>.<span class="number">0</span>-<span class="number">37</span></span><br><span class="line"><span class="attribute">sudo</span> apt install gstreamer1.<span class="number">0</span>-plugins-bad</span><br></pre></td></tr></table></figure></li>
<li>実行権限付与</li>
<li>実行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./neutralinojs-nuxt3-voicevox-linux_x64</span><br></pre></td></tr></table></figure>
<img src="/images/neutralinojs_voicevox_ubuntu.png"></li>
</ul>
<h4 id="Arch-Linuxの場合"><a href="#Arch-Linuxの場合" class="headerlink" title="Arch Linuxの場合"></a>Arch Linuxの場合</h4><ul>
<li>docker版VOICEVOXを実行<br><a href="https://hub.docker.com/r/voicevox/voicevox_engine">https://hub.docker.com/r/voicevox/voicevox_engine</a></li>
<li>実行権限付与</li>
<li>実行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./neutralinojs-nuxt3-voicevox-linux_x64</span><br></pre></td></tr></table></figure>
<img src="/images/neutralinojs_voicevox_archlinux.png"></li>
</ul>
]]></content>
      <tags>
        <tag>nuxt</tag>
        <tag>voicevox</tag>
        <tag>neutrianojs</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualBox + Arch Linux</title>
    <url>/2024/04/17/VirtualBox-Arch-Linux/</url>
    <content><![CDATA[<p><img src="/images/archlinuxvbox.png"><br>VirtualBox でArch Linux の環境を構築してみました。<br><a href="https://archlinux.org/">https://archlinux.org/</a></p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><h4 id="ホストOS環境"><a href="#ホストOS環境" class="headerlink" title="ホストOS環境"></a>ホストOS環境</h4><table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">項目</th>
<th align="left">値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ハード</td>
<td align="left">CPU</td>
<td align="left">4コア／8スレッド</td>
</tr>
<tr>
<td align="left">ハード</td>
<td align="left">Memory</td>
<td align="left">32GB</td>
</tr>
<tr>
<td align="left">ソフト</td>
<td align="left">OS</td>
<td align="left">Windows 11 Pro</td>
</tr>
<tr>
<td align="left">ソフト</td>
<td align="left">仮想化</td>
<td align="left">VirtualBox 7.0</td>
</tr>
</tbody></table>
<h4 id="ゲストOS用VirtualBox設定"><a href="#ゲストOS用VirtualBox設定" class="headerlink" title="ゲストOS用VirtualBox設定"></a>ゲストOS用VirtualBox設定</h4><table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">項目</th>
<th align="left">値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">一般</td>
<td align="left">クリップボードの共有</td>
<td align="left">双方向</td>
</tr>
<tr>
<td align="left">システム</td>
<td align="left">メインメモリー</td>
<td align="left">8192MB</td>
</tr>
<tr>
<td align="left">システム</td>
<td align="left">プロセッサー数</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">ディスプレイ</td>
<td align="left">ビデオメモリー</td>
<td align="left">128MB</td>
</tr>
<tr>
<td align="left">ストレージ</td>
<td align="left">仮想的なサイズ</td>
<td align="left">20GB</td>
</tr>
<tr>
<td align="left">ネットワーク</td>
<td align="left">割り当て</td>
<td align="left">ブリッジアダプター</td>
</tr>
</tbody></table>
<h3 id="ISOファイルダウンロード"><a href="#ISOファイルダウンロード" class="headerlink" title="ISOファイルダウンロード"></a>ISOファイルダウンロード</h3><p><a href="https://archlinux.org/download/">https://archlinux.org/download/</a></p>
<h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">archinstall</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">項目</th>
<th align="left">値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Mirrors</td>
<td align="left">Mirror region</td>
<td align="left">Japan</td>
</tr>
<tr>
<td align="left">Locales</td>
<td align="left">Keyboard layout</td>
<td align="left">jp106</td>
</tr>
<tr>
<td align="left">Locales</td>
<td align="left">Locale language</td>
<td align="left">ja_JP.UTF-8</td>
</tr>
<tr>
<td align="left">Disk Configuration</td>
<td align="left">Use a best-effort</td>
<td align="left">&#x2F;dev&#x2F;sda, ext4</td>
</tr>
<tr>
<td align="left">Root password</td>
<td align="left"></td>
<td align="left">********</td>
</tr>
<tr>
<td align="left">User account</td>
<td align="left"></td>
<td align="left">arch, sudo&#x3D;yes</td>
</tr>
<tr>
<td align="left">Profile</td>
<td align="left">Type&#x2F;Desktop</td>
<td align="left">Gnome</td>
</tr>
<tr>
<td align="left">Profile</td>
<td align="left">Graphics driver</td>
<td align="left">VMware &#x2F; Virtualbox</td>
</tr>
<tr>
<td align="left">Audio</td>
<td align="left"></td>
<td align="left">Pulseaudio</td>
</tr>
<tr>
<td align="left">Additinal Packages</td>
<td align="left"></td>
<td align="left">noto-fonts-cjk virtualbox-guest-utils firefox</td>
</tr>
<tr>
<td align="left">Network configuration</td>
<td align="left"></td>
<td align="left">Use NetworkManager</td>
</tr>
<tr>
<td align="left">Timezone</td>
<td align="left"></td>
<td align="left">Asia&#x2F;Tokyo</td>
</tr>
<tr>
<td align="left">Optional repositories</td>
<td align="left"></td>
<td align="left">multilib</td>
</tr>
</tbody></table>
<h3 id="パッケージ導入"><a href="#パッケージ導入" class="headerlink" title="パッケージ導入"></a>パッケージ導入</h3><h4 id="pacman"><a href="#pacman" class="headerlink" title="pacman"></a>pacman</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S gnome-browser-connector git gnome-terminal kodi fcitx5 fcitx5-im fcitx5-mozc vi</span><br></pre></td></tr></table></figure>

<h4 id="yay-AUR"><a href="#yay-AUR" class="headerlink" title="yay (AUR)"></a>yay (AUR)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">yay -S visual-studio-<span class="selector-tag">code</span>-bin yaru-<span class="attribute">icon</span>-theme firefox-pwa-bin</span><br></pre></td></tr></table></figure>

<h3 id="ホームフォルダの設定"><a href="#ホームフォルダの設定" class="headerlink" title="ホームフォルダの設定"></a>ホームフォルダの設定</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LANG=C xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure>

<h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><figure class="highlight bash"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> egrep=<span class="string">&#x27;egrep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> fgrep=<span class="string">&#x27;fgrep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">&#x27;ls -CF&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -A&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -alF&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="日本語入力設定"><a href="#日本語入力設定" class="headerlink" title="日本語入力設定"></a>日本語入力設定</h3><figure class="highlight ini"><figcaption><span>/etc/environment</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">GTK_IM_MODULE</span>=fcitx</span><br><span class="line"><span class="attr">QT_IM_MODULE</span>=fcitx</span><br><span class="line"><span class="attr">XMODIFIERS</span>=@im=fcitx</span><br></pre></td></tr></table></figure>

<h3 id="GNOME-設定"><a href="#GNOME-設定" class="headerlink" title="GNOME 設定"></a>GNOME 設定</h3><h4 id="Tweaks"><a href="#Tweaks" class="headerlink" title="Tweaks"></a>Tweaks</h4><table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left"></th>
<th align="left">項目</th>
<th align="left">値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">外観</td>
<td align="left">Styles</td>
<td align="left">カーソル</td>
<td align="left">Yaru</td>
</tr>
<tr>
<td align="left">外観</td>
<td align="left">Styles</td>
<td align="left">アイコン</td>
<td align="left">Yaru</td>
</tr>
<tr>
<td align="left">ウィンドウ</td>
<td align="left">タイトルバーの挙動</td>
<td align="left">最大化</td>
<td align="left">On</td>
</tr>
<tr>
<td align="left">ウィンドウ</td>
<td align="left">タイトルバーの挙動</td>
<td align="left">最小化</td>
<td align="left">On</td>
</tr>
</tbody></table>
<h3 id="GNOME-Shell-Exensions-設定"><a href="#GNOME-Shell-Exensions-設定" class="headerlink" title="GNOME Shell Exensions 設定"></a>GNOME Shell Exensions 設定</h3><p><a href="https://extensions.gnome.org/">https://extensions.gnome.org/</a></p>
<h4 id="ArcMenu"><a href="#ArcMenu" class="headerlink" title="ArcMenu"></a>ArcMenu</h4><p><a href="https://extensions.gnome.org/extension/3628/arcmenu/">https://extensions.gnome.org/extension/3628/arcmenu/</a></p>
<h4 id="Argos"><a href="#Argos" class="headerlink" title="Argos"></a>Argos</h4><p><a href="https://extensions.gnome.org/extension/1176/argos/">https://extensions.gnome.org/extension/1176/argos/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/p-e-w/argos.git -b WIP-gnome-46</span><br><span class="line"><span class="built_in">cp</span> -r argos/argos@pew.worldwidemann.com/ ~/.local/share/gnome-shell/extensions/</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><figcaption><span>~/.config/argos/argos.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">URL=<span class="string">&quot;github.com/p-e-w/argos&quot;</span></span><br><span class="line">DIR=$(<span class="built_in">dirname</span> <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#echo &quot;Argos&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; | iconName=dialog-information-symbolic&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;---&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$URL</span> | iconName=help-faq-symbolic href=&#x27;https://<span class="variable">$URL</span>&#x27;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$DIR</span> | iconName=folder-symbolic href=&#x27;file://<span class="variable">$DIR</span>&#x27;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Update Packages | iconName=software-update-available-symbolic bash=&#x27;sudo pacman -Syyu; yay -Syu; exit&#x27;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="Dash-to-Panel"><a href="#Dash-to-Panel" class="headerlink" title="Dash to Panel"></a>Dash to Panel</h4><p><a href="https://extensions.gnome.org/extension/1160/dash-to-panel/">https://extensions.gnome.org/extension/1160/dash-to-panel/</a></p>
<h4 id="Forge"><a href="#Forge" class="headerlink" title="Forge"></a>Forge</h4><p><a href="https://extensions.gnome.org/extension/4481/forge/">https://extensions.gnome.org/extension/4481/forge/</a></p>
<h4 id="Panel-Date-Format"><a href="#Panel-Date-Format" class="headerlink" title="Panel Date Format"></a>Panel Date Format</h4><p><a href="https://extensions.gnome.org/extension/1462/panel-date-format/">https://extensions.gnome.org/extension/1462/panel-date-format/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dconf write /org/gnome/shell/extensions/panel-date-format/format <span class="string">&quot;&#x27;%m/%d%n%a%n%H:%M&#x27;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="Input-Method-Panel"><a href="#Input-Method-Panel" class="headerlink" title="Input Method Panel"></a>Input Method Panel</h4><p><a href="https://extensions.gnome.org/extension/261/kimpanel/">https://extensions.gnome.org/extension/261/kimpanel/</a></p>
<h4 id="Wallpaper-Slideshow"><a href="#Wallpaper-Slideshow" class="headerlink" title="Wallpaper Slideshow"></a>Wallpaper Slideshow</h4><p><a href="https://extensions.gnome.org/extension/6281/wallpaper-slideshow/">https://extensions.gnome.org/extension/6281/wallpaper-slideshow/</a></p>
<h3 id="アプリケーション設定"><a href="#アプリケーション設定" class="headerlink" title="アプリケーション設定"></a>アプリケーション設定</h3><h4 id="Visual-Studio-Code-設定"><a href="#Visual-Studio-Code-設定" class="headerlink" title="Visual Studio Code 設定"></a>Visual Studio Code 設定</h4><p><a href="https://ktkr3d.github.io/Visual-Studio-Code/#%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%81%AE%E5%B0%8E%E5%85%A5">https://ktkr3d.github.io/Visual-Studio-Code/#%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%81%AE%E5%B0%8E%E5%85%A5</a></p>
<h4 id="code-server-設定"><a href="#code-server-設定" class="headerlink" title="code-server 設定"></a>code-server 設定</h4><ul>
<li>firefox にルート証明書を登録</li>
<li>ホストOSに対してHTTPSで接続</li>
<li>firefox-pwa でPWA化</li>
</ul>
<h4 id="Kodi-設定"><a href="#Kodi-設定" class="headerlink" title="Kodi 設定"></a>Kodi 設定</h4><figure class="highlight xml"><figcaption><span>~/.kodi/userdata/keymaps/keyboard.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keymap</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">global</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keyboard</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">insert</span>&gt;</span>ActivateWindow(favourites)<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">delete</span>&gt;</span>ActivateWindow(videofiles)<span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">home</span>&gt;</span>ActivateWindow(fullscreenvideo)<span class="tag">&lt;/<span class="name">home</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">end</span>&gt;</span>ActivateWindow(shutdownmenu)<span class="tag">&lt;/<span class="name">end</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">f12</span> <span class="attr">mod</span>=<span class="string">&quot;shift&quot;</span>&gt;</span>ActivateWindow(shutdownmenu)<span class="tag">&lt;/<span class="name">f12</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">del</span> <span class="attr">mod</span>=<span class="string">&quot;shift&quot;</span>&gt;</span>ActivateWindow(shutdownmenu)<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keyboard</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">global</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keymap</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>archlinux</tag>
        <tag>virtualbox</tag>
      </tags>
  </entry>
  <entry>
    <title>Minibook X + Ubuntu 24.04 LTS</title>
    <url>/2024/07/01/Minibook-X-Ubuntu-24-04-LTS/</url>
    <content><![CDATA[<p><img src="/images/ubuntu-24-04.png"></p>
<p>Minibook X にUbuntu 24.04 LTS を導入してみました。<br>ブラウザにはWaylandと相性のよいFirefoxを選択しました。<br>PWAに対応したかったのでSnapは削除しました。<br>タッチスクリーンで操作しやすいようにタスクバーを右側に配置し、GNOME Shellのタイリング拡張を導入しました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>CHUWI Minibook X N100 (US配列キーボード)</li>
<li>Ubuntu 24.04 LTS</li>
<li>GNOME Shell 46</li>
<li>Firefox 127.0.2</li>
<li>Kodi 20.5.0</li>
<li>Visual Studio Code 1.90.2</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>Ventoy を導入したUSBメモリにUbuntu 24.04 LTS のISOファイルを格納する。</li>
</ol>
<ul>
<li><a href="https://www.ventoy.net/en/index.html">https://www.ventoy.net/en/index.html</a></li>
<li><a href="https://ubuntu.com/download/desktop">https://ubuntu.com/download/desktop</a></li>
</ul>
<ol start="2">
<li>USBメモリで起動し、gpartedでMiniBook X のストレージにUbuntu用のパーティションを作成する。画面が傾いているのでディスプレイの設定を変更する。</li>
</ol>
<div id="googleChart6845"></div>
<script>
  if (!window.google) {
    document.body.innerHTML = 'You need to include the script //google.com/jsapi on your template';
    throw 'Google JS API is needed';
  } else {
    (function() {
      google.load('visualization', '1.0', {'packages': ["corechart","geochart","table"]});
      google.setOnLoadCallback(function() {
        (new google.visualization.BarChart(document.getElementById("googleChart6845"))).draw(google.visualization.arrayToDataTable([['Name', 'EFI (100MiB)', 'Reserved (128MiB)', 'Win (400GiB)', 'Ubuntu (74.85GiB)', 'Recovery (1.87GiB)'],['出荷時', 10, 10, 447, 0, 10],['再構成', 10, 10, 365, 82, 10]]),{"isStacked":true,"legend":{"position":"top"},"title":" ","width":"100%","height":"100%"});
      });
    })();
  }
</script>

<ol start="3">
<li><p>Ubuntu をインストールする。</p>
</li>
<li><p>環境設定をする。<br>  <a href="https://ktkr3d.github.io/ubuntu/">https://ktkr3d.github.io/ubuntu/</a></p>
</li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ol>
<li>起動時に<code>F7</code>キーを押下してUbuntuを選択する。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hyper-V</title>
    <url>/2024/07/06/Hyper-V/</url>
    <content><![CDATA[<p><img src="/images/hyperv.drawio.svg"></p>
<p>次のような制約のある環境でLinuxやVisual Studio Codeを使いたい場合にはHyper-Vを活用するとよいかもしれません。</p>
<ul>
<li>Windows にWSL、VirtualboxやVisual Studio Code等を自由にインストールできない&#x2F;したくない</li>
<li>インターネットへのアウトバウンド通信はブラウザでの認証が必要</li>
</ul>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 11 Pro 21H2<ul>
<li>Hyper-V 10.0.22000.1</li>
<li>IIS 10.0.22000.2652</li>
</ul>
</li>
<li>Ubuntu 24.04 LTS (デスクトップ)<ul>
<li>mkcert 1.4.4</li>
<li>libnss3-tools 3.98</li>
<li>code-server v4.90.3</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><p>Hyper-VでUbuntuの環境を構築して、ホストOSのブラウザからゲストOS上のcode-serverを利用します。</p>
<h4 id="ホストOS-Hyper-Vで仮想マシンを作成"><a href="#ホストOS-Hyper-Vで仮想マシンを作成" class="headerlink" title="ホストOS: Hyper-Vで仮想マシンを作成"></a>ホストOS: Hyper-Vで仮想マシンを作成</h4><ol>
<li>Hyper-VとIISを有効化<br>  <code>コントロールパネル</code> → <code>プログラムと機能</code> → <code>Widowsの機能の有効化または無効化</code> で以下を有効化</li>
</ol>
<ul>
<li>Hyper-V</li>
<li>インターネットインフォメーションサービス</li>
</ul>
<ol start="2">
<li>Hyper-Vに内部ネットワークの仮想スイッチを作成<br>  <code>Hyper-Vマネージャ</code> → <code>仮想スイッチマネージャ</code><br>  <code>内部</code>を選択して<code>仮想スイッチの作成</code><br>  名前を<code>Internal Switch</code>にしてOK<br>  169.254.0.0&#x2F;16 の仮想ネットワークが作成される</li>
<li>ホストOSのIPアドレスの確認  <figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ipconfig</span></span><br></pre></td></tr></table></figure></li>
<li>UbuntuのISOファイルをダウンロード<br>  <a href="https://ubuntu.com/download/desktop">https://ubuntu.com/download/desktop</a><br>  ubuntu-24.04-desktop-amd64.iso</li>
<li>Hyper-VでUbuntu用の仮想マシンを作成</li>
</ol>
<ul>
<li>仮想マシンの名前: “Ubuntu 24.04 LTS”</li>
<li>ネットワークの構成： <code>Internal Switch</code></li>
<li>インストールオプション: UbuntuのISOファイルを指定</li>
</ul>
<ol start="6">
<li>仮想マシンを起動</li>
</ol>
<h4 id="ゲストOS-Ubuntuをインストール"><a href="#ゲストOS-Ubuntuをインストール" class="headerlink" title="ゲストOS: Ubuntuをインストール"></a>ゲストOS: Ubuntuをインストール</h4><ol>
<li>Ubuntuをインストール</li>
<li>IPアドレスの固定化</li>
</ol>
<ul>
<li>Ubuntu Desktopの場合<br>設定 ネットワーク 有線 ギアアイコン IPv4<br>手動を選択<br>アドレス  169.254.0.1<br>ネットマスク 255.255.0.0<br>以下を追記(重要)<figure class="highlight yaml"><figcaption><span>/etc/netplan/90-NM-****.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">eth0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>追加パッケージファイル(mkcert, libnss3-tools, xrdp, xorgxrdp)のURL一覧の抽出  <figure class="highlight bash"><figcaption><span>~/bash_aliases</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">deb</span></span> () &#123;</span><br><span class="line">  <span class="keyword">for</span> PKG <span class="keyword">in</span> $(apt rdepends <span class="variable">$1</span> | grep -v <span class="string">&quot;^ &quot;</span>);  <span class="keyword">do</span> <span class="built_in">sudo</span> apt reinstall --print-uris <span class="variable">$PKG</span> ; <span class="keyword">done</span> | grep <span class="string">&quot;http://&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. ~/.bash_aliases</span><br><span class="line">deb mkcert</span><br><span class="line">deb libnss3-tools</span><br><span class="line">deb xrdp</span><br><span class="line">deb xorgxrdp</span><br></pre></td></tr></table></figure>
  .debファイルのURLが出力される。</li>
</ol>
<ul>
<li><a href="http://jp.archive.ubuntu.com/ubuntu/pool/universe/m/mkcert/mkcert_1.4.4-1ubuntu2_amd64.deb">http://jp.archive.ubuntu.com/ubuntu/pool/universe/m/mkcert/mkcert_1.4.4-1ubuntu2_amd64.deb</a></li>
<li><a href="http://jp.archive.ubuntu.com/ubuntu/pool/main/n/nss/libnss3-tools_3.98-1build1_amd64.deb">http://jp.archive.ubuntu.com/ubuntu/pool/main/n/nss/libnss3-tools_3.98-1build1_amd64.deb</a></li>
<li><a href="http://jp.archive.ubuntu.com/ubuntu/pool/universe/x/xrdp/xrdp_0.9.24-4_amd64.deb">http://jp.archive.ubuntu.com/ubuntu/pool/universe/x/xrdp/xrdp_0.9.24-4_amd64.deb</a></li>
<li><a href="http://jp.archive.ubuntu.com/ubuntu/pool/universe/x/xorgxrdp/xorgxrdp_0.9.19-1_amd64.deb">http://jp.archive.ubuntu.com/ubuntu/pool/universe/x/xorgxrdp/xorgxrdp_0.9.19-1_amd64.deb</a></li>
</ul>
<h4 id="ホストOS-パッケージをダウンロード"><a href="#ホストOS-パッケージをダウンロード" class="headerlink" title="ホストOS: パッケージをダウンロード"></a>ホストOS: パッケージをダウンロード</h4><ol>
<li>ブラウザでパッケージファイルをダウンロード</li>
</ol>
<ul>
<li><a href="http://jp.archive.ubuntu.com/ubuntu/pool/universe/m/mkcert/mkcert_1.4.4-1ubuntu2_amd64.deb">http://jp.archive.ubuntu.com/ubuntu/pool/universe/m/mkcert/mkcert_1.4.4-1ubuntu2_amd64.deb</a></li>
<li><a href="http://jp.archive.ubuntu.com/ubuntu/pool/main/n/nss/libnss3-tools_3.98-1build1_amd64.deb">http://jp.archive.ubuntu.com/ubuntu/pool/main/n/nss/libnss3-tools_3.98-1build1_amd64.deb</a></li>
<li><a href="http://jp.archive.ubuntu.com/ubuntu/pool/universe/x/xrdp/xrdp_0.9.24-4_amd64.deb">http://jp.archive.ubuntu.com/ubuntu/pool/universe/x/xrdp/xrdp_0.9.24-4_amd64.deb</a></li>
<li><a href="http://jp.archive.ubuntu.com/ubuntu/pool/universe/x/xorgxrdp/xorgxrdp_0.9.19-1_amd64.deb">http://jp.archive.ubuntu.com/ubuntu/pool/universe/x/xorgxrdp/xorgxrdp_0.9.19-1_amd64.deb</a></li>
</ul>
<ol start="2">
<li>ブラウザでcode-server をダウンロード</li>
</ol>
<ul>
<li><a href="https://github.com/coder/code-server/releases">https://github.com/coder/code-server/releases</a><br>code-server_4.90.3_amd64.deb</li>
</ul>
<ol start="3">
<li>.debファイル群をpackages.zipに圧縮して、IISのドキュメントルートに配置  <figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">C:</span>\Inetpub\wwwroot\packages.zip</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="ゲストOS-パッケージをインストール"><a href="#ゲストOS-パッケージをインストール" class="headerlink" title="ゲストOS: パッケージをインストール"></a>ゲストOS: パッケージをインストール</h4><ol>
<li>パッケージファイルのアーカイブをダウンロードして展開  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://169.254.xxx.xxx/packages.zip</span><br><span class="line">unzip packages.zip</span><br></pre></td></tr></table></figure></li>
<li>パッケージをインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> packages</span><br><span class="line"><span class="built_in">sudo</span> dpkg -i *.deb</span><br></pre></td></tr></table></figure></li>
<li>認証局を構築し、サーバ証明書を作成  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkcert -install</span><br></pre></td></tr></table></figure>
  以下のファイルが生成される。</li>
</ol>
<ul>
<li>&#x2F;home&#x2F;ubuntu&#x2F;.local&#x2F;share&#x2F;mkcert&#x2F;rootCA.pem</li>
<li>&#x2F;home&#x2F;ubuntu&#x2F;.local&#x2F;share&#x2F;mkcert&#x2F;rootCA-key.pem<br>  サーバ証明書の作成  <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">cd ~/.<span class="keyword">local</span>/<span class="keyword">share</span>/mkcert</span><br><span class="line">mkcert ubuntu.<span class="keyword">local</span></span><br></pre></td></tr></table></figure>
  以下のファイルが生成される。</li>
<li>&#x2F;home&#x2F;ubuntu&#x2F;.local&#x2F;share&#x2F;mkcert&#x2F;ubuntu.local.pem</li>
<li>&#x2F;home&#x2F;ubuntu&#x2F;.local&#x2F;share&#x2F;mkcert&#x2F;ubuntu.local-key.pem</li>
</ul>
<ol start="4">
<li>code-serverを設定して起動  <figure class="highlight yaml"><figcaption><span>~/.config/code-server/config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#bind-addr: 127.0.0.1:8080</span></span><br><span class="line"><span class="attr">bind-addr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:443</span></span><br><span class="line"><span class="comment">#auth: password</span></span><br><span class="line"><span class="attr">auth:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">cert:</span> <span class="string">/home/ubuntu/.local/share/mkcert/ubuntu.local.pem</span></span><br><span class="line"><span class="attr">cert-key:</span> <span class="string">/home/ubuntu/.local/share/mkcert/ubuntu.local-key.pem</span></span><br></pre></td></tr></table></figure>
  code-server に443&#x2F;tcp (1024以下のポート)へのバインドを許可  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">setcap</span> cap_net_bind_service=+ep /usr/lib/code-server/lib/node</span><br></pre></td></tr></table></figure>
  code-server の再起動  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> code-server@<span class="variable">$USER</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart code-server@<span class="variable">$USER</span></span><br></pre></td></tr></table></figure></li>
<li>xrdpの設定  <figure class="highlight ini"><figcaption><span>/etc/xrdp/xrdp.ini</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">port</span>=<span class="number">3389</span></span><br><span class="line"><span class="attr">port</span>=vsock://-<span class="number">1</span>:<span class="number">3389</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><figcaption><span>~/.profile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GNOME_SHELL_SESSION_MODE=ubuntu</span><br><span class="line"><span class="built_in">export</span> XDG_CURRENT_DESKTOP=ubuntu:GNOME</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart xrdp</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="ホストOS-拡張セッションの有効化とcode-serverのPWA化"><a href="#ホストOS-拡張セッションの有効化とcode-serverのPWA化" class="headerlink" title="ホストOS: 拡張セッションの有効化とcode-serverのPWA化"></a>ホストOS: 拡張セッションの有効化とcode-serverのPWA化</h4><ol>
<li>拡張セッションを有効化  <figure class="highlight powershell"><figcaption><span>PowerShell</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-VM</span> <span class="literal">-VMName</span> <span class="string">&quot;Ubuntu 24.04 LTS&quot;</span> <span class="literal">-EnhancedSessionTransportType</span> HvSocket</span><br></pre></td></tr></table></figure></li>
<li>hosts の編集  <figure class="highlight txt"><figcaption><span>C:\Windows\system32\drivers\etc\hosts</span></figcaption><table><tr><td class="code"><pre><span class="line">169.254.0.1  ubuntu.local</span><br></pre></td></tr></table></figure></li>
<li>ブラウザで<code>https://ubuntu.local</code>にアクセス</li>
<li>code-serverのエクスプローラーまたはファイルマネージャでルート証明書をダウンロード  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">~<span class="regexp">/.local/</span>share<span class="regexp">/mkcert/</span>rootCA.pem</span><br></pre></td></tr></table></figure></li>
<li>ルート証明書をブラウザにインポート</li>
<li>ブラウザをリロードしてPWA化</li>
<li>Hyper-Vマネージャ → 自動開始アクション</li>
</ol>
<ul>
<li>常にこの仮想マシンを自動的に起動する: オン</li>
<li>起動待ち時間: 120秒</li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="Ubuntu-デスクトップの利用"><a href="#Ubuntu-デスクトップの利用" class="headerlink" title="Ubuntu デスクトップの利用"></a>Ubuntu デスクトップの利用</h4><ul>
<li>仮想マシンのショートカットから起動する場合<br>ショートカットを作成する。<br>リンク先: <code>C:\Windows\System32\vmconnect.exe 127.0.0.1 &quot;Ubuntu 24.04 LTS&quot;</code><br>ショートカットを右クリックして管理者として起動する</li>
<li>Hyper-V マネージャから起動する場合<br>Hyper-VマネージャでVMを右クリックして「接続」</li>
</ul>
<h4 id="code-server-の利用"><a href="#code-server-の利用" class="headerlink" title="code-server の利用"></a>code-server の利用</h4><p>PWA化したcode-serverアプリケーションを起動する。</p>
<ul>
<li>code-serverのターミナルでコマンドの実行</li>
<li>code-serverのエクスプローラーでファイルのアップロード&#x2F;ダウンロードが可能</li>
</ul>
<h4 id="Node-js-を利用する場合"><a href="#Node-js-を利用する場合" class="headerlink" title="Node.js を利用する場合"></a>Node.js を利用する場合</h4><ol>
<li>ホストOSでバイナリをダウンロード<br>  <a href="https://nodejs.org/en/download/prebuilt-binaries">https://nodejs.org/en/download/prebuilt-binaries</a><br>  Node.js のバージョンを指定、Linuxを指定、x64を指定してダウンロード</li>
<li>ゲストOSに転送後、アーカイブを展開する  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xvf *.tar.xz</span><br></pre></td></tr></table></figure></li>
<li>&#x2F;usr&#x2F;local にコピーする  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r ./&#123;lib,share.include.bin&#125; /usr/local</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Visual-Studio-Code-拡張を利用する場合"><a href="#Visual-Studio-Code-拡張を利用する場合" class="headerlink" title="Visual Studio Code 拡張を利用する場合"></a>Visual Studio Code 拡張を利用する場合</h4><ol>
<li>Visusal Studio マーケットプレース( <a href="https://marketplace.visualstudio.com/vscode">https://marketplace.visualstudio.com/vscode</a> )から拡張機能のファイル(.vsix)をダウンロード</li>
<li>code-server で拡張機能をインストール<br>  <code>拡張</code> → <code>...</code> → <code>VSIXからのインストール</code><br>  .vsix ファイルを選択</li>
<li>code-serverの環境設定</li>
</ol>
]]></content>
      <tags>
        <tag>code-server</tag>
        <tag>hyperv</tag>
      </tags>
  </entry>
  <entry>
    <title>mutter-text-input-v1</title>
    <url>/2024/07/23/mutter-text-input-v1/</url>
    <content><![CDATA[<p><img src="/images/mutter-text-input-v1.png"></p>
<p>WaylandモードのGoogle Chrome&#x2F;Visual Studio Codeで日本語入力ができるようになりました。私はWaylandの分数スケーリング(Fractional Scaling)設定を利用していますので大変助かりました。</p>
<p><a href="https://aur.archlinux.org/packages/mutter-text-input-v1">https://aur.archlinux.org/packages/mutter-text-input-v1</a></p>
<span id="more"></span>

<h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>WaylandコンポジタのMutterがサポートしているtext-input-v3 とChome&#x2F;Electronがサポートしているtext-input-v1 のバージョンが異なることに起因してWaylandモードのChrome&#x2F;Electronで日本語入力できない問題がありました。</p>
<ul>
<li>Ozone&#x2F;Wayland: Stabilizing IME<br><a href="https://docs.google.com/document/d/1GkOphcAQBMdW4iPiMOd9eKd70tlXWQaR7M3GJXGUDpQ/edit#heading=h.7nki9mck5t64">https://docs.google.com/document/d/1GkOphcAQBMdW4iPiMOd9eKd70tlXWQaR7M3GJXGUDpQ/edit#heading=h.7nki9mck5t64</a></li>
</ul>
<p>この問題解決に向けて2つのアプローチがありました。Mutterがtext-input-v1に対応するか、Chrome&#x2F;Electronがtext-input-v3に対応するかです。</p>
<ul>
<li>Mutterがtext-input-v1に対応する<br><a href="https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/3751">https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/3751</a><br><a href="https://aur.archlinux.org/packages/mutter-text-input-v1">https://aur.archlinux.org/packages/mutter-text-input-v1</a></li>
<li>Chrome がtext-input-v3に対応する<br><a href="https://issues.chromium.org/issues/40113488">https://issues.chromium.org/issues/40113488</a><br><a href="https://chromium-review.googlesource.com/c/chromium/src/+/5690113">https://chromium-review.googlesource.com/c/chromium/src/+/5690113</a></li>
</ul>
<p>今回はMutterがtext-input-v1に対応するパッチを適用することで解決できました。</p>
<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux (6.9.10-arch1-1)<ul>
<li>mutter-text-input-v1 46.3.1-1</li>
<li>Google Chrome 126.0.6478.182</li>
<li>Visual Studio Code 1.91.1<br>Electron: 29.4.0<br>ElectronBuildId: 9728852<br>Chromium: 122.0.6261.156<br>Node.js: 20.9.0<br>V8: 12.2.281.27-electron.0</li>
<li>paru v2.0.3</li>
<li>Gnome Shell 46.3.1<ul>
<li>Input Method Panel<br><a href="https://extensions.gnome.org/extension/261/kimpanel/">https://extensions.gnome.org/extension/261/kimpanel/</a></li>
</ul>
</li>
</ul>
</li>
<li>画面<ul>
<li>解像度: 1920x1200 </li>
<li>Scale: 125%</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="mutter-text-input-v1"><a href="#mutter-text-input-v1" class="headerlink" title="mutter-text-input-v1"></a>mutter-text-input-v1</h4><ol>
<li>mutter-text-input-v1 の導入  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">paru -S mutter-<span class="selector-tag">text</span>-<span class="selector-tag">input</span>-v1</span><br></pre></td></tr></table></figure>
  <figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">衝突するパッケージがないか確認しています...</span><br><span class="line">:: mutter-text-input-v1<span class="string">-46</span>.3.1<span class="string">-1</span> and mutter<span class="string">-46</span>.3.1<span class="string">-1</span> are in conflict. Remove mutter? [y/N] y</span><br></pre></td></tr></table></figure></li>
<li>再起動</li>
</ol>
<h4 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a>Google Chrome</h4><ol>
<li>Wayland 有効化<br>  <code>chrome://flags</code>を開いて、<code>Preferred Ozone platform</code>を<code>Auto</code>に設定する。</li>
<li>起動フラグの設定  <figure class="highlight ini"><figcaption><span>~/.config/chrome-flags.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">--ozone-platform-hint</span>=auto</span><br><span class="line">--enable-wayland-ime</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h4><ol>
<li>起動フラグの設定  <figure class="highlight ini"><figcaption><span>~/.config/code-flags.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">--enable-features</span>=WaylandWindowDecorations</span><br><span class="line"><span class="attr">--ozone-platform-hint</span>=auto</span><br><span class="line">--enable-wayland-ime</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="切り戻し方法"><a href="#切り戻し方法" class="headerlink" title="切り戻し方法"></a>切り戻し方法</h3><ol>
<li>mutter の導入  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S mutter</span><br></pre></td></tr></table></figure>
  <figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">衝突するパッケージがないか確認しています...</span><br><span class="line">:: mutter<span class="string">-46</span>.3.1<span class="string">-1</span> and mutter-text-input-v1<span class="string">-46</span>.3.1<span class="string">-1</span> are in conflict. Remove mutter-text-input-v1? [y/N] y</span><br></pre></td></tr></table></figure></li>
<li>再起動</li>
</ol>
]]></content>
      <tags>
        <tag>archlinux</tag>
        <tag>mutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Customize lock screen date format</title>
    <url>/2024/07/25/Customize-lock-screen-date-format/</url>
    <content><![CDATA[<p><img src="/images/customize_clock_on_lock_screen.png"></p>
<p>Gnomeのロックスクリーンの日本語日付書式って変ですよね。拡張機能で変更できました。</p>
<p><a href="https://extensions.gnome.org/extension/4663/customize-clock-on-lock-screen/">https://extensions.gnome.org/extension/4663/customize-clock-on-lock-screen/</a><br><a href="https://github.com/PRATAP-KUMAR/customize-clock-on-lock-screen">https://github.com/PRATAP-KUMAR/customize-clock-on-lock-screen</a></p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux</li>
<li>GNOME Shell 46<ul>
<li>Customize Clock on lock screen</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>Extensions -&gt; Customize Clock on lock screen</li>
<li><code>Apply below custom styling</code>をオフ</li>
<li><code>Custom Date Text</code>を設定<br>  Date&#x2F;Time Format Codes<br>  <a href="https://help.gnome.org/users/gthumb/stable/gthumb-date-formats.html.en">https://help.gnome.org/users/gthumb/stable/gthumb-date-formats.html.en</a><br>  <code>%Y / %m / %d</code></li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="変更前"><a href="#変更前" class="headerlink" title="変更前"></a>変更前</h4><p><img src="/images/lockscreen_before.png"></p>
<h4 id="変更後"><a href="#変更後" class="headerlink" title="変更後"></a>変更後</h4><p><img src="/images/lockscreen_after.png"></p>
]]></content>
      <tags>
        <tag>gnome-shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastfetch</title>
    <url>/2024/08/01/Fastfetch/</url>
    <content><![CDATA[<p><img src="/images/fastfetch.png"></p>
<p>システム情報を表示するツールであるNeofetchが開発終了とのことなので後継のFastfetchを使ってみました。</p>
<p><a href="https://github.com/fastfetch-cli/fastfetch">https://github.com/fastfetch-cli/fastfetch</a></p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux</li>
<li>fastfetch 2.20.0</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>インストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S fastfetch</span><br></pre></td></tr></table></figure></li>
<li>テーマの作成 <a href="https://gist.githubusercontent.com/ktkr3d/f4bfb11f67971080ba840b7fc0045392/raw/ce5b1fe7c6cd2046d023c8b97dcc34e754ceac25/config.jsonc">config.jsonc</a><figure class="highlight jsonc"><figcaption><span>~/.config/fastfetch/config.jsonc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/fastfetch-cli/fastfetch/raw/dev/doc/json_schema.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;modules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Machine   &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;host&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;  BIOS    &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bios&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;  CPU     &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;  GPU     &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpu&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;  Memory  &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;memory&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;  Storage &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;disk&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;  Res     &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;display&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Distro    &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;os&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;  Kernel  &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kernel&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DE        &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;de&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;  WM      &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wm&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;  WMTheme &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wmtheme&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;  Theme   &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;theme&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;  Icons   &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icons&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Terminal  &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;terminal&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;  Theme   &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;terminaltheme&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;  Font    &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;terminalfont&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;  Shell   &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;  Locale  &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;locale&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
独自のテーマを作成する際はプリセットの<code>/usr/share/fastfetch/presets/all.jsonc</code>をコピーしていらないものを削除すると良いかもしれません。<br>仕様はJSONスキーマを参考にします。<br><a href="https://github.com/fastfetch-cli/fastfetch/wiki/Json-Schema#modules_items_anyOf_i1_oneOf_i11_compactType">https://github.com/fastfetch-cli/fastfetch/wiki/Json-Schema#modules_items_anyOf_i1_oneOf_i11_compactType</a></li>
</ol>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><h4 id="デフォルト"><a href="#デフォルト" class="headerlink" title="デフォルト"></a>デフォルト</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fastfetch</span><br></pre></td></tr></table></figure>
<p><code>~/.config/fastfetch/config.jsonc</code>が存在する場合は優先的に読み込まれる。</p>
<h4 id="プリセット一覧"><a href="#プリセット一覧" class="headerlink" title="プリセット一覧"></a>プリセット一覧</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fastfetch --list-presets</span><br></pre></td></tr></table></figure>

<h4 id="プリセット-all"><a href="#プリセット-all" class="headerlink" title="プリセット all"></a>プリセット all</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fastfetch -c all</span><br></pre></td></tr></table></figure>

<h4 id="プリセット-neofetch"><a href="#プリセット-neofetch" class="headerlink" title="プリセット neofetch"></a>プリセット neofetch</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fastfetch -c neofetch</span><br></pre></td></tr></table></figure>

<h4 id="文字修飾"><a href="#文字修飾" class="headerlink" title="文字修飾"></a>文字修飾</h4><ul>
<li><code>key</code>項目の値にはエスケープコードが利用できます。  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> &#123;<span class="comment">#1&#125; is equivalent to `\u001b[1m`. &#123;#&#125; is equivalent to `\u001b[m`</span></span><br></pre></td></tr></table></figure></li>
<li>ANSIエスケープコード<br>  <a href="https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters">https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters</a></li>
<li>太字の例  <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">&#123;#<span class="number">1</span>&#125;Bold&#123;#&#125;</span><br></pre></td></tr></table></figure></li>
<li>下線の例  <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">&#123;#<span class="number">4</span>&#125;Underline&#123;#&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>fastfetch</tag>
      </tags>
  </entry>
  <entry>
    <title>Custom OSD</title>
    <url>/2024/08/04/Custom-OSD/</url>
    <content><![CDATA[<p><img src="/images/custom-osd.png"></p>
<p>GNOME Shellのボリューム変更や輝度変更のOSDは数値を表示しません。<br>Custom OSD拡張を利用して数値表示やスタイルのカスタマイズをします。</p>
<p><a href="https://extensions.gnome.org/extension/6142/custom-osd/">https://extensions.gnome.org/extension/6142/custom-osd/</a><br><a href="https://github.com/neuromorph/custom-osd">https://github.com/neuromorph/custom-osd</a></p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux</li>
<li>GNOME Shell 46.3.1</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li><p>インストール<br><a href="https://extensions.gnome.org/extension/6142/custom-osd/">https://extensions.gnome.org/extension/6142/custom-osd/</a></p>
</li>
<li><p>プロファイルの選択<br>Profileに<code>Default</code>を指定します。</p>
</li>
<li><p>スタイルの変更</p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">項目</th>
<th align="left">値</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Geometry</td>
<td align="left">Horizontal Position</td>
<td align="left">0.0</td>
</tr>
<tr>
<td align="left">&nbsp;</td>
<td align="left">Vertical Position</td>
<td align="left">-45.0</td>
</tr>
<tr>
<td align="left">Style</td>
<td align="left">Special Effects</td>
<td align="left">None</td>
</tr>
<tr>
<td align="left">&nbsp;</td>
<td align="left">Foreground Color</td>
<td align="left">White</td>
</tr>
<tr>
<td align="left">&nbsp;</td>
<td align="left">Background Color</td>
<td align="left">gray</td>
</tr>
<tr>
<td align="left">&nbsp;</td>
<td align="left">Level Color</td>
<td align="left">White</td>
</tr>
<tr>
<td align="left">&nbsp;</td>
<td align="left">Box Border</td>
<td align="left">Off</td>
</tr>
</tbody></table>
<h3 id="調整"><a href="#調整" class="headerlink" title="調整"></a>調整</h3><p>GNOMEでは音量メディアキーの増減は6%になっています。5%に設定します。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gsettings <span class="built_in">set</span> org.gnome.settings-daemon.plugins.media-keys volume-step 5</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>gnome-shell</tag>
      </tags>
  </entry>
  <entry>
    <title>ble.sh</title>
    <url>/2024/08/04/ble-sh/</url>
    <content><![CDATA[<p><img src="/images/blesh.png"></p>
<p>bashで自動補完やシンタックスハイライトをします。</p>
<p><a href="https://github.com/akinomyoga/ble.sh">https://github.com/akinomyoga/ble.sh</a></p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux</li>
<li>bash 5.2.26</li>
<li>ble.sh 0.3.4-5</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li><p>ble.shのインストール</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">paru -S blesh</span><br></pre></td></tr></table></figure>
<p>インストール先が表示されます。</p>
</li>
<li><p>設定<br><code>~/.bashrc</code>ファイルの先頭と末尾に以下行を追加します。</p>
<figure class="highlight bash"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># ble.sh</span></span><br><span class="line">[[ $- == *i* ]] &amp;&amp; <span class="built_in">source</span> /usr/share/blesh/ble.sh</span><br><span class="line"></span><br><span class="line">(略)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ble.sh</span></span><br><span class="line">[[ <span class="variable">$&#123;BLE_VERSION-&#125;</span> ]] &amp;&amp; ble-attach</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>bash</tag>
        <tag>blesh</tag>
      </tags>
  </entry>
  <entry>
    <title>Trinket Button Custom</title>
    <url>/2024/08/10/Trinket-Button-Custom/</url>
    <content><![CDATA[<p><img src="/images/trinket_button_custom.png"></p>
<p>World of WarcraftのTrinket Button拡張機能をカスタマイズしてみました。<br><a href="https://wago.io/Nn9Hg5PH7">https://wago.io/Nn9Hg5PH7</a></p>
<p>Trinket Buttonは装備しているトリンケットが利用（Use）可能な場合にクリック可能なボタンとして表示します。<br>World of Warcraftではトリンケットの他に利用可能な装備としてメインハンドがあります。Trinket Buttonを改造してメインハンドにも対応させてみました。</p>
<h4 id="2024-08-14-更新：WoW-11-0-2-対応"><a href="#2024-08-14-更新：WoW-11-0-2-対応" class="headerlink" title="2024&#x2F;08&#x2F;14 更新：WoW 11.0.2 対応"></a>2024&#x2F;08&#x2F;14 更新：WoW 11.0.2 対応</h4><ul>
<li>deprecatedなAPIを修正<br><a href="https://warcraft.wiki.gg/wiki/Patch_11.0.2/API_changes#Deprecated_API">https://warcraft.wiki.gg/wiki/Patch_11.0.2/API_changes#Deprecated_API</a></li>
<li>仕様が変更されたAPIを修正<br><a href="https://warcraft.wiki.gg/wiki/API_C_Spell.GetSpellCooldown">https://warcraft.wiki.gg/wiki/API_C_Spell.GetSpellCooldown</a></li>
</ul>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>World of Warcraft 11.0.0 (56008) &#x2F; 11.0.2 (56110)</li>
<li>WeakAuras 5.15.4</li>
<li>Trinket Button v1.0.1</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li><p><a href="https://wago.io/Nn9Hg5PH7">https://wago.io/Nn9Hg5PH7</a> を開く</p>
</li>
<li><p><code>COPY IMPORT STRING</code> を押す</p>
</li>
<li><p>World of Warcraftを起動してログインする</p>
</li>
<li><p>WeakAurasの画面を開く</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/wa</span><br></pre></td></tr></table></figure>
</li>
<li><p>WeakAurasの<code>Import</code>ボタンを押し、クリップボードから貼り付ける</p>
</li>
<li><p><code>Import</code>ボタンを押す</p>
</li>
<li><p>左側の一覧のTrinket Buttonの<code>+</code>ボタンを押して子階層を展開する</p>
</li>
<li><p><code>Trinket Button 2</code>を右クリックして<code>Duplicate</code>を選択する<br> 名前は<code>Main Hand Button</code>にしてENTER</p>
</li>
<li><p><code>Main Hand Button</code>の<code>Actions</code>タブを選択する</p>
</li>
<li><p>Custom Codeの<code>self.slot = 14</code>を<code>self.slot = 16</code>に修正して<code>Accept</code>を押下する</p>
  <figure class="highlight lua"><figcaption><span>On Init - Custom Code</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">self</span> = aura_env</span><br><span class="line marked"><span class="built_in">self</span>.slot = <span class="number">16</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>スロットID一覧<br><a href="https://wowpedia.fandom.com/wiki/InventorySlotId">https://wowpedia.fandom.com/wiki/InventorySlotId</a><table>
<thead>
<tr>
<th align="left">InvSlotName</th>
<th align="left">Position</th>
<th align="left">InvSlotId</th>
<th align="left">Constant</th>
</tr>
</thead>
<tbody><tr>
<td align="left">TRINKET0SLOT</td>
<td align="left">Trinket</td>
<td align="left">13</td>
<td align="left">INVSLOT_TRINKET1</td>
</tr>
<tr>
<td align="left">TRINKET1SLOT</td>
<td align="left">Trinket</td>
<td align="left">14</td>
<td align="left">INVSLOT_TRINKET2</td>
</tr>
<tr>
<td align="left">MAINHANDSLOT</td>
<td align="left">Main Hand</td>
<td align="left">16</td>
<td align="left">INVSLOT_MAINHAND</td>
</tr>
</tbody></table>
</li>
</ul>
<ol start="11">
<li>deprecated なAPIの修正<br>  左の一覧の<code>Trinket Button</code>を選択し、<code>Trigger</code>タブを選択する。  <figure class="highlight lua"><figcaption><span>Custom Trigger</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">-- PLAYER_EQUIPMENT_CHANGED,COMBAT_LOG_EVENT_UNFILTERED</span></span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">self</span> = aura_env</span><br><span class="line">    <span class="keyword">local</span> item = ItemLocation:CreateFromEquipmentSlot(<span class="built_in">self</span>.slot)</span><br><span class="line">    <span class="keyword">if</span> item:IsValid() <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">self</span>.itemId = C_Item.GetItemID(item)</span><br><span class="line">        <span class="built_in">self</span>.itemName = C_Item.GetItemName(item)</span><br><span class="line marked">        <span class="built_in">self</span>.iconId = <span class="built_in">select</span>(<span class="number">10</span>, C_Item.GetItemInfo(<span class="built_in">self</span>.itemId))</span><br><span class="line marked">        <span class="keyword">return</span> C_Item.IsUsableItem(<span class="built_in">self</span>.itemId)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight lua"><figcaption><span>Duration Info</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">self</span> = aura_env</span><br><span class="line">    </span><br><span class="line marked">    <span class="keyword">local</span> spellCooldownInfo = C_Spell.GetSpellCooldown(<span class="number">61304</span>)</span><br><span class="line marked">    <span class="keyword">local</span> start, dur = C_Item.GetItemCooldown(<span class="built_in">self</span>.itemId)</span><br><span class="line">    </span><br><span class="line marked">    <span class="keyword">if</span> dur &gt; spellCooldownInfo.duration <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">self</span>.region:SetGlow(<span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span> dur, start + dur</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">self</span>.region:SetGlow(<span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>WeakAurasの設定はすべてのキャラクターで共有されるので一度設定すれば他のキャラクターで利用可能です。<br>3段のアクションバーの左上に配置してみました。左からトリンケット1、トリンケット2、メインハンドです。装備が利用不可な場合は表示されません。</p>
<p><img src="/images/wow_trinket_button_custom.png"></p>
]]></content>
      <tags>
        <tag>wow</tag>
      </tags>
  </entry>
  <entry>
    <title>GNOME 47</title>
    <url>/2024/09/22/GNOME-47/</url>
    <content><![CDATA[<p><img src="/images/gnome-47.png"><br><a href="https://release.gnome.org/47/">https://release.gnome.org/47/</a></p>
<p>GNOME 47がリリースされたのでインストールしてみました。</p>
<ul>
<li>Chromeはtext-input v3に対応したのでWaylandモードで日本語入力可能です</li>
<li>vscodeはWaylandモードで日本語入力に対応していません</li>
<li>code-serverは日本語入力できます(Chromeだから)<br>日本語入力中の文字列の背景が黄色になっているのはなんとかしたい</li>
<li>GNOME Shell拡張のPenguin: AI Chatbotを使ってみました<br><a href="https://extensions.gnome.org/extension/7338/penguin-ai-chatbot/">https://extensions.gnome.org/extension/7338/penguin-ai-chatbot/</a><br>とりあえずデフォルトの無料AIモデルに質問してみましたが調整が必要そうですね。。。</li>
</ul>
<h4 id="2025-02-04-更新"><a href="#2025-02-04-更新" class="headerlink" title="2025-02-04 更新"></a>2025-02-04 更新</h4><p>タスクトレイのアイコン上にエラーが表示されるので修正する<br>無効な値を指定している<code>icon_name</code>行をコメントアウトする<br>アイコンはstylesheet.cssで指定している</p>
<figure class="highlight js"><figcaption><span>extensions.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="title function_">_init</span>(<span class="params">extension</span>) &#123;</span><br><span class="line">    <span class="comment">// --- INITIALIZATION AND ICON IN TOPBAR</span></span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">_init</span>(<span class="number">0.0</span>, <span class="title function_">_</span>(<span class="string">&#x27;Penguin: AI Chatbot&#x27;</span>));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">extension</span> = extension</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_loadSettings</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">add_child</span>(<span class="keyword">new</span> <span class="title class_">St</span>.<span class="title class_">Icon</span>(&#123;</span><br><span class="line">        <span class="comment">// icon_name: &#x27;Penguin: AI Chatbot&#x27;,</span></span><br><span class="line">        <span class="attr">style_class</span>: <span class="string">&#x27;icon&#x27;</span>,</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux</li>
<li>GNOME 47</li>
<li>Wayland(Mutter)</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><p><a href="https://ktkr3d.github.io/archlinux/">https://ktkr3d.github.io/archlinux/</a></p>
<h3 id="Penguin-AI-Chatbot"><a href="#Penguin-AI-Chatbot" class="headerlink" title="Penguin: AI Chatbot"></a>Penguin: AI Chatbot</h3><h4 id="拡張のインストール"><a href="#拡張のインストール" class="headerlink" title="拡張のインストール"></a>拡張のインストール</h4><p><a href="https://extensions.gnome.org/extension/7338/penguin-ai-chatbot/">https://extensions.gnome.org/extension/7338/penguin-ai-chatbot/</a></p>
<h4 id="オープンルーターAPIの取得"><a href="#オープンルーターAPIの取得" class="headerlink" title="オープンルーターAPIの取得"></a>オープンルーターAPIの取得</h4><ol>
<li><a href="https://accounts.openrouter.ai/sign-up">Open Routerのウェブサイト</a>でサインアップする</li>
<li><a href="https://openrouter.ai/settings/keys">Open Router Keys</a>に移動します</li>
<li>「Create Key」ボタンをクリックします。</li>
<li>キーに任意の名前を追加します。拡張機能のデフォルトのLLMまたは無料モデルを使用している場合は、クレジット制限を気にしないことをお勧めします。</li>
<li>「Create」ボタンをクリックします</li>
<li>新しいキーをコピーする</li>
<li>拡張機能の設定ウィンドウに戻り、キーを貼り付けます。<br>  デフォルトのモデルは<code>mattshumer/reflection-70b:free</code>です。<br>  モデルの一覧は<a href="https://openrouter.ai/docs/models">https://openrouter.ai/docs/models</a>に掲載されています。<br>  無償で利用可能なモデルは<code>:free</code>で検索できます。</li>
</ol>
<h4 id="無償で利用可能なAIモデル-2024-09-23時点"><a href="#無償で利用可能なAIモデル-2024-09-23時点" class="headerlink" title="無償で利用可能なAIモデル (2024-09-23時点)"></a>無償で利用可能なAIモデル (2024-09-23時点)</h4><table>
<thead>
<tr>
<th align="left">AIモデル</th>
<th align="left">日本語</th>
<th align="left">Linux関連</th>
</tr>
</thead>
<tbody><tr>
<td align="left">mistralai&#x2F;pixtral-12b:free</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">mattshumer&#x2F;reflection-70b:free</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">qwen&#x2F;qwen-2-vl-7b-instruct:free</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">nousresearch&#x2F;hermes-3-llama-3.1-405b:free</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">meta-llama&#x2F;llama-3.1-8b-instruct:free</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">qwen&#x2F;qwen-2-7b-instruct:free</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">google&#x2F;gemma-2-9b-it:free</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">mistralai&#x2F;mistral-7b-instruct:free</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">microsoft&#x2F;phi-3-mini-128k-instruct:free</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">microsoft&#x2F;phi-3-medium-128k-instruct:free</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">meta-llama&#x2F;llama-3-8b-instruct:free</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">gryphe&#x2F;mythomist-7b:free</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">openchat&#x2F;openchat-7b:free</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">undi95&#x2F;toppy-m-7b:free</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">huggingfaceh4&#x2F;zephyr-7b-beta:free</td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><p>タスクトレイのアイコンをクリックしてテキストを入力します。<br>回答のテキストをコピーするにはテキストをクリックします。</p>
<h4 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h4><p>各AIモデルに「こんにちは」「GNOME 47の新機能を教えてください。」と書き込んでみました。</p>
<p>「こんにちは」に対しては、時刻を考慮するもの、絵文字を含むフランクなもの、日本語が苦手なもの、日本語の挨拶であることを英語で説明するもの、がありました。</p>
<p>「GNOME 47の新機能を教えてください。」に対しては、内容が妥当なもの、内容が怪しいもの、GNOME 47がリリースされていることを知らないもの、URLが間違っているもの、がありました。</p>
]]></content>
      <tags>
        <tag>gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>fish + starship</title>
    <url>/2024/10/17/fish_starship/</url>
    <content><![CDATA[<p><img src="/images/fish_starship_arch.png"></p>
<p>fish(friendly interactive shell)はユーザフレンドリーなコマンドラインシェルです。シェルをfishに切り替えてみました。<br>またプロンプトを装飾するためにStarshipを使ってみました。</p>
<span id="more"></span>

<h3 id="情報"><a href="#情報" class="headerlink" title="情報"></a>情報</h3><ul>
<li>fish<br>  <a href="https://fishshell.com/">https://fishshell.com/</a></li>
<li>awsm.fish<br>  <a href="https://github.com/jorgebucaran/awsm.fish">https://github.com/jorgebucaran/awsm.fish</a></li>
<li>Starship<br>  <a href="https://starship.rs/ja-JP/">https://starship.rs/ja-JP/</a></li>
</ul>
<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>OS &#x2F; Shell &#x2F; プロンプト<ul>
<li>Arch Linux &#x2F; fish &#x2F;starship</li>
<li>Ubuntu &#x2F; fish &#x2F; starship</li>
<li>Windows -  WSL - Ubuntu &#x2F; fish  &#x2F; starship</li>
<li>Windows &#x2F; CMD &#x2F; starship</li>
<li>Windows &#x2F; PowerShell &#x2F; starship</li>
</ul>
</li>
<li>ターミナルソフト<ul>
<li>GNOME Termnal</li>
<li>Windows Terminal</li>
</ul>
</li>
<li>フォント<ul>
<li>HackGen Console NF</li>
</ul>
</li>
</ul>
<h3 id="fish構築"><a href="#fish構築" class="headerlink" title="fish構築"></a>fish構築</h3><ol>
<li>インストール</li>
</ol>
<ul>
<li>Arch Linuxの場合 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S fish</span><br></pre></td></tr></table></figure></li>
<li>Ubuntuの場合  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install fish</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>起動設定</li>
</ol>
<ul>
<li>Arch Linux, Ubuntuの場合<br>  <a href="https://wiki.archlinux.jp/index.php/Fish#.bashrc_.E3.82.92.E5.A4.89.E6.9B.B4.E3.81.97.E3.81.A6_fish_.E3.81.AB.E3.83.89.E3.83.AD.E3.83.83.E3.83.97.E3.81.99.E3.82.8B">fish をインタラクティブシェルとして設定する</a>  <figure class="highlight bash"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ $(ps --no-header --pid=<span class="variable">$PPID</span> --format=<span class="built_in">comm</span>) != <span class="string">&quot;fish&quot;</span> &amp;&amp; -z <span class="variable">$&#123;BASH_EXECUTION_STRING&#125;</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="built_in">shopt</span> -q login_shell &amp;&amp; LOGIN_OPTION=<span class="string">&#x27;--login&#x27;</span> || LOGIN_OPTION=<span class="string">&#x27;&#x27;</span></span><br><span class="line">	<span class="built_in">exec</span> fish <span class="variable">$LOGIN_OPTION</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li><p>fishの設定</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fish_config</span><br></pre></td></tr></table></figure>
<p> [Enter]キーで終了</p>
</li>
<li><p>グリーティングを無効化</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -U fish_greeting</span><br></pre></td></tr></table></figure>
</li>
<li><p>環境設定ファイル<br> ~&#x2F;.config&#x2F;fish&#x2F;config.fish</p>
</li>
</ol>
<h3 id="fishプラグイン"><a href="#fishプラグイン" class="headerlink" title="fishプラグイン"></a>fishプラグイン</h3><ul>
<li><p>プラグイン管理 fisher<br>  <a href="https://github.com/jorgebucaran/fisher">https://github.com/jorgebucaran/fisher</a></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | <span class="built_in">source</span> &amp;&amp; fisher install jorgebucaran/fisher</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/FabioAntunes/base16-fish-shell">base16-fish-shell</a><br>  シェルのデフォルトの ANSI カラーを変更する</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fisher install FabioAntunes/base16-fish-shell</span><br></pre></td></tr></table></figure>
<p>  テーマの一覧(<code>base16-</code>から始まる)<br>  <a href="https://github.com/FabioAntunes/base16-fish-shell/tree/main/functions">https://github.com/FabioAntunes/base16-fish-shell/tree/main/functions</a><br>  テーマのプレビュー<br>  <a href="https://dt.iki.fi/base16-previews">https://dt.iki.fi/base16-previews</a><br>  <a href="https://glitchbone.github.io/vscode-base16-term/#/summerfruit-dark">https://glitchbone.github.io/vscode-base16-term/#/summerfruit-dark</a><br>  現在の設定</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> | grep fish_color</span><br></pre></td></tr></table></figure>
<p>  個別設定の例</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> fish_color_command        brwhite</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/edc/bass">bass</a><br>  fishでbashスクリプトを実行</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fisher install edc/bass</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/PatrickF1/fzf.fish">fzf</a><br>  Ctrl+Rでコマンド履歴検索</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S fzf</span><br><span class="line">fisher install PatrickF1/fzf.fish</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/jethrokuan/z">z</a><br>  ディレクトリ名を指定して直接移動</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fisher install jethrokuan/z</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Starship構築"><a href="#Starship構築" class="headerlink" title="Starship構築"></a>Starship構築</h3><p>Starshipはクロスプラットフォーム対応のシェルプロンプト<br><a href="https://github.com/starship/starship/blob/master/docs/ja-JP/guide/README.md">https://github.com/starship/starship/blob/master/docs/ja-JP/guide/README.md</a></p>
<h4 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a>Arch Linux</h4><ol>
<li><p>Nerd Fontのインストール</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">paru -S ttf-hackgen</span><br></pre></td></tr></table></figure>
<p> ターミナルソフトのフォントを<code>HackGen Console NF</code>に設定する。</p>
</li>
<li><p>Starshipのインストール</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S starship</span><br></pre></td></tr></table></figure>
</li>
<li><p>Starshipの有効化</p>
 <figure class="highlight bash"><figcaption><span>~/.config/fish/config.fish</span></figcaption><table><tr><td class="code"><pre><span class="line">starship init fish | <span class="built_in">source</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>テーマの適用</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">starship preset tokyo-night -o ~/.config/starship.toml</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><ol>
<li><p>Nerd Fontのインストール<br> <a href="https://github.com/yuru7/HackGen/releases">https://github.com/yuru7/HackGen/releases</a><br> HackGen_NF_v2.9.0.zipをダウンロードして展開したttfファイルを<code>~/.fonts/</code>フォルダに格納<br> ターミナルソフトのフォントを<code>HackGen Console NF</code>に設定する。</p>
</li>
<li><p>Starshipのインストール</p>
<ul>
<li>WSLの場合<br>  標準のrustcが古いのでRustupからインストールする  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This is usually <span class="keyword">done</span> by running one of the following (note the leading DOT):</span><br><span class="line">. <span class="string">&quot;<span class="variable">$HOME</span>/.cargo/env&quot;</span>            <span class="comment"># For sh/bash/zsh/ash/dash/pdksh</span></span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;<span class="variable">$HOME</span>/.cargo/env.fish&quot;</span>  <span class="comment"># For fish</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="string">&quot;<span class="variable">$HOME</span>/.cargo/env.fish&quot;</span></span><br><span class="line">cargo install starship --locked</span><br></pre></td></tr></table></figure></li>
<li>WSLではない場合  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install cargo build-essential cmake</span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;<span class="variable">$HOME</span>/.cargo/env.fish&quot;</span></span><br><span class="line">cargo install starship --locked</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Starshipの有効化</p>
 <figure class="highlight bash"><figcaption><span>~/.config/fish/config.fish</span></figcaption><table><tr><td class="code"><pre><span class="line">starship init fish | <span class="built_in">source</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>テーマの適用</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">starship preset tokyo-night -o ~/.config/starship.toml</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><ol>
<li><p>Nerd Fontのインストール<br> 以下からインストール<br> <a href="https://github.com/yuru7/HackGen/releases">https://github.com/yuru7/HackGen/releases</a></p>
</li>
<li><p>Starshipのインストール</p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">winget install clink starship</span><br><span class="line"># clink autorun install -- --quiet</span><br><span class="line"># clink autorun install --quiet</span><br><span class="line">clink <span class="built_in">set</span> clink.logo none</span><br></pre></td></tr></table></figure>
<ul>
<li>Windows Terminalからコマンドプロンプト起動時のWindowsロゴ表示を抑止するには<br>go to windows terminal&gt; settings&gt; command prompt&gt; command line and add &#x2F;k in the end.<br>ex: %SystemRoot%\System32\cmd.exe &#x2F;k</li>
<li>Windows TerminalからPowerShell起動時のWindowsロゴ表示を抑止するには<br>ex: pwsh -nologo<br>ex: “C:\Program Files\PowerShell\7\pwsh.exe” -nologo</li>
</ul>
</li>
<li><p>Starshipの有効化</p>
</li>
</ol>
<ul>
<li>Windows &#x2F; CMDの場合  <figure class="highlight cmd"><figcaption><span>%LocalAppData%\clink\starship.lua</span></figcaption><table><tr><td class="code"><pre><span class="line">load(io.popen(&#x27;starship init <span class="built_in">cmd</span>&#x27;):read(&quot;*a&quot;))()</span><br></pre></td></tr></table></figure></li>
<li>Windows &#x2F; PowerShellの場合  <figure class="highlight ps1"><figcaption><span>$PROFILE</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (&amp;starship init powershell)</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li>テーマの適用 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> %USERPROFILE%\.config</span><br><span class="line">starship preset tokyo-night -o %USERPROFILE%\.config\starship.toml</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Starshipカスタマイズ"><a href="#Starshipカスタマイズ" class="headerlink" title="Starshipカスタマイズ"></a>Starshipカスタマイズ</h3><h4 id="スクリーンショット"><a href="#スクリーンショット" class="headerlink" title="スクリーンショット"></a>スクリーンショット</h4><ul>
<li>Arch Linux<br>  <img src="/images/fish_starship.png"></li>
<li>Ubuntu (WSL)<br>  <img src="/images/fish_starship_ubuntu_wsl.png"></li>
<li>Windows &#x2F; CMD<br>  <img src="/images/cmd_starship_windows.png"></li>
<li>Windows &#x2F; PowerShell<br>  <img src="/images/ps_starship_windows.png"></li>
</ul>
<h4 id="テーマのカスタマイズ"><a href="#テーマのカスタマイズ" class="headerlink" title="テーマのカスタマイズ"></a>テーマのカスタマイズ</h4><ul>
<li>tokyo-nightテーマがベース</li>
<li>OSアイコンとユーザ名を表示</li>
<li>ホスト名は表示しない</li>
<li>CMDとPowerShellを区別するためにPowerShellはPSと表示</li>
<li>sudoキャッシュが有効な期間は工具箱アイコン🧰を表示</li>
<li>ユーザ名を表示する例  <figure class="highlight toml"><figcaption><span>~/.config/starship.toml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">format</span> = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[░▒▓](#a3aed2)\</span></span><br><span class="line"><span class="string">[ $os$username$sudo](bg:#a3aed2 fg:#090c0c)\</span></span><br><span class="line"><span class="string">[](bg:#769ff0 fg:#a3aed2)\</span></span><br><span class="line"><span class="string">$directory\</span></span><br><span class="line"><span class="string">[](fg:#769ff0 bg:#394260)\</span></span><br><span class="line"><span class="string">$git_branch\</span></span><br><span class="line"><span class="string">$git_status\</span></span><br><span class="line"><span class="string">[](fg:#394260 bg:#212736)\</span></span><br><span class="line"><span class="string">$nodejs\</span></span><br><span class="line"><span class="string">$rust\</span></span><br><span class="line"><span class="string">$golang\</span></span><br><span class="line"><span class="string">$php\</span></span><br><span class="line"><span class="string">[](fg:#212736 bg:#1d2230)\</span></span><br><span class="line"><span class="string">$time\</span></span><br><span class="line"><span class="string">[ ](fg:#1d2230)\</span></span><br><span class="line"><span class="string">\n$shell$character&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[directory]</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;fg:#e3e5e5 bg:#769ff0&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&quot;[ $path ]($style)&quot;</span></span><br><span class="line"><span class="attr">truncation_length</span> = <span class="number">3</span></span><br><span class="line"><span class="attr">truncation_symbol</span> = <span class="string">&quot;…/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[git_branch]</span></span><br><span class="line"><span class="attr">symbol</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#394260&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[[ $symbol $branch ](fg:#769ff0 bg:#394260)]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[git_status]</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#394260&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[[($all_status$ahead_behind )](fg:#769ff0 bg:#394260)]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[nodejs]</span></span><br><span class="line"><span class="attr">symbol</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#212736&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[[ $symbol ($version) ](fg:#769ff0 bg:#212736)]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[rust]</span></span><br><span class="line"><span class="attr">symbol</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#212736&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[[ $symbol ($version) ](fg:#769ff0 bg:#212736)]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[golang]</span></span><br><span class="line"><span class="attr">symbol</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#212736&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[[ $symbol ($version) ](fg:#769ff0 bg:#212736)]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[php]</span></span><br><span class="line"><span class="attr">symbol</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#212736&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[[ $symbol ($version) ](fg:#769ff0 bg:#212736)]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[time]</span></span><br><span class="line"><span class="attr">disabled</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">time_format</span> = <span class="string">&quot;%R&quot;</span> <span class="comment"># Hour:Minute Format</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#1d2230&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[[  $time ](fg:#a0a9cb bg:#1d2230)]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[username]</span></span><br><span class="line"><span class="attr">show_always</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">style_user</span> = <span class="string">&quot;bg:#a3aed2 fg:#090c0c&quot;</span></span><br><span class="line"><span class="attr">style_root</span> = <span class="string">&quot;bg:color_orange fg:color_fg0&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[ $user ]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[os]</span></span><br><span class="line"><span class="attr">disabled</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#a3aed2 fg:#090c0c&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[os.symbols]</span></span><br><span class="line"><span class="attr">Windows</span> = <span class="string">&quot;󰍲&quot;</span></span><br><span class="line"><span class="attr">Ubuntu</span> = <span class="string">&quot;󰕈&quot;</span></span><br><span class="line"><span class="attr">SUSE</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">Raspbian</span> = <span class="string">&quot;󰐿&quot;</span></span><br><span class="line"><span class="attr">Mint</span> = <span class="string">&quot;󰣭&quot;</span></span><br><span class="line"><span class="attr">Macos</span> = <span class="string">&quot;󰀵&quot;</span></span><br><span class="line"><span class="attr">Manjaro</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">Linux</span> = <span class="string">&quot;󰌽&quot;</span></span><br><span class="line"><span class="attr">Gentoo</span> = <span class="string">&quot;󰣨&quot;</span></span><br><span class="line"><span class="attr">Fedora</span> = <span class="string">&quot;󰣛&quot;</span></span><br><span class="line"><span class="attr">Alpine</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">Amazon</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">Android</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">Arch</span> = <span class="string">&quot;󰣇&quot;</span></span><br><span class="line"><span class="attr">Artix</span> = <span class="string">&quot;󰣇&quot;</span></span><br><span class="line"><span class="attr">EndeavourOS</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">CentOS</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">Debian</span> = <span class="string">&quot;󰣚&quot;</span></span><br><span class="line"><span class="attr">Redhat</span> = <span class="string">&quot;󱄛&quot;</span></span><br><span class="line"><span class="attr">RedHatEnterprise</span> = <span class="string">&quot;󱄛&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[shell]</span></span><br><span class="line"><span class="attr">fish_indicator</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">powershell_indicator</span> = <span class="string">&#x27;PS&#x27;</span></span><br><span class="line"><span class="attr">cmd_indicator</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">unknown_indicator</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&#x27;cyan bold&#x27;</span></span><br><span class="line"><span class="attr">disabled</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[sudo]</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;$symbol&#x27;</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&#x27;bg:#a3aed2 fg:#090c0c&#x27;</span></span><br><span class="line"><span class="attr">symbol</span> = <span class="string">&#x27;🧰&#x27;</span></span><br><span class="line"><span class="attr">allow_windows</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">disabled</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
<li>ユーザ名の代わりにホスト名を表示する例  <figure class="highlight toml"><figcaption><span>~/.config/starship.toml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">format</span> = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[░▒▓](#a3aed2)\</span></span><br><span class="line"><span class="string">[ $os $hostname $sudo](bg:#a3aed2 fg:#090c0c)\</span></span><br><span class="line"><span class="string">[](bg:#769ff0 fg:#a3aed2)\</span></span><br><span class="line"><span class="string">$directory\</span></span><br><span class="line"><span class="string">[](fg:#769ff0 bg:#394260)\</span></span><br><span class="line"><span class="string">$git_branch\</span></span><br><span class="line"><span class="string">$git_status\</span></span><br><span class="line"><span class="string">[](fg:#394260 bg:#212736)\</span></span><br><span class="line"><span class="string">$nodejs\</span></span><br><span class="line"><span class="string">$rust\</span></span><br><span class="line"><span class="string">$golang\</span></span><br><span class="line"><span class="string">$php\</span></span><br><span class="line"><span class="string">[](fg:#212736 bg:#1d2230)\</span></span><br><span class="line"><span class="string">$time\</span></span><br><span class="line"><span class="string">[ ](fg:#1d2230)\</span></span><br><span class="line"><span class="string">\n$shell$character&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[directory]</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;fg:#e3e5e5 bg:#769ff0&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&quot;[ $path ]($style)&quot;</span></span><br><span class="line"><span class="attr">truncation_length</span> = <span class="number">3</span></span><br><span class="line"><span class="attr">truncation_symbol</span> = <span class="string">&quot;…/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[git_branch]</span></span><br><span class="line"><span class="attr">symbol</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#394260&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[[ $symbol $branch ](fg:#769ff0 bg:#394260)]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[git_status]</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#394260&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[[($all_status$ahead_behind )](fg:#769ff0 bg:#394260)]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[nodejs]</span></span><br><span class="line"><span class="attr">symbol</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#212736&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[[ $symbol ($version) ](fg:#769ff0 bg:#212736)]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[rust]</span></span><br><span class="line"><span class="attr">symbol</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#212736&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[[ $symbol ($version) ](fg:#769ff0 bg:#212736)]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[golang]</span></span><br><span class="line"><span class="attr">symbol</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#212736&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[[ $symbol ($version) ](fg:#769ff0 bg:#212736)]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[php]</span></span><br><span class="line"><span class="attr">symbol</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#212736&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[[ $symbol ($version) ](fg:#769ff0 bg:#212736)]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[time]</span></span><br><span class="line"><span class="attr">disabled</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">time_format</span> = <span class="string">&quot;%R&quot;</span> <span class="comment"># Hour:Minute Format</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#1d2230&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[[  $time ](fg:#a0a9cb bg:#1d2230)]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[username]</span></span><br><span class="line"><span class="attr">show_always</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">style_user</span> = <span class="string">&quot;bg:#a3aed2 fg:#090c0c&quot;</span></span><br><span class="line"><span class="attr">style_root</span> = <span class="string">&quot;bg:color_orange fg:color_fg0&quot;</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[ $user ]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[os]</span></span><br><span class="line"><span class="attr">disabled</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#a3aed2 fg:#090c0c&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[os.symbols]</span></span><br><span class="line"><span class="attr">Windows</span> = <span class="string">&quot;󰍲&quot;</span></span><br><span class="line"><span class="attr">Ubuntu</span> = <span class="string">&quot;󰕈&quot;</span></span><br><span class="line"><span class="attr">SUSE</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">Raspbian</span> = <span class="string">&quot;󰐿&quot;</span></span><br><span class="line"><span class="attr">Mint</span> = <span class="string">&quot;󰣭&quot;</span></span><br><span class="line"><span class="attr">Macos</span> = <span class="string">&quot;󰀵&quot;</span></span><br><span class="line"><span class="attr">Manjaro</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">Linux</span> = <span class="string">&quot;󰌽&quot;</span></span><br><span class="line"><span class="attr">Gentoo</span> = <span class="string">&quot;󰣨&quot;</span></span><br><span class="line"><span class="attr">Fedora</span> = <span class="string">&quot;󰣛&quot;</span></span><br><span class="line"><span class="attr">Alpine</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">Amazon</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">Android</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">Arch</span> = <span class="string">&quot;󰣇&quot;</span></span><br><span class="line"><span class="attr">Artix</span> = <span class="string">&quot;󰣇&quot;</span></span><br><span class="line"><span class="attr">EndeavourOS</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">CentOS</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">Debian</span> = <span class="string">&quot;󰣚&quot;</span></span><br><span class="line"><span class="attr">Redhat</span> = <span class="string">&quot;󱄛&quot;</span></span><br><span class="line"><span class="attr">RedHatEnterprise</span> = <span class="string">&quot;󱄛&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[hostname]</span></span><br><span class="line"><span class="attr">disabled</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&quot;bg:#a3aed2 fg:#090c0c&quot;</span></span><br><span class="line"><span class="attr">ssh_only</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;[$ssh_symbol$hostname]($style)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[shell]</span></span><br><span class="line"><span class="attr">fish_indicator</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">powershell_indicator</span> = <span class="string">&#x27;PS&#x27;</span></span><br><span class="line"><span class="attr">cmd_indicator</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">unknown_indicator</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&#x27;cyan bold&#x27;</span></span><br><span class="line"><span class="attr">disabled</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[sudo]</span></span><br><span class="line"><span class="attr">format</span> = <span class="string">&#x27;$symbol&#x27;</span></span><br><span class="line"><span class="attr">style</span> = <span class="string">&#x27;bg:#a3aed2 fg:#090c0c&#x27;</span></span><br><span class="line"><span class="attr">symbol</span> = <span class="string">&#x27;🧰&#x27;</span></span><br><span class="line"><span class="attr">allow_windows</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">disabled</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>fish</tag>
        <tag>starship</tag>
      </tags>
  </entry>
  <entry>
    <title>Lutris - Arch Linux</title>
    <url>/2024/10/29/Lutris-Arch-Linux/</url>
    <content><![CDATA[<p><img src="/images/lutris-archlinux.png"><br>Arch LinuxにLutrisをインストールしてみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>CPU i7-4790 4.00GHz x8</li>
<li>Geforce GTX 1060 6GB</li>
<li>Arch Linux</li>
<li>GNOME 47</li>
<li>Wayland</li>
<li>Forge</li>
<li>Wine</li>
<li>Wine-ge-8-26</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li><p>Arch Linux NVIDIA drivers installation guide<br>  <a href="https://github.com/korvahannu/arch-nvidia-drivers-installation-guide">https://github.com/korvahannu/arch-nvidia-drivers-installation-guide</a></p>
</li>
<li><p>INSTALLING CLASSIC OR RETAIL WOW IN LINUX (Manjaro&#x2F;Arch Edition)<br>  <a href="https://www.reddit.com/r/classicwow/comments/colnzr/installing_classic_or_retail_wow_in_linux/">https://www.reddit.com/r/classicwow/comments/colnzr/installing_classic_or_retail_wow_in_linux/</a></p>
</li>
<li><p>Gamemode<br>  <a href="https://wiki.archlinux.jp/index.php/Gamemode">https://wiki.archlinux.jp/index.php/Gamemode</a></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S gamemode lib32-gamemode</span><br></pre></td></tr></table></figure>
<p>  <a href="https://ja.linux-terminal.com/?p=1756">https://ja.linux-terminal.com/?p=1756</a><br>  Lutris での GameMode の使用<br>  ゲームを右クリックしてConfigureを選択<br>  Advancedモードにして<br>  System options &#x2F; Game execution &#x2F; Command prefixに<code>gamemoderun</code>を指定してSave<br>  <img src="/images/gamemode.png"></p>
</li>
<li><p>Battle.netアプリをダッシュボードに追加</p>
<ul>
<li>LutrisのBattle.netアプリアイコンを右クリックしてメニューに追加</li>
<li>追加したメニューをダッシュボードに追加</li>
</ul>
</li>
<li><p>Battle.netアプリをフローティング化<br>  Forgeのタイリング制御から除外するために以下を押下<br>  <code>&lt;Shift&gt; &lt;Super&gt; C</code></p>
</li>
<li><p>Windowsパーティションのディスクの自動マウント</p>
<ul>
<li>ディスクアプリを開く</li>
<li>対象のパーティションを選択</li>
<li>歯車アイコンをクリック</li>
<li>マウントオプションを編集</li>
<li>ユーザセッションのデフォルトのチェックを外してOK</li>
</ul>
</li>
<li><p>Battle.netアプリでインストール済のゲームの場所を指定<br>  &#x2F;mnt&#x2F;&lt;Windowsパーティション&gt; のインストールフォルダを指定</p>
</li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p><img src="/images/wow_lutris_arch_linux.png"></p>
]]></content>
      <tags>
        <tag>lutris</tag>
      </tags>
  </entry>
  <entry>
    <title>Libadwaita Apps</title>
    <url>/2024/11/07/Libadwaita-Apps/</url>
    <content><![CDATA[<p><img src="/images/libadwaita_apps_on_windows.png"></p>
<p>GTK4, libAdwaitaのアプリケーションをWindowsでビルド&amp;実行してみました。</p>
<ul>
<li><a href="https://gtk-rs.org/gtk4-rs/stable/latest/book/introduction.html">https://gtk-rs.org/gtk4-rs/stable/latest/book/introduction.html</a><br>GUI development with Rust and GTK 4</li>
</ul>
<p>以下はlibadwaitaアプリケーション情報</p>
<ul>
<li><p><a href="https://apps.gnome.org/">https://apps.gnome.org/</a><br>Apps for GNOME</p>
</li>
<li><p><a href="https://arewelibadwaitayet.com/">https://arewelibadwaitayet.com/</a><br>Discover the Best LibAdwaita Apps in One Place</p>
</li>
<li><p><a href="https://github.com/valpackett/awesome-gtk">https://github.com/valpackett/awesome-gtk</a><br>Awesome GTK - Collections of awesome native open-source GTK (4 and 3) applications.</p>
</li>
</ul>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 11 24H2 </li>
<li>rust 1.82.0</li>
<li>libadwaita 0.7.1 &#x2F; v1_6</li>
<li>gtk4 0.9.4 &#x2F; v4_16</li>
</ul>
<h3 id="構築-Windowsの場合"><a href="#構築-Windowsの場合" class="headerlink" title="構築(Windowsの場合)"></a>構築(Windowsの場合)</h3><ol>
<li><p>rustup<br>  <a href="https://rustup.rs/">https://rustup.rs/</a><br>  rustup‑init.exe</p>
  <figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">rustup default stable<span class="literal">-msvc</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Git</p>
  <figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">winget install <span class="literal">--id</span> Git.Git <span class="literal">-e</span> <span class="literal">--source</span> winget</span><br></pre></td></tr></table></figure>
</li>
<li><p>MSYS2</p>
  <figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">winget install <span class="literal">--id</span> MSYS2.MSYS2 <span class="literal">-e</span> <span class="literal">--source</span> winget</span><br></pre></td></tr></table></figure>
</li>
<li><p>Visual Studio 2022</p>
  <figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">winget install Microsoft.VisualStudio.<span class="number">2022</span>.BuildTools <span class="literal">-e</span> <span class="literal">--source</span> winget <span class="literal">--silent</span> <span class="literal">--override</span> <span class="string">&quot;--wait --quiet --add ProductLang En-us --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Python</p>
  <figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">winget install <span class="literal">--id</span> Python.Python.<span class="number">3.13</span> <span class="literal">-e</span> <span class="literal">--source</span> winget</span><br></pre></td></tr></table></figure>
</li>
<li><p>gvsbuild</p>
</li>
</ol>
<ul>
<li><p>install</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">py <span class="literal">-3</span>.<span class="number">13</span> <span class="literal">-m</span> pip install <span class="literal">--user</span> pipx</span><br><span class="line">py <span class="literal">-3</span>.<span class="number">13</span> <span class="literal">-m</span> pipx ensurepath</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">pipx install gvsbuild</span><br></pre></td></tr></table></figure>
</li>
<li><p>build</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">gvsbuild build gtk4</span><br></pre></td></tr></table></figure>
</li>
<li><p>Environmental Variables</p>
<table>
<thead>
<tr>
<th align="left">Variable</th>
<th align="left">Value</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PKG_CONFIG_PATH</td>
<td align="left"><code>C:\gtk-build\gtk\x64\release\lib\pkgconfig</code></td>
</tr>
<tr>
<td align="left">Path</td>
<td align="left">add <code>C:\gtk-build\gtk\x64\release\bin</code></td>
</tr>
<tr>
<td align="left">Lib</td>
<td align="left"><code>C:\gtk-build\gtk\x64\release\lib</code></td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><h4 id="CUI版"><a href="#CUI版" class="headerlink" title="CUI版"></a>CUI版</h4><ul>
<li>プロジェクトの作成<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">cargo new my<span class="literal">-gtk-app</span></span><br><span class="line"><span class="built_in">cd</span> my<span class="literal">-gtk-app</span></span><br><span class="line">pkg<span class="literal">-config</span> <span class="literal">--modversion</span> gtk4</span><br></pre></td></tr></table></figure></li>
<li>ソース<figure class="highlight rust"><figcaption><span>main.rs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>ビルドと実行<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">cargo add gtk4 <span class="literal">--rename</span> gtk <span class="literal">--features</span> v4_16</span><br><span class="line">cargo run</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="GTK版"><a href="#GTK版" class="headerlink" title="GTK版"></a>GTK版</h4><ul>
<li>ソースの更新<figure class="highlight rust"><figcaption><span>main.rs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> gtk::prelude::*;</span><br><span class="line"><span class="keyword">use</span> gtk::&#123;glib, Application, ApplicationWindow, Button&#125;;</span><br><span class="line"><span class="keyword">const</span> APP_ID: &amp;<span class="type">str</span> = <span class="string">&quot;org.gtk_rs.HelloWorld3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> glib::ExitCode &#123;</span><br><span class="line">    <span class="comment">// Create a new application</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">app</span> = Application::<span class="title function_ invoke__">builder</span>().<span class="title function_ invoke__">application_id</span>(APP_ID).<span class="title function_ invoke__">build</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Connect to &quot;activate&quot; signal of `app`</span></span><br><span class="line">    app.<span class="title function_ invoke__">connect_activate</span>(build_ui);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Run the application</span></span><br><span class="line">    app.<span class="title function_ invoke__">run</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">build_ui</span>(app: &amp;Application) &#123;</span><br><span class="line">    <span class="comment">// Create a button with label and margins</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">button</span> = Button::<span class="title function_ invoke__">builder</span>()</span><br><span class="line">        .<span class="title function_ invoke__">label</span>(<span class="string">&quot;Press me!&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">margin_top</span>(<span class="number">12</span>)</span><br><span class="line">        .<span class="title function_ invoke__">margin_bottom</span>(<span class="number">12</span>)</span><br><span class="line">        .<span class="title function_ invoke__">margin_start</span>(<span class="number">12</span>)</span><br><span class="line">        .<span class="title function_ invoke__">margin_end</span>(<span class="number">12</span>)</span><br><span class="line">        .<span class="title function_ invoke__">build</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Connect to &quot;clicked&quot; signal of `button`</span></span><br><span class="line">    button.<span class="title function_ invoke__">connect_clicked</span>(|button| &#123;</span><br><span class="line">        <span class="comment">// Set the label to &quot;Hello World!&quot; after the button has been clicked on</span></span><br><span class="line">        button.<span class="title function_ invoke__">set_label</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a window</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">window</span> = ApplicationWindow::<span class="title function_ invoke__">builder</span>()</span><br><span class="line">        .<span class="title function_ invoke__">application</span>(app)</span><br><span class="line">        .<span class="title function_ invoke__">title</span>(<span class="string">&quot;My GTK App&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">child</span>(&amp;button)</span><br><span class="line">        .<span class="title function_ invoke__">build</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Present window</span></span><br><span class="line">    window.<span class="title function_ invoke__">present</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>ビルドと実行<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">cargo run</span><br></pre></td></tr></table></figure>
<img src="/images/gtk4_apps_on_windows.png"></li>
</ul>
<h4 id="libAdwaita版"><a href="#libAdwaita版" class="headerlink" title="libAdwaita版"></a>libAdwaita版</h4><ul>
<li>ソースの更新<br>GTK版で以下を修正する。<figure class="highlight rust"><figcaption><span>main.rs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// use gtk::&#123;glib, Application, ApplicationWindow, Button&#125;;</span></span><br><span class="line"><span class="keyword">use</span> gtk::&#123;glib, ApplicationWindow, Button&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight rust"><figcaption><span>main.rs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// let app = Application::builder().application_id(APP_ID).build();</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">app</span> = adw::Application::<span class="title function_ invoke__">builder</span>().<span class="title function_ invoke__">application_id</span>(APP_ID).<span class="title function_ invoke__">build</span>();</span><br></pre></td></tr></table></figure>
<figure class="highlight rust"><figcaption><span>main.rs</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// fn build_ui(app: &amp;Application) &#123;</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">build_ui</span>(app: &amp;adw::Application) &#123;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>以下、管理者権限で実行</p>
<ul>
<li>UnicodeDecodeError: ‘cp932’ codec can’t decode byte… 対策<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="built_in">New-ItemProperty</span> <span class="literal">-LiteralPath</span> <span class="string">&#x27;HKLM:\SYSTEM\CurrentControlSet\Control\Nls\CodePage&#x27;</span> <span class="literal">-Name</span> <span class="string">&#x27;ACP&#x27;</span> <span class="literal">-Value</span> <span class="string">&#x27;65001&#x27;</span> <span class="literal">-PropertyType</span> String <span class="literal">-Force</span>;</span><br><span class="line"><span class="built_in">New-ItemProperty</span> <span class="literal">-LiteralPath</span> <span class="string">&#x27;HKLM:\SYSTEM\CurrentControlSet\Control\Nls\CodePage&#x27;</span> <span class="literal">-Name</span> <span class="string">&#x27;OEMCP&#x27;</span> <span class="literal">-Value</span> <span class="string">&#x27;65001&#x27;</span> <span class="literal">-PropertyType</span> String <span class="literal">-Force</span>;</span><br><span class="line"><span class="built_in">New-ItemProperty</span> <span class="literal">-LiteralPath</span> <span class="string">&#x27;HKLM:\SYSTEM\CurrentControlSet\Control\Nls\CodePage&#x27;</span> <span class="literal">-Name</span> <span class="string">&#x27;MACCP&#x27;</span> <span class="literal">-Value</span> <span class="string">&#x27;65001&#x27;</span> <span class="literal">-PropertyType</span> String <span class="literal">-Force</span>;</span><br></pre></td></tr></table></figure></li>
<li>build<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">cargo add libadwaita <span class="literal">--rename</span> adw <span class="literal">--features</span> v1_6</span><br><span class="line">gvsbuild build libadwaita librsvg</span><br></pre></td></tr></table></figure></li>
<li>UnicodeDecodeError: ‘cp932’ codec can’t decode byte… 対策の戻し<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="built_in">New-ItemProperty</span> <span class="literal">-LiteralPath</span> <span class="string">&#x27;HKLM:\SYSTEM\CurrentControlSet\Control\Nls\CodePage&#x27;</span> <span class="literal">-Name</span> <span class="string">&#x27;ACP&#x27;</span> <span class="literal">-Value</span> <span class="string">&#x27;932&#x27;</span> <span class="literal">-PropertyType</span> String <span class="literal">-Force</span>;</span><br><span class="line"><span class="built_in">New-ItemProperty</span> <span class="literal">-LiteralPath</span> <span class="string">&#x27;HKLM:\SYSTEM\CurrentControlSet\Control\Nls\CodePage&#x27;</span> <span class="literal">-Name</span> <span class="string">&#x27;OEMCP&#x27;</span> <span class="literal">-Value</span> <span class="string">&#x27;932&#x27;</span> <span class="literal">-PropertyType</span> String <span class="literal">-Force</span>;</span><br><span class="line"><span class="built_in">New-ItemProperty</span> <span class="literal">-LiteralPath</span> <span class="string">&#x27;HKLM:\SYSTEM\CurrentControlSet\Control\Nls\CodePage&#x27;</span> <span class="literal">-Name</span> <span class="string">&#x27;MACCP&#x27;</span> <span class="literal">-Value</span> <span class="string">&#x27;932&#x27;</span> <span class="literal">-PropertyType</span> String <span class="literal">-Force</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>一般ユーザで</p>
<ul>
<li>ビルドと実行<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">cargo run</span><br></pre></td></tr></table></figure>
<img src="/images/libadwaita_apps_on_windows.png"></li>
</ul>
<h3 id="libAdwaita-Apps"><a href="#libAdwaita-Apps" class="headerlink" title="libAdwaita Apps"></a>libAdwaita Apps</h3><p><a href="https://arewelibadwaitayet.com/">https://arewelibadwaitayet.com/</a><br>使ったことのあるアプリ、使ってみたいアプリ</p>
<ul>
<li><a href="https://flathub.org/apps/io.bassi.Amberol">Amberol</a><br>Plays music, and nothing else</li>
<li><a href="https://flathub.org/apps/com.raggesilver.BlackBox">Black Box</a><br>A beautiful GTK 4 terminal</li>
<li><a href="https://flathub.org/apps/com.usebottles.bottles">Bottles</a><br>Run Windows Software</li>
<li><a href="https://flathub.org/apps/app.drey.EarTag">Ear Tag</a><br>Edit audio file tags</li>
<li><a href="https://flathub.org/apps/com.mattjakeman.ExtensionManager">Extension Manager</a><br>Browse, install, and manage GNOME Shell Extensions</li>
<li><a href="https://flathub.org/apps/com.github.tchx84.Flatseal">Flatseal</a><br>Manage Flatpak permissions</li>
<li><a href="https://flathub.org/apps/com.github.neithern.g4music">Gapless</a><br>Play your music elegantly</li>
<li><a href="https://flathub.org/apps/io.github.realmazharhussain.GdmSettings">GDM Settings</a><br>Customize your login screen</li>
<li><a href="https://flathub.org/apps/org.gnome.Maps">Maps</a><br>Find places around the world</li>
<li><a href="https://flathub.org/apps/org.gnome.Music">Music</a><br>Play and organize your music collection</li>
<li><a href="https://flathub.org/apps/io.github.alexkdeveloper.radio">Radio</a><br>A simple radio with stations from the website radio-browser.info</li>
<li><a href="https://flathub.org/apps/org.gnome.Gtranslator">Translation Editor</a><br>Translate and localize applications and libraries</li>
<li><a href="https://flathub.org/apps/de.swsnr.turnon">Turn On</a><br>Turn on devices in your network</li>
<li><a href="https://flathub.org/apps/io.github.davidoc26.wallpaper_selector">Wallpaper Selector</a><br>Downloads and applies wallpapers</li>
</ul>
]]></content>
      <tags>
        <tag>gtk</tag>
      </tags>
  </entry>
  <entry>
    <title>tray-launcher</title>
    <url>/2025/01/23/tray-launcher/</url>
    <content><![CDATA[<p><img src="/images/tray-launcher.png"><br>Windowsのタスクトレイからスクリプトを実行できるランチャーです。<br>GNOME Shell ExtensionのArgosのような使い方ができて便利です。</p>
<p><a href="https://github.com/Jayich-Lab/tray-launcher">https://github.com/Jayich-Lab/tray-launcher</a></p>
<h4 id="2025-02-25"><a href="#2025-02-25" class="headerlink" title="2025-02-25"></a>2025-02-25</h4><p>起動時にPythonのウィンドウが開きっぱなしになってしまうことがあった。<br>まだ報告されていないようだ。複数の環境で発生したが、再現性はないかもしれない。<br><a href="https://github.com/Jayich-Lab/tray-launcher/issues">https://github.com/Jayich-Lab/tray-launcher/issues</a></p>
<p>以下のソフトが動作したので取り急ぎ切り替えた。<br><a href="https://github.com/zozonteq/task-tray-launcher">https://github.com/zozonteq/task-tray-launcher</a></p>
<p>自分でPowerShellで作るのもよいかもしれない。</p>
<h4 id="2025-02-25-1"><a href="#2025-02-25-1" class="headerlink" title="2025-02-25"></a>2025-02-25</h4><p>作ってみました。<br><a href="https://ktkr3d.github.io/2025/02/25/Script-Launcher/">https://ktkr3d.github.io/2025/02/25/Script-Launcher/</a></p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 11</li>
<li>python 3.13.1</li>
<li>pip 24.3.1</li>
<li>tray-launcher v1.0.9</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>インストール可能なPythonのバージョンを確認  <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">winget search --id=Python.Python</span><br></pre></td></tr></table></figure></li>
<li>Pythonをインストール  <figure class="highlight cmd"><figcaption><span>管理者モード</span></figcaption><table><tr><td class="code"><pre><span class="line">winget install -e -i --id=Python.Python.<span class="number">3</span>.<span class="number">13</span> --source=winget --scope=machine</span><br></pre></td></tr></table></figure></li>
<li>tray-launcherをインストール  <figure class="highlight cmd"><figcaption><span>管理者モード</span></figcaption><table><tr><td class="code"><pre><span class="line">pip install tray-launcher</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><ol>
<li>tray-launcherの実行  <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">launcher run</span><br></pre></td></tr></table></figure>
  <code>shell:startup</code>にショートカットを作成して自動起動にする。</li>
<li>BATスクリプトを格納<br>  格納先は<code>%USERPROFILE%\.tray_launcher\scripts</code>。</li>
<li>ダウンロードフォルダのPNG画像をサーバにSCPでアップロードするスクリプト  <figure class="highlight bat"><figcaption><span>%USERPROFILE%\.tray_launcher\scripts\Upload.bat</span></figcaption><table><tr><td class="code"><pre><span class="line">wt.exe -w UPLOAD -p &quot;コマンド プロンプト&quot; <span class="built_in">cmd</span>.exe /c &quot;scp.exe <span class="variable">%USERPROFILE%</span>\Downloads\*.png ubuntu@<span class="number">192</span>.<span class="number">168</span>.<span class="number">11</span>.<span class="number">2</span>:/mnt/d/home/Upload &amp;&amp; <span class="built_in">del</span> <span class="variable">%USERPROFILE%</span>\Downloads\*.png &amp; <span class="built_in">set</span> /P x= &amp; <span class="keyword">exit</span> <span class="number">0</span>&quot;</span><br></pre></td></tr></table></figure>
  日本語を含む場合はSJISで格納する。</li>
<li>Wingetでソフトウェアをアップグレードするスクリプト  <figure class="highlight bat"><figcaption><span>%USERPROFILE%\.tray_launcher\scripts\Winget Upgrade.bat</span></figcaption><table><tr><td class="code"><pre><span class="line">wt.exe -w UPLOAD -p &quot;コマンド プロンプト&quot; <span class="built_in">cmd</span>.exe /c &quot;winget upgrade --all &amp; <span class="built_in">set</span> /P x= &amp; <span class="keyword">exit</span> <span class="number">0</span>&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ol>
<li>タスクトレイのアイコンを右クリックして<code>Start a Script</code>、<code>Upload</code>を選択する</li>
<li>処理が終わったらEnterキー押下で閉じる</li>
</ol>
]]></content>
      <tags>
        <tag>windows</tag>
        <tag>tray-launcher</tag>
      </tags>
  </entry>
  <entry>
    <title>Vertical Taskbar for Windows 11</title>
    <url>/2025/01/29/Vertical-Taskbar-for-Windows-11/</url>
    <content><![CDATA[<p><img src="/images/windhawk_vertical_taskbar.png"></p>
<p>Vertical Taskbar for Windows 11はWindows 11でタスクバーを左側や右側に配置できるWindhawkのmodです。<br>ExplorerPatcherよりもWindows 11に対する親和性が高そうです。</p>
<p><a href="https://windhawk.net/mods/taskbar-vertical">https://windhawk.net/mods/taskbar-vertical</a><br><a href="https://windhawk.net/">https://windhawk.net/</a><br><a href="https://github.com/microsoft/PowerToys/issues/25101#issuecomment-2364732359">https://github.com/microsoft/PowerToys/issues/25101#issuecomment-2364732359</a></p>
<h4 id="2025-02-27-メモ"><a href="#2025-02-27-メモ" class="headerlink" title="2025-02-27 メモ"></a>2025-02-27 メモ</h4><p>WindhawkとVirtualBoxが干渉してVirtualBoxのVM起動時に「supHardenedWinVerifyProcess failed」エラーが発生する。<br><a href="https://github.com/ramensoftware/windhawk/issues/25">https://github.com/ramensoftware/windhawk/issues/25</a><br>Windhawkの設定→詳細設定→さらに詳細設定を表示→プロセス除外リストに以下を追加する。</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"><span class="tag">%<span class="selector-tag">ProgramFiles</span></span>%\Oracle\VirtualBox\*</span><br></pre></td></tr></table></figure>
<p>上記対応後、VirtualBoxのVM起動時に「NtCreateFile(\Device\VBoxDrvStub) failed」エラーが発生した場合は以下を実行する。</p>
<figure class="highlight cmd"><figcaption><span>管理者権限のコマンドプロンプト</span></figcaption><table><tr><td class="code"><pre><span class="line">sc.exe <span class="built_in">start</span> vboxsup</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 11 24H2</li>
<li>Windhawk 1.5.1</li>
<li>Vertical Taskbar for Windows 11 v1.3 -&gt; v1.3.1</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>Windhawkを<a href="https://windhawk.net/">windhawk.net</a>からダウンロードしてインストール</li>
<li>右上の”探す”を押下</li>
<li>“Vertical Taskbar for Windows 11”を検索して”詳細”、インストール</li>
</ol>
<h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><ul>
<li>有効にならない環境がありました。<br>原因は不明ですが、タスクトレイのWindhawkアイコンを右クリックして”ロードされたMods”を選択して確認するとエクスプローラからアンロードされていました。<ul>
<li>有効にならない環境<br><img src="/images/windhawk_unloaded.png"></li>
<li>有効になっている環境<br><img src="/images/windhawk_loaded.png"><br>以下をウォッチ中。<br><a href="https://github.com/ramensoftware/windhawk-mods/issues?q=Vertical%20Taskbar">https://github.com/ramensoftware/windhawk-mods/issues?q=Vertical%20Taskbar</a><br>v1.3.1で修正されました。<br><a href="https://github.com/ramensoftware/windhawk-mods/pull/1469">https://github.com/ramensoftware/windhawk-mods/pull/1469</a></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>windows</tag>
        <tag>windhawk</tag>
      </tags>
  </entry>
  <entry>
    <title>FancyWM</title>
    <url>/2025/01/31/FancyWM/</url>
    <content><![CDATA[<p><img src="/images/fancywm_windhawk.png"></p>
<p>FancyWMはWindows用のタイリングマネージャです。<br>2-in-1 PCのタッチスクリーンで便利です。<br>Linux環境とほぼ同等の使い方ができるようになりました。</p>
<p><a href="https://github.com/FancyWM/fancywm">https://github.com/FancyWM/fancywm</a></p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 11</li>
<li>FancyWM v2.14.0</li>
<li>Windhawk 1.5.1<ul>
<li><p>Vertical Taskbar for Windows 11 v1.3.1<br>Taskbar location: <code>Right</code><br>Taskbar Width: <code>64</code></p>
</li>
<li><p>Taskbar height and icon size v1.2.16<br>Icon size: <code>32</code><br>taskbar height: <code>52</code><br>taskbar button width: <code>52</code></p>
</li>
<li><p>Taskbar Clock Customization v1.4<br>Time format: <code>H&#39;:&#39;mm</code><br>Date format: <code>MMM&#39;/&#39;d &#39;(&#39;ddd&#39;)&#39;</code></p>
</li>
<li><p>Windows 11 Taskbar Styler<br><a href="https://github.com/ramensoftware/windows-11-taskbar-styling-guide/blob/main/README.md#colors">https://github.com/ramensoftware/windows-11-taskbar-styling-guide/blob/main/README.md#colors</a><br>Control styles</p>
<ul>
<li>Target: <code>Rectangle#BackgroundFill</code><br>Styles: <code>Fill=#C0000000</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>インストール<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">winget <span class="keyword">install</span> fancywm</span><br></pre></td></tr></table></figure></li>
<li>スタートメニューからFancyWMを起動</li>
<li>タスクトレイからアイコンを右クリックしてSettingsを選択</li>
<li>自動的に起動するように設定する<br>  General &#x2F; Startup &#x2F; Run automatically at system startup をチェック</li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h4><ul>
<li>Windows (FanctWM, Windhawk)<br><img src="/images/fancywm_windhawk.png"><br>Scale: 125%<br>Taskbar width: 64px<br>Icon size: 32px</li>
<li>Arch Linux (Forge, Dash to Panel)<br><img src="/images/forge_dashtopanel.png"><br>Scale: 125%<br>Panel thickness: 56px<br>App Icon Margin: 0px<br>App Icon Padding: 12px<br>ArcMenu Icon Size: 32px</li>
<li>Ubuntu (Forge, Dash to Panel)<br><img src="/images/ubuntu_forge_dashtopanel.png"></li>
</ul>
]]></content>
      <tags>
        <tag>windows</tag>
        <tag>fancywm</tag>
      </tags>
  </entry>
  <entry>
    <title>GlazeWM</title>
    <url>/2025/02/24/GlazeWM/</url>
    <content><![CDATA[<p><img src="/images/glazewm_windhawk.png"></p>
<p>Windows用のタイリングウィンドウマネージャGlazeWMを試してみました。<br>挙動に癖が無くて安定していそうなので切り替えました。</p>
<p><a href="https://github.com/glzr-io/glazewm">https://github.com/glzr-io/glazewm</a></p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 11 24H2</li>
<li>GlazeWM v3.8.1</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>インストール  <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">winget install GlazeWM</span><br></pre></td></tr></table></figure></li>
<li>起動<br>  スタートメニューから<code>GlazeWM</code>を起動</li>
<li>環境設定</li>
</ol>
<ul>
<li>設定ファイルは<code>%userprofile%\.glzr\glazewm\config.yaml</code>。<br>トレイアイコンを右クリックして<code>Show config folder</code>でフォルダを表示できます。</li>
<li>上部のバーを起動しないようにする。<figure class="highlight yaml"><figcaption><span>%userprofile%\.glzr\glazewm\config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">general:</span></span><br><span class="line">  <span class="comment"># Commands to run when the WM has started. This is useful for running a</span></span><br><span class="line">  <span class="comment"># script or launching another application.</span></span><br><span class="line">  <span class="comment"># Example: The below command launches Zebar.</span></span><br><span class="line">  <span class="comment">#startup_commands: [&#x27;shell-exec zebar&#x27;]</span></span><br><span class="line">  <span class="attr">startup_commands:</span> []</span><br></pre></td></tr></table></figure></li>
<li>ウィンドウ間の隙間を狭くする。<figure class="highlight yaml"><figcaption><span>%userprofile%\.glzr\glazewm\config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">gaps:</span></span><br><span class="line">  <span class="comment"># Whether to scale the gaps with the DPI of the monitor.</span></span><br><span class="line">  <span class="attr">scale_with_dpi:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Gap between adjacent windows.</span></span><br><span class="line">  <span class="comment">#inner_gap: &#x27;20px&#x27;</span></span><br><span class="line">  <span class="attr">inner_gap:</span> <span class="string">&#x27;4px&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Gap between windows and the screen edge.</span></span><br><span class="line">  <span class="attr">outer_gap:</span></span><br><span class="line">    <span class="comment">#top: &#x27;60px&#x27;</span></span><br><span class="line">    <span class="comment">#right: &#x27;20px&#x27;</span></span><br><span class="line">    <span class="comment">#bottom: &#x27;20px&#x27;</span></span><br><span class="line">    <span class="comment">#left: &#x27;20px&#x27;</span></span><br><span class="line">    <span class="attr">top:</span> <span class="string">&#x27;4px&#x27;</span></span><br><span class="line">    <span class="attr">right:</span> <span class="string">&#x27;4px&#x27;</span></span><br><span class="line">    <span class="attr">bottom:</span> <span class="string">&#x27;4px&#x27;</span></span><br><span class="line">    <span class="attr">left:</span> <span class="string">&#x27;4px&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>キーバインドの無効化(<kbd>Alt</kbd>+<kbd>F</kbd>を無効化する場合)。<figure class="highlight yaml"><figcaption><span>%userprofile%\.glzr\glazewm\config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">keybindings:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Change the focused window to be fullscreen.</span></span><br><span class="line">  <span class="comment">#- commands: [&#x27;toggle-fullscreen&#x27;]</span></span><br><span class="line">  <span class="comment">#  bindings: [&#x27;alt+f&#x27;]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>設定の再読み込み<br>  トレイアイコンを右クリックして<code>Reload config</code>。<br>  もしくは<kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>R</kbd>。</li>
<li>自動起動<br>  <a href="https://github.com/glzr-io/glazewm#user-content-faq">https://github.com/glzr-io/glazewm#user-content-faq</a><br>  <code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\</code>にあるアプリケーションショートカット<code>GlazeWM</code>を<code>shell:startup</code>にコピーする。</li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul>
<li><p>キー割り当て<br><a href="https://github.com/glzr-io/glazewm?tab=readme-ov-file#default-keybindings">https://github.com/glzr-io/glazewm?tab=readme-ov-file#default-keybindings</a><br><img src="https://github.com/glzr-io/glazewm/raw/main/resources/assets/cheatsheet.png"></p>
<div class="note warning flat"><p><kbd>Alt</kbd>系は他のアプリケーションと競合する可能性があるので無効化するか別のキーの組み合わせに変更した方がよいかもしれない。</p>
</div>
<table>
<thead>
<tr>
<th align="left">ショートカット</th>
<th align="left">動作</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>R</kbd></td>
<td align="left">設定ファイルの再読み込み</td>
</tr>
<tr>
<td align="left"><kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>W</kbd></td>
<td align="left">すべてのウィンドウを再描画</td>
</tr>
<tr>
<td align="left"><kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd></td>
<td align="left">タイリングモードの有効&#x2F;無効切り替え</td>
</tr>
<tr>
<td align="left"><kbd>Alt</kbd>+<kbd>T</kbd></td>
<td align="left">対象のウィンドウのタイリングモードの切り替え</td>
</tr>
<tr>
<td align="left"><kbd>Alt</kbd>+<kbd>F</kbd></td>
<td align="left">対象のウィンドウの最大化表示の切り替え</td>
</tr>
<tr>
<td align="left"><kbd>Alt</kbd>+<kbd>M</kbd></td>
<td align="left">対象のウィンドウの最小化</td>
</tr>
<tr>
<td align="left"><kbd>Alt</kbd>+<kbd>Enter</kbd></td>
<td align="left">ターミナルの起動</td>
</tr>
</tbody></table>
</li>
<li><p>タイリング制御の除外</p>
<figure class="highlight yaml"><figcaption><span>%userprofile%\.glzr\glazewm\config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">window_rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">commands:</span> [<span class="string">&#x27;ignore&#x27;</span>]</span><br><span class="line">    <span class="attr">match:</span></span><br><span class="line">      <span class="comment"># Ignore Virtualbox VM Window</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">window_process:</span> &#123; <span class="attr">equals:</span> <span class="string">&#x27;VirtualBoxVM&#x27;</span> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><p>まれにタイル管理のウィンドウのサイズがスクリーン幅いっぱいになる(横に配置したタスクバーの幅が考慮されない)ことがある。タスクバーを右クリックしてタスクバーの設定から自動的に隠す設定をオン、オフしてリフレッシュすれば解決する。</p>
]]></content>
      <tags>
        <tag>windows</tag>
        <tag>glazewm</tag>
      </tags>
  </entry>
  <entry>
    <title>Script Launcher</title>
    <url>/2025/02/25/Script-Launcher/</url>
    <content><![CDATA[<p><img src="/images/script-launcher.png"></p>
<p>タスクバーからスクリプトを起動するランチャーです。</p>
<p><a href="https://github.com/ktkr3d/script-launcher">https://github.com/ktkr3d/script-launcher</a></p>
<p>以下を参考にしました。ありがとうございます。</p>
<ul>
<li><a href="https://qiita.com/sumikko_tester/items/b3c8440fd182cdabe31b">【powershell】アプリ起動ランチャー作ってみた</a></li>
<li><a href="https://github.com/Jayich-Lab/tray-launcher">tray-launcher</a></li>
<li><a href="https://github.com/zozonteq/task-tray-launcher">task-tray-launcher</a></li>
</ul>
<h4 id="2025-06-27-追記"><a href="#2025-06-27-追記" class="headerlink" title="2025-06-27 追記"></a>2025-06-27 追記</h4><p>起動用のvbsをショートカットファイルで代替できます。</p>
<ol>
<li>script-launcher.ps1のショートカットを作成</li>
<li>リンク先を変更  <figure class="highlight text"><figcaption><span>リンク先(変更前)</span></figcaption><table><tr><td class="code"><pre><span class="line">C:\repos\script-launcher\script-launcher.ps1</span><br></pre></td></tr></table></figure>
  <figure class="highlight text"><figcaption><span>リンク先(変更後)</span></figcaption><table><tr><td class="code"><pre><span class="line">powershell.exe -WindowStyle Hidden -ExecutionPolicy RemoteSigned -File C:\repos\script-launcher\script-launcher.ps1 -arg1 C:\repos\script-launcher\scripts</span><br></pre></td></tr></table></figure></li>
<li>実行時の大きさを「最小化」に変更</li>
<li>Windows Terminalをインストールしている場合はWindows 11の 設定 &gt; システム &gt; 開発者向け &gt; ターミナル で「Windows コンソールホスト」を選択</li>
</ol>
<span id="more"></span>

<h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><ul>
<li><p>クローン</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> C:¥repos</span><br><span class="line"><span class="built_in">cd</span> C:¥repos</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ktkr3d/script-launcher.git</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>script-launcher.ps1</code>がプログラム本体です。<br>スクリプト格納フォルダを第一引数に渡します。</p>
</li>
<li><p><code>task-tray-script-launcher.vbs</code>はラッパでPowerShell画面の表示を抑止します。<br>インストール先に合わせてパスを修正します。<code>C:\repos\script-launcher</code>が設定されています。</p>
</li>
</ul>
<h3 id="起動と自動起動設定"><a href="#起動と自動起動設定" class="headerlink" title="起動と自動起動設定"></a>起動と自動起動設定</h3><ul>
<li><code>script-launcher.vbs</code>をダブルクリックすると起動してタスクバー&#x2F;タスクトレイに常駐します。</li>
<li>ログイン時に自動起動するには<code>script-launcher.vbs</code>のショートカットファイルを作成して<code>shell:startup</code>フォルダに格納します。</li>
</ul>
<h3 id="アイコンの表示設定"><a href="#アイコンの表示設定" class="headerlink" title="アイコンの表示設定"></a>アイコンの表示設定</h3><p>初期状態ではタスクトレイに常駐します。<br>タスクバーに表示するにはタスクバーを右クリックして「タスクバーの設定」を選択して「その他のシステム トレイ アイコン」から「Windows PowerShell」をオンに切り替えます。</p>
<h3 id="スクリプトの設定"><a href="#スクリプトの設定" class="headerlink" title="スクリプトの設定"></a>スクリプトの設定</h3><ol>
<li>アイコンを右クリックして「Open script folder」を選択するとスクリプトフォルダが表示されます。</li>
<li>スクリプトフォルダにスクリプトファイルやアプリケーションのショートカットファイルを格納します。<br>  Windowsにインストールされているアプリケーションであれば以下のフォルダからショートカットファイルをコピーします。<br>  <code>%ProgramData%\Microsoft\Windows\Start Menu\Programs\</code><br>  <code>%APPDATA%\Microsoft\Windows\Start Menu\Programs\</code></li>
<li>スクリプトの追加や削除の後に「Reload script files」を選択するとスクリプトの一覧が更新されます。<br>  スクリプトの一覧はファイル名でソートされます。</li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>アイコンを右クリックして表示されるスクリプトをクリックします。</p>
<p>以下のような使い方ができそうです。</p>
<ul>
<li>スクリプトの実行(.bat, .ps1, wsl上のbash)</li>
<li>アプリケーションの実行(アプリケーションのショートカットファイルをコピー)</li>
<li>フォルダの表示(フォルダをマウス右ドラッグ&amp;ドロップで「ショートカットをここに作成」)</li>
<li>データファイルの表示(データファイルのショートカットファイルをコピー)</li>
<li>Web サイトの表示(.url)</li>
<li>Visual Studio Codeで特定のプロジェクトを開く(Visual Studio Codeショートカットの起動パラメタに<code>-n &lt;project_path&gt;</code>を指定)</li>
<li>仮想マシンへの直接接続(vmware, virtualbox, hyper-v)<ul>
<li>VMWareの仮想マシンは仮想マシン一覧からドラッグアンドドロップでショートカットファイルを作成</li>
<li>VirtualBoxの仮想マシンは仮想マシンを右クリックして「ショートカットをデスクトップに作成」したものをコピー</li>
<li>Hyper-Vの仮想マシンは<code>%windir%\System32\vmconnect.exe</code>のショートカットを作成してパラメタに<code>&lt;ServerName&gt; &lt;VMName&gt;</code>を指定(詳細設定で「管理者として実行」をチェック)</li>
</ul>
</li>
<li>リモートホストへの直接接続(rdp, ssh)<ul>
<li>SSH接続はbatファイルに<code>ssh &lt;username&gt;@&lt;remotehost&gt;</code></li>
<li>RDP接続はリモートデスクトップ接続のショートカットをコピーして、起動パラメタに<code>/v:&lt;remotehost&gt;</code>を指定</li>
</ul>
</li>
</ul>
<p><img src="/images/script-launcher_ex.png"></p>
]]></content>
      <tags>
        <tag>windows</tag>
        <tag>script-launcher</tag>
      </tags>
  </entry>
  <entry>
    <title>File Sync</title>
    <url>/2025/03/05/File-Sync/</url>
    <content><![CDATA[<p><img src="/images/file_sync.drawio.svg"></p>
<p>共有フォルダのテキストファイルをWindows クライアントとLinuxクライアントでマウントせずに同期してみました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>サーバ：Windows 11<br>SMB経由 <code>\\192.168.11.2\media11\home\Documents\memo.txt</code><br>SSH経由 <code>ubuntu@192.168.11.2:/mnt/d/home/Documents/memo.txt</code></li>
<li>クライアントWindows：Windows 11 (robocopy)<br><code>%USERPROFILE%\Documents\memo.txt</code></li>
<li>クライアントLinux：Arch Linux (rsync ssh)<br><code>~/Documents/memo.txt</code></li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="サーバ"><a href="#サーバ" class="headerlink" title="サーバ"></a>サーバ</h4><ol>
<li>共有フォルダを作成</li>
<li>Windows 共有の設定</li>
<li>WSL の導入</li>
</ol>
<h4 id="クライアントWindows"><a href="#クライアントWindows" class="headerlink" title="クライアントWindows"></a>クライアントWindows</h4><ol>
<li>script-launcherの導入<br>  <a href="https://ktkr3d.github.io/2025/02/25/Script-Launcher/">https://ktkr3d.github.io/2025/02/25/Script-Launcher/</a></li>
<li>バッチの設置<figure class="highlight bat"><figcaption><span>C:\repos\script-launcher\scripts\Edit_memo.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">robocopy \\<span class="number">192</span>.<span class="number">168</span>.<span class="number">11</span>.<span class="number">2</span>\media11\home\Documents <span class="variable">%USERPROFILE%</span>\Documents memo.txt /XO</span><br><span class="line">&quot;C:\Program Files (x86)\sakura\sakura.exe&quot; <span class="variable">%UserProfile%</span>\Documents\memo.txt</span><br><span class="line">timeout /t <span class="number">2</span> /nobreak &gt;<span class="built_in">nul</span></span><br><span class="line">robocopy <span class="variable">%USERPROFILE%</span>\Documents \\<span class="number">192</span>.<span class="number">168</span>.<span class="number">11</span>.<span class="number">2</span>\media11\home\Documents memo.txt /XO</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="クライアントLinux"><a href="#クライアントLinux" class="headerlink" title="クライアントLinux"></a>クライアントLinux</h4><ol>
<li>argosの導入<br>  <a href="https://github.com/p-e-w/argos">https://github.com/p-e-w/argos</a>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/p-e-w/argos</span><br><span class="line"><span class="built_in">cp</span> -r argos/argos@pew.worldwidemann.com/ ~/.local/share/gnome-shell/extensions/</span><br></pre></td></tr></table></figure></li>
<li>argos.shへの追記<figure class="highlight bash"><figcaption><span>~/.config/argos/argos.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Edit E List | iconName=edit-paste-symbolic bash=&#x27;rsync -a -u --info=progress2 -e ssh ubuntu@192.168.11.2:/mnt/d/home/Documents/memo.txt ~/Documents/ ; gnome-text-editor ~/Documents/memo.txt ; sleep 2 ; rsync -a -u --info=progress2 -e ssh ~/Documents/memo.txt ubuntu@192.168.11.2:/mnt/d/home/Documents/&#x27; terminal=false&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>ssh-copy-id<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id ubuntu@192.168.11.2</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul>
<li>サーバでは直接編集</li>
<li>クライアントではスクリプトを実行して編集</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Wayland + VSCode + text-input-v3</title>
    <url>/2025/03/06/Wayland-VSCode-text-input-v3/</url>
    <content><![CDATA[<p><img src="/images/wayland-vscode-textinputv3.png"></p>
<p>Visual Studio Code 1.98.0 でWaylandモードで日本語入力できるようになりました。Chromium 130以上が採用されていますのでtext-input-v3が動作します。<br>以前はmutter-text-input-v1を導入して実現しましたが、もうMutterを入れ替える必要はなくなりました。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">バージョン: 1.98.0</span></span><br><span class="line"><span class="section">コミット: 6609ac3d66f4eade5cf376d1cb76f13985724bcb</span></span><br><span class="line"><span class="section">日付: 2025-03-04T21:06:18.612Z</span></span><br><span class="line"><span class="section">Electron: 34.2.0</span></span><br><span class="line"><span class="section">ElectronBuildId: 11044223</span></span><br><span class="line"><span class="section">Chromium: 132.0.6834.196</span></span><br><span class="line"><span class="section">Node.js: 20.18.2</span></span><br><span class="line"><span class="section">V8: 13.2.152.36-electron.0</span></span><br><span class="line"><span class="section">OS: Linux x64 6.13.5-arch1-1</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux</li>
<li>GNOME Shell 47.5</li>
<li>Mutter 47.6</li>
<li>Visual Studio Code 1.98.0</li>
<li>text-input-v3</li>
</ul>
<h3 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h3><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight text"><figcaption><span>~/.config/code-flags.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">--enable-features=WaylandWindowDecorations</span><br><span class="line">--ozone-platform-hint=auto</span><br><span class="line">--enable-wayland-ime</span><br><span class="line">--wayland-text-input-version=3</span><br></pre></td></tr></table></figure>

<h4 id="mutter-fractional-scaling"><a href="#mutter-fractional-scaling" class="headerlink" title="mutter fractional scaling"></a>mutter fractional scaling</h4><p>125%</p>
]]></content>
      <tags>
        <tag>wayland</tag>
        <tag>textinput</tag>
      </tags>
  </entry>
  <entry>
    <title>ALG - Arka Linux GUI</title>
    <url>/2025/03/11/ALG-Arka-Linux-GUI/</url>
    <content><![CDATA[<p><img src="/images/alg-welcome.png"></p>
<p>Arch LinuxのGUIインストーラであるALG(Arka Linux GUI)を試してみました。<br><a href="https://github.com/arch-linux-gui/alg-releases">https://github.com/arch-linux-gui/alg-releases</a></p>
<p>Welcomeアプリ(alg-welcome)とOSインストーラ(calamares)で構成されているようです。<br>Calam-Arch-Installerのようにインストール中にデスクトップ環境を選択することはできないようですが、インストール時やインストール後に日本語が表示されるのは便利ですね。</p>
<span id="more"></span>

<h3 id="公開されているメディア"><a href="#公開されているメディア" class="headerlink" title="公開されているメディア"></a>公開されているメディア</h3><p><a href="https://sourceforge.net/projects/arch-linux-gui/files/">https://sourceforge.net/projects/arch-linux-gui/files/</a></p>
<table>
<thead>
<tr>
<th align="left">Folder</th>
<th align="left">File</th>
<th align="left">Date</th>
<th align="left">Size</th>
</tr>
</thead>
<tbody><tr>
<td align="left">beta-iso&#x2F;</td>
<td align="left">alg-plasma-2025.03-x86_64.iso</td>
<td align="left">2025-03-05</td>
<td align="left">3.0 GB</td>
</tr>
<tr>
<td align="left">experimental-editions&#x2F;</td>
<td align="left">archlinux-gui-zen-2022.07-x86_64.iso</td>
<td align="left">2022-07-07</td>
<td align="left">2.5 GB</td>
</tr>
<tr>
<td align="left">virtualbox-preview&#x2F;</td>
<td align="left">Arch-Linux-GUI-KDE.ova</td>
<td align="left">2021-01-09</td>
<td align="left">4.3 GB</td>
</tr>
<tr>
<td align="left">&#x2F;</td>
<td align="left">alg-plasma-2024.08-x86_64.iso</td>
<td align="left">2024-08-25</td>
<td align="left">2.8 GB</td>
</tr>
<tr>
<td align="left">&#x2F;</td>
<td align="left">alg-gnome-2024.08-x86_64.iso</td>
<td align="left">2024-08-25</td>
<td align="left">2.7 GB</td>
</tr>
<tr>
<td align="left">&#x2F;</td>
<td align="left">alg-xfce-2024.08-x86_64.iso</td>
<td align="left">2024-08-25</td>
<td align="left">2.3 GB</td>
</tr>
<tr>
<td align="left">&#x2F;</td>
<td align="left">alg-plasma-pure-2024.08-x86_64.iso</td>
<td align="left">2024-08-25</td>
<td align="left">2.0 GB</td>
</tr>
<tr>
<td align="left">&#x2F;</td>
<td align="left">alg-gnome-pure-2024.08-x86_64.iso</td>
<td align="left">2024-08-25</td>
<td align="left">1.7 GB</td>
</tr>
<tr>
<td align="left">&#x2F;</td>
<td align="left">alg-xfce-pure-2024.08-x86_64.iso</td>
<td align="left">2024-08-25</td>
<td align="left">1.5 GB</td>
</tr>
</tbody></table>
<p>私はGNOMEを利用するのですが、alg-gnomeとalg-gnome-pureでは以下の違いがありました。</p>
<ul>
<li>alg-gnome<br><a href="https://github.com/arch-linux-gui/alg-gnome/blob/master/packages.x86_64">https://github.com/arch-linux-gui/alg-gnome/blob/master/packages.x86_64</a><br>Firefox、LibreOffice、VLC、nvidiaなどのソフトウェアがインストールされる<br>AURヘルパーのparuがインストールされる<br>拡張機能(Apps Menu、User Theme)が有効になっている<br>アイコン(tela-circle-icon)や壁紙(archlinux-wallpaper)がカスタマイズされている<br>インストール時、インストール後の日本語表示(noto-fonts-cjk)に対応しているが日本語入力はできないっぽい</li>
<li>alg-gnome-pure<br><a href="https://github.com/arch-linux-gui/alg-gnome-pure/blob/main/packages.x86_64">https://github.com/arch-linux-gui/alg-gnome-pure/blob/main/packages.x86_64</a><br>GNOME標準のソフトウェアがインストールされる<br>日本語フォントは自分でインストールする必要がある</li>
</ul>
<h3 id="利用-alg-gnome-pureの場合"><a href="#利用-alg-gnome-pureの場合" class="headerlink" title="利用 (alg-gnome-pureの場合)"></a>利用 (alg-gnome-pureの場合)</h3><ol>
<li>Welcomeアプリ<br>  <img src="/images/alg-welcome.png"><br>  Update Mirrorlist (Japanを選択)<br>  <img src="/images/alg_update-mirrorlist.png"><br>  Update System</li>
<li>日本語フォントのインストール (インストーラの日本語表示用)<br>  スーパーキー + <code>A</code>を押下してアプリケーション一覧からTerminalを起動  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S otf-ipafont</span><br></pre></td></tr></table></figure>
  <code>/usr/share/fonts/OTF/*.ttf</code>にインストールされる</li>
<li>Arch Linuxのインストール<br>  WelcomeアプリでInstall ALGを選択<br>  自動ログインにしておくと便利</li>
<li>日本語フォントのコピー (初回ログイン後の日本語表示用)  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /tmp/calamares-root-&lt;乱数&gt;/home/&lt;アカウント名&gt;/.fonts/</span><br><span class="line"><span class="built_in">cp</span> /usr/share/fonts/OTF/*.ttf /tmp/calamares-root-&lt;乱数&gt;/home/&lt;アカウント名&gt;/.fonts/</span><br></pre></td></tr></table></figure></li>
<li>シャットダウン</li>
<li>インストールメディアの取り外し</li>
<li>起動</li>
<li>Welcomeアプリ<br>  Update Mirrorlist (Japanを選択)<br>  Update System</li>
<li>鍵の更新 (時間がかかる)  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S archlinux-keyring</span><br><span class="line"><span class="built_in">sudo</span> pacman-key --refresh-key</span><br></pre></td></tr></table></figure></li>
<li>アップデート  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -Syyu</span><br><span class="line"><span class="built_in">sudo</span> pacman -S noto-fonts-cjk</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>archlinux</tag>
        <tag>alg</tag>
      </tags>
  </entry>
  <entry>
    <title>Ghostty</title>
    <url>/2025/03/12/Ghostty/</url>
    <content><![CDATA[<p><img src="/images/ghostty-shaders.png"></p>
<p>ターミナルエミュレータGhostty 1.1.2を使ってみました。<br><a href="https://github.com/ghostty-org/ghostty">https://github.com/ghostty-org/ghostty</a></p>
<h4 id="今後の気になる情報"><a href="#今後の気になる情報" class="headerlink" title="今後の気になる情報"></a>今後の気になる情報</h4><ul>
<li>マイルストーン1.2<br><a href="https://github.com/ghostty-org/ghostty/milestone/5">https://github.com/ghostty-org/ghostty/milestone/5</a><br>ローカライズはマージされてた</li>
<li>Windows対応<br><a href="https://github.com/ghostty-org/ghostty/discussions/2563">https://github.com/ghostty-org/ghostty/discussions/2563</a></li>
</ul>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux</li>
<li>GNOME 47.5</li>
<li>ghostty 1.1.2</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>インストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S ghostty</span><br></pre></td></tr></table></figure></li>
<li>設定</li>
</ol>
<ul>
<li>設定ファイル<br>$HOME&#x2F;.config&#x2F;ghostty&#x2F;config</li>
<li>設定リファレンス<br><a href="https://ghostty.org/docs/config/reference">https://ghostty.org/docs/config/reference</a></li>
<li>フォントの変更<br>標準のままだと<code>!=</code>とかが合字になってしまって使いにくいので<br>標準の<code>JetBrainsMono Nerd Font</code> 13ptを<code>HackGen Console NF</code> 11ptに変更<figure class="highlight text"><figcaption><span>$HOME/.config/ghostty/config</span></figcaption><table><tr><td class="code"><pre><span class="line">font-family = HackGen Console NF</span><br><span class="line">font-size = 11</span><br><span class="line">font-feature = -calt</span><br><span class="line">font-feature = -dlig</span><br></pre></td></tr></table></figure></li>
<li>背景の透過<figure class="highlight text"><figcaption><span>$HOME/.config/ghostty/config</span></figcaption><table><tr><td class="code"><pre><span class="line">background-opacity = 0.9</span><br></pre></td></tr></table></figure></li>
<li>複数行貼り付けの確認ダイアログを抑止<figure class="highlight text"><figcaption><span>$HOME/.config/ghostty/config</span></figcaption><table><tr><td class="code"><pre><span class="line">clipboard-paste-protection = false</span><br></pre></td></tr></table></figure></li>
<li>カスタムシェーダ (実用的かはさておき)<br><a href="https://github.com/hackr-sh/ghostty-shaders">https://github.com/hackr-sh/ghostty-shaders</a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/hackr-sh/ghostty-shaders.git <span class="variable">$HOME</span>/.config/ghostty/shaders</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><figcaption><span>$HOME/.config/ghostty/config</span></figcaption><table><tr><td class="code"><pre><span class="line">background-opacity = 0.5</span><br><span class="line">custom-shader-animation = always</span><br><span class="line"></span><br><span class="line">custom-shader = ./shaders/animated-gradient-shader.glsl</span><br><span class="line">#custom-shader = ./shaders/bettercrt.glsl</span><br><span class="line">#custom-shader = ./shaders/bloom.glsl</span><br><span class="line">#custom-shader = ./shaders/cineShader-Lava.glsl</span><br><span class="line">#custom-shader = ./shaders/crt.glsl</span><br><span class="line">#custom-shader = ./shaders/cubes.glsl</span><br><span class="line">#custom-shader = ./shaders/dither.glsl</span><br><span class="line">#custom-shader = ./shaders/drunkard.glsl</span><br><span class="line">#custom-shader = ./shaders/fireworks-rockets.glsl</span><br><span class="line">#custom-shader = ./shaders/fireworks.glsl</span><br><span class="line">#custom-shader = ./shaders/galaxy.glsl</span><br><span class="line">#custom-shader = ./shaders/gears-and-belts.glsl</span><br><span class="line">#custom-shader = ./shaders/glitchy.glsl</span><br><span class="line">#custom-shader = ./shaders/glow-rgbsplit-twitchy.glsl</span><br><span class="line">#custom-shader = ./shaders/gradient-background.glsl</span><br><span class="line">#custom-shader = ./shaders/in-game-crt.glsl</span><br><span class="line">#custom-shader = ./shaders/inside-the-matrix.glsl</span><br><span class="line">#custom-shader = ./shaders/just-snow.glsl</span><br><span class="line">#custom-shader = ./shaders/matrix-hallway.glsl</span><br><span class="line">#custom-shader = ./shaders/negative.glsl</span><br><span class="line">#custom-shader = ./shaders/retro-terminal.glsl</span><br><span class="line">#custom-shader = ./shaders/sin-interference.glsl</span><br><span class="line">#custom-shader = ./shaders/smoke-and-ghost.glsl</span><br><span class="line">#custom-shader = ./shaders/sparks-from-fire.glsl</span><br><span class="line">#custom-shader = ./shaders/spotlight.glsl</span><br><span class="line">#custom-shader = ./shaders/starfield-colors.glsl</span><br><span class="line">#custom-shader = ./shaders/starfield.glsl</span><br><span class="line">#custom-shader = ./shaders/tft.glsl</span><br><span class="line">#custom-shader = ./shaders/underwater.glsl</span><br><span class="line">#custom-shader = ./shaders/water.glsl</span><br></pre></td></tr></table></figure>
環境によっては動作しないものもあるかもしれない<br>シェーダーは重ね掛けが可能<br><a href="https://github.com/cmgriffing/ghostty-shaders">https://github.com/cmgriffing/ghostty-shaders</a></li>
<li>Shader Toy<br>このサイトのサンプルはそのまま利用できる<br><a href="https://www.shadertoy.com/browse">https://www.shadertoy.com/browse</a></li>
<li>カラーテーマ<br>以下コマンドでカラーテーマをプレビュー<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ghostty +list-themes</span><br></pre></td></tr></table></figure>
<code>/</code>で検索、<code>Q</code>で抜ける<figure class="highlight text"><figcaption><span>$HOME/.config/ghostty/config</span></figcaption><table><tr><td class="code"><pre><span class="line">theme = Monokai Remastered</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="ショートカット"><a href="#ショートカット" class="headerlink" title="ショートカット"></a>ショートカット</h4><table>
<thead>
<tr>
<th align="left">動作</th>
<th align="left">ショートカット</th>
</tr>
</thead>
<tbody><tr>
<td align="left">設定ファイルの表示</td>
<td align="left">Ctrl + ,</td>
</tr>
<tr>
<td align="left">コピー</td>
<td align="left">Ctrl + Shift + C</td>
</tr>
<tr>
<td align="left">ペースト</td>
<td align="left">Ctrl + Shift + V</td>
</tr>
<tr>
<td align="left">右に分割</td>
<td align="left">Ctrl + Shift + O</td>
</tr>
<tr>
<td align="left">下に分割</td>
<td align="left">Ctrl + Shift + E</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>ghostty</tag>
      </tags>
  </entry>
  <entry>
    <title>Ghostty Shaders</title>
    <url>/2025/03/14/Ghostty-Shaders/</url>
    <content><![CDATA[<p><img src="/images/ghostty_shaders.png"></p>
<p>ターミナルエミュレータGhosttyのシェーダ機能を試してみました。</p>
<p>以下のサイトのコードがほぼそのまま利用できました。<br>残念ながらテクスチャを利用するコードは使えませんでした。<br><a href="https://www.shadertoy.com/">https://www.shadertoy.com/</a></p>
<p>コードを改造することによりターミナルエミュレータとして利用可能になります。</p>
<div class="video-container"><iframe src="https://www.youtube.com/embed/h02c9RyyfPQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div>

<p>iChannel0にはターミナルエミュレータの出力が割り当てられていて変更はできないようです。<br><code>custom-shader-ichannel1 = ./texture.png</code> みたいなテクスチャのローダが実装されないかなぁ。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux</li>
<li>GNOME 47.5</li>
<li>ghostty 1.1.2</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><p>以下のサイトのサンプルコードを利用します。<br><a href="https://www.shadertoy.com/">https://www.shadertoy.com/</a></p>
<h4 id="サンプル1"><a href="#サンプル1" class="headerlink" title="サンプル1"></a>サンプル1</h4><p><img src="/images/ghostty_shaders.png"></p>
<ol>
<li>以下のサンプルコードをファイルに保存します。  <table>
  <tr><td>URL<td>https://www.shadertoy.com/view/Xds3zN
  <tr><td>FILE<td>$HOME/.config/ghostty/shaders/raymarching_primitives.glsl
  </table></li>
<li>Ghosttyの設定ファイルでGLSLファイルを指定します。  <figure class="highlight text"><figcaption><span>$HOME/.config/ghostty/config</span></figcaption><table><tr><td class="code"><pre><span class="line">custom-shader = ./shaders/raymarching_primitives.glsl</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="サンプル2"><a href="#サンプル2" class="headerlink" title="サンプル2"></a>サンプル2</h4><div class="video-container"><iframe src="https://www.youtube.com/embed/h02c9RyyfPQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div>

<ol>
<li>以下のサンプルコードをファイルに保存します。  <table>
  <tr><td>URL<td>https://www.shadertoy.com/view/Ms2XzK
  <tr><td>FILE<td>$HOME/.config/ghostty/shaders/nyancat.glsl
  </table></li>
<li>最後の方のコードを修正します  <figure class="highlight glsl"><figcaption><span>$HOME/.config/ghostty/shaders/mario.glsl</span></figcaption><table><tr><td class="code"><pre><span class="line">    <span class="type">vec4</span> rainbow = getRainbowAt(uv, nyan_p);</span><br><span class="line">    col = <span class="built_in">mix</span>(col, rainbow, rainbow.a);</span><br><span class="line marked">    <span class="comment">//vec4 nyan = getNyanAt(uv, nyan_p, nyan_s);</span></span><br><span class="line">    </span><br><span class="line marked">    <span class="comment">//col = mix(col, nyan, nyan.a);</span></span><br><span class="line"></span><br><span class="line marked">    <span class="comment">//fragColor = vec4(col);</span></span><br><span class="line">  </span><br><span class="line marked">    <span class="type">vec4</span> terminalColor = <span class="built_in">texture</span>(iChannel0, uv);</span><br><span class="line marked">    fragColor = <span class="type">vec4</span>(col + terminalColor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Ghosttyの設定ファイルでGLSLファイルを指定します。  <figure class="highlight text"><figcaption><span>$HOME/.config/ghostty/config</span></figcaption><table><tr><td class="code"><pre><span class="line">custom-shader = ./shaders/nyancat.glsl</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="サンプル3"><a href="#サンプル3" class="headerlink" title="サンプル3"></a>サンプル3</h4><div class="video-container"><iframe src="https://www.youtube.com/embed/nGdBKGPp-OE" frameborder="0" loading="lazy" allowfullscreen></iframe></div>

<ol>
<li>以下のサンプルコードをファイルに保存します。  <table>
  <tr><td>URL<td>https://www.shadertoy.com/view/XtlSD7
  <tr><td>FILE<td>$HOME/.config/ghostty/shaders/mario.glsl
  </table></li>
<li>最後の方のコードを修正します  <figure class="highlight glsl"><figcaption><span>$HOME/.config/ghostty/shaders/mario.glsl</span></figcaption><table><tr><td class="code"><pre><span class="line marked">    <span class="comment">// fragColor.xyz 	= color;</span></span><br><span class="line marked">    <span class="comment">// fragColor.w		= 1.0;</span></span><br><span class="line"></span><br><span class="line marked">    <span class="type">vec4</span> col = <span class="type">vec4</span>(color, <span class="number">1.0</span>);</span><br><span class="line marked">    <span class="type">vec4</span> terminalColor = <span class="built_in">texture</span>(iChannel0, uv);</span><br><span class="line marked">    fragColor = <span class="type">vec4</span>(col + terminalColor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Ghosttyの設定ファイルでGLSLファイルを指定します。  <figure class="highlight text"><figcaption><span>$HOME/.config/ghostty/config</span></figcaption><table><tr><td class="code"><pre><span class="line">custom-shader = ./shaders/mario.glsl</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>ghostty</tag>
      </tags>
  </entry>
  <entry>
    <title>GNOME 48</title>
    <url>/2025/03/20/GNOME-48/</url>
    <content><![CDATA[<p><img src="/images/arch_gnome48_gnome-unstable.png"><br>GNOME 48がリリースされたのでArch LinuxにGNOME 48.0 (gnome-unstableリポジトリ)を導入してみました。<br><a href="https://release.gnome.org/48/">https://release.gnome.org/48/</a><br><a href="https://archlinux.org/groups/x86_64/gnome/">https://archlinux.org/groups/x86_64/gnome/</a></p>
<p>GNOME関連アプリが起動しません。extraリポジトリに反映されるのをまちましょう。</p>
<h4 id="2025-03-23-追記"><a href="#2025-03-23-追記" class="headerlink" title="2025-03-23 追記"></a>2025-03-23 追記</h4><p><a href="https://archlinux.org/groups/x86_64/gnome/">https://archlinux.org/groups/x86_64/gnome/</a><br>GNOME 48がextraリポジトリに来ました。</p>
<p>Chrome起動時のグローバルショートカットのポップアップ抑止<br><a href="https://www.reddit.com/r/gnome/comments/1jfejor/psa_chromechromiumbased_browsers_and_gnome_48/">https://www.reddit.com/r/gnome/comments/1jfejor/psa_chromechromiumbased_browsers_and_gnome_48/</a></p>
<figure class="highlight text"><figcaption><span>~/.config/chrome-flags.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">--disable-features=GlobalShortcutsPortal</span><br></pre></td></tr></table></figure>
<h4 id="2025-03-20-追記"><a href="#2025-03-20-追記" class="headerlink" title="2025-03-20 追記"></a>2025-03-20 追記</h4><p><img src="/images/arch_gnome48_extra-testing.png"></p>
<p><a href="https://archlinux.org/groups/x86_64/gnome/">https://archlinux.org/groups/x86_64/gnome/</a><br>GNOME 48.0 (extra-testing リポジトリ) に入りました。<br>gnome-control-center, gnome-terminal, gnome-text-editor, nautilus, argos が動くようになりました。</p>
<ol>
<li><p>リポジトリの追加<br>  <a href="https://wiki.archlinux.jp/index.php/%E5%85%AC%E5%BC%8F%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA#extra-testing">https://wiki.archlinux.jp/index.php/公式リポジトリ#extra-testing</a></p>
  <figure class="highlight ini"><figcaption><span>/etc/pacman.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[extra-testing]</span></span><br><span class="line"><span class="attr">Include</span> = /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>
  <div class="note info flat"><p><code>[extra]</code>の前に<code>[extra-testing]</code>を挿入する。</p>
</div>
</li>
<li><p>パッケージの更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -Syyu</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<span id="more"></span>

<a href="https://www.gnome.org/" target="_blank" rel="nofollow" class="link-preview"><div class="og-image"><img src="https://www.gnome.org/img/card.png" alt="GNOME" class="not-gallery-item" loading="lazy"></div><div class="descriptions"><div class="og-title">GNOME</div><div class="og-description">An easy and elegant way to use your computer</div></div></a>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux</li>
<li>GNOME 48.0 (gnome-unstable)</li>
<li>VirtualBox</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol start="0">
<li><p>作業をする前にVirtualBoxのスナップショットを作成しておく</p>
</li>
<li><p>リポジトリの追加<br>  <a href="https://wiki.archlinux.jp/index.php/%E5%85%AC%E5%BC%8F%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA#gnome-unstable">https://wiki.archlinux.jp/index.php/公式リポジトリ#gnome-unstable</a></p>
  <figure class="highlight ini"><figcaption><span>/etc/pacman.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[gnome-unstable]</span></span><br><span class="line"><span class="attr">Include</span> = /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>
  <div class="note info flat"><p><code>[extra]</code>の前に<code>[gnome-unstable]</code>を挿入する。</p>
</div>
</li>
<li><p>パッケージの更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -Syyu</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
</li>
<li><p>GNOME Shell Extensionのmetadata.jsonの更新<br>extension-manager で時計マークになっている拡張機能についてバージョン48を追加する</p>
<figure class="highlight json"><figcaption><span>metadata.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;shell-version&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;47&quot;</span><span class="punctuation">,</span><span class="string">&quot;48&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="実行結果"><a href="#実行結果" class="headerlink" title="実行結果"></a>実行結果</h3><h4 id="GNOME"><a href="#GNOME" class="headerlink" title="GNOME"></a>GNOME</h4><ul>
<li>gnome-control-center<br>起動しない<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gnome-control-center</span><br><span class="line">gnome-control-center: symbol lookup error: gnome-control-center: undefined symbol: adw_toggle_group_get_toggle, version LIBADWAITA_1_0</span><br></pre></td></tr></table></figure></li>
<li>gnome-terminal<br>起動しない<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gnome-terminal</span><br><span class="line"><span class="comment"># Error creating terminal: Could not activate remote peer &#x27;org.gnome.Terminal&#x27;: startup job failed</span></span><br></pre></td></tr></table></figure></li>
<li>gnome-text-editor<br>起動しない<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gnome-text-editor</span><br><span class="line">gnome-text-editor: symbol lookup error: gnome-text-editor: undefined symbol: gtk_file_dialog_save_text_file</span><br></pre></td></tr></table></figure></li>
<li>nautilus<br>起動しない<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nautilus</span><br><span class="line">nautilus: symbol lookup error: nautilus: undefined symbol: gtk_list_box_set_tab_behavior</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="GNOME-Shell-Extension"><a href="#GNOME-Shell-Extension" class="headerlink" title="GNOME Shell Extension"></a>GNOME Shell Extension</h4><ul>
<li>argos<br>タスクバーに表示されメニューも表示されるが、gnome-terminalの起動に失敗する<br>GNOME側の問題と思われる</li>
<li>date menu formatter<br>動作する</li>
<li>forge<br>動作する</li>
</ul>
<h4 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h4><ul>
<li>extension-manager<br>動作する</li>
<li>ghostty<br>動作する</li>
</ul>
]]></content>
      <tags>
        <tag>gnome</tag>
        <tag>archlinux</tag>
      </tags>
  </entry>
  <entry>
    <title>RPi4B - Arch Linux</title>
    <url>/2025/03/27/RPi4B-Arch-Linux/</url>
    <content><![CDATA[<p><img src="/images/rpi4b_arch_gnome.png"></p>
<p>Raspberry Pi 4BにArch Linux (64it)をインストールしてみました。</p>
<p><a href="https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-4">https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-4</a></p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Raspberry Pi 4B</li>
<li>32GB SDカード<ul>
<li>Arch Linux</li>
</ul>
</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="作業PC"><a href="#作業PC" class="headerlink" title="作業PC"></a>作業PC</h4><ol>
<li><p>gpartedでSDカードのパーティションを削除しておく</p>
</li>
<li><p>rootで作業する</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure></li>
<li><p>Start fdisk to partition the SD card:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sdX</span><br></pre></td></tr></table></figure>
  <div class="note info flat"><p>私の環境では&#x2F;dev&#x2F;sdaでした</p>
</div></li>
<li><p>At the fdisk prompt, delete old partitions and create a new one:</p>
<table>
<thead>
<tr>
<th align="left">入力</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><kbd>o</kbd></td>
<td align="left">This will clear out any partitions on the drive</td>
</tr>
<tr>
<td align="left"><kbd>p</kbd></td>
<td align="left">list partitions. There should be no partitions left</td>
</tr>
<tr>
<td align="left"><kbd>n</kbd><br /><kbd>p</kbd><br /><kbd>1</kbd><br /><kbd>ENTER</kbd><br />+400M</td>
<td align="left">the first partition on the drive</td>
</tr>
<tr>
<td align="left"><kbd>t</kbd><br /><kbd>c</kbd></td>
<td align="left">set the first partition to type W95 FAT32 (LBA).</td>
</tr>
<tr>
<td align="left"><kbd>n</kbd><br /><kbd>p</kbd><br /><kbd>2</kbd><br /><kbd>ENTER</kbd><br /><kbd>ENTER</kbd></td>
<td align="left">the second partition on the drive</td>
</tr>
<tr>
<td align="left"><kbd>w</kbd></td>
<td align="left">Write the partition table and exit</td>
</tr>
</tbody></table>
</li>
<li><p>Create and mount the FAT filesystem:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.vfat /dev/sdX1</span><br><span class="line"><span class="built_in">mkdir</span> boot</span><br><span class="line">mount /dev/sdX1 boot</span><br></pre></td></tr></table></figure></li>
<li><p>Create and mount the ext4 filesystem:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/sdX2</span><br><span class="line"><span class="built_in">mkdir</span> root</span><br><span class="line">mount /dev/sdX2 root</span><br></pre></td></tr></table></figure></li>
<li><p>Download and extract the root filesystem (as root, not via sudo):</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-aarch64-latest.tar.gz</span><br><span class="line">bsdtar -xpf ArchLinuxARM-rpi-aarch64-latest.tar.gz -C root</span><br><span class="line"><span class="built_in">sync</span></span><br></pre></td></tr></table></figure></li>
<li><p>Move boot files to the first partition:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> root/boot/* boot</span><br></pre></td></tr></table></figure></li>
<li><p>Edit fstab</p>
  <figure class="highlight text"><figcaption><span>root/etc/fstab</span></figcaption><table><tr><td class="code"><pre><span class="line"># Static information about the filesystems.</span><br><span class="line"># See fstab(5) for details.</span><br><span class="line"></span><br><span class="line"># &lt;file system&gt; &lt;dir&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;</span><br><span class="line">#/dev/mmcblk0p1  /boot   vfat    defaults        0       0</span><br><span class="line">/dev/mmcblk1p1  /boot   vfat    defaults        0       0</span><br><span class="line">/dev/mmcblk1p2  /       ext4    defaults        0       0</span><br></pre></td></tr></table></figure></li>
<li><p>Unmount the two partitions:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount boot root</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Raspberry-Pi-1"><a href="#Raspberry-Pi-1" class="headerlink" title="Raspberry Pi (1)"></a>Raspberry Pi (1)</h4><ol start="11">
<li>Insert the SD card into the Raspberry Pi, connect ethernet, and apply 5V power.</li>
<li>Use the serial console or SSH to the IP address given to the board by your router.</li>
</ol>
<ul>
<li>Login as the default user alarm with the password alarm.</li>
<li>The default root password is root.</li>
</ul>
<ol start="13">
<li>rootで作業する  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure></li>
<li>Initialize the pacman keyring and populate the Arch Linux ARM package signing keys:  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman-key --init</span><br><span class="line">pacman-key --populate archlinuxarm</span><br></pre></td></tr></table></figure></li>
<li>ミラーの設定  <figure class="highlight text"><figcaption><span>/etc/pacman.d/mirrorlist</span></figcaption><table><tr><td class="code"><pre><span class="line">### Japan</span><br><span class="line">## Tokyo</span><br><span class="line"># Server = http://jp.mirror.archlinuxarm.org/$arch/$repo</span><br><span class="line">Server = http://jp.mirror.archlinuxarm.org/$arch/$repo</span><br></pre></td></tr></table></figure></li>
<li>パッケージの更新  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -Syu</span><br></pre></td></tr></table></figure></li>
<li>base-develのインストール  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">pacman -S <span class="keyword">base</span>-devel</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Raspberry-Pi-2"><a href="#Raspberry-Pi-2" class="headerlink" title="Raspberry Pi (2)"></a>Raspberry Pi (2)</h4><ol start="17">
<li>gnomeのインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S gnome</span><br></pre></td></tr></table></figure></li>
<li>GDMのインストールと有効化  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S gdm</span><br><span class="line">systemctl <span class="built_in">enable</span> gdm</span><br></pre></td></tr></table></figure></li>
<li>タイムゾーンの設定  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://ipapi.co/timezone</span><br><span class="line">timedatectl set-timezone <span class="string">&quot;Asia/Tokyo&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>ロケールの設定  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">locale-gen</span><br><span class="line">localectl set-locale LANG=<span class="string">&quot;en_US.UTF-8&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>再起動  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul>
<li>ChromiumはFlatpak版が動作する</li>
<li>alarmのユーザ名を変更(ユーザIDはそのまま)<br>GDMの画面で、<br><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>F4</kbd><br>rootでログイン<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod -l <span class="built_in">arch</span> alarm</span><br><span class="line">groupmod -n <span class="built_in">arch</span> alarm</span><br><span class="line">usermod -d /home/arch -m <span class="built_in">arch</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>F1</kbd></li>
<li>visudo</li>
<li>openssh<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S openssh</span><br></pre></td></tr></table></figure></li>
<li>ホスト名の変更<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname rpi4b</span><br></pre></td></tr></table></figure></li>
<li>Bluetoothの有効化<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S bluez bluez-utils gnome-bluetooth-3.0</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> bluetooth</span><br><span class="line"><span class="built_in">sudo</span> systemctl start bluetooth</span><br></pre></td></tr></table></figure></li>
<li>その他設定<br><a href="https://ktkr3d.github.io/archlinux/">https://ktkr3d.github.io/archlinux/</a><br><a href="https://ktkr3d.github.io/GNOME/">https://ktkr3d.github.io/GNOME/</a></li>
</ul>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ul>
<li>Wifi</li>
<li>pritunl&#x2F;wireguard</li>
<li>rdp<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S gnome-remote-desktop freerdp inetutils</span><br><span class="line">RDP_USER=<span class="string">&quot;<span class="variable">$&#123;USER&#125;</span>&quot;</span></span><br><span class="line">RDP_PASS=<span class="string">&quot;12345678&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> -u gnome-remote-desktop sh -c <span class="string">&#x27;mkdir -p ~/.local/share/gnome-remote-desktop/&#x27;</span></span><br><span class="line"><span class="built_in">sudo</span> -u gnome-remote-desktop sh -c <span class="string">&quot;openssl req -new -newkey rsa:4096 -days 720 -nodes -x509 -subj /C=SE/ST=NONE/L=NONE/O=GNOME/CN=<span class="subst">$(hostname)</span> -out ~/.local/share/gnome-remote-desktop/tls.crt -keyout ~/.local/share/gnome-remote-desktop/tls.key&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> grdctl --system rdp set-tls-key ~gnome-remote-desktop/.local/share/gnome-remote-desktop/tls.key</span><br><span class="line"><span class="built_in">sudo</span> grdctl --system rdp set-tls-cert ~gnome-remote-desktop/.local/share/gnome-remote-desktop/tls.crt</span><br><span class="line"><span class="built_in">sudo</span> grdctl --system rdp set-credentials <span class="string">&quot;<span class="variable">$&#123;RDP_USER&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;RDP_PASS&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> grdctl --system rdp <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>
接続しても画面が真っ黒・・・</li>
<li>networkmanager<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S networkmanager</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>raspberrypi</tag>
        <tag>archlinux</tag>
      </tags>
  </entry>
  <entry>
    <title>GNOME Remote Desktop</title>
    <url>/2025/03/30/GNOME-Remote-Desktop/</url>
    <content><![CDATA[<p><img src="/images/gnome-remote-desktop.png"></p>
<p>LinuxにGNOME Remote Desktopサービスを導入してクライアントからRDP接続してみました。接続するとGDM画面からログインできます。</p>
<p><a href="https://gitlab.gnome.org/GNOME/gnome-remote-desktop">https://gitlab.gnome.org/GNOME/gnome-remote-desktop</a></p>
<span id="more"></span>

<h3 id="環境と動作確認結果（途中）"><a href="#環境と動作確認結果（途中）" class="headerlink" title="環境と動作確認結果（途中）"></a>環境と動作確認結果（途中）</h3><p>3つのモードがあるようです。</p>
<ul>
<li>Remote assistance &#x2F; Desktop sharing<br>既存のユーザセッション画面を共有する。</li>
<li>Headless multi user remote login &#x2F; Remote login<br>画面のサイズ指定可能。GDMから操作可能。</li>
<li>Headless (single user)<br>画面のサイズ指定可能。既存のユーザセッション画面とは別に画面表示する（セッション情報は共有しているっぽい）。</li>
</ul>
<table>
<thead>
<tr>
<th align="left">Server</th>
<th align="left">OS</th>
<th align="left">RA&nbsp;&nbsp;&nbsp;</th>
<th align="left">HL-M</th>
<th align="left">HL-S</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PC</td>
<td align="left">Arch</td>
<td align="left">OK</td>
<td align="left">OK</td>
<td align="left">OK</td>
</tr>
<tr>
<td align="left">&nbsp;</td>
<td align="left">Ubuntu</td>
<td align="left">OK</td>
<td align="left">OK</td>
<td align="left">未</td>
</tr>
<tr>
<td align="left">&nbsp;</td>
<td align="left">Fedora</td>
<td align="left">未</td>
<td align="left">未</td>
<td align="left">未</td>
</tr>
<tr>
<td align="left">RPi 4B</td>
<td align="left">Arch</td>
<td align="left">OK</td>
<td align="left">未</td>
<td align="left">OK</td>
</tr>
<tr>
<td align="left">&nbsp;</td>
<td align="left">Ubuntu</td>
<td align="left">OK</td>
<td align="left">OK</td>
<td align="left">未</td>
</tr>
<tr>
<td align="left">VBox</td>
<td align="left">Arch</td>
<td align="left">OK</td>
<td align="left">OK</td>
<td align="left">未</td>
</tr>
<tr>
<td align="left">&nbsp;</td>
<td align="left">Ubuntu</td>
<td align="left">未</td>
<td align="left">未</td>
<td align="left">未</td>
</tr>
<tr>
<td align="left">&nbsp;</td>
<td align="left">Fedora</td>
<td align="left">未</td>
<td align="left">未</td>
<td align="left">未</td>
</tr>
</tbody></table>
<h3 id="構築-GUIの場合"><a href="#構築-GUIの場合" class="headerlink" title="構築 - GUIの場合"></a>構築 - GUIの場合</h3><h4 id="Desktop-Sharing"><a href="#Desktop-Sharing" class="headerlink" title="Desktop Sharing"></a>Desktop Sharing</h4><p><img src="/images/grd_desktop_sharing.png"></p>
<h4 id="Remote-Login"><a href="#Remote-Login" class="headerlink" title="Remote Login"></a>Remote Login</h4><p><img src="/images/grd_remote_login.png"></p>
<div class="note info flat"><p>Remote Loginを有効にするとDesktop Sharingのポート番号が変更される。</p>
</div>

<h3 id="構築-CUIの場合"><a href="#構築-CUIの場合" class="headerlink" title="構築 - CUIの場合"></a>構築 - CUIの場合</h3><h4 id="GRD-Remote-assistance"><a href="#GRD-Remote-assistance" class="headerlink" title="GRD - Remote assistance"></a>GRD - Remote assistance</h4><ol>
<li><p>Generate a TLS key and certificate.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.local/share/gnome-remote-desktop/</span><br><span class="line">openssl req -new -newkey rsa:4096 -days 720 -nodes -x509 -subj /C=SE/ST=NONE/L=NONE/O=GNOME/CN=$(hostname) -out ~/.local/share/gnome-remote-desktop/tls.crt -keyout ~/.local/share/gnome-remote-desktop/tls.key</span><br></pre></td></tr></table></figure>
</li>
<li><p>Configure GNOME Remote Desktop:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grdctl rdp set-tls-key ~/.local/share/gnome-remote-desktop/tls.key</span><br><span class="line">grdctl rdp set-tls-cert ~/.local/share/gnome-remote-desktop/tls.crt</span><br><span class="line">grdctl rdp set-credentials <span class="comment"># Enter credentials via standard input</span></span><br><span class="line">grdctl rdp <span class="built_in">enable</span></span><br><span class="line">grdctl rdp disable-view-only</span><br></pre></td></tr></table></figure>
</li>
<li><p>Enable remote assistance user service.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl --user <span class="built_in">enable</span> --now gnome-remote-desktop.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>Disable remote assistance user service.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl --user <span class="built_in">disable</span> --now gnome-remote-desktop.service</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="GRD-Headless-multi-user-remote-login"><a href="#GRD-Headless-multi-user-remote-login" class="headerlink" title="GRD - Headless multi user remote login"></a>GRD - Headless multi user remote login</h4><ol>
<li><p>Generate a TLS key and certificate.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -u gnome-remote-desktop sh -c <span class="string">&#x27;mkdir -p ~/.local/share/gnome-remote-desktop/&#x27;</span></span><br><span class="line"><span class="built_in">sudo</span> -u gnome-remote-desktop sh -c <span class="string">&quot;openssl req -new -newkey rsa:4096 -days 720 -nodes -x509 -subj /C=SE/ST=NONE/L=NONE/O=GNOME/CN=<span class="subst">$(hostname)</span> -out ~/.local/share/gnome-remote-desktop/tls.crt -keyout ~/.local/share/gnome-remote-desktop/tls.key&quot;</span></span><br></pre></td></tr></table></figure>
  <div class="note info flat"><p><code>/var/lib/gnome-remote-desktop/.local/share/gnome-remote-desktop/</code> に格納されます。</p>
</div>
</li>
<li><p>Configure GNOME Remote Desktop:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> grdctl --system rdp set-tls-key ~gnome-remote-desktop/.local/share/gnome-remote-desktop/tls.key</span><br><span class="line"><span class="built_in">sudo</span> grdctl --system rdp set-tls-cert ~gnome-remote-desktop/.local/share/gnome-remote-desktop/tls.crt</span><br><span class="line"><span class="built_in">sudo</span> grdctl --system rdp set-credentials <span class="comment"># Enter credentials via standard input</span></span><br><span class="line"><span class="built_in">sudo</span> grdctl --system rdp <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Enable system remote login service.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now gnome-remote-desktop.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>Disable system remote login service.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> --now gnome-remote-desktop.service</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="GRD-Headless-single-user"><a href="#GRD-Headless-single-user" class="headerlink" title="GRD - Headless (single user)"></a>GRD - Headless (single user)</h4><ol>
<li><p>Generate a TLS key and certificate.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.local/share/gnome-remote-desktop/</span><br><span class="line">openssl req -new -newkey rsa:4096 -days 720 -nodes -x509 -subj /C=SE/ST=NONE/L=NONE/O=GNOME/CN=$(hostname) -out ~/.local/share/gnome-remote-desktop/tls.crt -keyout ~/.local/share/gnome-remote-desktop/tls.key</span><br></pre></td></tr></table></figure>
</li>
<li><p>Configure GNOME Remote Desktop:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grdctl --headless rdp set-tls-key ~/.local/share/gnome-remote-desktop/tls.key</span><br><span class="line">grdctl --headless rdp set-tls-cert ~/.local/share/gnome-remote-desktop/tls.crt</span><br><span class="line">grdctl --headless rdp set-credentials <span class="comment"># Enter credentials via standard input</span></span><br><span class="line">grdctl --headless rdp <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Enable headless single user service.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl --user <span class="built_in">enable</span> --now gnome-remote-desktop-headless.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>Disable headless single user service.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl --user <span class="built_in">disable</span> --now gnome-remote-desktop-headless.service</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ul>
<li>Windows<ul>
<li>リモートデスクトップ接続(mstsc)</li>
</ul>
</li>
<li>Linux<ul>
<li>remmina</li>
<li>gnome-connetions</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>gnome</tag>
        <tag>rdp</tag>
      </tags>
  </entry>
  <entry>
    <title>Wireguard-ui</title>
    <url>/2025/04/03/wireguard-ui/</url>
    <content><![CDATA[<p>Wireguard-uiを使ってRaspberry Pi 4BにVPNサーバ環境を構築しました。<br>Wireguard-uiはGUI操作でWireguardのサーバ用設定ファイル(wg0.conf)やクライアント用の設定ファイル&#x2F;QRコードを生成できます。<br>また、Wake on LANの機能もあります。<br>MTUとPost Up&#x2F;Downスクリプトの指定方法について試行錯誤しました。</p>
<div class="github-card" data-github="ngoduykhanh/wireguard-ui" data-width="100%"></div>
<script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script>

<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><p><img src="/images/wireguard-rpi4b.drawio.svg"></p>
<ul>
<li>Raspberry Pi 4B</li>
<li>Ubuntu 24.10 (arm64)</li>
<li>wireguard 1.0.20210914</li>
<li>wireguard-ui v0.6.2</li>
<li>インターネット回線はv6プラス</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="v6プラス接続環境の調査"><a href="#v6プラス接続環境の調査" class="headerlink" title="v6プラス接続環境の調査"></a>v6プラス接続環境の調査</h4><ol>
<li>公開IPv4アドレスと公開IPv6アドレスを確認<br>  <a href="https://test-ipv6.com/">https://test-ipv6.com/</a></li>
<li>公開IPv6 アドレスから公開可能なポート番号を確認<br>  <a href="http://ipv4.web.fc2.com/map-e.html">http://ipv4.web.fc2.com/map-e.html</a></li>
<li>公開するポート番号を決定<br>  例えば60000&#x2F;udp  <div class="note info flat"><p>Wireguardの使用プロトコルはudpです。</p>
</div></li>
<li>Wireguardを構築するサーバのローカルIPアドレスを確認  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure>
  例えば192.168.11.24, NIC eth0</li>
<li>ルータでポートフォワード設定<br>  インターネットからの60000&#x2F;udpアクセスを192.168.11.24の60000&#x2F;udpに転送  <div class="note info flat"><p>同じポート番号にする必要があります。</p>
</div></li>
</ol>
<h4 id="Wireguardのインストール"><a href="#Wireguardのインストール" class="headerlink" title="Wireguardのインストール"></a>Wireguardのインストール</h4><ol>
<li>インストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install wireguard</span><br></pre></td></tr></table></figure>
  <div class="note info flat"><p>wireguardとwireguard-toolsパッケージがインストールされます。</p>
</div></li>
</ol>
<h4 id="Wireguard-uiのインストール"><a href="#Wireguard-uiのインストール" class="headerlink" title="Wireguard-uiのインストール"></a>Wireguard-uiのインストール</h4><ol>
<li>インストール<br>  <a href="https://github.com/ngoduykhanh/wireguard-ui/releases">https://github.com/ngoduykhanh/wireguard-ui/releases</a><br>  raspberry pi &#x2F; Ubuntu arm64 の場合はwireguard-ui-v0.6.2-linux-arm64.tar.gz  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VERSION=v0.6.2</span><br><span class="line">wget https://github.com/ngoduykhanh/wireguard-ui/releases/download/<span class="variable">$&#123;VERSION&#125;</span>/wireguard-ui-<span class="variable">$&#123;VERSION&#125;</span>-linux-arm64.tar.gz</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /opt/wireguard</span><br><span class="line"><span class="built_in">sudo</span> tar xvf wireguard-ui-<span class="variable">$&#123;VERSION&#125;</span>-linux-arm64.tar.gz -C /opt/wireguard/</span><br></pre></td></tr></table></figure></li>
<li>ユニットファイルの作成  <figure class="highlight bash"><figcaption><span>/etc/systemd/system/wgui-worker.service</span></figcaption><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=wireguard web ui</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">WorkingDirectory=/opt/wireguard</span><br><span class="line">ExecStart=/opt/wireguard/wireguard-ui</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li>
<li>サービス有効化と起動  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> wgui-worker.service</span><br><span class="line"><span class="built_in">sudo</span> systemctl start wgui-worker.service</span><br></pre></td></tr></table></figure>
  <div class="note info flat"><p>この時、<code>/etc/wireguard/wg0.conf</code>が生成されます。</p>
</div></li>
</ol>
<h4 id="Wireguardの自動再起動設定"><a href="#Wireguardの自動再起動設定" class="headerlink" title="Wireguardの自動再起動設定"></a>Wireguardの自動再起動設定</h4><p><code>/etc/wireguard/wg0.conf</code>を監視してWireguardを自動再起動します。</p>
<ol>
<li>ユニットファイルの作成  <figure class="highlight text"><figcaption><span>/etc/systemd/system/wgui.service</span></figcaption><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Restart WireGuard</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/usr/bin/systemctl restart wg-quick@wg0.service</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">RequiredBy=wgui.path</span><br></pre></td></tr></table></figure>
  <figure class="highlight text"><figcaption><span>/etc/systemd/system/wgui.path</span></figcaption><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Watch /etc/wireguard/wg0.conf for changes</span><br><span class="line"></span><br><span class="line">[Path]</span><br><span class="line">PathModified=/etc/wireguard/wg0.conf</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li>
<li>サービスの有効化と起動  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> wgui.&#123;path,service&#125;</span><br><span class="line"><span class="built_in">sudo</span> systemctl start wgui.&#123;path,service&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="内部ネットワークへの転送許可"><a href="#内部ネットワークへの転送許可" class="headerlink" title="内部ネットワークへの転送許可"></a>内部ネットワークへの転送許可</h4><ol>
<li>設定  <figure class="highlight ini"><figcaption><span>/etc/sysctl.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Uncomment the next line to enable packet forwarding for IPv4</span></span><br><span class="line"><span class="comment">#net.ipv4.ip_forward=1</span></span><br><span class="line marked"><span class="attr">net.ipv4.ip_forward</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li>反映  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sysctl -p</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Wireguardネットワーク設定"><a href="#Wireguardネットワーク設定" class="headerlink" title="Wireguardネットワーク設定"></a>Wireguardネットワーク設定</h4><ol>
<li><p>Wireguard-uiにアクセス<br>  <a href="http://192.168.11.24:5000/">http://192.168.11.24:5000</a></p>
</li>
<li><p>ログイン<br>  admin &#x2F; admin</p>
  <div class="note info flat"><p>パスワードはUsers Settingsで変更します。</p>
</div></li>
<li><p>Global Settingsの設定<br>  MTUの値を削除して<kbd>Save</kbd></p>
  <div class="note info flat"><p>私の環境ではデフォルトの1500や一般的な1420を設定すると通信が不安定になったので削除しました。</p>
</div>
  <div class="note info flat"><p><a href="https://www.speedguide.net/analyzer.php">https://www.speedguide.net/analyzer.php</a><br>もし設定するとしたら各接続拠点から上記サイトで調べたMTU値からIPv4なら60、IPv6なら80を引いた値の小さい方を設定します。<br>自宅PC：MTU 1460、MSS 1420 → MTU 1400<br>スマートフォン：MTU 1420、MSS 1380 → MTU 1360</p>
</div>
</li>
<li><p>Wireguard Serverの設定<br>  下記を設定して<kbd>Save</kbd></p>
  <table>
<tr><td style="background: #f5f6f8"><b>Listen Port<td><tt>60000
  <tr><td style="background: #f5f6f8"><b>Port Up Script<td><tt>iptables -t nat -A POSTROUTING -s <b><u>10.252.1.0/24</u></b> -o eth0 -j MASQUERADE; iptables -A INPUT -p udp -m udp --dport <b><u>60000</u></b> -j ACCEPT; iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT
  <tr><td style="background: #f5f6f8"><b>Post Down Script<td><tt>iptables -t nat -D POSTROUTING -s <b><u>10.252.1.0/24</u></b> -o eth0 -j MASQUERADE; iptables -D INPUT -p udp -m udp --dport <b><u>60000</u></b> -j ACCEPT; iptables -D FORWARD -i wg0 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT
  </table>
</li>
<li><p>Wireguard Clientsの設定<br>  <kbd>New Client</kbd>を押下、Nameを設定して<kbd>Submit</kbd></p>
</li>
<li><p>反映<br>  <kbd>Apply Config</kbd></p>
</li>
<li><p>再起動<br>  設定を変更した場合は念のため再起動しておいた方がよいみたいです。</p>
</li>
</ol>
<h3 id="クライアント端末の設定"><a href="#クライアント端末の設定" class="headerlink" title="クライアント端末の設定"></a>クライアント端末の設定</h3><h4 id="Androidの場合"><a href="#Androidの場合" class="headerlink" title="Androidの場合"></a>Androidの場合</h4><ol>
<li>Wireguardアプリをインストール</li>
<li>Wireguardアプリで<kbd>+</kbd>を押下</li>
<li>QRコードをスキャンを選択</li>
<li>Wireguard-uiのクライアント画面で<kbd>QR code</kbd>を押下して画像をスキャン</li>
<li>トンネル名を設定してオンにする</li>
<li>接続に成功するとwireguard-uiのStatus画面で接続実績が記録される</li>
</ol>
]]></content>
      <tags>
        <tag>vpn</tag>
        <tag>wireguard</tag>
      </tags>
  </entry>
  <entry>
    <title>WireGuard Easy (wg-easy)</title>
    <url>/2025/04/06/WireGuard-Easy-wg-easy/</url>
    <content><![CDATA[<p>WireGuard Easy(wg-easy)でVPN環境を構築してみました。<br>Dockerであることと設定に必要な項目が少ないことから構築で迷うことはありません。<br>細かな制御をしたい場合は設定ファイルを直接編集するようなことが必要かもしれません。</p>
<div class="github-card" data-github="wg-easy/wg-easy" data-width="100%"></div>
<script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script>

<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><p><img src="/images/wg-easy.drawio.svg"></p>
<ul>
<li>Raspberry Pi 4B</li>
<li>Ubuntu 24.10 (arm64)</li>
<li>docker 2.0.4</li>
<li>Portainer Community Edition 2.27.3 LTS</li>
<li>WireGuard Easy (wg-easy) v14.0.0</li>
<li>v6プラス回線</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="v6プラス回線の調査"><a href="#v6プラス回線の調査" class="headerlink" title="v6プラス回線の調査"></a>v6プラス回線の調査</h4><ol>
<li>公開IPv4アドレスと公開IPv6アドレスを確認<br>  <a href="https://test-ipv6.com/">https://test-ipv6.com/</a></li>
<li>公開IPv6アドレスから公開可能なポート番号を確認<br>  <a href="http://ipv4.web.fc2.com/map-e.html">http://ipv4.web.fc2.com/map-e.html</a></li>
<li>公開ポート番号を決定<br>  例えば60000&#x2F;udp  <div class="note info flat"><p>wireguardの使用プロトコルはudpです。</p>
</div></li>
<li>wireguardを構築するサーバのローカルIPアドレスを確認  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure>
  例えば192.168.11.24</li>
<li>ルータでポートフォワード設定<br>  インターネットからの60000&#x2F;udpアクセスを192.168.11.24の60000&#x2F;udpに転送  <div class="note info flat"><p>同じポート番号にする必要があります。</p>
</div></li>
</ol>
<h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><ol>
<li>インストール<br>  <a href="https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository">https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository</a>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install ca-certificates curl</span><br><span class="line"><span class="built_in">sudo</span> install -m 0755 -d /etc/apt/keyrings</span><br><span class="line"><span class="built_in">sudo</span> curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.asc</span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(. /etc/os-release &amp;&amp; echo <span class="string">&quot;<span class="variable">$&#123;UBUNTU_CODENAME:-<span class="variable">$VERSION_CODENAME</span>&#125;</span>&quot;</span>)</span> stable&quot;</span> | \</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure></li>
<li>ユーザの設定  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h4><ol>
<li>デプロイ<br>  <a href="https://docs.portainer.io/start/install-ce/server/docker/linux#deployment">https://docs.portainer.io/start/install-ce/server/docker/linux#deployment</a>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  -p 8000:8000 \</span><br><span class="line">  -p 9443:9443 \</span><br><span class="line">  --name portainer \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v portainer_data:/data \</span><br><span class="line">  portainer/portainer-ce:lts</span><br></pre></td></tr></table></figure></li>
<li>ログイン<br>  <code>https://&lt;ローカルIP アドレス&gt;:9443</code></li>
</ol>
<h4 id="wg-easy"><a href="#wg-easy" class="headerlink" title="wg-easy"></a>wg-easy</h4><ol>
<li>オプションとデフォルト値の確認<br>  <a href="https://github.com/wg-easy/wg-easy/tree/production#user-content-options">https://github.com/wg-easy/wg-easy/tree/production#user-content-options</a></li>
<li>デプロイ  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name=wg-easy \</span><br><span class="line">-e WG_HOST=&lt;公開IPv4アドレス&gt; \</span><br><span class="line">-e PORT=51821 \</span><br><span class="line">-e WG_PORT=&lt;公開ポート番号&gt; \</span><br><span class="line">-v ~/.wg-easy:/etc/wireguard \</span><br><span class="line">-p &lt;公開ポート番号&gt;:&lt;公開ポート番号&gt;/udp \</span><br><span class="line">-p 51821:51821/tcp \</span><br><span class="line">--cap-add=NET_ADMIN \</span><br><span class="line">--cap-add=SYS_MODULE \</span><br><span class="line">--sysctl=<span class="string">&quot;net.ipv4.conf.all.src_valid_mark=1&quot;</span> \</span><br><span class="line">--sysctl=<span class="string">&quot;net.ipv4.ip_forward=1&quot;</span> \</span><br><span class="line">--restart unless-stopped \</span><br><span class="line">ghcr.io/wg-easy/wg-easy</span><br></pre></td></tr></table></figure>
  <div class="note info flat"><p>成功するとPortainer画面でコンテナの稼働状況を確認できる</p>
</div></li>
<li>アクセス確認<br>  <code>https://&lt;ローカルIP アドレス&gt;:51821</code></li>
</ol>
<h4 id="クライアントの追加"><a href="#クライアントの追加" class="headerlink" title="クライアントの追加"></a>クライアントの追加</h4><ol>
<li>wg-easyの画面で<kbd>+ New</kbd>  <div class="note info flat"><p>10.8.0.0&#x2F;24のアドレスが割り振られる</p>
</div></li>
</ol>
<h3 id="クライアント端末の設定"><a href="#クライアント端末の設定" class="headerlink" title="クライアント端末の設定"></a>クライアント端末の設定</h3><h4 id="Androidの場合"><a href="#Androidの場合" class="headerlink" title="Androidの場合"></a>Androidの場合</h4><ol>
<li>wireguardアプリをインストール</li>
<li>wireguardアプリで<kbd>+</kbd>を押下</li>
<li>QRコードをスキャンを選択</li>
<li>wg-easy画面でQRコードアイコンをクリック後、画像をスキャン</li>
</ol>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>vpn</tag>
        <tag>wireguard</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 11 NAS</title>
    <url>/2025/05/04/Windows-11-NAS/</url>
    <content><![CDATA[<p><img src="https://www.logitec.co.jp/products/hd/lhrbnu3/images/img_05.jpg"></p>
<p>古いWindows 10 ProマシンをWindows 11 ProにアップグレードしてNASとして利用します。Windows 10のHDDはMBRフォーマットでしたのでGPTフォーマットのSSDに移行しました。<br>しばらく利用しない時はリモートからスリープさせます。利用する際にはリモートからWake on LANで起動します。<br>私の持っている外付けディスクケースは電源連動のさせ方が少し複雑でしたが設定することにより安定して動作するようになりました。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Windows 10 Pro</li>
<li>外付けディスクケースLHR-4BNHEU3</li>
</ul>
<h3 id="Windows-10パーティションの移行"><a href="#Windows-10パーティションの移行" class="headerlink" title="Windows 10パーティションの移行"></a>Windows 10パーティションの移行</h3><p>MBR HDD上のWindowsシステムパーティションをGPT SSDのパーティションに移行します。</p>
<h4 id="HDDのWindowsパーティションサイズを変更"><a href="#HDDのWindowsパーティションサイズを変更" class="headerlink" title="HDDのWindowsパーティションサイズを変更"></a>HDDのWindowsパーティションサイズを変更</h4><p>パーティションを移動しやすいようにLinuxのgpartedでWindows 10のシステムパーティションを適当なサイズに縮小します。(例えば60,000MiB)<br>NTFSパーティションのコピーにCloneZillaを使う場合は不要な操作と思います。</p>
<h4 id="Windowsパーティションの修復"><a href="#Windowsパーティションの修復" class="headerlink" title="Windowsパーティションの修復"></a>Windowsパーティションの修復</h4><p>一旦、Windowsでディスクを修復しておきます。（重要）<br>Windowsからは中身が正常に見えますがLinuxでは中身が参照できないという状態を回復できます。</p>
<h4 id="SSDをGPTフォーマット"><a href="#SSDをGPTフォーマット" class="headerlink" title="SSDをGPTフォーマット"></a>SSDをGPTフォーマット</h4><p>LinuxのgpartedでSSDをGPTフォーマットして各パーティションを作成</p>
<ul>
<li>EFI用<br>fat32&#x2F;1000MiB</li>
<li>Windows用<br>ntfs&#x2F;60000MiB</li>
</ul>
<h4 id="Windowsパーティションのコピー"><a href="#Windowsパーティションのコピー" class="headerlink" title="Windowsパーティションのコピー"></a>Windowsパーティションのコピー</h4><p>HDDのパーティションをSSDのパーティションにコピー</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/sdbX of=/dev/sdaX bs=4M status=progress</span><br></pre></td></tr></table></figure>
<h4 id="パーティションの拡大"><a href="#パーティションの拡大" class="headerlink" title="パーティションの拡大"></a>パーティションの拡大</h4><p>gpartedでSSDのWindowsシステムパーティションを拡大</p>
<h3 id="Windows-10のUEFIブート設定"><a href="#Windows-10のUEFIブート設定" class="headerlink" title="Windows 10のUEFIブート設定"></a>Windows 10のUEFIブート設定</h3><h4 id="EFIパーティションの構築"><a href="#EFIパーティションの構築" class="headerlink" title="EFIパーティションの構築"></a>EFIパーティションの構築</h4><p>Windows 10 インストーラディスクでブートしてトラブルシュートからコマンドプロンプトを実行</p>
<ul>
<li>EFIパーティションにドライブ文字Nをマッピング<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">diskpart</span><br></pre></td></tr></table></figure>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">List disk</span><br><span class="line">select disk n</span><br><span class="line">list volume</span><br><span class="line">select volume m</span><br><span class="line">assign letter=N:</span><br><span class="line"><span class="keyword">Exit</span></span><br></pre></td></tr></table></figure>
nはディスク番号(例: 0)、mはEFIパーティション番号</li>
<li>ドライブNをfat32でフォーマット<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">format</span> N: /<span class="built_in">FS</span>:FAT32</span><br></pre></td></tr></table></figure></li>
<li>ブートマネージャの設定<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">bcdboot C:\windows /s N: /f UEFI</span><br></pre></td></tr></table></figure></li>
<li>ブートローダの修復<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">bootrec /fixboot</span><br></pre></td></tr></table></figure>
エラーがでないことを確認</li>
</ul>
<h4 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h4><p>BIOSの設定をUEFI起動に切り替えてWindows 10が起動できることを確認</p>
<h3 id="Windows-11にアップグレード"><a href="#Windows-11にアップグレード" class="headerlink" title="Windows 11にアップグレード"></a>Windows 11にアップグレード</h3><ul>
<li>Windows 10で起動してWindows 11 インストーラISOをマウント</li>
<li>インストール実行<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">setup /product server</span><br></pre></td></tr></table></figure>
インストール中、1つ目の「個人用ファイルとアプリを引き継ぐ」を選択するとエラーがでたので２つ目の「個人用ファイルを引き継ぐ」を選択（アプリはひきつがない）</li>
</ul>
<h3 id="ディスクケースとPCの電源連動"><a href="#ディスクケースとPCの電源連動" class="headerlink" title="ディスクケースとPCの電源連動"></a>ディスクケースとPCの電源連動</h3><h4 id="ディスクケース側の電源連動モード設定"><a href="#ディスクケース側の電源連動モード設定" class="headerlink" title="ディスクケース側の電源連動モード設定"></a>ディスクケース側の電源連動モード設定</h4><ul>
<li>LHR-4BNHEU3のSYNCボタンを3秒間押して電源連動スリープ機能を有効に設定<br>電源連動 LED（SYNC）がオレンジになることを確認</li>
<li>パソコンが電源オフ&#x2F;スリープになるとディスクケースがスリープ状態になります。</li>
</ul>
<h4 id="Windows側の電源管理設定"><a href="#Windows側の電源管理設定" class="headerlink" title="Windows側の電源管理設定"></a>Windows側の電源管理設定</h4><ul>
<li>デバイスマネージャから「ユニバーサルシリアルバスコントローラー」の下の「USB大容量記憶装置」のプロパティで「電源管理」タブの「電力の節約のために、コンピュータでこのデバイスの電源をオフにできるようにする」をオフ</li>
</ul>
<h3 id="Windowsの自動スリープ抑止"><a href="#Windowsの自動スリープ抑止" class="headerlink" title="Windowsの自動スリープ抑止"></a>Windowsの自動スリープ抑止</h3><h4 id="電源設定"><a href="#電源設定" class="headerlink" title="電源設定"></a>電源設定</h4><p>スリープ状態になるまでの時間を「なし」に設定</p>
<h4 id="無人スリープタイムアウトの設定"><a href="#無人スリープタイムアウトの設定" class="headerlink" title="無人スリープタイムアウトの設定"></a>無人スリープタイムアウトの設定</h4><ul>
<li>無人スリープタイムアウトの設定項目表示<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">powercfg -attributes SUB_SLEEP <span class="number">7</span>bc4a2f9-d8fc-<span class="number">4469</span>-b07b-<span class="number">33</span>eb785aaca0 -ATTRIB_HIDE</span><br></pre></td></tr></table></figure></li>
<li>電源オプションの「システム無人スリープタイムアウト」で2分→0分</li>
</ul>
<h4 id="モダンスタンバイの状態確認"><a href="#モダンスタンバイの状態確認" class="headerlink" title="モダンスタンバイの状態確認"></a>モダンスタンバイの状態確認</h4><ul>
<li>Windowsの電源設定を確認<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">powercfg /a</span><br></pre></td></tr></table></figure>
「スタンバイ（S0 低電力アイドル）」が利用できない状態であることを確認</li>
</ul>
<h3 id="Wake-on-LAN"><a href="#Wake-on-LAN" class="headerlink" title="Wake on LAN"></a>Wake on LAN</h3><h4 id="サーバ"><a href="#サーバ" class="headerlink" title="サーバ"></a>サーバ</h4><p>UEFI設定のブートメニューでWake on LANを有効化</p>
<h4 id="クライアントWindows"><a href="#クライアントWindows" class="headerlink" title="クライアントWindows"></a>クライアントWindows</h4><ul>
<li>インストール<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">winget install --id DarkfullDante.wol </span><br></pre></td></tr></table></figure></li>
<li>実行<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">wol -m=&quot;XX:XX:XX:XX:XX:XX&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="クライアントUbuntu"><a href="#クライアントUbuntu" class="headerlink" title="クライアントUbuntu"></a>クライアントUbuntu</h4><ul>
<li>インストール<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install wakeonlan</span><br></pre></td></tr></table></figure></li>
<li>実行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wakeonlan wakeonlan XX:XX:XX:XX:XX:XX</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>windows</tag>
        <tag>nas</tag>
      </tags>
  </entry>
  <entry>
    <title>Reflector</title>
    <url>/2025/05/19/Reflector/</url>
    <content><![CDATA[<p><img src="/images/reflector.png"></p>
<p>Reflectorを利用してArch Linuxのミラーリストを週次で自動更新するように設定します。タイマー<code>reflector.timer</code>が週次で<code>reflector.service</code>をキックします。即時実行したい場合は<code>reflector.service</code>を開始(start)します。</p>
<p><a href="https://man.archlinux.org/man/reflector.1">https://man.archlinux.org/man/reflector.1</a><br><a href="https://wiki.archlinux.jp/index.php/Reflector">https://wiki.archlinux.jp/index.php/Reflector</a></p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux</li>
<li>Reflector 2023-3</li>
</ul>
<h3 id="関連ファイル"><a href="#関連ファイル" class="headerlink" title="関連ファイル"></a>関連ファイル</h3><ul>
<li>Reflectorの設定ファイル<br><code>/etc/xdg/reflector/reflector.conf</code></li>
<li>Arch Linuxのミラーリスト<br><code>/etc/pacman.d/mirrorlist</code></li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li><p>reflectorをインストール</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S reflector</span><br></pre></td></tr></table></figure>
</li>
<li><p>設定<br>  <code>Japan</code>にあるHTTPSミラーの内、最近同期した上位5サイトをダウンロード速度(<code>rate</code>)で並べ替えます。</p>
  <figure class="highlight ini"><figcaption><span>/etc/xdg/reflector/reflector.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Recommended Options</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the output path where the mirrorlist will be saved (--save).</span></span><br><span class="line">--save /etc/pacman.d/mirrorlist</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select the transfer protocol (--protocol).</span></span><br><span class="line">--protocol https</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select the country (--country).</span></span><br><span class="line"><span class="comment"># Consult the list of available countries with &quot;reflector --list-countries&quot; and</span></span><br><span class="line"><span class="comment"># select the countries nearest to you or the ones that you trust. For example:</span></span><br><span class="line"><span class="comment"># --country France,Germany</span></span><br><span class="line marked">--country Japan</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use only the  most recently synchronized mirrors (--latest).</span></span><br><span class="line">--latest 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sort the mirrors by synchronization time (--sort).</span></span><br><span class="line marked"><span class="comment"># --sort age</span></span><br><span class="line marked">--sort rate</span><br></pre></td></tr></table></figure>
</li>
<li><p>週次実行設定</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now reflector.timer</span><br></pre></td></tr></table></figure>
  <div class="note info flat"><p>次回実行時刻は<code>systemctl list-timers</code>で確認できる。</p>
</div>
</li>
<li><p>即時実行したい場合のコマンド</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start reflector.service</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>archlinux</tag>
        <tag>reflector</tag>
      </tags>
  </entry>
  <entry>
    <title>AnduinOS</title>
    <url>/2025/05/21/AnduinOS/</url>
    <content><![CDATA[<p><img src="/images/anduinos.png"></p>
<p>AnduinOSを試してみました。インタフェースに癖がないのですぐに使えそうですね。</p>
<p><a href="https://www.anduinos.com/">https://www.anduinos.com/</a></p>
<a href="https://www.anduinos.com/" target="_blank" rel="external nofollow noopener noreferrer" class="link-preview">
    <div class="og-image">
        <img src="https://docs.anduinos.com/Assets/logo.svg" alt="AnduinOS" class="not-gallery-item" loading="lazy"></div>
        <div class="descriptions">
            <div class="og-title">AnduinOS</div>
            <div class="og-description">AnduinOS is a custom Ubuntu-based Linux distribution that aims to facilitate developers transitioning from Windows to Linux by maintaining familiar operational habits and workflows.</div></div></a>

<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>AnduinOS 1.3.1</li>
<li>GNOME 48</li>
</ul>
<h3 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h3><h4 id="画面高さ"><a href="#画面高さ" class="headerlink" title="画面高さ"></a>画面高さ</h4><p>画面高さが小さいとArcMenuメニューがうまく表示されない。<br>800x600の解像度でArcMenuの11テーマを使う場合はArcMenuの高さを650から530に変更する。</p>
<h4 id="日本語入力"><a href="#日本語入力" class="headerlink" title="日本語入力"></a>日本語入力</h4><p>設定メニューで調整が必要</p>
<ul>
<li>インストール後、「英語、日本語(Mozc)、日本語(Mozc)」が登録されている</li>
<li>「日本語」を追加</li>
<li>「英語、日本語(Mozc)、日本語(Mozc)」を削除</li>
<li>あらためて「日本語(Mozc)」を追加</li>
</ul>
<h4 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h4><p>viがインストールされていないのでvimをインストールしました。<br><a href="https://docs.anduinos.com/CHANGELOG.html#v132-under-development">https://docs.anduinos.com/CHANGELOG.html#v132-under-development</a><br>次のバージョンv1.3.2では追加されるみたい</p>
<h4 id="gnome-terminal"><a href="#gnome-terminal" class="headerlink" title="gnome-terminal"></a>gnome-terminal</h4><p>デフォルトのターミナルアプリケーションはコンソール(kgx)です。gnome-terminalをインストールして起動してみたところkgxが起動します。なんでだろう。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> gnome-terminal</span><br><span class="line">/usr/local/bin/gnome-terminal</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> -l /usr/local/bin/gnome-terminal</span><br><span class="line">lrwxrwxrwx 1 root root 12  5月 21 21:03 /usr/local/bin/gnome-terminal -&gt; /usr/bin/kgx*</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> -l /usr/bin/gnome-terminal</span><br><span class="line">-rwxr-xr-x 1 root root 93984  3月 18 04:57 /usr/bin/gnome-terminal*</span><br></pre></td></tr></table></figure>
<p>なるほど</p>
<h3 id="有効なGNOME-Shell拡張機能一覧"><a href="#有効なGNOME-Shell拡張機能一覧" class="headerlink" title="有効なGNOME Shell拡張機能一覧"></a>有効なGNOME Shell拡張機能一覧</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gnome-extensions list --enabled</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ProxySwitcher@flannaghan.com</span><br><span class="line">arcmenu@arcmenu.com</span><br><span class="line">blur-my-shell@aunetx</span><br><span class="line">clipboard-indicator@tudmotu.com</span><br><span class="line">customize-ibus@hollowman.ml</span><br><span class="line">dash-to-panel@jderose9.github.com</span><br><span class="line">ding@rastersoft.com</span><br><span class="line">drive-menu@gnome-shell-extensions.gcampax.github.com</span><br><span class="line">loc@anduinos.com</span><br><span class="line">lockkeys@vaina.lt</span><br><span class="line">mediacontrols@cliffniff.github.com</span><br><span class="line">noti-bottom-right@anduinos</span><br><span class="line">openweather-extension@penguin-teal.github.io</span><br><span class="line">switcher@anduinos</span><br><span class="line">tiling-assistant@leleat-on-github</span><br><span class="line">ubuntu-appindicators@ubuntu.com</span><br><span class="line">user-theme@gnome-shell-extensions.gcampax.github.com</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>anduinos</tag>
      </tags>
  </entry>
  <entry>
    <title>archiso</title>
    <url>/2025/05/26/archiso/</url>
    <content><![CDATA[<p><img src="/images/archiso-gnome.png"></p>
<p>archisoでGNOMEデスクトップ環境のArch LinuxライブISOを作成します。</p>
<p><a href="https://wiki.archlinux.jp/index.php/Archiso">https://wiki.archlinux.jp/index.php/Archiso</a></p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux</li>
<li>archiso 83-1</li>
<li>Arch Linux Live USB with Gnome<br><a href="https://github.com/jorisdrenth/archiso-liveusb-gnome">https://github.com/jorisdrenth/archiso-liveusb-gnome</a></li>
</ul>
<h3 id="archiso"><a href="#archiso" class="headerlink" title="archiso"></a>archiso</h3><ol>
<li>archisoのインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S archiso</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Arch-Linux-Live-USB-with-Gnomeの場合"><a href="#Arch-Linux-Live-USB-with-Gnomeの場合" class="headerlink" title="Arch Linux Live USB with Gnomeの場合"></a>Arch Linux Live USB with Gnomeの場合</h3><p>GUIインストーラは含まれません。</p>
<h4 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h4><ol>
<li>リポジトリをクローン  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jorisdrenth/archiso-liveusb-gnome.git</span><br><span class="line"><span class="built_in">cd</span> archiso-liveusb-gnome</span><br></pre></td></tr></table></figure></li>
<li>パッケージを編集</li>
</ol>
<ul>
<li>削除<figure class="highlight text"><figcaption><span>./packages.x86_64</span></figcaption><table><tr><td class="code"><pre><span class="line"># virtualbox-guest-utils #-nox</span><br><span class="line"># xorg # VMSVGA support (Virtualbox, VMware)</span><br></pre></td></tr></table></figure>
<div class="note info flat"><p>virtualbox-guest-utilsとxorgでエラーが発生するので一旦コメントアウト</p>
</div></li>
</ul>
<ol start="3">
<li>ISOをビルド  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mkarchiso -v -o ./ ./</span><br></pre></td></tr></table></figure>
  <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">./archlinux-YYYY.MM.DD-x86_64.iso</span><br></pre></td></tr></table></figure>
  1.9GB</li>
<li>作業ディレクトリの削除  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf ./work</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>archiso</tag>
      </tags>
  </entry>
  <entry>
    <title>archiso-gnome</title>
    <url>/2025/05/28/archiso-gnome/</url>
    <content><![CDATA[<p><img src="/images/archiso-gnome-desktop.png"></p>
<p>archisoでGNOMEデスクトップ環境のライブISOイメージを作成してみました。<br>Fluentテーマを利用していてすっきりした見た目になっています。</p>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux</li>
<li>archiso 83-1</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><p>一旦、カスタマイズ前の状態でISOを作成してみます。</p>
<ol>
<li>archisoをインストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S archiso</span><br></pre></td></tr></table></figure></li>
<li>プロジェクトディレクトリを作成  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r /usr/share/archiso/configs/releng/ archiso-gnome</span><br><span class="line"><span class="built_in">cd</span> archiso-gnome</span><br></pre></td></tr></table></figure></li>
<li>ISOをビルド  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf work</span><br><span class="line"><span class="keyword">time</span> <span class="built_in">sudo</span> mkarchiso -v -o ./ ./</span><br></pre></td></tr></table></figure>
  <div class="note info flat"><p>N100 CPUで7分30秒で生成し、サイズは1.2GB</p>
</div></li>
<li>VirtualBox等で生成されたISOが起動するか確認する</li>
</ol>
<h3 id="カスタマイズ"><a href="#カスタマイズ" class="headerlink" title="カスタマイズ"></a>カスタマイズ</h3><h4 id="カスタマイズ方針"><a href="#カスタマイズ方針" class="headerlink" title="カスタマイズ方針"></a>カスタマイズ方針</h4><ul>
<li>ブートローダはGRUB</li>
<li>デスクトップ環境はGNOME</li>
<li>GNOME Shell拡張機能を有効化</li>
<li>テーマはFluent</li>
<li>できるだけパッケージを利用する(後でアップデートできるように)</li>
<li>GUIインストーラCalamaresを有効化（調査中）</li>
</ul>
<h4 id="カスタムローカルリポジトリ"><a href="#カスタムローカルリポジトリ" class="headerlink" title="カスタムローカルリポジトリ"></a>カスタムローカルリポジトリ</h4><p>AURパッケージや独自パッケージをインストールするためにカスタムローカルリポジトリを作成します。</p>
<ol>
<li><p>リポジトリディレクトリの作成</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /opt/custom-repo/x86_64</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$GROUP</span> /opt/custom-repo</span><br></pre></td></tr></table></figure>
</li>
<li><p>パッケージファイルの準備<br>  インストール済のAURパッケージを更新します。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">paru</span><br></pre></td></tr></table></figure>
<p>  AURヘルパーparuのキャッシュディレクトリ<code>~/.cache/paru/clone/</code>配下から過去にインストールしたパッケージファイルを抽出できます。最新バージョンを利用します。</p>
  <figure class="highlight bash"><figcaption><span>例</span></figcaption><table><tr><td class="code"><pre><span class="line">extension-manager-0.6.3-3-x86_64.pkg.tar.zst</span><br><span class="line">fluent-cursor-theme-git-2025.02.26.r6.ge8ac55a-1-any.pkg.tar.zst</span><br><span class="line">fluent-gtk-theme-2025.04.17-1-any.pkg.tar.zst</span><br><span class="line">fluent-icon-theme-git-2025.02.26.r6.ge8ac55a-1-any.pkg.tar.zst</span><br><span class="line">gnome-shell-extension-blur-my-shell-68-1-any.pkg.tar.zst</span><br><span class="line">gnome-shell-extension-openweatherrefined-139-1-any.pkg.tar.zst</span><br><span class="line">paru-bin-2.0.4-3-x86_64.pkg.tar.zst</span><br><span class="line">ttf-hackgen-2.10.0-1-any.pkg.tar.zst</span><br><span class="line">yay-12.5.0-1-x86_64.pkg.tar.zst</span><br></pre></td></tr></table></figure>
</li>
<li><p>パッケージファイルのコードを修正したい場合<br>  例えば拡張機能のmetadata.jsonを修正したい場合</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">paru -G gnome-shell-extension-openweatherrefined</span><br><span class="line"><span class="built_in">cd</span> gnome-shell-extension-openweatherrefined</span><br><span class="line">makepkg -o</span><br></pre></td></tr></table></figure>
  <figure class="highlight json"><figcaption><span>./src/gnome-openweather-139/metadata.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;shell-version&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;45&quot;</span><span class="punctuation">,</span> <span class="string">&quot;46&quot;</span><span class="punctuation">,</span> <span class="string">&quot;47&quot;</span><span class="punctuation">,</span> <span class="string">&quot;48&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">makepkg -f -e --skipchecksums</span><br></pre></td></tr></table></figure>
<p>  パッケージ(*.pkg.tar.zst)が生成される。インストール確認する。</p>
  <figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> pacman -U <span class="regexp">*.pkg.tar.zst</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>パッケージファイルの配置<br>  パッケージファイル<code>*.pkg.tar.zst</code>をカスタムリポジトリディレクトリ<code>/opt/custom-repo/x86_64/</code>に配置します。</p>
</li>
<li><p>リポジトリデータベースの生成</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/custom-repo/x86_64/</span><br><span class="line"><span class="built_in">rm</span> custom-repo.*</span><br><span class="line">repo-add /opt/custom-repo/x86_64/custom-repo.db.tar.zst /opt/custom-repo/x86_64/*.pkg.tar.zst</span><br></pre></td></tr></table></figure>
</li>
<li><p>カスタムローカルリポジトリの参照設定</p>
  <figure class="highlight ini"><figcaption><span>./pacman.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[custom-repo]</span></span><br><span class="line"><span class="attr">SigLevel</span> = Optional TrustAll</span><br><span class="line"><span class="attr">Server</span> = file:///opt/<span class="variable">$repo</span>/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="インストールするパッケージの指定"><a href="#インストールするパッケージの指定" class="headerlink" title="インストールするパッケージの指定"></a>インストールするパッケージの指定</h4><p>インストールしたいパッケージ名を設定ファイル<code>./packages.x86_64</code>に追記する。</p>
<h4 id="インストールするファイルの配置"><a href="#インストールするファイルの配置" class="headerlink" title="インストールするファイルの配置"></a>インストールするファイルの配置</h4><p>インストールしたいファイルをディレクトリ<code>./airootfs/</code>配下に格納する。</p>
<ul>
<li>壁紙の場合<br><code>./airootfs/usr/local/share/backgrounds/</code></li>
<li>ユーザのホームディレクトリに配置したい場合(<code>.bashrc</code>等)<br><code>./airootfs/etc/skel/</code></li>
</ul>
<h4 id="dconf設定"><a href="#dconf設定" class="headerlink" title="dconf設定"></a>dconf設定</h4><ol>
<li>dconfデータベースの作成<br>  <code>./airootfs/etc/dconf/</code>配下にgdmとuserのデータベースを作成する。</li>
<li>ユーザ設定<br>  <code>./airootfs/etc/dconf/db/local.d/</code>に設定ファイルを格納する。</li>
</ol>
<ul>
<li>背景画像(org&#x2F;gnome&#x2F;desktop&#x2F;background)の設定</li>
<li>インタフェース(org&#x2F;gnome&#x2F;desktop&#x2F;interface)の設定</li>
<li>ウィンドウボタン(org&#x2F;gnome&#x2F;desktop&#x2F;wm&#x2F;preferences)の設定</li>
<li>GNOME Shell(org&#x2F;gnome&#x2F;shell)の設定<br>拡張機能の有効化、お気に入りアプリの指定、ツアーのスキップ 等</li>
<li>各GNOME Shell拡張機能(org&#x2F;gnome&#x2F;shell&#x2F;extensions&#x2F;***)の設定  <div class="note info flat"><p>現在の設定値の確認は<code>dconf-editor</code><br>設定値のエクスポートは<code>dconf dump &lt;パス&gt;</code></p>
</div></li>
</ul>
<h4 id="ISO生成"><a href="#ISO生成" class="headerlink" title="ISO生成"></a>ISO生成</h4><ol>
<li>ISOをビルド  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf work</span><br><span class="line"><span class="keyword">time</span> <span class="built_in">sudo</span> mkarchiso -v -o ./ ./</span><br></pre></td></tr></table></figure>
  <div class="note info flat"><p>N100 CPUで24分で生成し、サイズは2.7GB</p>
</div></li>
</ol>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ul>
<li>GUIインストーラcalamaresの組み込み<br><a href="https://ktkr3d.github.io/2025/06/01/calamares/">https://ktkr3d.github.io/2025/06/01/calamares/</a></li>
<li>構築手順整備</li>
<li>GitHubにプロジェクトを登録</li>
<li>生成したISOファイルをどこかに配置</li>
<li>CI</li>
<li>サイズ最適化（パッケージ削減）<br>2025-06-01  2.3 GB  20分44秒</li>
<li>起動速度最適化</li>
<li>電源アイコンの非表示(Just Perfectionかdconfで)</li>
<li>pamac追加する？</li>
</ul>
<h3 id="テーマリソースの最適化"><a href="#テーマリソースの最適化" class="headerlink" title="テーマリソースの最適化"></a>テーマリソースの最適化</h3><p>Fluent round dark</p>
<h4 id="GTKテーマ"><a href="#GTKテーマ" class="headerlink" title="GTKテーマ"></a>GTKテーマ</h4><p><a href="https://github.com/vinceliuice/Fluent-gtk-theme">https://github.com/vinceliuice/Fluent-gtk-theme</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vinceliuice/Fluent-gtk-theme.git</span><br><span class="line"><span class="built_in">cd</span> Fluent-gtk-theme</span><br><span class="line">./install.sh -c dark -s standard -i <span class="built_in">arch</span> --tweaks round</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><figcaption><span>出力先</span></figcaption><table><tr><td class="code"><pre><span class="line">~/.themes/Fluent-round-Dark/</span><br></pre></td></tr></table></figure>
<h4 id="アイコン、カーソルテーマ"><a href="#アイコン、カーソルテーマ" class="headerlink" title="アイコン、カーソルテーマ"></a>アイコン、カーソルテーマ</h4><p><a href="https://github.com/vinceliuice/Fluent-icon-theme">https://github.com/vinceliuice/Fluent-icon-theme</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vinceliuice/Fluent-icon-theme.git</span><br><span class="line"><span class="built_in">cd</span> Fluent-icon-theme</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><figcaption><span>出力先</span></figcaption><table><tr><td class="code"><pre><span class="line">~/.local/share/icons/Fluent/</span><br><span class="line">~/.local/share/icons/Fluent-dark/</span><br><span class="line">~/.local/share/icons/Fluent-light/</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> cursors</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><figcaption><span>出力先</span></figcaption><table><tr><td class="code"><pre><span class="line">~/.local/share/icons/Fluent-cursors/</span><br><span class="line">~/.local/share/icons/Fluent-dark-cursors/</span><br></pre></td></tr></table></figure>

<h4 id="壁紙"><a href="#壁紙" class="headerlink" title="壁紙"></a>壁紙</h4><p><a href="https://github.com/vinceliuice/Fluent-gtk-theme/tree/Wallpaper">https://github.com/vinceliuice/Fluent-gtk-theme/tree/Wallpaper</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b Wallpaper https://github.com/vinceliuice/Fluent-gtk-theme.git Wallpaper</span><br><span class="line"><span class="built_in">cd</span> Wallpaper</span><br><span class="line"><span class="built_in">sudo</span> ./install-gnome-backgrounds.sh</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /usr/share/backgrounds/fluent/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /usr/share/backgrounds/fluent-mountain/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /usr/share/gnome-background-properties/fluent.xml</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /usr/share/gnome-background-properties/fluent-mountain.xml</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><figcaption><span>出力先</span></figcaption><table><tr><td class="code"><pre><span class="line">/usr/share/backgrounds/fluent-building/</span><br><span class="line">  fluent-building-day.jpg</span><br><span class="line">  fluent-building-morning.jpg</span><br><span class="line">  fluent-building-night.jpg</span><br><span class="line">  fluent-building-timed.xml</span><br><span class="line"></span><br><span class="line">/usr/share/gnome-background-properties/</span><br><span class="line">  fluent-building.xml</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>gnome</tag>
        <tag>archiso</tag>
      </tags>
  </entry>
  <entry>
    <title>calamares</title>
    <url>/2025/06/01/calamares/</url>
    <content><![CDATA[<p><img src="/images/calamares.png"></p>
<p>GUIインストーラCalamaresをカスタマイズしてみました。</p>
<a href="https://calamares.io/" target="_blank" rel="external nofollow noopener noreferrer" class="link-preview">
    <div class="og-image">
        <img src="https://raw.githubusercontent.com/calamares/calamares/calamares/src/branding/default/squid.png" alt="Calamares" class="not-gallery-item" loading="lazy"></div>
        <div class="descriptions">
            <div class="og-title">Calamares</div>
            <div class="og-description">Calamares aims to be easy, usable, beautiful, pragmatic, inclusive and distribution-agnostic</div></div></a>

<p>カスタマイズしたCalamaresを組み込んだライブISOイメージで起動し、Arch Linuxをインストールして、Arch Linuxが起動しました。</p>
<p><img src="/images/calamares_restarted.png"></p>
<span id="more"></span>

<h3 id="スクリーンショット"><a href="#スクリーンショット" class="headerlink" title="スクリーンショット"></a>スクリーンショット</h3><h4 id="ライブISO起動直後"><a href="#ライブISO起動直後" class="headerlink" title="ライブISO起動直後"></a>ライブISO起動直後</h4><p>時刻と天気を自動調整。起動時にミラーリストも更新。<br><img src="/images/aic_01.png"></p>
<h4 id="メニュー"><a href="#メニュー" class="headerlink" title="メニュー"></a>メニュー</h4><p>ArcMenuの11テーマ<br><img src="/images/aic_02.png"></p>
<h4 id="スクリプト"><a href="#スクリプト" class="headerlink" title="スクリプト"></a>スクリプト</h4><p>Argosでスクリプト実行（追加&#x2F;編集可能）<br><img src="/images/aic_03.png"></p>
<h4 id="ライブISOで日本語入力"><a href="#ライブISOで日本語入力" class="headerlink" title="ライブISOで日本語入力"></a>ライブISOで日本語入力</h4><p><img src="/images/aic_04.png"></p>
<h4 id="インストーラ"><a href="#インストーラ" class="headerlink" title="インストーラ"></a>インストーラ</h4><p><img src="/images/aic_05.png"><br><img src="/images/aic_06.png"></p>
<h4 id="システム情報"><a href="#システム情報" class="headerlink" title="システム情報"></a>システム情報</h4><p><img src="/images/aic_07.png"></p>
<h4 id="ライブISOでの日本語化"><a href="#ライブISOでの日本語化" class="headerlink" title="ライブISOでの日本語化"></a>ライブISOでの日本語化</h4><p>ライブISO作成時に初期言語を日本語にすることもできますが、英語版のISOでも日本語に切り替えることができます。<br>Settings(gnome-control-center) &gt; System &gt; Region &amp; Language &gt; Language で<kbd>日本語</kbd>を選択して<kbd>Select</kbd>して、<kbd>Log Out...</kbd><br><img src="/images/aic_10.png"><br>ログインすると日本語環境に切り替わっています。標準フォルダーの名前を日本語化するか確認(<code>xdg-user-dirs-gtk-update</code>)されますが、英語名称のままにすることもできます。<br><img src="/images/aic_11.png"></p>
<h4 id="起動画面Plymouth"><a href="#起動画面Plymouth" class="headerlink" title="起動画面Plymouth"></a>起動画面Plymouth</h4><p><img src="/images/aic_12.png"></p>
<h4 id="インストール後"><a href="#インストール後" class="headerlink" title="インストール後"></a>インストール後</h4><p><img src="/images/aic_08.png"></p>
<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux</li>
<li>calamares 3.3.14<br><a href="https://github.com/calamares/calamares">https://github.com/calamares/calamares</a></li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><p>AURには<a href="https://aur.archlinux.org/packages/calamares">calamares</a> 3.3.8と<a href="https://aur.archlinux.org/packages/calamares-git">calamares-git</a> 3.3.14が存在します。最新バージョンであるcalamares-gitの方を利用します。<br>calamares-gitではAURにある<a href="https://aur.archlinux.org/packages/ckbcomp">ckbcomp</a>が前提パッケージになっています。なお、ckbcompのPKGBUILDに記載されているソースアーカイブのURLがリンク切れの状態なので自動でインストールできません。URLを修正してビルドしてインストールします。</p>
<ol>
<li>ckbcomp  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">paru -G ckbcomp</span><br><span class="line"><span class="built_in">cd</span> ckbcomp</span><br></pre></td></tr></table></figure>
  <figure class="highlight txt"><figcaption><span>PKGBUILD</span></figcaption><table><tr><td class="code"><pre><span class="line"># source=(&quot;http://ftp.debian.org/debian/pool/main/c/console-setup/console-setup_$&#123;pkgver&#125;.tar.xz&quot;)</span><br><span class="line">source=(&quot;https://salsa.debian.org/installer-team/console-setup/-/archive/$pkgver/console-setup-$pkgver.tar.gz&quot;)  </span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">makepkg -o --skipchecksums</span><br><span class="line">makepkg -f -e</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -U ckbcomp-1.234-1-any.pkg.tar.zst</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> ckbcomp-1.234-1-any.pkg.tar.zst /opt/custom-repo/x86_64/</span><br></pre></td></tr></table></figure></li>
<li>calamares-git  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">paru -S calamares-git</span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> ~/.cache/paru/clone/calamares-git/calamares-git-3.3.14.r25.g95aa33f-1-x86_64.pkg.tar.zst /opt/custom-repo/x86_64/</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h3><h4 id="設定ディレクトリ"><a href="#設定ディレクトリ" class="headerlink" title="設定ディレクトリ"></a>設定ディレクトリ</h4><p>以下の優先度で設定ファイルが参照されるようです。</p>
<ul>
<li>&#x2F;etc&#x2F;calamares&#x2F;</li>
<li>&#x2F;usr&#x2F;share&#x2F;calamares&#x2F;</li>
</ul>
<h4 id="カスタマイズ"><a href="#カスタマイズ" class="headerlink" title="カスタマイズ"></a>カスタマイズ</h4><ul>
<li><p>設定ファイルのひな型をarchisoのプロジェクトにコピー</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r /usr/share/calamares ./airootfs/etc/</span><br></pre></td></tr></table></figure></li>
<li><p>calamaresの設定</p>
<figure class="highlight yaml"><figcaption><span>./airootfs/etc/calamares/settings.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">sequence:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">show:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">welcome</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">locale</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">keyboard</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">partition</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">users</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">summary</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">exec:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">partition</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mount</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">unpackfs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">machineid</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">locale</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">keyboard</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">localecfg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">fstab</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">initcpiocfg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">initcpio</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">removeuser</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">users</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">displaymanager</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">networkcfg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hwclock</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">services-systemd</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">packages</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">bootloader</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">umount</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">show:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">finished</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branding:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">prompt-install:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">dont-chroot:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">oem-setup:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">quit-at-end:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ようこそ画面</p>
<figure class="highlight yaml"><figcaption><span>./airootfs/etc/calamares/module/welcome.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">showSupportUrl:</span>         <span class="literal">false</span></span><br><span class="line"><span class="attr">showKnownIssuesUrl:</span>     <span class="literal">false</span></span><br><span class="line"><span class="attr">showReleaseNotesUrl:</span>    <span class="literal">false</span></span><br><span class="line"><span class="attr">showDonateUrl:</span>          <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requirements:</span></span><br><span class="line">    <span class="attr">requiredStorage:</span>    <span class="number">5.5</span></span><br><span class="line">    <span class="attr">requiredRam:</span>        <span class="number">1.0</span></span><br><span class="line">    <span class="attr">internetCheckUrl:</span>   <span class="string">http://example.com</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">check:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">storage</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ram</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">power</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">internet</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">root</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">screen</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ram</span></span><br><span class="line"></span><br><span class="line"><span class="attr">geoip:</span></span><br><span class="line">    <span class="attr">style:</span>    <span class="string">&quot;none&quot;</span></span><br><span class="line">    <span class="attr">url:</span>      <span class="string">&quot;https://geoip.kde.org/v1/ubiquity&quot;</span>  <span class="comment"># extended XML format</span></span><br><span class="line">    <span class="attr">selector:</span> <span class="string">&quot;CountryCode&quot;</span>  <span class="comment"># blank uses default, which is wrong</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>usersモジュール</p>
<figure class="highlight yaml"><figcaption><span>./airootfs/etc/calamares/modules/users.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">allowWeakPasswords:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">allowWeakPasswordsDefault:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<div class="note info flat"><p>弱いパスワードを許容</p>
</div>
</li>
<li><p>unpackfsモジュール</p>
<figure class="highlight yaml"><figcaption><span>./airootfs/etc/calamares/modules/unpackfs.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">unpack:</span></span><br><span class="line">    <span class="bullet">-</span>   <span class="attr">source:</span> <span class="string">&quot;/run/archiso/bootmnt/arch/x86_64/airootfs.sfs&quot;</span></span><br><span class="line">        <span class="attr">sourcefs:</span> <span class="string">&quot;squashfs&quot;</span></span><br><span class="line">        <span class="attr">destination:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="bullet">-</span>   <span class="attr">source:</span> <span class="string">&quot;/run/archiso/bootmnt/arch/boot/x86_64/vmlinuz-linux&quot;</span></span><br><span class="line">        <span class="attr">sourcefs:</span> <span class="string">&quot;file&quot;</span></span><br><span class="line">        <span class="attr">destination:</span> <span class="string">&quot;/boot/vmlinuz-linux&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ブランディング</p>
<figure class="highlight yaml"><figcaption><span>./airootfs/etc/calamares/branding/branding.desc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">componentName:</span>  <span class="string">default</span></span><br><span class="line"><span class="attr">welcomeStyleCalamares:</span>   <span class="literal">false</span></span><br><span class="line"><span class="attr">welcomeExpandingLogo:</span>   <span class="literal">true</span></span><br><span class="line"><span class="attr">windowExpanding:</span>    <span class="string">normal</span></span><br><span class="line"><span class="attr">windowSize:</span> <span class="string">800px,520px</span></span><br><span class="line"><span class="attr">windowPlacement:</span> <span class="string">center</span></span><br><span class="line"><span class="attr">sidebar:</span> <span class="string">widget</span></span><br><span class="line"><span class="attr">navigation:</span> <span class="string">widget</span></span><br><span class="line"></span><br><span class="line"><span class="attr">strings:</span></span><br><span class="line">    <span class="attr">productName:</span>         <span class="string">&quot;$&#123;NAME&#125;&quot;</span></span><br><span class="line">    <span class="attr">shortProductName:</span>    <span class="string">Arch</span></span><br><span class="line">    <span class="attr">version:</span>             <span class="string">Rolling</span></span><br><span class="line">    <span class="attr">shortVersion:</span>        <span class="string">Rolling</span></span><br><span class="line">    <span class="attr">versionedName:</span>       <span class="string">Arch</span> <span class="string">Linux</span> <span class="string">Rolling</span></span><br><span class="line">    <span class="attr">shortVersionedName:</span>  <span class="string">Arch</span> <span class="string">rolling</span></span><br><span class="line">    <span class="attr">bootloaderEntryName:</span> <span class="string">Arch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">images:</span></span><br><span class="line">    <span class="attr">productIcon:</span>         <span class="string">&quot;squid.png&quot;</span></span><br><span class="line">    <span class="attr">productLogo:</span>         <span class="string">&quot;squid.png&quot;</span></span><br><span class="line">    <span class="attr">productWelcome:</span>      <span class="string">&quot;languages.png&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">style:</span></span><br><span class="line">  <span class="attr">SidebarBackground:</span>        <span class="string">&quot;#292F34&quot;</span></span><br><span class="line">  <span class="attr">SidebarText:</span>              <span class="string">&quot;#FFFFFF&quot;</span></span><br><span class="line">  <span class="attr">SidebarTextCurrent:</span>       <span class="string">&quot;#292F34&quot;</span></span><br><span class="line">  <span class="attr">SidebarBackgroundCurrent:</span> <span class="string">&quot;#D35400&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">slideshow:</span>               <span class="string">&quot;show.qml&quot;</span></span><br><span class="line"><span class="attr">slideshowAPI:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">uploadServer :</span></span><br><span class="line">    <span class="attr">type :</span>    <span class="string">&quot;none&quot;</span></span><br><span class="line">    <span class="attr">url :</span>     <span class="string">&quot;http://termbin.com:9999&quot;</span></span><br><span class="line">    <span class="attr">sizeLimit :</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="TODO-対応済"><a href="#TODO-対応済" class="headerlink" title="TODO (対応済)"></a>TODO (対応済)</h3><h4 id="インストーラ-1"><a href="#インストーラ-1" class="headerlink" title="インストーラ"></a>インストーラ</h4><ul>
<li>インストール後にライブイメージのユーザliveuserを削除<figure class="highlight yaml"><figcaption><span>./airootfs/etc/calamares/settings.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">sequence:</span></span><br><span class="line"><span class="string">-exec:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">removeuser</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><figcaption><span>./airootfs/etc/calamares/modules/removeuser.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">username:</span> <span class="string">liveuser</span></span><br></pre></td></tr></table></figure></li>
<li>インストール後にインストーラを削除<figure class="highlight yaml"><figcaption><span>./airootfs/etc/calamares/settings.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">sequence:</span></span><br><span class="line"><span class="string">-exec:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">packages</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><figcaption><span>./airootfs/etc/calamares/modules/packages.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">operations:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">try_remove:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">calamares-git</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">boostlibs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ckbcomp</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hwinfo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">kcolorscheme</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">kconfig</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">kcoreaddons</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ki18n</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">kiconthemes</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">kpmcore</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">polkit-qt6</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">python-jsonschema</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">python-yaml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">solid</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">squashfs-tools</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yaml-cpp</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">archiso-calamares-config</span></span><br></pre></td></tr></table></figure></li>
<li>インストール後に不要となるパッケージの整理<ol>
<li><code>pactree calamares -d 1</code>で依存パッケージを確認</li>
<li>calamares削除後に依存パッケージの削除を試行し、依存関係破壊の有無を確認</li>
<li><code>pactree -r &lt;package name&gt;</code>で各パッケージに依存しているパッケージを確認</li>
<li>calamaresや削除可能なパッケージにのみ依存関係があるのなら削除可能と判断  <figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">boostlibs ckbcomp hwinfo kcolorscheme kconfig kcoreaddons ki18n kiconthemes kpmcore polkit-qt6 <span class="keyword">python</span>-jsonschema <span class="keyword">python</span>-yaml solid squashfs-tools yaml-cpp</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>ブランディングとスライドショー<br><a href="https://github.com/calamares/calamares-extensions/tree/calamares/branding/image-slideshow">https://github.com/calamares/calamares-extensions/tree/calamares/branding/image-slideshow</a><figure class="highlight yaml"><figcaption><span>./airootfs/etc/calamares/settings.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">branding:</span> <span class="string">fivearch</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><figcaption><span>./airootfs/etc/calamares/branding/fivearch/branding.desc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">componentName:</span>  <span class="string">fivearch</span></span><br><span class="line"><span class="attr">windowExpanding:</span>    <span class="string">fullscreen</span></span><br></pre></td></tr></table></figure>
<div class="note info flat"><p>Calamaresを最大化して起動</p>
</div>
<figure class="highlight qml"><figcaption><span>./airootfs/etc/calamares/branding/fivearch/ImageSlide.qml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="title">Item</span> &#123;</span><br><span class="line">    <span class="title">Image</span> &#123;</span><br><span class="line">      <span class="attribute">id:</span><span class="string"> image</span></span><br><span class="line">      <span class="attribute">source</span>: src</span><br><span class="line">      <span class="attribute">width</span>: <span class="built_in">parent</span>.width</span><br><span class="line">      <span class="attribute">height</span>: <span class="built_in">parent</span>.height</span><br><span class="line">      <span class="attribute">fillMode</span>: Image.PreserveAspectFit</span><br><span class="line">      <span class="attribute">anchors.centerIn</span>: <span class="built_in">parent</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info flat"><p>スライドショーの画像をはみ出さない最大のサイズで表示</p>
</div></li>
<li>calamares起動時のパスワード入力抑止<figure class="highlight ini"><figcaption><span>./airootfs/usr/local/share/applications/calamares.desktop</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">exec</span> = sudo -E calamares</span><br></pre></td></tr></table></figure></li>
<li>aboutボタンの背景色の固定<figure class="highlight css"><figcaption><span>./airootfs/etc/calamares/brandings/fivearch/stylesheet.qss</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#aboutButton</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#292f34</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#aboutButton</span>:pressed &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#292f34</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#aboutButton</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#292f34</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>calamares設定ファイルのパッケージ化とアンインストール<br><a href="https://aur.archlinux.org/packages/archiso-calamares-config">https://aur.archlinux.org/packages/archiso-calamares-config</a><br>&#x2F;etc&#x2F;calamares&#x2F;*<br>&#x2F;usr&#x2F;local&#x2F;share&#x2F;applications&#x2F;calamares.desktop<br>をパッケージ化してカスタムローカルリポジトリに配置</li>
<li>plymouth<br><a href="https://wiki.archlinux.jp/index.php/Plymouth">https://wiki.archlinux.jp/index.php/Plymouth</a><ul>
<li>packages<figure class="highlight ini"><figcaption><span>./packages_x86_64</span></figcaption><table><tr><td class="code"><pre><span class="line">plymouth</span><br></pre></td></tr></table></figure></li>
<li>mkinitcpio<figure class="highlight ini"><figcaption><span>./airootfs/etc/mkinitcpio.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">HOOKS</span>=(... udev plymouth ...)</span><br></pre></td></tr></table></figure></li>
<li>grub<figure class="highlight ini"><figcaption><span>./airootfs/etc/default/grub</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">GRUB_CMDLINE_LINUX_DEFAULT</span>=<span class="string">&quot;loglevel=3 quiet audit=0 splash&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>dracut<figure class="highlight ini"><figcaption><span>./airootfs/etc/dracut.conf.d/myflags.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">add_dracutmodules+=&quot; plymouth &quot;</span><br></pre></td></tr></table></figure></li>
<li>theme: bgrt<figure class="highlight ini"><figcaption><span>./airootfs/etc/plymouth/plymouthd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[Daemon]</span></span><br><span class="line"><span class="attr">Theme</span>=bgrt</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="GNOMEデスクトップ環境"><a href="#GNOMEデスクトップ環境" class="headerlink" title="GNOMEデスクトップ環境"></a>GNOMEデスクトップ環境</h4><ul>
<li>Wayland対応<figure class="highlight ini"><figcaption><span>./airootfs/etc/gdm/custom.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#WaylandEnable=false</span></span><br><span class="line"><span class="attr">WaylandEnable</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">WaylandOnByDefault</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<img src="/images/calamares_800_600_wayland.png"></li>
<li>時刻表示を24時間表示に変更<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[org/gnome/desktop/interface]</span></span><br><span class="line"><span class="attr">clock-format</span> = <span class="string">&#x27;24h&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>タイムゾーンの自動設定<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[org/gnome/desktop/datetime]</span></span><br><span class="line"><span class="attr">automatic-timezone</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>位置情報の自動収集<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[org/gnome/system/location]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<div class="note info flat"><p>動作したけれどプライバシー関連なので要注意</p>
</div></li>
<li>インタフェースをライト系に設定<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[org/gnome/desktop/interface]</span></span><br><span class="line"><span class="attr">color-scheme</span> = <span class="string">&#x27;default&#x27;</span></span><br><span class="line"><span class="attr">cursor-theme</span> = <span class="string">&#x27;Fluent-dark-cursors&#x27;</span></span><br><span class="line"><span class="attr">gtk-theme</span> = <span class="string">&#x27;Fluent-round-Light&#x27;</span></span><br><span class="line"><span class="attr">icon-theme</span> = <span class="string">&#x27;Fluent-light&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>GDMログイン画面のカスタマイズ<br>画面解像度が低いと標準のArch Linuxのロゴ画像とGUI部品が重なるので横長のロゴ画像に差し替え<figure class="highlight ini"><figcaption><span>/etc/dconf/db/gdm.d/01-logo</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[org/gnome/login-screen]</span></span><br><span class="line"><span class="comment">#logo=&#x27;/usr/share/pixmaps/archlinux-logo.png&#x27;</span></span><br><span class="line"><span class="attr">logo</span>=<span class="string">&#x27;/usr/share/pixmaps/archlinux-logo-text.svg&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="GNOME-Shell拡張機能"><a href="#GNOME-Shell拡張機能" class="headerlink" title="GNOME Shell拡張機能"></a>GNOME Shell拡張機能</h4><ul>
<li>導入手段<table>
<thead>
<tr>
<th align="left">手段</th>
<th align="left">概要</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ローカル</td>
<td align="left">ホームディレクトリ配下にファイルでインストールする。自動でバージョンアップされて再ログインの際に反映される？</td>
</tr>
<tr>
<td align="left">AURパッケージ</td>
<td align="left">AUR版は最新版よりバージョンが古い場合がある。</td>
</tr>
<tr>
<td align="left">AUR-gitパッケージ</td>
<td align="left">ソースからビルドするのでバージョンは最新になる。AURパッケージとしてのバージョンが更新されない場合、パッケージ最新化では本体がアップデートされない？</td>
</tr>
</tbody></table>
</li>
<li>導入状況<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gnome-extensions list --enabled | <span class="built_in">sort</span></span><br><span class="line">arcmenu@arcmenu.com</span><br><span class="line">argos@pew.worldwidemann.com</span><br><span class="line">blur-my-shell@aunetx</span><br><span class="line">caffeine@patapon.info</span><br><span class="line">dash-to-panel@jderose9.github.com</span><br><span class="line">ding@rastersoft.com</span><br><span class="line">forge@jmmaranan.com</span><br><span class="line">kimpanel@kde.org</span><br><span class="line">openweather-extension@penguin-teal.github.io</span><br><span class="line">user-theme@gnome-shell-extensions.gcampax.github.com</span><br></pre></td></tr></table></figure>
<div class="note info flat"><p>ライブISOではblur-my-shell、forgeを初期無効化</p>
</div></li>
<li>Arc Menu<br><a href="https://archlinux.org/packages/extra/any/gnome-shell-extension-arc-menu-git/">https://archlinux.org/packages/extra/any/gnome-shell-extension-arc-menu-git/</a><div class="note info flat"><p>gnome-shell-extension-arc-menuが古いのでgnome-shell-extension-arc-menu-gitをビルド</p>
</div></li>
<li>Argos<br><a href="https://aur.archlinux.org/packages/gnome-shell-extension-argos-git">https://aur.archlinux.org/packages/gnome-shell-extension-argos-git</a><br>paru btop fastfetch reflector journalctlのランチャーを追加<figure class="highlight js"><figcaption><span>extension.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> scriptContents =</span><br><span class="line">  <span class="string">&#x27;#!/usr/bin/env bash\n\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;URL=&quot;github.com/p-e-w/argos&quot;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;DIR=$(dirname &quot;$0&quot;)\n\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;echo &quot; | iconName=dialog-information-symbolic&quot;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;echo &quot;---&quot;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;echo &quot;$URL | iconName=help-faq-symbolic href=\&#x27;https://$URL\&#x27;&quot;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;echo &quot;$DIR | iconName=folder-symbolic href=\&#x27;file://$DIR\&#x27;&quot;\n\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;echo &quot;Update Packages (&lt;span color=\&#x27;yellow\&#x27;&gt;&lt;tt&gt;paru&lt;/tt&gt;&lt;/span&gt;) | iconName=software-update-available-symbolic bash=\&#x27;paru; pacman -Qdtq | sudo pacman -Rs -; exit\&#x27;&quot;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;echo &quot;Resource Monitor (&lt;span color=\&#x27;yellow\&#x27;&gt;&lt;tt&gt;btop&lt;/tt&gt;&lt;/span&gt;) | iconName=utilities-system-monitor bash=\&#x27;btop; exit\&#x27;&quot;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;echo &quot;System Information (&lt;span color=\&#x27;yellow\&#x27;&gt;&lt;tt&gt;fastfetch&lt;/tt&gt;&lt;/span&gt;) | iconName=dialog-information bash=\&#x27;fastfetch; read; exit\&#x27;&quot;\n&#x27;</span> + </span><br><span class="line">  <span class="string">&#x27;echo &quot;Update Millorlist (&lt;span color=\&#x27;yellow\&#x27;&gt;&lt;tt&gt;reflector&lt;/tt&gt;&lt;/span&gt;) | iconName=system-component-input-sources bash=\&#x27;sudo systemctl start reflector.service; cat /etc/pacman.d/mirrorlist\&#x27;&quot;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;echo &quot;System Log (&lt;span color=\&#x27;yellow\&#x27;&gt;&lt;tt&gt;journalctl&lt;/tt&gt;&lt;/span&gt;) | iconName=text-x-log bash=\&#x27;journalctl -rp err -b; exit\&#x27;&quot;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;echo &quot;Fish Shell | iconName=utilities-terminal-symbolic&quot;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;echo &quot;--Enable | iconName=media-playback-start-symbolic bash=\&#x27;sed -i s/FISH_ENABLED=0/FISH_ENABLED=1/ ~/.bashrc\&#x27; terminal=\&#x27;false\&#x27;&quot;\n&#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;echo &quot;--Disable | iconName=media-playback-stop-symbolic bash=\&#x27;sed -i s/FISH_ENABLED=1/FISH_ENABLED=0/ ~/.bashrc\&#x27; terminal=\&#x27;false\&#x27;&quot;&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li>Blur My Shell<br><a href="https://aur.archlinux.org/packages/gnome-shell-extension-blur-my-shell">https://aur.archlinux.org/packages/gnome-shell-extension-blur-my-shell</a></li>
<li>Caffeine<br><a href="https://archlinux.org/packages/extra/any/gnome-shell-extension-caffeine/">https://archlinux.org/packages/extra/any/gnome-shell-extension-caffeine/</a></li>
<li>Dash to Panel<br><a href="https://archlinux.org/packages/extra/any/gnome-shell-extension-dash-to-panel/">https://archlinux.org/packages/extra/any/gnome-shell-extension-dash-to-panel/</a><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[org/gnome/shell/extensions/dash-to-panel]</span></span><br><span class="line"><span class="attr">panel-element-positions</span>=<span class="string">&#x27;&#123;&quot;0&quot;:[&#123;&quot;element&quot;:&quot;showAppsButton&quot;,&quot;visible&quot;:false,&quot;position&quot;:&quot;stackedTL&quot;&#125;,&#123;&quot;element&quot;:&quot;activitiesButton&quot;,&quot;visible&quot;:false,&quot;position&quot;:&quot;stackedTL&quot;&#125;,&#123;&quot;element&quot;:&quot;leftBox&quot;,&quot;visible&quot;:true,&quot;position&quot;:&quot;stackedTL&quot;&#125;,&#123;&quot;element&quot;:&quot;centerBox&quot;,&quot;visible&quot;:true,&quot;position&quot;:&quot;stackedBR&quot;&#125;,&#123;&quot;element&quot;:&quot;taskbar&quot;,&quot;visible&quot;:true,&quot;position&quot;:&quot;centerMonitor&quot;&#125;,&#123;&quot;element&quot;:&quot;rightBox&quot;,&quot;visible&quot;:true,&quot;position&quot;:&quot;stackedBR&quot;&#125;,&#123;&quot;element&quot;:&quot;systemMenu&quot;,&quot;visible&quot;:true,&quot;position&quot;:&quot;stackedBR&quot;&#125;,&#123;&quot;element&quot;:&quot;dateMenu&quot;,&quot;visible&quot;:true,&quot;position&quot;:&quot;stackedBR&quot;&#125;,&#123;&quot;element&quot;:&quot;desktopButton&quot;,&quot;visible&quot;:true,&quot;position&quot;:&quot;stackedBR&quot;&#125;],&quot;DEL-402HR7B310VL&quot;:[&#123;&quot;element&quot;:&quot;showAppsButton&quot;,&quot;visible&quot;:false,&quot;position&quot;:&quot;stackedTL&quot;&#125;,&#123;&quot;element&quot;:&quot;activitiesButton&quot;,&quot;visible&quot;:false,&quot;position&quot;:&quot;stackedTL&quot;&#125;,&#123;&quot;element&quot;:&quot;leftBox&quot;,&quot;visible&quot;:true,&quot;position&quot;:&quot;stackedTL&quot;&#125;,&#123;&quot;element&quot;:&quot;centerBox&quot;,&quot;visible&quot;:true,&quot;position&quot;:&quot;stackedBR&quot;&#125;,&#123;&quot;element&quot;:&quot;taskbar&quot;,&quot;visible&quot;:true,&quot;position&quot;:&quot;centerMonitor&quot;&#125;,&#123;&quot;element&quot;:&quot;rightBox&quot;,&quot;visible&quot;:true,&quot;position&quot;:&quot;stackedBR&quot;&#125;,&#123;&quot;element&quot;:&quot;systemMenu&quot;,&quot;visible&quot;:true,&quot;position&quot;:&quot;stackedBR&quot;&#125;,&#123;&quot;element&quot;:&quot;dateMenu&quot;,&quot;visible&quot;:true,&quot;position&quot;:&quot;stackedBR&quot;&#125;,&#123;&quot;element&quot;:&quot;desktopButton&quot;,&quot;visible&quot;:true,&quot;position&quot;:&quot;stackedBR&quot;&#125;]&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<div class="note info flat"><p>初期設定はモニタ”0”を指定</p>
</div></li>
<li>Desktop Icons NG<br><a href="https://archlinux.org/packages/extra/any/gnome-shell-extension-desktop-icons-ng/">https://archlinux.org/packages/extra/any/gnome-shell-extension-desktop-icons-ng/</a></li>
<li>Forge<br><a href="https://aur.archlinux.org/packages/gnome-shell-extension-forge">https://aur.archlinux.org/packages/gnome-shell-extension-forge</a></li>
<li>Input Method Panel<br><a href="https://aur.archlinux.org/packages/gnome-shell-extension-kimpanel-git">https://aur.archlinux.org/packages/gnome-shell-extension-kimpanel-git</a></li>
<li>OpenWeatherRefind<br><a href="https://aur.archlinux.org/packages/gnome-shell-extension-openweatherrefined">https://aur.archlinux.org/packages/gnome-shell-extension-openweatherrefined</a><div class="note info flat"><p>GNOME Shell <code>48</code>を追加</p>
</div></li>
<li>User Theme<br>GNOME Shellテーマをダーク系に設定<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[org/gnome/shell/extensions/user-theme]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">&#x27;Fluent-round-Dark&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="パッケージ"><a href="#パッケージ" class="headerlink" title="パッケージ"></a>パッケージ</h4><ul>
<li>btop</li>
<li>chromium<figure class="highlight text"><figcaption><span>~/.config/chromium-flags.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">--password-store=basic</span><br><span class="line">--enable-features=UseOzonePlatform</span><br><span class="line">--ozone-platform=wayland</span><br><span class="line">--enable-wayland-ime</span><br></pre></td></tr></table></figure>
<div class="note info flat"><p>GNOMEのデフォルトのパスワードストアはgnome-libsecret。初回起動時にパスワードを聞かれてしまう。basicで回避</p>
</div></li>
<li>fastfetch<br>カスタムテーマ<br><code>~/.config/fastfetch/config.jsonc</code></li>
<li>fcitx5 fcitx5-im fcitx5-mozc<br>かな漢字変換</li>
<li>fish<br>fishの設定、aliasの追加<br><code>~/.config/fish/config.fish</code><figure class="highlight bash"><figcaption><span>./airootfs/etc/skel/.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> FISH_ENABLED=0</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$FISH_ENABLED</span> == 1 &amp;&amp; $(ps --no-header --pid=<span class="variable">$PPID</span> --format=<span class="built_in">comm</span>) != <span class="string">&quot;fish&quot;</span> &amp;&amp; -z <span class="variable">$&#123;BASH_EXECUTION_STRING&#125;</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">shopt</span> -q login_shell &amp;&amp; LOGIN_OPTION=<span class="string">&#x27;--login&#x27;</span> || LOGIN_OPTION=<span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="built_in">exec</span> fish <span class="variable">$LOGIN_OPTION</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li>
<li>gnome-terminal<br>ダーク系に設定<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[org/gnome/terminal/legacy]</span></span><br><span class="line"><span class="attr">theme-variant</span> = <span class="string">&#x27;dark&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>nautilusのアイコンサイズ変更<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[org/gnome/nautilus/icon-view]</span></span><br><span class="line"><span class="attr">default-zoom-level</span> = <span class="string">&#x27;small-plus&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>nvidia nvidia-utils nvidia-settings</li>
<li>reflector<br>サービスによる定期自動ミラーリスト更新設定を有効化</li>
<li>starship<br>カスタムテーマ<br><code>~/.config/starship.toml</code>    </li>
<li>spice-vdagent<br>GNOME Boxes(QEMU)でクリップボード共有<br><a href="https://wiki.archlinux.org/title/QEMU#Enabling_SPICE_support_on_the_guest">https://wiki.archlinux.org/title/QEMU#Enabling_SPICE_support_on_the_guest</a></li>
<li>paru<figure class="highlight ini"><figcaption><span>./airootfs/etc/skel/.config/paru/paru.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[options]</span></span><br><span class="line">SudoLoop</span><br><span class="line">SkipReview</span><br></pre></td></tr></table></figure></li>
<li>makepkg<figure class="highlight ini"><figcaption><span>./airootfs/etc/skel/.makepkg.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">MAKEFLAGS</span>=<span class="string">&quot;-j $(nproc)&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>vi<figure class="highlight ini"><figcaption><span>./airootfs/etc/skel/.exrc</span></figcaption><table><tr><td class="code"><pre><span class="line">set showmode</span><br><span class="line">set number</span><br><span class="line">set ruler</span><br><span class="line">set title</span><br><span class="line">set showcmd</span><br></pre></td></tr></table></figure></li>
<li>archinstall<br>日本語ターミナル環境で実行できて便利かもしれない。<br><img src="/images/archinstall_japanese.png"></li>
</ul>
<h4 id="日本語環境"><a href="#日本語環境" class="headerlink" title="日本語環境"></a>日本語環境</h4><ul>
<li>ライブイメージ起動時の言語を指定する場合<figure class="highlight ini"><figcaption><span>./airootfs/etc/locale.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">#LANG=en_US.UTF-8</span></span><br><span class="line"><span class="attr">LANG</span>=ja_JP.UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure></li>
<li>日本語ロケール追加<figure class="highlight ini"><figcaption><span>./airootfs/etc/locale.gen</span></figcaption><table><tr><td class="code"><pre><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">ja_JP.UTF-8 UTF-8</span><br></pre></td></tr></table></figure></li>
<li>日本語入力を追加、有効化<br>ライブイメージ起動直後からかな漢字変換が利用できるようになった</li>
<li>GNOME&#x2F;Wayland 上での Fcitx の利用<figure class="highlight ini"><figcaption><span>/etc/environment</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">XMODIFIERS</span>=@im=fcitx</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="ハードウェア"><a href="#ハードウェア" class="headerlink" title="ハードウェア"></a>ハードウェア</h4><ul>
<li>Wi-Fi接続 : OK</li>
<li>Bluetooth接続 : OK</li>
</ul>
<h3 id="TODO-これから"><a href="#TODO-これから" class="headerlink" title="TODO (これから)"></a>TODO (これから)</h3><h4 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h4><ul>
<li>VirtualBox : OK</li>
<li>Gnome Boxes (qemu&#x2F;KVM&#x2F;livirt) : OK</li>
<li>VMWare : 未テスト</li>
<li>Hyper-V (第一世代&#x2F;第二世代) : 未テスト</li>
<li>物理環境 : 未テスト</li>
<li>Secure boot環境での挙動把握</li>
</ul>
<h4 id="チューニング"><a href="#チューニング" class="headerlink" title="チューニング"></a>チューニング</h4><ul>
<li>ISOイメージサイズと展開時間のチューニング<br>squashfs : xz &#x2F; gzip &#x2F; lzo</li>
<li>インストール済のパッケージのサイズ確認  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -Qqe &gt; installed_packages.txt</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> -r package; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">du</span> -sh <span class="string">&quot;/var/cache/pacman/pkg/<span class="variable">$package</span>-&quot;</span>*<span class="string">&quot;.pkg.tar.zst&quot;</span></span><br><span class="line"><span class="keyword">done</span> &lt; installed_packages.txt &gt; package_sizes.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="追加設定、施策"><a href="#追加設定、施策" class="headerlink" title="追加設定、施策"></a>追加設定、施策</h4><ul>
<li>githubに登録<br><a href="https://github.com/ktkr3d/archiso-gnome">https://github.com/ktkr3d/archiso-gnome</a><br><a href="https://github.com/ktkr3d/archiso-calamares-config">https://github.com/ktkr3d/archiso-calamares-config</a></li>
<li>デフォルトターミナルエミュレータの設定<br>gnome-terminalが依存され過ぎて削除できない</li>
<li>フォント指定  <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[org/gnome/desktop/interface]</span></span><br><span class="line">font-name &#x27;Noto Sans CJK JP 11&#x27;</span><br><span class="line">document-font-name &#x27;Noto Sans CJK JP 11&#x27;</span><br><span class="line"><span class="attr">monospace-font-name</span> = <span class="string">&#x27;HackGen Console NF 11&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>paruキャッシュとカスタムローカルリポジトリの連動<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">paru</span><br><span class="line">find ~/.cache/paru/clone/ -name <span class="string">&quot;*.pkg.tar.zst&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>xorgの削除<br>xorg-serverを削除しても特に依存関係は崩れなかった</li>
<li>colord<br>起動時にcolordがcore dumpする。その後正常にcolordサービスは実行されている。<br><a href="https://archlinux.org/packages/extra/x86_64/colord/">https://archlinux.org/packages/extra/x86_64/colord/</a></li>
<li>カーネルパラメタ</li>
<li>CalamaresのWelcome画面の言語一覧に日本語が2つ存在するのはなぜ？</li>
</ul>
<h3 id="TODO-多分やらない"><a href="#TODO-多分やらない" class="headerlink" title="TODO (多分やらない)"></a>TODO (多分やらない)</h3><ul>
<li>chromium → Google Chrome<br>なんとなくデフォルトはOSSで揃えておきたいので保留。</li>
<li>nautilusのブックマークに<code>/</code>を追加<br><code>~/.config/gtk-3.0/bookmarks</code><br>スクリプト等での追加が必要そうなので保留。</li>
<li>pamac追加<br>基本的にパッケージはコマンドで入れるので保留。</li>
<li>日本語ロケールでもホームフォルダの各ディレクトリ名を英語のままに<br>.config&#x2F;user-dirs.dirs<br>.config&#x2F;user-dirs.locale<br>&#x2F;etc&#x2F;xdg&#x2F;user-dirs.defaults<br>従来通り<code>LANG=C xdg-user-dirs-gtk-update</code>で実現できるので保留。</li>
<li>fcitx5-diagnose対策(ログイン時のポップアップ抑止)<br><a href="https://github.com/fcitx/fcitx5/issues/1088#issuecomment-2261538744">https://github.com/fcitx/fcitx5/issues/1088#issuecomment-2261538744</a><br>ログイン後<code>fcitx5 -r</code>でポップアップが表示されないことから、fcitx開始から7秒以内にKimpanelのプロセスが生成されていないんだろうなぁ。<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">$ fcitx5-diagnose</span><br><span class="line"><span class="number">4</span>.  User <span class="keyword">Interface</span>:</span><br><span class="line"></span><br><span class="line">    Found <span class="number">3</span> enabled user <span class="keyword">interface</span> addons:</span><br><span class="line"></span><br><span class="line">        Classic User <span class="keyword">Interface</span></span><br><span class="line">        KDE Input <span class="keyword">Method</span> <span class="title function_">Panel</span></span><br><span class="line">        <span class="title function_">DBus</span> <span class="title function_">Virtual</span> <span class="title function_">Keyboard</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">Kimpanel</span> <span class="title function_">process</span>:</span><br><span class="line"></span><br><span class="line">          <span class="number">6097</span> /usr/bin/gnome-shell</span><br></pre></td></tr></table></figure>
メンテナが対応してくれるかもしれないので保留。</li>
</ul>
]]></content>
      <tags>
        <tag>archiso</tag>
        <tag>calamares</tag>
      </tags>
  </entry>
  <entry>
    <title>mpd</title>
    <url>/2025/06/19/mpd/</url>
    <content><![CDATA[<p>Music Player Daemon (MPD)を使ってみました。</p>
<a href="https://www.musicpd.org/" target="_blank" rel="external nofollow noopener noreferrer" class="link-preview">
    <div class="og-image">
        <img src="https://www.musicpd.org/logo.png" alt="Music Player Daemon (MPD)" class="not-gallery-item" loading="lazy"></div>
        <div class="descriptions">
            <div class="og-title">Music Player Daemon (MPD)</div>
            <div class="og-description">Music Player Daemon (MPD) is a flexible, powerful, server-side application for playing music.</div></div></a>

<p>MPDクライアントにはcantataを利用しました。</p>
<style>
                /* css part */
                .gr-card {

                    --gr-header-width-proportion: 10%;
                    --gr-footer-width-proportion: 10%;
                    --gr-content-width-proportion: 80%;

                    --gr-header-min-width: 80px;
                    --gr-footer-min-width: 80px;

                    --gr-card-element-margin: 6px 10px 6px 10px; /* header content footer*/

                    display: flex;
                    background-color: #fff;
                    border-radius: 6px;
                    overflow: hidden;
                    box-shadow: 0px 4px 6px rgba(0, 0, 0, .12);
                    margin-bottom: 20px;
                    vertical-align: middle;
                    position: relative;
                }

                .gr-header {
                    width: var(--gr-header-width-proportion);
                    min-width: var(--gr-header-min-width);
                    margin: var(--gr-card-element-margin);
                    background-color: #fff;
                    /* background-color: blueviolet; */
                }

                .gr-header img {
                    width: 80px;
                    height: 80px;
                    position: relative;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%,-50%);
                    object-fit: cover;
                    border-radius: 50%;
                    margin: 0px;
                }

                .gr-content {
                    width: var(--gr-content-width-proportion);
                    margin: var(--gr-card-element-margin);
                    background-color: #fff;
                    text-align: left;
                }

                #gr-github-icon {
                    font-size: 1.3rem;
                }
                .gr-fullname {
                    display: -webkit-box;
                    -webkit-box-orient: vertical;
                    -webkit-line-clamp: 1;
                    overflow: hidden;
                }

                .gr-fullname p {
                    line-height: 2rem;
                    margin: 10px 0px 0px 0px;
                    padding: 0;
                    font-size: .83rem;
                    font-weight: bolder;
                }

                .gr-description {
                    font-size: .8rem;
                    line-height: 1.6rem;
                    display: -webkit-box;
                    -webkit-box-orient: vertical;
                    -webkit-line-clamp: 1;
                    overflow: hidden;
                }

                .gr-footer {
                    width: var(--gr-footer-width-proportion);
                    min-width: var(--gr-footer-min-width);
                    margin: var(--gr-card-element-margin);
                    display: flex;
                    /* background-color: aqua; */
                    background-color: #fff;
                    position: relative;
                    padding: 0px;
                }

                .gr-language-star {
                    margin: auto auto 22px auto;
                    text-align: center;
                    opacity: 1;
                }

                .gr-language {
                    font-size: .8rem;
                    font-weight: 600;
                    line-height: 2.2rem;
                    color: #2070d3;
                }

                .gr-stargazers_count {
                    font-size: .8rem;
                }

                #gr-star-icon {
                    font-size: .8rem;
                    display: inherit;
                }

                .gr-card-toolbar{
                    display:flex;
                    width: 100%;
                    height: 100%;

                    position: absolute;

                    opacity: 0;
                    animation: fade-out;
                    animation-duration: .4s;
                    z-index: -1;
                    /* background-color: #2070d3; */
                }

                .gr-repo-link {
                    margin: auto;
                }

                #gr-repo-link-icon {
                    font-size: 16px;
                }
                /* animation part */

                @keyframes fade-in {
                    0% {opacity: 0;}/*初始状态 透明度为0*/
                    100% {opacity: 1;}/*结束状态 透明度为1*/
                }

                @keyframes fade-out {
                    0% {opacity: 1;}/*初始状态 透明度为0*/
                    100% {opacity: 0;}/*结束状态 透明度为1*/
                }

                .gr-card:hover .gr-language-star{
                    opacity: 0;
                    animation: fade-out;
                    animation-duration: .3s;
                }

                .gr-card:hover .gr-card-toolbar{
                    opacity: 1;
                    animation: fade-in;
                    animation-duration: .6s;
                    z-index: 1;
                }
                </style>

                <div class="gr-card">
                    <div class="gr-header">
                        <img src="https://avatars.githubusercontent.com/u/22283693?v=4" alt="">
                    </div>
                    <div class="gr-content">
                        <div class="gr-fullname">
                            <p><i class="fab fa-github fa-lg" aria-hidden="true" id="gr-github-icon"></i> nullobsi/cantata</p>
                        </div>
                        <div class="gr-description">
                            Qt Graphical MPD Client
                        </div>
                    </div>
                    <div class="gr-footer">
                        <div class="gr-language-star">
                            <span class="gr-language">C++</span><br>
                            <span class="gr-stargazers_count"><i class="far fa-star" aria-hidden="true" id='gr-star-icon'></i> 87</span>
                        </div>
                        <div class="gr-card-toolbar">
                            <div class="gr-repo-link">
                                <a href="https://github.com/nullobsi/cantata" target="_blank" rel="noopener noreferrer"
                                    title="Open in a new TAB">
                                    <i class="fas fa-external-link-square-alt fa-lg" aria-hidden="true" style="color: black;" id="gr-repo-link-icon"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux</li>
<li>mpd 0.24.4</li>
<li>cantata v3.3.1</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><h4 id="mpd"><a href="#mpd" class="headerlink" title="mpd"></a>mpd</h4><ul>
<li>Arch Linux<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S mpd</span><br><span class="line"><span class="built_in">mkdir</span> -p ~/.config/mpd/playlists</span><br></pre></td></tr></table></figure>
<figure class="highlight text"><figcaption><span>~/.config/mpd/mpd.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">music_directory         &quot;~/Music&quot;</span><br><span class="line">playlist_directory      &quot;~/.config/mpd/playlists&quot;</span><br><span class="line">db_file                 &quot;~/.config/mpd/database&quot;</span><br><span class="line">log_file                &quot;~/.config/mpd/log&quot;</span><br><span class="line">pid_file                &quot;~/.config/mpd/pid&quot;</span><br><span class="line">state_file              &quot;~/.config/mpd/state&quot;</span><br><span class="line"></span><br><span class="line">audio_output &#123;</span><br><span class="line">        type            &quot;pulse&quot;</span><br><span class="line">        name            &quot;My Pulse Output&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">audio_output &#123;</span><br><span class="line">        type            &quot;httpd&quot;</span><br><span class="line">        name            &quot;My HTTP Stream&quot;</span><br><span class="line">        encoder         &quot;opus&quot;          # optional</span><br><span class="line">        port            &quot;8000&quot;</span><br><span class="line">#       quality         &quot;5.0&quot;                   # do not define if bitrate is defined</span><br><span class="line">        bitrate         &quot;128000&quot;                        # do not define if quality is defined</span><br><span class="line">        format          &quot;48000:16:1&quot;</span><br><span class="line">        always_on       &quot;yes&quot;                   # prevent MPD from disconnecting all listeners when playback is stopped.</span><br><span class="line">        tags            &quot;yes&quot;                   # httpd supports sending tags to listening streams.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl --user <span class="built_in">enable</span> --now mpd.service</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="cantata"><a href="#cantata" class="headerlink" title="cantata"></a>cantata</h4><ul>
<li>Arch Linuxの場合<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">paru -S cantata-qt6-git</span><br></pre></td></tr></table></figure></li>
<li>Windowsの場合<br><a href="https://github.com/nullobsi/cantata/releases/">https://github.com/nullobsi/cantata/releases/</a><br>ダウンロードして展開</li>
</ul>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="mpd-1"><a href="#mpd-1" class="headerlink" title="mpd"></a>mpd</h4><ul>
<li>オーディオファイルを<code>~/Music</code>に格納する</li>
<li>mpdは拡張子無しのオーディオファイルを認識しない</li>
<li>mpdはオーディオファイルのシンボリックリンクを認識する</li>
<li>userサービスの場合はログインしている必要あり</li>
</ul>
<h4 id="cantata-1"><a href="#cantata-1" class="headerlink" title="cantata"></a>cantata</h4><ul>
<li>cantataをインストールしたら初回起動時にmpdに<kbd>接続</kbd></li>
<li>cantataの設定-コネクション-音楽フォルダにmpdのmusic_directoryを指定<br>フォルダにアクセス可能な場合はコンテキストメニューの各種項目が選択できるようになる。</li>
<li>cantataでリモート(192.168.11.8)のmpdのHTTPストリームをローカルで再生するには<br>HTTPストリームURL:  <code>http://192.168.11.8:8000</code><br>出力先: <code>My HTTP Stream</code><br>HTTPアウトプットストリームを再生: チェック<div class="note info flat"><p>ポーズ、停止からの再開で音が出ない場合はcantataを再起動</p>
</div></li>
<li>mpdでオーディオファイルを追加したらcantataで<kbd>≡</kbd>-<kbd>データベースの更新</kbd></li>
</ul>
<p><a href="echo" title="Symlink (ln -s) | iconName=music-app-symbolic bash=&#39;cd ~/.local/share/monophony; for fname in ???????????; do ln -s ~/.local/share/monophony/$fname ~/Music/$fname.opus; done; exit&#39; terminal=false"></a></p>
]]></content>
      <tags>
        <tag>mpd</tag>
      </tags>
  </entry>
  <entry>
    <title>Kdenlive</title>
    <url>/2025/06/26/kdenlive/</url>
    <content><![CDATA[<p>ビデオエディタKdenliveを使ってみました。</p>
<a href="https://kdenlive.org/" target="_blank" rel="external nofollow noopener noreferrer" class="link-preview">
    <div class="og-image">
        <img src="https://upload.wikimedia.org/wikipedia/commons/c/c6/Kdenlive-logo.svg" alt="Kdenlive" class="not-gallery-item" loading="lazy"></div>
        <div class="descriptions">
            <div class="og-title">Kdenlive</div>
            <div class="og-description">Kdenlive is the acronym for KDE Non-Linear Video Editor. It works on Linux, Windows, macOS, and BSD.</div></div></a>


<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul>
<li>Arch Linux</li>
<li>kdenlive 25.04.2</li>
</ul>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><ol>
<li>インストール  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S kdenlive</span><br></pre></td></tr></table></figure></li>
<li>設定<ul>
<li>ツールバー(2種)を表示し、アイコンのみに設定</li>
</ul>
</li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><h4 id="起動から書き出しまでの流れ"><a href="#起動から書き出しまでの流れ" class="headerlink" title="起動から書き出しまでの流れ"></a>起動から書き出しまでの流れ</h4><ol>
<li>起動<br>  フルスリーンモードに変更</li>
<li>プロジェクトの設定(オプション)<br>  必要に応じて解像度、フレームレートなどを変更</li>
<li>プロジェクトビンにクリップを追加</li>
<li>タイムラインにクリップを配置</li>
<li>クリップの編集<ul>
<li>クリップのトリミング（不要な部分の削除）</li>
<li>トランジション（クリップ間の切り替え効果）を追加</li>
<li>エフェクト（色補正、音声調整など）を適用</li>
<li>テロップ（字幕）を作成・追加</li>
</ul>
</li>
<li>レンダリング（プロジェクトを動画ファイルとして書き出す）</li>
</ol>
<h4 id="クリップを特定位置で分割"><a href="#クリップを特定位置で分割" class="headerlink" title="クリップを特定位置で分割"></a>クリップを特定位置で分割</h4><ol>
<li>タイムライン上で分割したい位置にカーソルを移動<br>  左右矢印キーで微調整</li>
<li>分割<br>  クリップを右クリックから「クリップの切り取り(Shift R)」</li>
</ol>
<h4 id="テロップ（字幕機能）"><a href="#テロップ（字幕機能）" class="headerlink" title="テロップ（字幕機能）"></a>テロップ（字幕機能）</h4><ul>
<li>字幕の追加<br>プロジェクト 字幕 字幕を追加</li>
<li>字幕トラックを表示&#x2F;非表示するには<br>プロジェクト 字幕 字幕ツールを編集</li>
<li>字幕トラックのレイア―を追加&#x2F;削除するには<br>プロジェクト 字幕 字幕を管理</li>
</ul>
<h4 id="テロップ（ファイルから字幕生成）"><a href="#テロップ（ファイルから字幕生成）" class="headerlink" title="テロップ（ファイルから字幕生成）"></a>テロップ（ファイルから字幕生成）</h4><ol>
<li>プロジェクト 字幕 Export Subtitle File</li>
<li>Subtitle File(subtitle.ass) を編集</li>
<li>プロジェクト 字幕 Import Subtitle File</li>
</ol>
<h4 id="テロップ（タイトル・クリップ機能）"><a href="#テロップ（タイトル・クリップ機能）" class="headerlink" title="テロップ（タイトル・クリップ機能）"></a>テロップ（タイトル・クリップ機能）</h4><ol>
<li>「プロジェクト」「タイトル・クリップの追加」</li>
<li>タイトルクリップの作成<br>  「タイトルエディター」で字幕テキストを入力し、フォント、サイズ、色、配置などのスタイルを設定</li>
<li>タイムラインへの追加<br>  作成したタイトルクリップをタイムラインにドロップ</li>
<li>字幕の調整<br>  必要に応じて、字幕の表示時間や位置を調整</li>
</ol>
<h4 id="ズームイン"><a href="#ズームイン" class="headerlink" title="ズームイン"></a>ズームイン</h4><ol>
<li>「効果」-「Transform, Distort and Perspective」-「トランスフォーム」をタイムラインのクリップにドロップ</li>
<li>トランスフォームでキーフレームを追加</li>
<li>トランスフォームでスケールを変更</li>
</ol>
<h4 id="フェードイン-フェードアウト"><a href="#フェードイン-フェードアウト" class="headerlink" title="フェードイン&#x2F;フェードアウト"></a>フェードイン&#x2F;フェードアウト</h4><ul>
<li>「効果」-「モーション」-「フェードイン」</li>
<li>「効果」-「モーション」-「フェードアウト」</li>
</ul>
<h4 id="ショート動画用にポートレートレイアウトに変換"><a href="#ショート動画用にポートレートレイアウトに変換" class="headerlink" title="ショート動画用にポートレートレイアウトに変換"></a>ショート動画用にポートレートレイアウトに変換</h4><ol>
<li>「プロジェクト」-「プロジェクト設定」で「カスタム」-「Vertical HD 30fps」を選択</li>
<li>クリップを取り込み、タイムラインに配置</li>
<li>「効果」-「Transform, Distort and Perspective」-「トランスフォーム」をタイムラインのクリップにドロップ</li>
<li>トランスフォームの「高さに合わせる」アイコンを選択</li>
<li>トランスフォームの「水平方向に中央」アイコンを選択</li>
<li>レンダリングを実行</li>
</ol>
<h4 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h4><p><a href="https://eng-blog.iij.ad.jp/archives/2643#%e3%82%88%e3%81%8f%e4%bd%bf%e3%81%86%e9%81%b7%e7%a7%bb%e5%8a%b9%e6%9e%9c%e3%83%bb%e5%8a%b9%e6%9e%9c%e3%81%ae%e3%83%aa%e3%82%b9%e3%83%88">https://eng-blog.iij.ad.jp/archives/2643#%e3%82%88%e3%81%8f%e4%bd%bf%e3%81%86%e9%81%b7%e7%a7%bb%e5%8a%b9%e6%9e%9c%e3%83%bb%e5%8a%b9%e6%9e%9c%e3%81%ae%e3%83%aa%e3%82%b9%e3%83%88</a></p>
]]></content>
      <tags>
        <tag>kdenlive</tag>
      </tags>
  </entry>
  <entry>
    <title>GNOME Remote Desktop + jp109 keyboard</title>
    <url>/2025/07/01/GNOME-Remote-Desktop-jp109-keyboard/</url>
    <content><![CDATA[<h4 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h4><ul>
<li><p>gnome-remote-desktop<br><a href="https://gitlab.gnome.org/GNOME/gnome-remote-desktop/-/issues/234">https://gitlab.gnome.org/GNOME/gnome-remote-desktop/-/issues/234</a></p>
<ul>
<li>パイプ文字が入力できない</li>
<li>テンキーで入力できない</li>
</ul>
</li>
<li><p>frdp<br><a href="https://github.com/FreeRDP/FreeRDP/issues/11036">https://github.com/FreeRDP/FreeRDP/issues/11036</a></p>
</li>
<li><p>マージされているパッチ<br><a href="https://gitlab.gnome.org/GNOME/gnome-remote-desktop/-/merge_requests/296/diffs?commit_id=c9b138c9d101562d7a8a93791dee4147c2973394">https://gitlab.gnome.org/GNOME/gnome-remote-desktop/-/merge_requests/296/diffs?commit_id=c9b138c9d101562d7a8a93791dee4147c2973394</a></p>
</li>
<li><p>PKGBUILD<br><a href="https://gitlab.archlinux.org/archlinux/packaging/packages/gnome-remote-desktop/-/blob/48.1-1/PKGBUILD?ref_type=tags">https://gitlab.archlinux.org/archlinux/packaging/packages/gnome-remote-desktop/-/blob/48.1-1/PKGBUILD?ref_type=tags</a></p>
</li>
<li><p>local build</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> gnome-remote-desktop</span><br><span class="line"><span class="built_in">cd</span> gnome-remote-desktop</span><br><span class="line">curl https://gitlab.archlinux.org/archlinux/packaging/packages/gnome-remote-desktop/-/raw/48.1-1/PKGBUILD?ref_type=tags &gt; PKGBUILD</span><br><span class="line"><span class="built_in">sudo</span> pacman -S asciidoc ffnvcodec-headers vulkan-headers</span><br><span class="line">gpg --keyserver keys.gnupg.net --recv-key A6EEEC9E0136164A</span><br><span class="line">makepkg -o</span><br><span class="line">makepkg -f -e</span><br><span class="line"><span class="built_in">sudo</span> pacman -U gnome-remote-desktop-48.1-1-x86_64.pkg.tar.zst</span><br></pre></td></tr></table></figure>
<p>パッチは取り込まれていた。インストールして再起動したが改善されない。</p>
</li>
</ul>
<span id="more"></span>

<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><p>- </p>
<h3 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h3><p>1. </p>
<h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3>]]></content>
      <tags>
        <tag>gnome-remote-desktop</tag>
      </tags>
  </entry>
</search>
